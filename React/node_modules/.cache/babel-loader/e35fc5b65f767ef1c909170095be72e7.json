{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst moment = require('moment');\n\nconst inherits = require('../../utils/inherits');\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'https://msdn.microsoft.com/en-us/library/ms187752%28v=sql.110%29.aspx');\n  /**\n   * types: [hex, ...]\n   * @see hex here https://github.com/tediousjs/tedious/blob/master/src/data-type.js\n   */\n\n  BaseTypes.DATE.types.mssql = [43];\n  BaseTypes.STRING.types.mssql = [231, 173];\n  BaseTypes.CHAR.types.mssql = [175];\n  BaseTypes.TEXT.types.mssql = false; // https://msdn.microsoft.com/en-us/library/ms187745(v=sql.110).aspx\n\n  BaseTypes.TINYINT.types.mssql = [30];\n  BaseTypes.SMALLINT.types.mssql = [34];\n  BaseTypes.MEDIUMINT.types.mssql = false;\n  BaseTypes.INTEGER.types.mssql = [38];\n  BaseTypes.BIGINT.types.mssql = false;\n  BaseTypes.FLOAT.types.mssql = [109];\n  BaseTypes.TIME.types.mssql = [41];\n  BaseTypes.DATEONLY.types.mssql = [40];\n  BaseTypes.BOOLEAN.types.mssql = [104];\n  BaseTypes.BLOB.types.mssql = [165];\n  BaseTypes.DECIMAL.types.mssql = [106];\n  BaseTypes.UUID.types.mssql = false;\n  BaseTypes.ENUM.types.mssql = false;\n  BaseTypes.REAL.types.mssql = [109];\n  BaseTypes.DOUBLE.types.mssql = [109]; // BaseTypes.GEOMETRY.types.mssql = [240]; // not yet supported\n\n  BaseTypes.GEOMETRY.types.mssql = false;\n\n  function BLOB(length) {\n    if (!(this instanceof BLOB)) return new BLOB(length);\n    BaseTypes.BLOB.apply(this, arguments);\n  }\n\n  inherits(BLOB, BaseTypes.BLOB);\n\n  BLOB.prototype.toSql = function toSql() {\n    if (this._length) {\n      if (this._length.toLowerCase() === 'tiny') {\n        // tiny = 2^8\n        warn('MSSQL does not support BLOB with the `length` = `tiny` option. `VARBINARY(256)` will be used instead.');\n        return 'VARBINARY(256)';\n      }\n\n      warn('MSSQL does not support BLOB with the `length` option. `VARBINARY(MAX)` will be used instead.');\n    }\n\n    return 'VARBINARY(MAX)';\n  };\n\n  BLOB.prototype._hexify = function _hexify(hex) {\n    return '0x' + hex;\n  };\n\n  function STRING(length, binary) {\n    if (!(this instanceof STRING)) return new STRING(length, binary);\n    BaseTypes.STRING.apply(this, arguments);\n  }\n\n  inherits(STRING, BaseTypes.STRING);\n\n  STRING.prototype.toSql = function toSql() {\n    if (!this._binary) {\n      return 'NVARCHAR(' + this._length + ')';\n    } else {\n      return 'BINARY(' + this._length + ')';\n    }\n  };\n\n  STRING.prototype.escape = false;\n\n  STRING.prototype._stringify = function _stringify(value, options) {\n    if (this._binary) {\n      return BLOB.prototype._stringify(value);\n    } else {\n      return options.escape(value);\n    }\n  };\n\n  function TEXT(length) {\n    if (!(this instanceof TEXT)) return new TEXT(length);\n    BaseTypes.TEXT.apply(this, arguments);\n  }\n\n  inherits(TEXT, BaseTypes.TEXT);\n\n  TEXT.prototype.toSql = function toSql() {\n    // TEXT is deprecated in mssql and it would normally be saved as a non-unicode string.\n    // Using unicode is just future proof\n    if (this._length) {\n      if (this._length.toLowerCase() === 'tiny') {\n        // tiny = 2^8\n        warn('MSSQL does not support TEXT with the `length` = `tiny` option. `NVARCHAR(256)` will be used instead.');\n        return 'NVARCHAR(256)';\n      }\n\n      warn('MSSQL does not support TEXT with the `length` option. `NVARCHAR(MAX)` will be used instead.');\n    }\n\n    return 'NVARCHAR(MAX)';\n  };\n\n  function BOOLEAN() {\n    if (!(this instanceof BOOLEAN)) return new BOOLEAN();\n    BaseTypes.BOOLEAN.apply(this, arguments);\n  }\n\n  inherits(BOOLEAN, BaseTypes.BOOLEAN);\n\n  BOOLEAN.prototype.toSql = function toSql() {\n    return 'BIT';\n  };\n\n  function UUID() {\n    if (!(this instanceof UUID)) return new UUID();\n    BaseTypes.UUID.apply(this, arguments);\n  }\n\n  inherits(UUID, BaseTypes.UUID);\n\n  UUID.prototype.toSql = function toSql() {\n    return 'CHAR(36)';\n  };\n\n  function NOW() {\n    if (!(this instanceof NOW)) return new NOW();\n    BaseTypes.NOW.apply(this, arguments);\n  }\n\n  inherits(NOW, BaseTypes.NOW);\n\n  NOW.prototype.toSql = function toSql() {\n    return 'GETDATE()';\n  };\n\n  function DATE(length) {\n    if (!(this instanceof DATE)) return new DATE(length);\n    BaseTypes.DATE.apply(this, arguments);\n  }\n\n  inherits(DATE, BaseTypes.DATE);\n\n  DATE.prototype.toSql = function toSql() {\n    return 'DATETIMEOFFSET';\n  };\n\n  function DATEONLY() {\n    if (!(this instanceof DATEONLY)) return new DATEONLY();\n    BaseTypes.DATEONLY.apply(this, arguments);\n  }\n\n  inherits(DATEONLY, BaseTypes.DATEONLY);\n\n  DATEONLY.parse = function (value) {\n    return moment(value).format('YYYY-MM-DD');\n  };\n\n  function INTEGER(length) {\n    if (!(this instanceof INTEGER)) return new INTEGER(length);\n    BaseTypes.INTEGER.apply(this, arguments); // MSSQL does not support any options for integer\n\n    if (this._length || this.options.length || this._unsigned || this._zerofill) {\n      warn('MSSQL does not support INTEGER with options. Plain `INTEGER` will be used instead.');\n      this._length = undefined;\n      this.options.length = undefined;\n      this._unsigned = undefined;\n      this._zerofill = undefined;\n    }\n  }\n\n  inherits(INTEGER, BaseTypes.INTEGER);\n\n  function TINYINT(length) {\n    if (!(this instanceof TINYINT)) return new TINYINT(length);\n    BaseTypes.TINYINT.apply(this, arguments); // MSSQL does not support any options for tinyint\n\n    if (this._length || this.options.length || this._unsigned || this._zerofill) {\n      warn('MSSQL does not support TINYINT with options. Plain `TINYINT` will be used instead.');\n      this._length = undefined;\n      this.options.length = undefined;\n      this._unsigned = undefined;\n      this._zerofill = undefined;\n    }\n  }\n\n  inherits(TINYINT, BaseTypes.TINYINT);\n\n  function SMALLINT(length) {\n    if (!(this instanceof SMALLINT)) return new SMALLINT(length);\n    BaseTypes.SMALLINT.apply(this, arguments); // MSSQL does not support any options for smallint\n\n    if (this._length || this.options.length || this._unsigned || this._zerofill) {\n      warn('MSSQL does not support SMALLINT with options. Plain `SMALLINT` will be used instead.');\n      this._length = undefined;\n      this.options.length = undefined;\n      this._unsigned = undefined;\n      this._zerofill = undefined;\n    }\n  }\n\n  inherits(SMALLINT, BaseTypes.SMALLINT);\n\n  function BIGINT(length) {\n    if (!(this instanceof BIGINT)) return new BIGINT(length);\n    BaseTypes.BIGINT.apply(this, arguments); // MSSQL does not support any options for bigint\n\n    if (this._length || this.options.length || this._unsigned || this._zerofill) {\n      warn('MSSQL does not support BIGINT with options. Plain `BIGINT` will be used instead.');\n      this._length = undefined;\n      this.options.length = undefined;\n      this._unsigned = undefined;\n      this._zerofill = undefined;\n    }\n  }\n\n  inherits(BIGINT, BaseTypes.BIGINT);\n\n  function REAL(length, decimals) {\n    if (!(this instanceof REAL)) return new REAL(length, decimals);\n    BaseTypes.REAL.apply(this, arguments); // MSSQL does not support any options for real\n\n    if (this._length || this.options.length || this._unsigned || this._zerofill) {\n      warn('MSSQL does not support REAL with options. Plain `REAL` will be used instead.');\n      this._length = undefined;\n      this.options.length = undefined;\n      this._unsigned = undefined;\n      this._zerofill = undefined;\n    }\n  }\n\n  inherits(REAL, BaseTypes.REAL);\n\n  function FLOAT(length, decimals) {\n    if (!(this instanceof FLOAT)) return new FLOAT(length, decimals);\n    BaseTypes.FLOAT.apply(this, arguments); // MSSQL does only support lengths as option.\n    // Values between 1-24 result in 7 digits precision (4 bytes storage size)\n    // Values between 25-53 result in 15 digits precision (8 bytes storage size)\n    // If decimals are provided remove these and print a warning\n\n    if (this._decimals) {\n      warn('MSSQL does not support Float with decimals. Plain `FLOAT` will be used instead.');\n      this._length = undefined;\n      this.options.length = undefined;\n    }\n\n    if (this._unsigned) {\n      warn('MSSQL does not support Float unsigned. `UNSIGNED` was removed.');\n      this._unsigned = undefined;\n    }\n\n    if (this._zerofill) {\n      warn('MSSQL does not support Float zerofill. `ZEROFILL` was removed.');\n      this._zerofill = undefined;\n    }\n  }\n\n  inherits(FLOAT, BaseTypes.FLOAT);\n\n  function ENUM() {\n    if (!(this instanceof ENUM)) {\n      const obj = Object.create(ENUM.prototype);\n      ENUM.apply(obj, arguments);\n      return obj;\n    }\n\n    BaseTypes.ENUM.apply(this, arguments);\n  }\n\n  inherits(ENUM, BaseTypes.ENUM);\n\n  ENUM.prototype.toSql = function toSql() {\n    return 'VARCHAR(255)';\n  };\n\n  const exports = {\n    BLOB,\n    BOOLEAN,\n    ENUM,\n    STRING,\n    UUID,\n    DATE,\n    DATEONLY,\n    NOW,\n    TINYINT,\n    SMALLINT,\n    INTEGER,\n    BIGINT,\n    REAL,\n    FLOAT,\n    TEXT\n  };\n\n  _.forIn(exports, (DataType, key) => {\n    if (!DataType.key) DataType.key = key;\n\n    if (!DataType.extend) {\n      DataType.extend = function extend(oldType) {\n        return new DataType(oldType.options);\n      };\n    }\n  });\n\n  return exports;\n};","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/sequelize/lib/dialects/mssql/data-types.js"],"names":["_","require","moment","inherits","module","exports","BaseTypes","warn","ABSTRACT","bind","undefined","DATE","types","mssql","STRING","CHAR","TEXT","TINYINT","SMALLINT","MEDIUMINT","INTEGER","BIGINT","FLOAT","TIME","DATEONLY","BOOLEAN","BLOB","DECIMAL","UUID","ENUM","REAL","DOUBLE","GEOMETRY","length","apply","arguments","prototype","toSql","_length","toLowerCase","_hexify","hex","binary","_binary","escape","_stringify","value","options","NOW","parse","format","_unsigned","_zerofill","decimals","_decimals","obj","Object","create","forIn","DataType","key","extend","oldType"],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst moment = require('moment');\nconst inherits = require('../../utils/inherits');\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'https://msdn.microsoft.com/en-us/library/ms187752%28v=sql.110%29.aspx');\n\n  /**\n   * types: [hex, ...]\n   * @see hex here https://github.com/tediousjs/tedious/blob/master/src/data-type.js\n   */\n\n  BaseTypes.DATE.types.mssql = [43];\n  BaseTypes.STRING.types.mssql = [231, 173];\n  BaseTypes.CHAR.types.mssql = [175];\n  BaseTypes.TEXT.types.mssql = false;\n  // https://msdn.microsoft.com/en-us/library/ms187745(v=sql.110).aspx\n  BaseTypes.TINYINT.types.mssql = [30];\n  BaseTypes.SMALLINT.types.mssql = [34];\n  BaseTypes.MEDIUMINT.types.mssql = false;\n  BaseTypes.INTEGER.types.mssql = [38];\n  BaseTypes.BIGINT.types.mssql = false;\n  BaseTypes.FLOAT.types.mssql = [109];\n  BaseTypes.TIME.types.mssql = [41];\n  BaseTypes.DATEONLY.types.mssql = [40];\n  BaseTypes.BOOLEAN.types.mssql = [104];\n  BaseTypes.BLOB.types.mssql = [165];\n  BaseTypes.DECIMAL.types.mssql = [106];\n  BaseTypes.UUID.types.mssql = false;\n  BaseTypes.ENUM.types.mssql = false;\n  BaseTypes.REAL.types.mssql = [109];\n  BaseTypes.DOUBLE.types.mssql = [109];\n  // BaseTypes.GEOMETRY.types.mssql = [240]; // not yet supported\n  BaseTypes.GEOMETRY.types.mssql = false;\n\n  function BLOB(length) {\n    if (!(this instanceof BLOB)) return new BLOB(length);\n    BaseTypes.BLOB.apply(this, arguments);\n  }\n  inherits(BLOB, BaseTypes.BLOB);\n\n  BLOB.prototype.toSql = function toSql() {\n    if (this._length) {\n      if (this._length.toLowerCase() === 'tiny') { // tiny = 2^8\n        warn('MSSQL does not support BLOB with the `length` = `tiny` option. `VARBINARY(256)` will be used instead.');\n        return 'VARBINARY(256)';\n      }\n      warn('MSSQL does not support BLOB with the `length` option. `VARBINARY(MAX)` will be used instead.');\n    }\n    return 'VARBINARY(MAX)';\n  };\n\n  BLOB.prototype._hexify = function _hexify(hex) {\n    return '0x' + hex;\n  };\n\n  function STRING(length, binary) {\n    if (!(this instanceof STRING)) return new STRING(length, binary);\n    BaseTypes.STRING.apply(this, arguments);\n  }\n  inherits(STRING, BaseTypes.STRING);\n\n  STRING.prototype.toSql = function toSql() {\n    if (!this._binary) {\n      return 'NVARCHAR(' + this._length + ')';\n    } else {\n      return 'BINARY(' + this._length + ')';\n    }\n  };\n\n  STRING.prototype.escape = false;\n  STRING.prototype._stringify = function _stringify(value, options) {\n    if (this._binary) {\n      return BLOB.prototype._stringify(value);\n    } else {\n      return options.escape(value);\n    }\n  };\n\n  function TEXT(length) {\n    if (!(this instanceof TEXT)) return new TEXT(length);\n    BaseTypes.TEXT.apply(this, arguments);\n  }\n  inherits(TEXT, BaseTypes.TEXT);\n\n  TEXT.prototype.toSql = function toSql() {\n    // TEXT is deprecated in mssql and it would normally be saved as a non-unicode string.\n    // Using unicode is just future proof\n    if (this._length) {\n      if (this._length.toLowerCase() === 'tiny') { // tiny = 2^8\n        warn('MSSQL does not support TEXT with the `length` = `tiny` option. `NVARCHAR(256)` will be used instead.');\n        return 'NVARCHAR(256)';\n      }\n      warn('MSSQL does not support TEXT with the `length` option. `NVARCHAR(MAX)` will be used instead.');\n    }\n    return 'NVARCHAR(MAX)';\n  };\n\n  function BOOLEAN() {\n    if (!(this instanceof BOOLEAN)) return new BOOLEAN();\n    BaseTypes.BOOLEAN.apply(this, arguments);\n  }\n  inherits(BOOLEAN, BaseTypes.BOOLEAN);\n\n  BOOLEAN.prototype.toSql = function toSql() {\n    return 'BIT';\n  };\n\n  function UUID() {\n    if (!(this instanceof UUID)) return new UUID();\n    BaseTypes.UUID.apply(this, arguments);\n  }\n  inherits(UUID, BaseTypes.UUID);\n\n  UUID.prototype.toSql = function toSql() {\n    return 'CHAR(36)';\n  };\n\n  function NOW() {\n    if (!(this instanceof NOW)) return new NOW();\n    BaseTypes.NOW.apply(this, arguments);\n  }\n  inherits(NOW, BaseTypes.NOW);\n\n  NOW.prototype.toSql = function toSql() {\n    return 'GETDATE()';\n  };\n\n  function DATE(length) {\n    if (!(this instanceof DATE)) return new DATE(length);\n    BaseTypes.DATE.apply(this, arguments);\n  }\n  inherits(DATE, BaseTypes.DATE);\n\n  DATE.prototype.toSql = function toSql() {\n    return 'DATETIMEOFFSET';\n  };\n\n  function DATEONLY() {\n    if (!(this instanceof DATEONLY)) return new DATEONLY();\n    BaseTypes.DATEONLY.apply(this, arguments);\n  }\n  inherits(DATEONLY, BaseTypes.DATEONLY);\n\n  DATEONLY.parse = function(value) {\n    return moment(value).format('YYYY-MM-DD');\n  };\n\n  function INTEGER(length) {\n    if (!(this instanceof INTEGER)) return new INTEGER(length);\n    BaseTypes.INTEGER.apply(this, arguments);\n\n    // MSSQL does not support any options for integer\n    if (this._length || this.options.length || this._unsigned || this._zerofill) {\n      warn('MSSQL does not support INTEGER with options. Plain `INTEGER` will be used instead.');\n      this._length = undefined;\n      this.options.length = undefined;\n      this._unsigned = undefined;\n      this._zerofill = undefined;\n    }\n  }\n  inherits(INTEGER, BaseTypes.INTEGER);\n\n  function TINYINT(length) {\n    if (!(this instanceof TINYINT)) return new TINYINT(length);\n    BaseTypes.TINYINT.apply(this, arguments);\n\n    // MSSQL does not support any options for tinyint\n    if (this._length || this.options.length || this._unsigned || this._zerofill) {\n      warn('MSSQL does not support TINYINT with options. Plain `TINYINT` will be used instead.');\n      this._length = undefined;\n      this.options.length = undefined;\n      this._unsigned = undefined;\n      this._zerofill = undefined;\n    }\n  }\n  inherits(TINYINT, BaseTypes.TINYINT);\n\n  function SMALLINT(length) {\n    if (!(this instanceof SMALLINT)) return new SMALLINT(length);\n    BaseTypes.SMALLINT.apply(this, arguments);\n\n    // MSSQL does not support any options for smallint\n    if (this._length || this.options.length || this._unsigned || this._zerofill) {\n      warn('MSSQL does not support SMALLINT with options. Plain `SMALLINT` will be used instead.');\n      this._length = undefined;\n      this.options.length = undefined;\n      this._unsigned = undefined;\n      this._zerofill = undefined;\n    }\n  }\n  inherits(SMALLINT, BaseTypes.SMALLINT);\n\n  function BIGINT(length) {\n    if (!(this instanceof BIGINT)) return new BIGINT(length);\n    BaseTypes.BIGINT.apply(this, arguments);\n\n    // MSSQL does not support any options for bigint\n    if (this._length || this.options.length || this._unsigned || this._zerofill) {\n      warn('MSSQL does not support BIGINT with options. Plain `BIGINT` will be used instead.');\n      this._length = undefined;\n      this.options.length = undefined;\n      this._unsigned = undefined;\n      this._zerofill = undefined;\n    }\n  }\n  inherits(BIGINT, BaseTypes.BIGINT);\n\n  function REAL(length, decimals) {\n    if (!(this instanceof REAL)) return new REAL(length, decimals);\n    BaseTypes.REAL.apply(this, arguments);\n\n    // MSSQL does not support any options for real\n    if (this._length || this.options.length || this._unsigned || this._zerofill) {\n      warn('MSSQL does not support REAL with options. Plain `REAL` will be used instead.');\n      this._length = undefined;\n      this.options.length = undefined;\n      this._unsigned = undefined;\n      this._zerofill = undefined;\n    }\n  }\n  inherits(REAL, BaseTypes.REAL);\n\n  function FLOAT(length, decimals) {\n    if (!(this instanceof FLOAT)) return new FLOAT(length, decimals);\n    BaseTypes.FLOAT.apply(this, arguments);\n\n    // MSSQL does only support lengths as option.\n    // Values between 1-24 result in 7 digits precision (4 bytes storage size)\n    // Values between 25-53 result in 15 digits precision (8 bytes storage size)\n    // If decimals are provided remove these and print a warning\n    if (this._decimals) {\n      warn('MSSQL does not support Float with decimals. Plain `FLOAT` will be used instead.');\n      this._length = undefined;\n      this.options.length = undefined;\n    }\n    if (this._unsigned) {\n      warn('MSSQL does not support Float unsigned. `UNSIGNED` was removed.');\n      this._unsigned = undefined;\n    }\n    if (this._zerofill) {\n      warn('MSSQL does not support Float zerofill. `ZEROFILL` was removed.');\n      this._zerofill = undefined;\n    }\n  }\n  inherits(FLOAT, BaseTypes.FLOAT);\n\n  function ENUM() {\n    if (!(this instanceof ENUM)) {\n      const obj = Object.create(ENUM.prototype);\n      ENUM.apply(obj, arguments);\n      return obj;\n    }\n    BaseTypes.ENUM.apply(this, arguments);\n  }\n  inherits(ENUM, BaseTypes.ENUM);\n\n  ENUM.prototype.toSql = function toSql() {\n    return 'VARCHAR(255)';\n  };\n\n  const exports = {\n    BLOB,\n    BOOLEAN,\n    ENUM,\n    STRING,\n    UUID,\n    DATE,\n    DATEONLY,\n    NOW,\n    TINYINT,\n    SMALLINT,\n    INTEGER,\n    BIGINT,\n    REAL,\n    FLOAT,\n    TEXT\n  };\n\n  _.forIn(exports, (DataType, key) => {\n    if (!DataType.key) DataType.key = key;\n    if (!DataType.extend) {\n      DataType.extend = function extend(oldType) {\n        return new DataType(oldType.options);\n      };\n    }\n  });\n\n  return exports;\n};\n"]},"metadata":{},"sourceType":"script"}
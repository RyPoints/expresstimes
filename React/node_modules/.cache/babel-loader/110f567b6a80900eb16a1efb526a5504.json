{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst Utils = require('./utils');\n\nconst Promise = require('./promise');\n\nconst debug = Utils.getLogger().debugContext('hooks');\nconst hookTypes = {\n  beforeValidate: {\n    params: 2\n  },\n  afterValidate: {\n    params: 2\n  },\n  validationFailed: {\n    params: 3\n  },\n  beforeCreate: {\n    params: 2\n  },\n  afterCreate: {\n    params: 2\n  },\n  beforeDestroy: {\n    params: 2\n  },\n  afterDestroy: {\n    params: 2\n  },\n  beforeRestore: {\n    params: 2\n  },\n  afterRestore: {\n    params: 2\n  },\n  beforeUpdate: {\n    params: 2\n  },\n  afterUpdate: {\n    params: 2\n  },\n  beforeSave: {\n    params: 2,\n    proxies: ['beforeUpdate', 'beforeCreate']\n  },\n  afterSave: {\n    params: 2,\n    proxies: ['afterUpdate', 'afterCreate']\n  },\n  beforeUpsert: {\n    params: 2\n  },\n  afterUpsert: {\n    params: 2\n  },\n  beforeBulkCreate: {\n    params: 2\n  },\n  afterBulkCreate: {\n    params: 2\n  },\n  beforeBulkDestroy: {\n    params: 1\n  },\n  afterBulkDestroy: {\n    params: 1\n  },\n  beforeBulkRestore: {\n    params: 1\n  },\n  afterBulkRestore: {\n    params: 1\n  },\n  beforeBulkUpdate: {\n    params: 1\n  },\n  afterBulkUpdate: {\n    params: 1\n  },\n  beforeFind: {\n    params: 1\n  },\n  beforeFindAfterExpandIncludeAll: {\n    params: 1\n  },\n  beforeFindAfterOptions: {\n    params: 1\n  },\n  afterFind: {\n    params: 2\n  },\n  beforeCount: {\n    params: 1\n  },\n  beforeDefine: {\n    params: 2,\n    sync: true\n  },\n  afterDefine: {\n    params: 1,\n    sync: true\n  },\n  beforeInit: {\n    params: 2,\n    sync: true\n  },\n  afterInit: {\n    params: 1,\n    sync: true\n  },\n  beforeConnect: {\n    params: 1\n  },\n  afterConnect: {\n    params: 2\n  },\n  beforeSync: {\n    params: 1\n  },\n  afterSync: {\n    params: 1\n  },\n  beforeBulkSync: {\n    params: 1\n  },\n  afterBulkSync: {\n    params: 1\n  }\n};\nexports.hooks = hookTypes;\nconst hookAliases = {\n  beforeDelete: 'beforeDestroy',\n  afterDelete: 'afterDestroy',\n  beforeBulkDelete: 'beforeBulkDestroy',\n  afterBulkDelete: 'afterBulkDestroy',\n  beforeConnection: 'beforeConnect'\n};\nexports.hookAliases = hookAliases;\n/**\n * get array of current hook and its proxied hooks combined\n * @private\n */\n\nconst getProxiedHooks = hookType => hookTypes[hookType].proxies ? hookTypes[hookType].proxies.concat(hookType) : [hookType];\n\nfunction getHooks(hookType) {\n  return (this.options.hooks || {})[hookType] || [];\n}\n\n;\nconst Hooks = {\n  /**\n   * Process user supplied hooks definition\n   *\n   * @param {Object} hooks\n   *\n   * @private\n   * @memberOf Sequelize\n   * @memberOf Sequelize.Model\n   */\n  _setupHooks(hooks) {\n    this.options.hooks = {};\n\n    _.map(hooks || {}, (hooksArray, hookName) => {\n      if (!_.isArray(hooksArray)) hooksArray = [hooksArray];\n      hooksArray.forEach(hookFn => this.addHook(hookName, hookFn));\n    });\n  },\n\n  runHooks(hooks) {\n    if (!hooks) throw new Error('runHooks requires at least 1 argument');\n    const hookArgs = Utils.sliceArgs(arguments, 1);\n    let hookType;\n\n    if (typeof hooks === 'string') {\n      hookType = hooks;\n      hooks = getHooks.call(this, hookType);\n\n      if (this.sequelize) {\n        hooks = hooks.concat(getHooks.call(this.sequelize, hookType));\n      }\n    }\n\n    if (!Array.isArray(hooks)) {\n      hooks = [hooks];\n    } // synchronous hooks\n\n\n    if (hookTypes[hookType] && hookTypes[hookType].sync) {\n      for (let hook of hooks) {\n        if (typeof hook === 'object') {\n          hook = hook.fn;\n        }\n\n        debug(`running hook(sync) ${hookType}`);\n        hook.apply(this, hookArgs);\n      }\n\n      return;\n    } // asynchronous hooks (default)\n\n\n    return Promise.each(hooks, hook => {\n      if (typeof hook === 'object') {\n        hook = hook.fn;\n      }\n\n      debug(`running hook ${hookType}`);\n      return Promise.resolve(hook.apply(this, hookArgs));\n    }).return();\n  },\n\n  hook() {\n    Utils.deprecate('hook() method has been deprecated, please use addHook() method instead');\n    return Hooks.addHook.apply(this, arguments);\n  },\n\n  /**\n   * Add a hook to the model\n   *\n   * @param {String}    hookType\n   * @param {String}    [name]    Provide a name for the hook function. It can be used to remove the hook later or to order hooks based on some sort of priority system in the future.\n   * @param {Function}  fn        The hook function\n   *\n   * @memberOf Sequelize\n   * @memberOf Sequelize.Model\n   */\n  addHook(hookType, name, fn) {\n    if (typeof name === 'function') {\n      fn = name;\n      name = null;\n    }\n\n    debug(`adding hook ${hookType}`);\n    const originalHookType = hookType;\n    hookType = hookAliases[hookType] || hookType;\n\n    if (hookAliases[originalHookType]) {\n      Utils.deprecate(`${originalHookType} hook has been deprecated, please use ${hookType} hook instead`);\n    } // check for proxies, add them too\n\n\n    hookType = getProxiedHooks(hookType);\n\n    _.each(hookType, type => {\n      this.options.hooks[type] = getHooks.call(this, type);\n      this.options.hooks[type].push(name ? {\n        name,\n        fn\n      } : fn);\n    });\n\n    return this;\n  },\n\n  /**\n   * Remove hook from the model\n   *\n   * @param {String} hookType\n   * @param {String|Function} name\n   *\n   * @memberOf Sequelize\n   * @memberOf Sequelize.Model\n   */\n  removeHook(hookType, name) {\n    hookType = hookAliases[hookType] || hookType;\n    const isReference = typeof name === 'function' ? true : false;\n\n    if (!this.hasHook(hookType)) {\n      return this;\n    }\n\n    Utils.debug(`removing hook ${hookType}`); // check for proxies, add them too\n\n    hookType = getProxiedHooks(hookType);\n\n    for (const type of hookType) {\n      this.options.hooks[type] = this.options.hooks[type].filter(hook => {\n        if (isReference && typeof hook === 'function') {\n          return hook !== name; // check if same method\n        } else if (!isReference && typeof hook === 'object') {\n          return hook.name !== name;\n        }\n\n        return true;\n      });\n    }\n\n    return this;\n  },\n\n  /**\n   * Check whether the mode has any hooks of this type\n   *\n   * @param {String}  hookType\n   *\n   * @alias hasHooks\n   * @memberOf Sequelize\n   * @memberOf Sequelize.Model\n   */\n  hasHook(hookType) {\n    return this.options.hooks[hookType] && !!this.options.hooks[hookType].length;\n  }\n\n};\nHooks.hasHooks = Hooks.hasHook;\n\nfunction applyTo(target) {\n  _.mixin(target, Hooks);\n\n  const allHooks = Object.keys(hookTypes).concat(Object.keys(hookAliases));\n\n  for (const hook of allHooks) {\n    target[hook] = function (name, callback) {\n      return this.addHook(hook, name, callback);\n    };\n  }\n}\n\nexports.applyTo = applyTo;\n/**\n * A hook that is run before validation\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name beforeValidate\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run after validation\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name afterValidate\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run when validation fails\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with instance, options, error. Error is the\n * SequelizeValidationError. If the callback throws an error, it will replace the original validation error.\n * @name validationFailed\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before creating a single instance\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeCreate\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run after creating a single instance\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name afterCreate\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before creating or updating a single instance, It proxies `beforeCreate` and `beforeUpdate`\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeSave\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before upserting\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeUpsert\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run after upserting\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name afterUpsert\n * @memberOf Sequelize.Model\n */\n\n/**\n  * A hook that is run after creating or updating a single instance, It proxies `afterCreate` and `afterUpdate`\n  * @param {String}   name\n  * @param {Function} fn   A callback function that is called with attributes, options\n  * @name afterSave\n  * @memberOf Sequelize.Model\n  */\n\n/**\n * A hook that is run before destroying a single instance\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name beforeDestroy\n * @alias beforeDelete\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run after destroying a single instance\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name afterDestroy\n * @alias afterDelete\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before restoring a single instance\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name beforeRestore\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run after restoring a single instance\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name afterRestore\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before updating a single instance\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name beforeUpdate\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run after updating a single instance\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name afterUpdate\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before creating instances in bulk\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with instances, options\n * @name beforeBulkCreate\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run after creating instances in bulk\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with instances, options\n * @name afterBulkCreate\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before destroying instances in bulk\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name beforeBulkDestroy\n * @alias beforeBulkDelete\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run after destroying instances in bulk\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name afterBulkDestroy\n * @alias afterBulkDelete\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before restoring instances in bulk\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name beforeBulkRestore\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run after restoring instances in bulk\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name afterBulkRestore\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before updating instances in bulk\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeBulkUpdate\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run after updating instances in bulk\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with options\n * @name afterBulkUpdate\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before a find (select) query\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeFind\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before a find (select) query, after any { include: {all: ...} } options are expanded\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeFindAfterExpandIncludeAll\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before a find (select) query, after all option parsing is complete\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeFindAfterOptions\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run after a find (select) query\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with instance(s), options\n * @name afterFind\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before a count query\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeCount\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before a define call\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeDefine\n * @memberOf Sequelize\n */\n\n/**\n * A hook that is run after a define call\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with factory\n * @name afterDefine\n * @memberOf Sequelize\n */\n\n/**\n * A hook that is run before Sequelize() call\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with config, options\n * @name beforeInit\n * @memberOf Sequelize\n */\n\n/**\n * A hook that is run after Sequelize() call\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with sequelize\n * @name afterInit\n * @memberOf Sequelize\n */\n\n/**\n * A hook that is run before a connection is created\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with config passed to connection\n * @name beforeConnect\n * @memberOf Sequelize\n */\n\n/**\n * A hook that is run after a connection is created\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with the connection object and thye config passed to connection\n * @name afterConnect\n * @memberOf Sequelize\n */\n\n/**\n * A hook that is run before Model.sync call\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with options passed to Model.sync\n * @name beforeSync\n * @memberOf Sequelize\n */\n\n/**\n * A hook that is run after Model.sync call\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with options passed to Model.sync\n * @name afterSync\n * @memberOf Sequelize\n */\n\n/**\n  * A hook that is run before sequelize.sync call\n  * @param {String}   name\n  * @param {Function} fn   A callback function that is called with options passed to sequelize.sync\n  * @name beforeBulkSync\n  * @memberOf Sequelize\n  */\n\n/**\n  * A hook that is run after sequelize.sync call\n  * @param {String}   name\n  * @param {Function} fn   A callback function that is called with options passed to sequelize.sync\n  * @name afterBulkSync\n  * @memberOf Sequelize\n  */","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/sequelize/lib/hooks.js"],"names":["_","require","Utils","Promise","debug","getLogger","debugContext","hookTypes","beforeValidate","params","afterValidate","validationFailed","beforeCreate","afterCreate","beforeDestroy","afterDestroy","beforeRestore","afterRestore","beforeUpdate","afterUpdate","beforeSave","proxies","afterSave","beforeUpsert","afterUpsert","beforeBulkCreate","afterBulkCreate","beforeBulkDestroy","afterBulkDestroy","beforeBulkRestore","afterBulkRestore","beforeBulkUpdate","afterBulkUpdate","beforeFind","beforeFindAfterExpandIncludeAll","beforeFindAfterOptions","afterFind","beforeCount","beforeDefine","sync","afterDefine","beforeInit","afterInit","beforeConnect","afterConnect","beforeSync","afterSync","beforeBulkSync","afterBulkSync","exports","hooks","hookAliases","beforeDelete","afterDelete","beforeBulkDelete","afterBulkDelete","beforeConnection","getProxiedHooks","hookType","concat","getHooks","options","Hooks","_setupHooks","map","hooksArray","hookName","isArray","forEach","hookFn","addHook","runHooks","Error","hookArgs","sliceArgs","arguments","call","sequelize","Array","hook","fn","apply","each","resolve","return","deprecate","name","originalHookType","type","push","removeHook","isReference","hasHook","filter","length","hasHooks","applyTo","target","mixin","allHooks","Object","keys","callback"],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst Utils = require('./utils');\nconst Promise = require('./promise');\nconst debug = Utils.getLogger().debugContext('hooks');\n\nconst hookTypes = {\n  beforeValidate: {params: 2},\n  afterValidate: {params: 2},\n  validationFailed: {params: 3},\n  beforeCreate: {params: 2},\n  afterCreate: {params: 2},\n  beforeDestroy: {params: 2},\n  afterDestroy: {params: 2},\n  beforeRestore: {params: 2},\n  afterRestore: {params: 2},\n  beforeUpdate: {params: 2},\n  afterUpdate: {params: 2},\n  beforeSave: {params: 2, proxies: ['beforeUpdate', 'beforeCreate']},\n  afterSave: {params: 2, proxies: ['afterUpdate', 'afterCreate']},\n  beforeUpsert: {params: 2},\n  afterUpsert: {params: 2},\n  beforeBulkCreate: {params: 2},\n  afterBulkCreate: {params: 2},\n  beforeBulkDestroy: {params: 1},\n  afterBulkDestroy: {params: 1},\n  beforeBulkRestore: {params: 1},\n  afterBulkRestore: {params: 1},\n  beforeBulkUpdate: {params: 1},\n  afterBulkUpdate: {params: 1},\n  beforeFind: {params: 1},\n  beforeFindAfterExpandIncludeAll: {params: 1},\n  beforeFindAfterOptions: {params: 1},\n  afterFind: {params: 2},\n  beforeCount: {params: 1},\n  beforeDefine: {params: 2, sync: true},\n  afterDefine: {params: 1, sync: true},\n  beforeInit: {params: 2, sync: true},\n  afterInit: {params: 1, sync: true},\n  beforeConnect: {params: 1},\n  afterConnect: {params: 2},\n  beforeSync: {params: 1},\n  afterSync: {params: 1},\n  beforeBulkSync: {params: 1},\n  afterBulkSync: {params: 1}\n};\nexports.hooks = hookTypes;\n\nconst hookAliases = {\n  beforeDelete: 'beforeDestroy',\n  afterDelete: 'afterDestroy',\n  beforeBulkDelete: 'beforeBulkDestroy',\n  afterBulkDelete: 'afterBulkDestroy',\n  beforeConnection: 'beforeConnect'\n};\nexports.hookAliases = hookAliases;\n\n/**\n * get array of current hook and its proxied hooks combined\n * @private\n */\nconst getProxiedHooks = hookType =>\n  hookTypes[hookType].proxies\n    ? hookTypes[hookType].proxies.concat(hookType)\n    : [hookType]\n;\n\nfunction getHooks(hookType) {\n  return (this.options.hooks || {})[hookType] || [];\n};\n\nconst Hooks = {\n  /**\n   * Process user supplied hooks definition\n   *\n   * @param {Object} hooks\n   *\n   * @private\n   * @memberOf Sequelize\n   * @memberOf Sequelize.Model\n   */\n  _setupHooks(hooks) {\n    this.options.hooks = {};\n    _.map(hooks || {}, (hooksArray, hookName) => {\n      if (!_.isArray(hooksArray)) hooksArray = [hooksArray];\n      hooksArray.forEach(hookFn => this.addHook(hookName, hookFn));\n    });\n  },\n\n  runHooks(hooks) {\n    if (!hooks) throw new Error('runHooks requires at least 1 argument');\n\n    const hookArgs = Utils.sliceArgs(arguments, 1);\n    let hookType;\n\n    if (typeof hooks === 'string') {\n      hookType = hooks;\n      hooks = getHooks.call(this, hookType);\n\n      if (this.sequelize) {\n        hooks = hooks.concat(getHooks.call(this.sequelize, hookType));\n      }\n    }\n\n    if (!Array.isArray(hooks)) {\n      hooks = [hooks];\n    }\n\n    // synchronous hooks\n    if (hookTypes[hookType] && hookTypes[hookType].sync) {\n      for (let hook of hooks) {\n        if (typeof hook === 'object') {\n          hook = hook.fn;\n        }\n\n        debug(`running hook(sync) ${hookType}`);\n        hook.apply(this, hookArgs);\n      }\n      return;\n    }\n\n    // asynchronous hooks (default)\n    return Promise.each(hooks, hook => {\n      if (typeof hook === 'object') {\n        hook = hook.fn;\n      }\n\n      debug(`running hook ${hookType}`);\n      return Promise.resolve(hook.apply(this, hookArgs));\n    }).return();\n  },\n\n  hook() {\n    Utils.deprecate('hook() method has been deprecated, please use addHook() method instead');\n    return Hooks.addHook.apply(this, arguments);\n  },\n\n  /**\n   * Add a hook to the model\n   *\n   * @param {String}    hookType\n   * @param {String}    [name]    Provide a name for the hook function. It can be used to remove the hook later or to order hooks based on some sort of priority system in the future.\n   * @param {Function}  fn        The hook function\n   *\n   * @memberOf Sequelize\n   * @memberOf Sequelize.Model\n   */\n  addHook(hookType, name, fn) {\n    if (typeof name === 'function') {\n      fn = name;\n      name = null;\n    }\n\n    debug(`adding hook ${hookType}`);\n    const originalHookType = hookType;\n    hookType = hookAliases[hookType] || hookType;\n\n    if (hookAliases[originalHookType]) {\n      Utils.deprecate(`${originalHookType} hook has been deprecated, please use ${hookType} hook instead`);\n    }\n\n    // check for proxies, add them too\n    hookType = getProxiedHooks(hookType);\n\n    _.each(hookType, type => {\n      this.options.hooks[type] = getHooks.call(this, type);\n      this.options.hooks[type].push(name ? {name, fn} : fn);\n    });\n\n    return this;\n  },\n\n  /**\n   * Remove hook from the model\n   *\n   * @param {String} hookType\n   * @param {String|Function} name\n   *\n   * @memberOf Sequelize\n   * @memberOf Sequelize.Model\n   */\n  removeHook(hookType, name) {\n    hookType = hookAliases[hookType] || hookType;\n    const isReference = typeof name === 'function' ? true : false;\n\n    if (!this.hasHook(hookType)) {\n      return this;\n    }\n\n    Utils.debug(`removing hook ${hookType}`);\n\n    // check for proxies, add them too\n    hookType = getProxiedHooks(hookType);\n\n    for (const type of hookType) {\n      this.options.hooks[type] = this.options.hooks[type].filter(hook => {\n        if (isReference && typeof hook === 'function') {\n          return hook !== name; // check if same method\n        } else if (!isReference && typeof hook === 'object') {\n          return hook.name !== name;\n        }\n        return true;\n      });\n    }\n\n    return this;\n  },\n\n  /**\n   * Check whether the mode has any hooks of this type\n   *\n   * @param {String}  hookType\n   *\n   * @alias hasHooks\n   * @memberOf Sequelize\n   * @memberOf Sequelize.Model\n   */\n  hasHook(hookType) {\n    return this.options.hooks[hookType] && !!this.options.hooks[hookType].length;\n  }\n};\nHooks.hasHooks = Hooks.hasHook;\n\n\nfunction applyTo(target) {\n  _.mixin(target, Hooks);\n\n  const allHooks = Object.keys(hookTypes).concat(Object.keys(hookAliases));\n  for (const hook of allHooks) {\n    target[hook] = function(name, callback) {\n      return this.addHook(hook, name, callback);\n    };\n  }\n}\nexports.applyTo = applyTo;\n\n/**\n * A hook that is run before validation\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name beforeValidate\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run after validation\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name afterValidate\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run when validation fails\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with instance, options, error. Error is the\n * SequelizeValidationError. If the callback throws an error, it will replace the original validation error.\n * @name validationFailed\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before creating a single instance\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeCreate\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run after creating a single instance\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name afterCreate\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before creating or updating a single instance, It proxies `beforeCreate` and `beforeUpdate`\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeSave\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before upserting\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeUpsert\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run after upserting\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name afterUpsert\n * @memberOf Sequelize.Model\n */\n\n/**\n  * A hook that is run after creating or updating a single instance, It proxies `afterCreate` and `afterUpdate`\n  * @param {String}   name\n  * @param {Function} fn   A callback function that is called with attributes, options\n  * @name afterSave\n  * @memberOf Sequelize.Model\n  */\n\n/**\n * A hook that is run before destroying a single instance\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name beforeDestroy\n * @alias beforeDelete\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run after destroying a single instance\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name afterDestroy\n * @alias afterDelete\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before restoring a single instance\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name beforeRestore\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run after restoring a single instance\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name afterRestore\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before updating a single instance\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name beforeUpdate\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run after updating a single instance\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name afterUpdate\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before creating instances in bulk\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with instances, options\n * @name beforeBulkCreate\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run after creating instances in bulk\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with instances, options\n * @name afterBulkCreate\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before destroying instances in bulk\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name beforeBulkDestroy\n * @alias beforeBulkDelete\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run after destroying instances in bulk\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name afterBulkDestroy\n * @alias afterBulkDelete\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before restoring instances in bulk\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name beforeBulkRestore\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run after restoring instances in bulk\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name afterBulkRestore\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before updating instances in bulk\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeBulkUpdate\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run after updating instances in bulk\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with options\n * @name afterBulkUpdate\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before a find (select) query\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeFind\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before a find (select) query, after any { include: {all: ...} } options are expanded\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeFindAfterExpandIncludeAll\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before a find (select) query, after all option parsing is complete\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeFindAfterOptions\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run after a find (select) query\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with instance(s), options\n * @name afterFind\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before a count query\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeCount\n * @memberOf Sequelize.Model\n */\n\n/**\n * A hook that is run before a define call\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeDefine\n * @memberOf Sequelize\n */\n\n/**\n * A hook that is run after a define call\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with factory\n * @name afterDefine\n * @memberOf Sequelize\n */\n\n/**\n * A hook that is run before Sequelize() call\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with config, options\n * @name beforeInit\n * @memberOf Sequelize\n */\n\n/**\n * A hook that is run after Sequelize() call\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with sequelize\n * @name afterInit\n * @memberOf Sequelize\n */\n\n/**\n * A hook that is run before a connection is created\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with config passed to connection\n * @name beforeConnect\n * @memberOf Sequelize\n */\n\n/**\n * A hook that is run after a connection is created\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with the connection object and thye config passed to connection\n * @name afterConnect\n * @memberOf Sequelize\n */\n\n/**\n * A hook that is run before Model.sync call\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with options passed to Model.sync\n * @name beforeSync\n * @memberOf Sequelize\n */\n\n/**\n * A hook that is run after Model.sync call\n * @param {String}   name\n * @param {Function} fn   A callback function that is called with options passed to Model.sync\n * @name afterSync\n * @memberOf Sequelize\n */\n\n/**\n  * A hook that is run before sequelize.sync call\n  * @param {String}   name\n  * @param {Function} fn   A callback function that is called with options passed to sequelize.sync\n  * @name beforeBulkSync\n  * @memberOf Sequelize\n  */\n\n/**\n  * A hook that is run after sequelize.sync call\n  * @param {String}   name\n  * @param {Function} fn   A callback function that is called with options passed to sequelize.sync\n  * @name afterBulkSync\n  * @memberOf Sequelize\n  */\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nconst Command = require('./command.js');\n\nconst Query = require('./query.js');\n\nconst Packets = require('../packets/index.js');\n\nconst getBinaryParser = require('../parsers/binary_parser.js');\n\nclass Execute extends Command {\n  constructor(options, callback) {\n    super();\n    this.statement = options.statement;\n    this.sql = options.sql;\n    this.values = options.values;\n    this.onResult = callback;\n    this.parameters = options.values;\n    this.insertId = 0;\n    this._rows = [];\n    this._fields = [];\n    this._result = [];\n    this._fieldCount = 0;\n    this._rowParser = null;\n    this._executeOptions = options;\n    this._resultIndex = 0;\n    this._localStream = null;\n\n    this._unpipeStream = function () {};\n\n    this._streamFactory = options.infileStreamFactory;\n    this._connection = null;\n  }\n\n  buildParserFromFields(fields, connection) {\n    return getBinaryParser(fields, this.options, connection.config);\n  }\n\n  start(packet, connection) {\n    this._connection = connection;\n    this.options = Object.assign({}, connection.config, this._executeOptions);\n    const executePacket = new Packets.Execute(this.statement.id, this.parameters, connection.config.charsetNumber, connection.config.timezone); //For reasons why this try-catch is here, please see\n    // https://github.com/sidorares/node-mysql2/pull/689\n    //For additional discussion, see\n    // 1. https://github.com/sidorares/node-mysql2/issues/493\n    // 2. https://github.com/sidorares/node-mysql2/issues/187\n    // 3. https://github.com/sidorares/node-mysql2/issues/480\n\n    try {\n      connection.writePacket(executePacket.toPacket(1));\n    } catch (error) {\n      this.onResult(error);\n    }\n\n    return Execute.prototype.resultsetHeader;\n  }\n\n  readField(packet, connection) {\n    let fields; // disabling for now, but would be great to find reliable way to parse fields only once\n    // fields reported by prepare can be empty at all or just incorrect - see #169\n    //\n    // perfomance optimisation: if we already have this field parsed in statement header, use one from header\n    // const field = this.statement.columns.length == this._fieldCount ?\n    //  this.statement.columns[this._receivedFieldsCount] : new Packets.ColumnDefinition(packet);\n\n    const field = new Packets.ColumnDefinition(packet, connection.clientEncoding);\n    this._receivedFieldsCount++;\n\n    this._fields[this._resultIndex].push(field);\n\n    if (this._receivedFieldsCount === this._fieldCount) {\n      fields = this._fields[this._resultIndex];\n      this.emit('fields', fields, this._resultIndex);\n      return Execute.prototype.fieldsEOF;\n    }\n\n    return Execute.prototype.readField;\n  }\n\n  fieldsEOF(packet, connection) {\n    // check EOF\n    if (!packet.isEOF()) {\n      return connection.protocolError('Expected EOF packet');\n    }\n\n    this._rowParser = this.buildParserFromFields(this._fields[this._resultIndex], connection);\n    return Execute.prototype.row;\n  }\n\n}\n\nExecute.prototype.done = Query.prototype.done;\nExecute.prototype.doneInsert = Query.prototype.doneInsert;\nExecute.prototype.resultsetHeader = Query.prototype.resultsetHeader;\nExecute.prototype._findOrCreateReadStream = Query.prototype._findOrCreateReadStream;\nExecute.prototype._streamLocalInfile = Query.prototype._streamLocalInfile;\nExecute.prototype.row = Query.prototype.row;\nExecute.prototype.stream = Query.prototype.stream;\nmodule.exports = Execute;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/mysql2/lib/commands/execute.js"],"names":["Command","require","Query","Packets","getBinaryParser","Execute","constructor","options","callback","statement","sql","values","onResult","parameters","insertId","_rows","_fields","_result","_fieldCount","_rowParser","_executeOptions","_resultIndex","_localStream","_unpipeStream","_streamFactory","infileStreamFactory","_connection","buildParserFromFields","fields","connection","config","start","packet","Object","assign","executePacket","id","charsetNumber","timezone","writePacket","toPacket","error","prototype","resultsetHeader","readField","field","ColumnDefinition","clientEncoding","_receivedFieldsCount","push","emit","fieldsEOF","isEOF","protocolError","row","done","doneInsert","_findOrCreateReadStream","_streamLocalInfile","stream","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Command = require('./command.js');\nconst Query = require('./query.js');\nconst Packets = require('../packets/index.js');\n\nconst getBinaryParser = require('../parsers/binary_parser.js');\n\nclass Execute extends Command {\n  constructor(options, callback) {\n    super();\n    this.statement = options.statement;\n    this.sql = options.sql;\n    this.values = options.values;\n    this.onResult = callback;\n    this.parameters = options.values;\n    this.insertId = 0;\n    this._rows = [];\n    this._fields = [];\n    this._result = [];\n    this._fieldCount = 0;\n    this._rowParser = null;\n    this._executeOptions = options;\n    this._resultIndex = 0;\n    this._localStream = null;\n    this._unpipeStream = function() {};\n    this._streamFactory = options.infileStreamFactory;\n    this._connection = null;\n  }\n\n  buildParserFromFields(fields, connection) {\n    return getBinaryParser(fields, this.options, connection.config);\n  }\n\n  start(packet, connection) {\n    this._connection = connection;\n    this.options = Object.assign({}, connection.config, this._executeOptions);\n    const executePacket = new Packets.Execute(\n      this.statement.id,\n      this.parameters,\n      connection.config.charsetNumber,\n      connection.config.timezone\n    );\n    //For reasons why this try-catch is here, please see\n    // https://github.com/sidorares/node-mysql2/pull/689\n    //For additional discussion, see\n    // 1. https://github.com/sidorares/node-mysql2/issues/493\n    // 2. https://github.com/sidorares/node-mysql2/issues/187\n    // 3. https://github.com/sidorares/node-mysql2/issues/480\n    try {\n      connection.writePacket(executePacket.toPacket(1));\n    } catch (error) {\n      this.onResult(error);\n    }\n    return Execute.prototype.resultsetHeader;\n  }\n\n  readField(packet, connection) {\n    let fields;\n    // disabling for now, but would be great to find reliable way to parse fields only once\n    // fields reported by prepare can be empty at all or just incorrect - see #169\n    //\n    // perfomance optimisation: if we already have this field parsed in statement header, use one from header\n    // const field = this.statement.columns.length == this._fieldCount ?\n    //  this.statement.columns[this._receivedFieldsCount] : new Packets.ColumnDefinition(packet);\n    const field = new Packets.ColumnDefinition(\n      packet,\n      connection.clientEncoding\n    );\n    this._receivedFieldsCount++;\n    this._fields[this._resultIndex].push(field);\n    if (this._receivedFieldsCount === this._fieldCount) {\n      fields = this._fields[this._resultIndex];\n      this.emit('fields', fields, this._resultIndex);\n      return Execute.prototype.fieldsEOF;\n    }\n    return Execute.prototype.readField;\n  }\n\n  fieldsEOF(packet, connection) {\n    // check EOF\n    if (!packet.isEOF()) {\n      return connection.protocolError('Expected EOF packet');\n    }\n    this._rowParser = this.buildParserFromFields(\n      this._fields[this._resultIndex],\n      connection\n    );\n    return Execute.prototype.row;\n  }\n}\n\nExecute.prototype.done = Query.prototype.done;\nExecute.prototype.doneInsert = Query.prototype.doneInsert;\nExecute.prototype.resultsetHeader = Query.prototype.resultsetHeader;\nExecute.prototype._findOrCreateReadStream =\n  Query.prototype._findOrCreateReadStream;\nExecute.prototype._streamLocalInfile = Query.prototype._streamLocalInfile;\nExecute.prototype.row = Query.prototype.row;\nExecute.prototype.stream = Query.prototype.stream;\n\nmodule.exports = Execute;\n"]},"metadata":{},"sourceType":"script"}
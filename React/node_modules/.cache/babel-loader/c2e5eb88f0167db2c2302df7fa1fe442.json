{"ast":null,"code":"'use strict';\n\nconst AbstractQuery = require('../abstract/query');\n\nconst sequelizeErrors = require('../../errors');\n\nconst _ = require('lodash');\n\nconst DataTypes = require('../../data-types');\n\nconst Promise = require('../../promise');\n\nconst _require = require('../../utils/logger'),\n      logger = _require.logger;\n\nconst ER_DUP_ENTRY = 1062;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\nconst debug = logger.debugContext('sql:mariadb');\n\nclass Query extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super(connection, sequelize, Object.assign({\n      showWarnings: false\n    }, options));\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n\n    const replacementFunc = (match, key, val) => {\n      if (val[key] !== undefined) {\n        bindParam.push(val[key]);\n        return '?';\n      }\n\n      return undefined;\n    };\n\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : undefined];\n  }\n\n  run(sql, parameters) {\n    this.sql = sql;\n    const connection = this.connection,\n          options = this.options;\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    if (parameters) {\n      debug('parameters(%j)', parameters);\n    }\n\n    return Promise.resolve(connection.query(this.sql, parameters).then(results => {\n      complete(); // Log warnings if we've got them.\n\n      if (showWarnings && results && results.warningStatus > 0) {\n        return this.logWarnings(results);\n      }\n\n      return results;\n    }).catch(err => {\n      // MariaDB automatically rolls-back transactions in the event of a deadlock\n      if (options.transaction && err.errno === 1213) {\n        options.transaction.finished = 'rollback';\n      }\n\n      complete();\n      err.sql = sql;\n      err.parameters = parameters;\n      throw this.formatError(err);\n    })) // Log warnings if we've got them.\n    .then(results => {\n      if (showWarnings && results && results.warningStatus > 0) {\n        return this.logWarnings(results);\n      }\n\n      return results;\n    }) // Return formatted results...\n    .then(results => this.formatResults(results));\n  }\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @private\n   */\n\n\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery() || this.isUpsertQuery()) {\n      return data.affectedRows;\n    }\n\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        // handle bulkCreate AI primary key\n        if (this.model && this.model.autoIncrementAttribute && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute && this.model.rawAttributes[this.model.primaryKeyAttribute]) {\n          //ONLY TRUE IF @auto_increment_increment is set to 1 !!\n          //Doesn't work with GALERA => each node will reserve increment (x for first server, x+1 for next node ...\n          const startId = data[this.getInsertIdField()];\n          result = new Array(data.affectedRows);\n          const pkField = this.model.rawAttributes[this.model.primaryKeyAttribute].field;\n\n          for (let i = 0; i < data.affectedRows; i++) {\n            result[i] = {\n              [pkField]: startId + i\n            };\n          }\n\n          return [result, data.affectedRows];\n        }\n\n        return [data[this.getInsertIdField()], data.affectedRows];\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      this.handleJsonSelectQuery(data);\n      return this.handleSelectQuery(data);\n    }\n\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n\n    if (this.isRawQuery()) {\n      const meta = data.meta;\n      delete data.meta;\n      return [data, meta];\n    }\n\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n\n    if (this.isForeignKeysQuery() || this.isShowConstraintsQuery()) {\n      return data;\n    }\n\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n\n    if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        result[_result.Field] = {\n          type: _result.Type.toLowerCase().startsWith('enum') ? _result.Type.replace(/^enum/i, 'ENUM') : _result.Type.toUpperCase(),\n          allowNull: _result.Null === 'YES',\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === 'PRI',\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, 'Extra') && _result.Extra.toLowerCase() === 'auto_increment',\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n\n      return result;\n    }\n\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n\n    return result;\n  }\n\n  handleJsonSelectQuery(rows) {\n    if (!this.model || !this.model.fieldRawAttributesMap) {\n      return;\n    }\n\n    for (const _field of Object.keys(this.model.fieldRawAttributesMap)) {\n      const modelField = this.model.fieldRawAttributesMap[_field];\n\n      if (modelField.type instanceof DataTypes.JSON) {\n        //value is return as String, no JSON\n        rows = rows.map(row => {\n          row[modelField.fieldName] = row[modelField.fieldName] ? JSON.parse(row[modelField.fieldName]) : null;\n\n          if (DataTypes.JSON.parse) {\n            return DataTypes.JSON.parse(modelField, this.sequelize.options, row[modelField.fieldName]);\n          }\n\n          return row;\n        });\n      }\n    }\n  }\n\n  logWarnings(results) {\n    return this.run('SHOW WARNINGS').then(warningResults => {\n      const warningMessage = `MariaDB Warnings (${this.connection.uuid || 'default'}): `;\n      const messages = [];\n\n      for (const _warningRow of warningResults) {\n        if (_warningRow === undefined || typeof _warningRow[Symbol.iterator] !== 'function') {\n          continue;\n        }\n\n        for (const _warningResult of _warningRow) {\n          if (Object.prototype.hasOwnProperty.call(_warningResult, 'Message')) {\n            messages.push(_warningResult.Message);\n          } else {\n            for (const _objectKey of _warningResult.keys()) {\n              messages.push([_objectKey, _warningResult[_objectKey]].join(': '));\n            }\n          }\n        }\n      }\n\n      this.sequelize.log(warningMessage + messages.join('; '), this.options);\n      return results;\n    });\n  }\n\n  formatError(err) {\n    switch (err.errno) {\n      case ER_DUP_ENTRY:\n        {\n          const match = err.message.match(/Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?\\s.*$/);\n          let fields = {};\n          let message = 'Validation error';\n          const values = match ? match[1].split('-') : undefined;\n          const fieldKey = match ? match[2] : undefined;\n          const fieldVal = match ? match[1] : undefined;\n          const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n\n          if (uniqueKey) {\n            if (uniqueKey.msg) {\n              message = uniqueKey.msg;\n            }\n\n            fields = _.zipObject(uniqueKey.fields, values);\n          } else {\n            fields[fieldKey] = fieldVal;\n          }\n\n          const errors = [];\n\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), 'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field, value, this.instance, 'not_unique'));\n          });\n\n          return new sequelizeErrors.UniqueConstraintError({\n            message,\n            errors,\n            parent: err,\n            fields\n          });\n        }\n\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW:\n        {\n          // e.g. CONSTRAINT `example_constraint_name` FOREIGN KEY (`example_id`) REFERENCES `examples` (`id`)\n          const match = err.message.match(/CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/);\n          const quoteChar = match ? match[1] : '`';\n          const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : undefined;\n          return new sequelizeErrors.ForeignKeyConstraintError({\n            reltype: err.errno === 1451 ? 'parent' : 'child',\n            table: match ? match[4] : undefined,\n            fields,\n            value: fields && fields.length && this.instance && this.instance[fields[0]] || undefined,\n            index: match ? match[2] : undefined,\n            parent: err\n          });\n        }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err);\n    }\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => ({\n      tableName: resultSet.TABLE_NAME,\n      schema: resultSet.TABLE_SCHEMA\n    }));\n  }\n\n  handleShowIndexesQuery(data) {\n    let currItem;\n    const result = [];\n    data.forEach(item => {\n      if (!currItem || currItem.name !== item.Key_name) {\n        currItem = {\n          primary: item.Key_name === 'PRIMARY',\n          fields: [],\n          name: item.Key_name,\n          tableName: item.Table,\n          unique: item.Non_unique !== 1,\n          type: item.Index_type\n        };\n        result.push(currItem);\n      }\n\n      currItem.fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || undefined,\n        order: item.Collation === 'A' ? 'ASC' : undefined\n      };\n    });\n    return result;\n  }\n\n}\n\nmodule.exports = Query;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/sequelize/lib/dialects/mariadb/query.js"],"names":["AbstractQuery","require","sequelizeErrors","_","DataTypes","Promise","logger","ER_DUP_ENTRY","ER_ROW_IS_REFERENCED","ER_NO_REFERENCED_ROW","debug","debugContext","Query","constructor","connection","sequelize","options","Object","assign","showWarnings","formatBindParameters","sql","values","dialect","bindParam","replacementFunc","match","key","val","undefined","push","length","run","parameters","complete","_logQuery","resolve","query","then","results","warningStatus","logWarnings","catch","err","transaction","errno","finished","formatError","formatResults","data","result","instance","isBulkUpdateQuery","isBulkDeleteQuery","isUpsertQuery","affectedRows","isInsertQuery","handleInsertQuery","model","autoIncrementAttribute","primaryKeyAttribute","rawAttributes","startId","getInsertIdField","Array","pkField","field","i","isSelectQuery","handleJsonSelectQuery","handleSelectQuery","isUpdateQuery","isCallQuery","isRawQuery","meta","isShowIndexesQuery","handleShowIndexesQuery","isForeignKeysQuery","isShowConstraintsQuery","isShowTablesQuery","handleShowTablesQuery","isDescribeQuery","_result","Field","type","Type","toLowerCase","startsWith","replace","toUpperCase","allowNull","Null","defaultValue","Default","primaryKey","Key","autoIncrement","prototype","hasOwnProperty","call","Extra","comment","Comment","isVersionQuery","version","rows","fieldRawAttributesMap","_field","keys","modelField","JSON","map","row","fieldName","parse","warningResults","warningMessage","uuid","messages","_warningRow","Symbol","iterator","_warningResult","Message","_objectKey","join","log","message","fields","split","fieldKey","fieldVal","uniqueKey","uniqueKeys","msg","zipObject","errors","forOwn","value","ValidationErrorItem","getUniqueConstraintErrorMessage","UniqueConstraintError","parent","quoteChar","RegExp","ForeignKeyConstraintError","reltype","table","index","DatabaseError","resultSet","tableName","TABLE_NAME","schema","TABLE_SCHEMA","currItem","forEach","item","name","Key_name","primary","Table","unique","Non_unique","Index_type","Seq_in_index","attribute","Column_name","Sub_part","order","Collation","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst _ = require('lodash');\nconst DataTypes = require('../../data-types');\nconst Promise = require('../../promise');\nconst { logger } = require('../../utils/logger');\n\nconst ER_DUP_ENTRY = 1062;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\n\nconst debug = logger.debugContext('sql:mariadb');\n\nclass Query extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super(connection, sequelize, Object.assign({ showWarnings: false }, options));\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n    const replacementFunc = (match, key, val) => {\n      if (val[key] !== undefined) {\n        bindParam.push(val[key]);\n        return '?';\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect,\n      replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : undefined];\n  }\n\n  run(sql, parameters) {\n    this.sql = sql;\n    const { connection, options } = this;\n\n    const showWarnings = this.sequelize.options.showWarnings\n      || options.showWarnings;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    if (parameters) {\n      debug('parameters(%j)', parameters);\n    }\n    return Promise.resolve(\n      connection.query(this.sql, parameters)\n        .then(results => {\n          complete();\n\n          // Log warnings if we've got them.\n          if (showWarnings && results && results.warningStatus > 0) {\n            return this.logWarnings(results);\n          }\n          return results;\n        })\n        .catch(err => {\n          // MariaDB automatically rolls-back transactions in the event of a deadlock\n          if (options.transaction && err.errno === 1213) {\n            options.transaction.finished = 'rollback';\n          }\n\n          complete();\n\n          err.sql = sql;\n          err.parameters = parameters;\n          throw this.formatError(err);\n        })\n    )\n      // Log warnings if we've got them.\n      .then(results => {\n        if (showWarnings && results && results.warningStatus > 0) {\n          return this.logWarnings(results);\n        }\n        return results;\n      })\n      // Return formatted results...\n      .then(results => this.formatResults(results));\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @private\n   */\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()\n      || this.isUpsertQuery()) {\n      return data.affectedRows;\n    }\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        // handle bulkCreate AI primary key\n        if (this.model\n          && this.model.autoIncrementAttribute\n          && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute\n          && this.model.rawAttributes[this.model.primaryKeyAttribute]\n        ) {\n          //ONLY TRUE IF @auto_increment_increment is set to 1 !!\n          //Doesn't work with GALERA => each node will reserve increment (x for first server, x+1 for next node ...\n          const startId = data[this.getInsertIdField()];\n          result = new Array(data.affectedRows);\n          const pkField = this.model.rawAttributes[this.model.primaryKeyAttribute].field;\n          for (let i = 0; i < data.affectedRows; i++) {\n            result[i] = { [pkField]: startId + i };\n          }\n          return [result, data.affectedRows];\n        }\n        return [data[this.getInsertIdField()], data.affectedRows];\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      this.handleJsonSelectQuery(data);\n      return this.handleSelectQuery(data);\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isRawQuery()) {\n      const meta = data.meta;\n      delete data.meta;\n      return [data, meta];\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isForeignKeysQuery() || this.isShowConstraintsQuery()) {\n      return data;\n    }\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n    if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        result[_result.Field] = {\n          type: _result.Type.toLowerCase().startsWith('enum') ? _result.Type.replace(/^enum/i,\n            'ENUM') : _result.Type.toUpperCase(),\n          allowNull: _result.Null === 'YES',\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === 'PRI',\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, 'Extra')\n            && _result.Extra.toLowerCase() === 'auto_increment',\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n      return result;\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n\n    return result;\n  }\n\n  handleJsonSelectQuery(rows) {\n    if (!this.model || !this.model.fieldRawAttributesMap) {\n      return;\n    }\n    for (const _field of Object.keys(this.model.fieldRawAttributesMap)) {\n      const modelField = this.model.fieldRawAttributesMap[_field];\n      if (modelField.type instanceof DataTypes.JSON) {\n        //value is return as String, no JSON\n        rows = rows.map(row => {\n          row[modelField.fieldName] = row[modelField.fieldName] ? JSON.parse(\n            row[modelField.fieldName]) : null;\n          if (DataTypes.JSON.parse) {\n            return DataTypes.JSON.parse(modelField, this.sequelize.options,\n              row[modelField.fieldName]);\n          }\n          return row;\n        });\n      }\n    }\n  }\n\n  logWarnings(results) {\n    return this.run('SHOW WARNINGS').then(warningResults => {\n      const warningMessage = `MariaDB Warnings (${this.connection.uuid\n      || 'default'}): `;\n      const messages = [];\n      for (const _warningRow of warningResults) {\n        if (_warningRow === undefined || typeof _warningRow[Symbol.iterator]\n          !== 'function') {\n          continue;\n        }\n        for (const _warningResult of _warningRow) {\n          if (Object.prototype.hasOwnProperty.call(_warningResult, 'Message')) {\n            messages.push(_warningResult.Message);\n          } else {\n            for (const _objectKey of _warningResult.keys()) {\n              messages.push(\n                [_objectKey, _warningResult[_objectKey]].join(': '));\n            }\n          }\n        }\n      }\n\n      this.sequelize.log(warningMessage + messages.join('; '), this.options);\n\n      return results;\n    });\n  }\n\n  formatError(err) {\n    switch (err.errno) {\n      case ER_DUP_ENTRY: {\n        const match = err.message.match(\n          /Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?\\s.*$/);\n\n        let fields = {};\n        let message = 'Validation error';\n        const values = match ? match[1].split('-') : undefined;\n        const fieldKey = match ? match[2] : undefined;\n        const fieldVal = match ? match[1] : undefined;\n        const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n\n        if (uniqueKey) {\n          if (uniqueKey.msg) {\n            message = uniqueKey.msg;\n          }\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[fieldKey] = fieldVal;\n        }\n\n        const errors = [];\n        _.forOwn(fields, (value, field) => {\n          errors.push(new sequelizeErrors.ValidationErrorItem(\n            this.getUniqueConstraintErrorMessage(field),\n            'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field,\n            value,\n            this.instance,\n            'not_unique'\n          ));\n        });\n\n        return new sequelizeErrors.UniqueConstraintError(\n          { message, errors, parent: err, fields });\n      }\n\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW: {\n        // e.g. CONSTRAINT `example_constraint_name` FOREIGN KEY (`example_id`) REFERENCES `examples` (`id`)\n        const match = err.message.match(\n          /CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/);\n        const quoteChar = match ? match[1] : '`';\n        const fields = match ? match[3].split(\n          new RegExp(`${quoteChar}, *${quoteChar}`)) : undefined;\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          reltype: err.errno === 1451 ? 'parent' : 'child',\n          table: match ? match[4] : undefined,\n          fields,\n          value: fields && fields.length && this.instance\n            && this.instance[fields[0]] || undefined,\n          index: match ? match[2] : undefined,\n          parent: err\n        });\n      }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err);\n    }\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => ({\n      tableName: resultSet.TABLE_NAME,\n      schema: resultSet.TABLE_SCHEMA\n    }));\n  }\n\n  handleShowIndexesQuery(data) {\n\n    let currItem;\n    const result = [];\n\n    data.forEach(item => {\n      if (!currItem || currItem.name !== item.Key_name) {\n        currItem = {\n          primary: item.Key_name === 'PRIMARY',\n          fields: [],\n          name: item.Key_name,\n          tableName: item.Table,\n          unique: item.Non_unique !== 1,\n          type: item.Index_type\n        };\n        result.push(currItem);\n      }\n\n      currItem.fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || undefined,\n        order: item.Collation === 'A' ? 'ASC' : undefined\n      };\n    });\n\n    return result;\n  }\n}\n\nmodule.exports = Query;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nconst ClientConstants = require('../constants/client.js');\n\nconst CharsetToEncoding = require('../constants/charset_encodings.js');\n\nconst Packet = require('../packets/packet.js');\n\nconst auth41 = require('../auth_41.js');\n\nclass HandshakeResponse {\n  constructor(handshake) {\n    this.user = handshake.user || '';\n    this.database = handshake.database || '';\n    this.password = handshake.password || '';\n    this.passwordSha1 = handshake.passwordSha1;\n    this.authPluginData1 = handshake.authPluginData1;\n    this.authPluginData2 = handshake.authPluginData2;\n    this.compress = handshake.compress;\n    this.clientFlags = handshake.flags; // TODO: pre-4.1 auth support\n\n    let authToken;\n\n    if (this.passwordSha1) {\n      authToken = auth41.calculateTokenFromPasswordSha(this.passwordSha1, this.authPluginData1, this.authPluginData2);\n    } else {\n      authToken = auth41.calculateToken(this.password, this.authPluginData1, this.authPluginData2);\n    }\n\n    this.authToken = authToken;\n    this.charsetNumber = handshake.charsetNumber;\n    this.encoding = CharsetToEncoding[handshake.charsetNumber];\n    this.connectAttributes = handshake.connectAttributes;\n  }\n\n  serializeResponse(buffer) {\n    const isSet = flag => this.clientFlags & ClientConstants[flag];\n\n    const packet = new Packet(0, buffer, 0, buffer.length);\n    packet.offset = 4;\n    packet.writeInt32(this.clientFlags);\n    packet.writeInt32(0); // max packet size. todo: move to config\n\n    packet.writeInt8(this.charsetNumber);\n    packet.skip(23);\n    const encoding = this.encoding;\n    packet.writeNullTerminatedString(this.user, encoding);\n    let k;\n\n    if (isSet('PLUGIN_AUTH_LENENC_CLIENT_DATA')) {\n      packet.writeLengthCodedNumber(this.authToken.length);\n      packet.writeBuffer(this.authToken);\n    } else if (isSet('SECURE_CONNECTION')) {\n      packet.writeInt8(this.authToken.length);\n      packet.writeBuffer(this.authToken);\n    } else {\n      packet.writeBuffer(this.authToken);\n      packet.writeInt8(0);\n    }\n\n    if (isSet('CONNECT_WITH_DB')) {\n      packet.writeNullTerminatedString(this.database, encoding);\n    }\n\n    if (isSet('PLUGIN_AUTH')) {\n      // TODO: pass from config\n      packet.writeNullTerminatedString('mysql_native_password', 'latin1');\n    }\n\n    if (isSet('CONNECT_ATTRS')) {\n      const connectAttributes = this.connectAttributes || {};\n      const attrNames = Object.keys(connectAttributes);\n      let keysLength = 0;\n\n      for (k = 0; k < attrNames.length; ++k) {\n        keysLength += Packet.lengthCodedStringLength(attrNames[k], encoding);\n        keysLength += Packet.lengthCodedStringLength(connectAttributes[attrNames[k]], encoding);\n      }\n\n      packet.writeLengthCodedNumber(keysLength);\n\n      for (k = 0; k < attrNames.length; ++k) {\n        packet.writeLengthCodedString(attrNames[k], encoding);\n        packet.writeLengthCodedString(connectAttributes[attrNames[k]], encoding);\n      }\n    }\n\n    return packet;\n  }\n\n  toPacket() {\n    if (typeof this.user !== 'string') {\n      throw new Error('\"user\" connection config property must be a string');\n    }\n\n    if (typeof this.database !== 'string') {\n      throw new Error('\"database\" connection config property must be a string');\n    } // dry run: calculate resulting packet length\n\n\n    const p = this.serializeResponse(Packet.MockBuffer());\n    return this.serializeResponse(Buffer.alloc(p.offset));\n  }\n\n  static fromPacket(packet) {\n    const args = {};\n    args.clientFlags = packet.readInt32();\n\n    function isSet(flag) {\n      return args.clientFlags & ClientConstants[flag];\n    }\n\n    args.maxPacketSize = packet.readInt32();\n    args.charsetNumber = packet.readInt8();\n    const encoding = CharsetToEncoding[args.charsetNumber];\n    args.encoding = encoding;\n    packet.skip(23);\n    args.user = packet.readNullTerminatedString(encoding);\n    let authTokenLength;\n\n    if (isSet('PLUGIN_AUTH_LENENC_CLIENT_DATA')) {\n      authTokenLength = packet.readLengthCodedNumber(encoding);\n      args.authToken = packet.readBuffer(authTokenLength);\n    } else if (isSet('SECURE_CONNECTION')) {\n      authTokenLength = packet.readInt8();\n      args.authToken = packet.readBuffer(authTokenLength);\n    } else {\n      args.authToken = packet.readNullTerminatedString(encoding);\n    }\n\n    if (isSet('CONNECT_WITH_DB')) {\n      args.database = packet.readNullTerminatedString(encoding);\n    }\n\n    if (isSet('PLUGIN_AUTH')) {\n      args.authPluginName = packet.readNullTerminatedString(encoding);\n    }\n\n    if (isSet('CONNECT_ATTRS')) {\n      const keysLength = packet.readLengthCodedNumber(encoding);\n      const keysEnd = packet.offset + keysLength;\n      const attrs = {};\n\n      while (packet.offset < keysEnd) {\n        attrs[packet.readLengthCodedString(encoding)] = packet.readLengthCodedString(encoding);\n      }\n\n      args.connectAttributes = attrs;\n    }\n\n    return args;\n  }\n\n}\n\nmodule.exports = HandshakeResponse;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/mysql2/lib/packets/handshake_response.js"],"names":["ClientConstants","require","CharsetToEncoding","Packet","auth41","HandshakeResponse","constructor","handshake","user","database","password","passwordSha1","authPluginData1","authPluginData2","compress","clientFlags","flags","authToken","calculateTokenFromPasswordSha","calculateToken","charsetNumber","encoding","connectAttributes","serializeResponse","buffer","isSet","flag","packet","length","offset","writeInt32","writeInt8","skip","writeNullTerminatedString","k","writeLengthCodedNumber","writeBuffer","attrNames","Object","keys","keysLength","lengthCodedStringLength","writeLengthCodedString","toPacket","Error","p","MockBuffer","Buffer","alloc","fromPacket","args","readInt32","maxPacketSize","readInt8","readNullTerminatedString","authTokenLength","readLengthCodedNumber","readBuffer","authPluginName","keysEnd","attrs","readLengthCodedString","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst ClientConstants = require('../constants/client.js');\nconst CharsetToEncoding = require('../constants/charset_encodings.js');\nconst Packet = require('../packets/packet.js');\n\nconst auth41 = require('../auth_41.js');\n\nclass HandshakeResponse {\n  constructor(handshake) {\n    this.user = handshake.user || '';\n    this.database = handshake.database || '';\n    this.password = handshake.password || '';\n    this.passwordSha1 = handshake.passwordSha1;\n    this.authPluginData1 = handshake.authPluginData1;\n    this.authPluginData2 = handshake.authPluginData2;\n    this.compress = handshake.compress;\n    this.clientFlags = handshake.flags;\n    // TODO: pre-4.1 auth support\n    let authToken;\n    if (this.passwordSha1) {\n      authToken = auth41.calculateTokenFromPasswordSha(\n        this.passwordSha1,\n        this.authPluginData1,\n        this.authPluginData2\n      );\n    } else {\n      authToken = auth41.calculateToken(\n        this.password,\n        this.authPluginData1,\n        this.authPluginData2\n      );\n    }\n    this.authToken = authToken;\n    this.charsetNumber = handshake.charsetNumber;\n    this.encoding = CharsetToEncoding[handshake.charsetNumber];\n    this.connectAttributes = handshake.connectAttributes;\n  }\n\n  serializeResponse(buffer) {\n    const isSet = flag => this.clientFlags & ClientConstants[flag];\n    const packet = new Packet(0, buffer, 0, buffer.length);\n    packet.offset = 4;\n    packet.writeInt32(this.clientFlags);\n    packet.writeInt32(0); // max packet size. todo: move to config\n    packet.writeInt8(this.charsetNumber);\n    packet.skip(23);\n    const encoding = this.encoding;\n    packet.writeNullTerminatedString(this.user, encoding);\n    let k;\n    if (isSet('PLUGIN_AUTH_LENENC_CLIENT_DATA')) {\n      packet.writeLengthCodedNumber(this.authToken.length);\n      packet.writeBuffer(this.authToken);\n    } else if (isSet('SECURE_CONNECTION')) {\n      packet.writeInt8(this.authToken.length);\n      packet.writeBuffer(this.authToken);\n    } else {\n      packet.writeBuffer(this.authToken);\n      packet.writeInt8(0);\n    }\n    if (isSet('CONNECT_WITH_DB')) {\n      packet.writeNullTerminatedString(this.database, encoding);\n    }\n    if (isSet('PLUGIN_AUTH')) {\n      // TODO: pass from config\n      packet.writeNullTerminatedString('mysql_native_password', 'latin1');\n    }\n    if (isSet('CONNECT_ATTRS')) {\n      const connectAttributes = this.connectAttributes || {};\n      const attrNames = Object.keys(connectAttributes);\n      let keysLength = 0;\n      for (k = 0; k < attrNames.length; ++k) {\n        keysLength += Packet.lengthCodedStringLength(attrNames[k], encoding);\n        keysLength += Packet.lengthCodedStringLength(\n          connectAttributes[attrNames[k]],\n          encoding\n        );\n      }\n      packet.writeLengthCodedNumber(keysLength);\n      for (k = 0; k < attrNames.length; ++k) {\n        packet.writeLengthCodedString(attrNames[k], encoding);\n        packet.writeLengthCodedString(\n          connectAttributes[attrNames[k]],\n          encoding\n        );\n      }\n    }\n    return packet;\n  }\n\n  toPacket() {\n    if (typeof this.user !== 'string') {\n      throw new Error('\"user\" connection config property must be a string');\n    }\n    if (typeof this.database !== 'string') {\n      throw new Error('\"database\" connection config property must be a string');\n    }\n    // dry run: calculate resulting packet length\n    const p = this.serializeResponse(Packet.MockBuffer());\n    return this.serializeResponse(Buffer.alloc(p.offset));\n  }\n  static fromPacket(packet) {\n    const args = {};\n    args.clientFlags = packet.readInt32();\n    function isSet(flag) {\n      return args.clientFlags & ClientConstants[flag];\n    }\n    args.maxPacketSize = packet.readInt32();\n    args.charsetNumber = packet.readInt8();\n    const encoding = CharsetToEncoding[args.charsetNumber];\n    args.encoding = encoding;\n    packet.skip(23);\n    args.user = packet.readNullTerminatedString(encoding);\n    let authTokenLength;\n    if (isSet('PLUGIN_AUTH_LENENC_CLIENT_DATA')) {\n      authTokenLength = packet.readLengthCodedNumber(encoding);\n      args.authToken = packet.readBuffer(authTokenLength);\n    } else if (isSet('SECURE_CONNECTION')) {\n      authTokenLength = packet.readInt8();\n      args.authToken = packet.readBuffer(authTokenLength);\n    } else {\n      args.authToken = packet.readNullTerminatedString(encoding);\n    }\n    if (isSet('CONNECT_WITH_DB')) {\n      args.database = packet.readNullTerminatedString(encoding);\n    }\n    if (isSet('PLUGIN_AUTH')) {\n      args.authPluginName = packet.readNullTerminatedString(encoding);\n    }\n    if (isSet('CONNECT_ATTRS')) {\n      const keysLength = packet.readLengthCodedNumber(encoding);\n      const keysEnd = packet.offset + keysLength;\n      const attrs = {};\n      while (packet.offset < keysEnd) {\n        attrs[\n          packet.readLengthCodedString(encoding)\n        ] = packet.readLengthCodedString(encoding);\n      }\n      args.connectAttributes = attrs;\n    }\n    return args;\n  }\n}\n\nmodule.exports = HandshakeResponse;\n"]},"metadata":{},"sourceType":"script"}
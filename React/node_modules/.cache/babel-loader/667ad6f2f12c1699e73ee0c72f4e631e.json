{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst UTC_YEAR_ONE = Date.UTC(2000, 0, -730118);\nconst DateTimeOffset = {\n  id: 0x2B,\n  type: 'DATETIMEOFFSETN',\n  name: 'DateTimeOffset',\n  declaration: function declaration(parameter) {\n    return 'datetimeoffset(' + this.resolveScale(parameter) + ')';\n  },\n  resolveScale: function resolveScale(parameter) {\n    if (parameter.scale != null) {\n      return parameter.scale;\n    } else if (parameter.value === null) {\n      return 0;\n    } else {\n      return 7;\n    }\n  },\n  writeTypeInfo: function writeTypeInfo(buffer, parameter) {\n    buffer.writeUInt8(this.id);\n    buffer.writeUInt8(parameter.scale);\n  },\n  writeParameterData: function writeParameterData(buffer, parameter, options, cb) {\n    if (parameter.value != null) {\n      const time = new Date(+parameter.value);\n      time.setUTCFullYear(1970);\n      time.setUTCMonth(0);\n      time.setUTCDate(1);\n      let timestamp;\n      timestamp = +time * Math.pow(10, parameter.scale - 3);\n      timestamp += (parameter.value.nanosecondDelta != null ? parameter.value.nanosecondDelta : 0) * Math.pow(10, parameter.scale);\n      timestamp = Math.round(timestamp);\n      const offset = -parameter.value.getTimezoneOffset();\n\n      switch (parameter.scale) {\n        case 0:\n        case 1:\n        case 2:\n          buffer.writeUInt8(8);\n          buffer.writeUInt24LE(timestamp);\n          break;\n\n        case 3:\n        case 4:\n          buffer.writeUInt8(9);\n          buffer.writeUInt32LE(timestamp);\n          break;\n\n        case 5:\n        case 6:\n        case 7:\n          buffer.writeUInt8(10);\n          buffer.writeUInt40LE(timestamp);\n      }\n\n      buffer.writeUInt24LE(Math.floor((+parameter.value - UTC_YEAR_ONE) / 86400000));\n      buffer.writeInt16LE(offset);\n    } else {\n      buffer.writeUInt8(0);\n    }\n\n    cb();\n  },\n  validate: function validate(value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (!(value instanceof Date)) {\n      value = Date.parse(value);\n    }\n\n    if (isNaN(value)) {\n      return new TypeError('Invalid date.');\n    }\n\n    return value;\n  }\n};\nvar _default = DateTimeOffset;\nexports.default = _default;\nmodule.exports = DateTimeOffset;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/tedious/lib/data-types/datetimeoffset.js"],"names":["Object","defineProperty","exports","value","default","UTC_YEAR_ONE","Date","UTC","DateTimeOffset","id","type","name","declaration","parameter","resolveScale","scale","writeTypeInfo","buffer","writeUInt8","writeParameterData","options","cb","time","setUTCFullYear","setUTCMonth","setUTCDate","timestamp","Math","pow","nanosecondDelta","round","offset","getTimezoneOffset","writeUInt24LE","writeUInt32LE","writeUInt40LE","floor","writeInt16LE","validate","parse","isNaN","TypeError","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst UTC_YEAR_ONE = Date.UTC(2000, 0, -730118);\nconst DateTimeOffset = {\n  id: 0x2B,\n  type: 'DATETIMEOFFSETN',\n  name: 'DateTimeOffset',\n  declaration: function declaration(parameter) {\n    return 'datetimeoffset(' + this.resolveScale(parameter) + ')';\n  },\n  resolveScale: function resolveScale(parameter) {\n    if (parameter.scale != null) {\n      return parameter.scale;\n    } else if (parameter.value === null) {\n      return 0;\n    } else {\n      return 7;\n    }\n  },\n  writeTypeInfo: function writeTypeInfo(buffer, parameter) {\n    buffer.writeUInt8(this.id);\n    buffer.writeUInt8(parameter.scale);\n  },\n  writeParameterData: function writeParameterData(buffer, parameter, options, cb) {\n    if (parameter.value != null) {\n      const time = new Date(+parameter.value);\n      time.setUTCFullYear(1970);\n      time.setUTCMonth(0);\n      time.setUTCDate(1);\n      let timestamp;\n      timestamp = +time * Math.pow(10, parameter.scale - 3);\n      timestamp += (parameter.value.nanosecondDelta != null ? parameter.value.nanosecondDelta : 0) * Math.pow(10, parameter.scale);\n      timestamp = Math.round(timestamp);\n      const offset = -parameter.value.getTimezoneOffset();\n\n      switch (parameter.scale) {\n        case 0:\n        case 1:\n        case 2:\n          buffer.writeUInt8(8);\n          buffer.writeUInt24LE(timestamp);\n          break;\n\n        case 3:\n        case 4:\n          buffer.writeUInt8(9);\n          buffer.writeUInt32LE(timestamp);\n          break;\n\n        case 5:\n        case 6:\n        case 7:\n          buffer.writeUInt8(10);\n          buffer.writeUInt40LE(timestamp);\n      }\n\n      buffer.writeUInt24LE(Math.floor((+parameter.value - UTC_YEAR_ONE) / 86400000));\n      buffer.writeInt16LE(offset);\n    } else {\n      buffer.writeUInt8(0);\n    }\n\n    cb();\n  },\n  validate: function validate(value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (!(value instanceof Date)) {\n      value = Date.parse(value);\n    }\n\n    if (isNaN(value)) {\n      return new TypeError('Invalid date.');\n    }\n\n    return value;\n  }\n};\nvar _default = DateTimeOffset;\nexports.default = _default;\nmodule.exports = DateTimeOffset;"]},"metadata":{},"sourceType":"script"}
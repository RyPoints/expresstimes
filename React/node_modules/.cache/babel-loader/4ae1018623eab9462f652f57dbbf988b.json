{"ast":null,"code":"'use strict';\n\nconst CommandCode = require('../constants/commands.js');\n\nconst Errors = require('../constants/errors.js');\n\nconst Command = require('./command.js');\n\nconst Packets = require('../packets/index.js');\n\nclass ServerHandshake extends Command {\n  constructor(args) {\n    super();\n    this.args = args;\n    /*\n    this.protocolVersion = args.protocolVersion || 10;\n    this.serverVersion   = args.serverVersion;\n    this.connectionId    = args.connectionId,\n    this.statusFlags     = args.statusFlags,\n    this.characterSet    = args.characterSet,\n    this.capabilityFlags = args.capabilityFlags || 512;\n    */\n  }\n\n  start(packet, connection) {\n    const serverHelloPacket = new Packets.Handshake(this.args);\n    this.serverHello = serverHelloPacket;\n    serverHelloPacket.setScrambleData(err => {\n      if (err) {\n        connection.emit('error', new Error('Error generating random bytes'));\n        return;\n      }\n\n      connection.writePacket(serverHelloPacket.toPacket(0));\n    });\n    return ServerHandshake.prototype.readClientReply;\n  }\n\n  readClientReply(packet, connection) {\n    // check auth here\n    const clientHelloReply = Packets.HandshakeResponse.fromPacket(packet); // TODO check we don't have something similar already\n\n    connection.clientHelloReply = clientHelloReply;\n\n    if (this.args.authCallback) {\n      this.args.authCallback({\n        user: clientHelloReply.user,\n        database: clientHelloReply.database,\n        address: connection.stream.remoteAddress,\n        authPluginData1: this.serverHello.authPluginData1,\n        authPluginData2: this.serverHello.authPluginData2,\n        authToken: clientHelloReply.authToken\n      }, (err, mysqlError) => {\n        // if (err)\n        if (!mysqlError) {\n          connection.writeOk();\n        } else {\n          // TODO create constants / errorToCode\n          // 1045 = ER_ACCESS_DENIED_ERROR\n          connection.writeError({\n            message: mysqlError.message || '',\n            code: mysqlError.code || 1045\n          });\n          connection.close();\n        }\n      });\n    } else {\n      connection.writeOk();\n    }\n\n    return ServerHandshake.prototype.dispatchCommands;\n  }\n\n  dispatchCommands(packet, connection) {\n    // command from client to server\n    let knownCommand = true;\n    const encoding = connection.clientHelloReply.encoding;\n    const commandCode = packet.readInt8();\n\n    switch (commandCode) {\n      case CommandCode.QUIT:\n        if (connection.listeners('quit').length) {\n          connection.emit('quit');\n        } else {\n          connection.stream.end();\n        }\n\n        break;\n\n      case CommandCode.INIT_DB:\n        if (connection.listeners('init_db').length) {\n          const schemaName = packet.readString(undefined, encoding);\n          connection.emit('init_db', schemaName);\n        } else {\n          connection.writeOk();\n        }\n\n        break;\n\n      case CommandCode.QUERY:\n        if (connection.listeners('query').length) {\n          const query = packet.readString(undefined, encoding);\n          connection.emit('query', query);\n        } else {\n          connection.writeError({\n            code: Errors.HA_ERR_INTERNAL_ERROR,\n            message: 'No query handler'\n          });\n        }\n\n        break;\n\n      case CommandCode.FIELD_LIST:\n        if (connection.listeners('field_list').length) {\n          const table = packet.readNullTerminatedString();\n          const fields = packet.readString(undefined, encoding);\n          connection.emit('field_list', table, fields);\n        } else {\n          connection.writeError({\n            code: Errors.ER_WARN_DEPRECATED_SYNTAX,\n            message: 'As of MySQL 5.7.11, COM_FIELD_LIST is deprecated and will be removed in a future version of MySQL.'\n          });\n        }\n\n        break;\n\n      case CommandCode.PING:\n        if (connection.listeners('ping').length) {\n          connection.emit('ping');\n        } else {\n          connection.writeOk();\n        }\n\n        break;\n\n      default:\n        knownCommand = false;\n    }\n\n    if (connection.listeners('packet').length) {\n      connection.emit('packet', packet.clone(), knownCommand, commandCode);\n    } else if (!knownCommand) {\n      // eslint-disable-next-line no-console\n      console.log('Unknown command:', commandCode);\n    }\n\n    return ServerHandshake.prototype.dispatchCommands;\n  }\n\n}\n\nmodule.exports = ServerHandshake; // TODO: implement server-side 4.1 authentication\n\n/*\n4.1 authentication: (http://bazaar.launchpad.net/~mysql/mysql-server/5.5/view/head:/sql/password.c)\n\n  SERVER:  public_seed=create_random_string()\n           send(public_seed)\n\n  CLIENT:  recv(public_seed)\n           hash_stage1=sha1(\"password\")\n           hash_stage2=sha1(hash_stage1)\n           reply=xor(hash_stage1, sha1(public_seed,hash_stage2)\n\n           // this three steps are done in scramble()\n\n           send(reply)\n\n\n  SERVER:  recv(reply)\n           hash_stage1=xor(reply, sha1(public_seed,hash_stage2))\n           candidate_hash2=sha1(hash_stage1)\n           check(candidate_hash2==hash_stage2)\n\nserver stores sha1(sha1(password)) ( hash_stag2)\n*/","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/mysql2/lib/commands/server_handshake.js"],"names":["CommandCode","require","Errors","Command","Packets","ServerHandshake","constructor","args","start","packet","connection","serverHelloPacket","Handshake","serverHello","setScrambleData","err","emit","Error","writePacket","toPacket","prototype","readClientReply","clientHelloReply","HandshakeResponse","fromPacket","authCallback","user","database","address","stream","remoteAddress","authPluginData1","authPluginData2","authToken","mysqlError","writeOk","writeError","message","code","close","dispatchCommands","knownCommand","encoding","commandCode","readInt8","QUIT","listeners","length","end","INIT_DB","schemaName","readString","undefined","QUERY","query","HA_ERR_INTERNAL_ERROR","FIELD_LIST","table","readNullTerminatedString","fields","ER_WARN_DEPRECATED_SYNTAX","PING","clone","console","log","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst CommandCode = require('../constants/commands.js');\nconst Errors = require('../constants/errors.js');\n\nconst Command = require('./command.js');\nconst Packets = require('../packets/index.js');\n\nclass ServerHandshake extends Command {\n  constructor(args) {\n    super();\n    this.args = args;\n    /*\n    this.protocolVersion = args.protocolVersion || 10;\n    this.serverVersion   = args.serverVersion;\n    this.connectionId    = args.connectionId,\n    this.statusFlags     = args.statusFlags,\n    this.characterSet    = args.characterSet,\n    this.capabilityFlags = args.capabilityFlags || 512;\n    */\n  }\n\n  start(packet, connection) {\n    const serverHelloPacket = new Packets.Handshake(this.args);\n    this.serverHello = serverHelloPacket;\n    serverHelloPacket.setScrambleData(err => {\n      if (err) {\n        connection.emit('error', new Error('Error generating random bytes'));\n        return;\n      }\n      connection.writePacket(serverHelloPacket.toPacket(0));\n    });\n    return ServerHandshake.prototype.readClientReply;\n  }\n\n  readClientReply(packet, connection) {\n    // check auth here\n    const clientHelloReply = Packets.HandshakeResponse.fromPacket(packet);\n    // TODO check we don't have something similar already\n    connection.clientHelloReply = clientHelloReply;\n    if (this.args.authCallback) {\n      this.args.authCallback(\n        {\n          user: clientHelloReply.user,\n          database: clientHelloReply.database,\n          address: connection.stream.remoteAddress,\n          authPluginData1: this.serverHello.authPluginData1,\n          authPluginData2: this.serverHello.authPluginData2,\n          authToken: clientHelloReply.authToken\n        },\n        (err, mysqlError) => {\n          // if (err)\n          if (!mysqlError) {\n            connection.writeOk();\n          } else {\n            // TODO create constants / errorToCode\n            // 1045 = ER_ACCESS_DENIED_ERROR\n            connection.writeError({\n              message: mysqlError.message || '',\n              code: mysqlError.code || 1045\n            });\n            connection.close();\n          }\n        }\n      );\n    } else {\n      connection.writeOk();\n    }\n    return ServerHandshake.prototype.dispatchCommands;\n  }\n\n  dispatchCommands(packet, connection) {\n    // command from client to server\n    let knownCommand = true;\n    const encoding = connection.clientHelloReply.encoding;\n    const commandCode = packet.readInt8();\n    switch (commandCode) {\n      case CommandCode.QUIT:\n        if (connection.listeners('quit').length) {\n          connection.emit('quit');\n        } else {\n          connection.stream.end();\n        }\n        break;\n      case CommandCode.INIT_DB:\n        if (connection.listeners('init_db').length) {\n          const schemaName = packet.readString(undefined, encoding);\n          connection.emit('init_db', schemaName);\n        } else {\n          connection.writeOk();\n        }\n        break;\n      case CommandCode.QUERY:\n        if (connection.listeners('query').length) {\n          const query = packet.readString(undefined, encoding);\n          connection.emit('query', query);\n        } else {\n          connection.writeError({\n            code: Errors.HA_ERR_INTERNAL_ERROR,\n            message: 'No query handler'\n          });\n        }\n        break;\n      case CommandCode.FIELD_LIST:\n        if (connection.listeners('field_list').length) {\n          const table = packet.readNullTerminatedString();\n          const fields = packet.readString(undefined, encoding);\n          connection.emit('field_list', table, fields);\n        } else {\n          connection.writeError({\n            code: Errors.ER_WARN_DEPRECATED_SYNTAX,\n            message:\n              'As of MySQL 5.7.11, COM_FIELD_LIST is deprecated and will be removed in a future version of MySQL.'\n          });\n        }\n        break;\n      case CommandCode.PING:\n        if (connection.listeners('ping').length) {\n          connection.emit('ping');\n        } else {\n          connection.writeOk();\n        }\n        break;\n      default:\n        knownCommand = false;\n    }\n    if (connection.listeners('packet').length) {\n      connection.emit('packet', packet.clone(), knownCommand, commandCode);\n    } else if (!knownCommand) {\n      // eslint-disable-next-line no-console\n      console.log('Unknown command:', commandCode);\n    }\n    return ServerHandshake.prototype.dispatchCommands;\n  }\n}\n\nmodule.exports = ServerHandshake;\n\n// TODO: implement server-side 4.1 authentication\n/*\n4.1 authentication: (http://bazaar.launchpad.net/~mysql/mysql-server/5.5/view/head:/sql/password.c)\n\n  SERVER:  public_seed=create_random_string()\n           send(public_seed)\n\n  CLIENT:  recv(public_seed)\n           hash_stage1=sha1(\"password\")\n           hash_stage2=sha1(hash_stage1)\n           reply=xor(hash_stage1, sha1(public_seed,hash_stage2)\n\n           // this three steps are done in scramble()\n\n           send(reply)\n\n\n  SERVER:  recv(reply)\n           hash_stage1=xor(reply, sha1(public_seed,hash_stage2))\n           candidate_hash2=sha1(hash_stage1)\n           check(candidate_hash2==hash_stage2)\n\nserver stores sha1(sha1(password)) ( hash_stag2)\n*/\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"/*\r\n * @copyright\r\n * Copyright Â© Microsoft Open Technologies, Inc.\r\n *\r\n * All Rights Reserved\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http: *www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS\r\n * OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION\r\n * ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A\r\n * PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.\r\n *\r\n * See the Apache License, Version 2.0 for the specific language\r\n * governing permissions and limitations under the License.\r\n */\n'use strict';\n\nvar request = require('request');\n\nvar argument = require('./argument');\n\nvar log = require('./log');\n\nvar util = require('./util');\n\nvar HttpErrorCode = require('./constants').HttpError;\n/*\r\n * Constants\r\n */\n\n\nvar consts = {\n  AUTHORIZATION_URI: 'authorization_uri',\n  RESOURCE: 'resource',\n  WWW_AUTHENTICATE_HEADER: 'www-authenticate'\n};\n/**\r\n * The AuthenticationParameters class holds the parameters that are parsed from an OAuth challenge\r\n * in the www-authenticate header.\r\n * @constructor\r\n * @param {string} authorizationUri The URI of an authority that can issues tokens for the\r\n *                                  resource that issued the challenge.\r\n * @param {string} resource         The resource for a which a token should be requested from the authority.\r\n */\n\nfunction AuthenticationParameters(authorizationUri, resource) {\n  this._authorizationUri = authorizationUri;\n  this._resource = resource;\n}\n/**\r\n * The URI of an authority that can issues tokens for the resource that issued the challenge.\r\n * @instance\r\n * @memberOf AuthenticationParameters\r\n * @type {string}\r\n * @name authorizationUri\r\n */\n\n\nObject.defineProperty(AuthenticationParameters.prototype, 'authorizationUri', {\n  get: function () {\n    return this._authorizationUri;\n  }\n});\n/**\r\n * The resource for a which a token should be requested from the authority.\r\n * This property may be undefined if the resource was not returned in the challenge.\r\n * @instance\r\n * @memberOf AuthenticationParameters\r\n * @type {string}\r\n * @name authorizationUri\r\n */\n\nObject.defineProperty(AuthenticationParameters.prototype, 'resource', {\n  get: function () {\n    return this._resource;\n  }\n});\nvar exports = {}; // The 401 challenge is a standard defined in RFC6750, which is based in part on RFC2617.\n// The challenge has the following form.\n// WWW-Authenticate : Bearer authorization_uri=\"https://login.windows.net/mytenant.com/oauth2/authorize\",Resource_id=\"00000002-0000-0000-c000-000000000000\"\n// This regex is used to validate the structure of the challenge header.\n// Match whole structure: ^\\s*Bearer\\s+([^,\\s=\"]+?)=\"([^\"]*?)\"\\s*(,\\s*([^,\\s=\"]+?)=\"([^\"]*?)\"\\s*)*$\n// ^                        Start at the beginning of the string.\n// \\s*Bearer\\s+             Match 'Bearer' surrounded by one or more amount of whitespace.\n// ([^,\\s=\"]+?)             This cpatures the key which is composed of any characters except comma, whitespace or a quotes.\n// =                        Match the = sign.\n// \"([^\"]*?)\"               Captures the value can be any number of non quote characters.  At this point only the first key value pair as been captured.\n// \\s*                      There can be any amount of white space after the first key value pair.\n// (                        Start a capture group to retrieve the rest of the key value pairs that are separated by commas.\n//    \\s*                   There can be any amount of whitespace before the comma.\n//    ,                     There must be a comma.\n//    \\s*                   There can be any amount of whitespace after the comma.\n//    (([^,\\s=\"]+?)         This will capture the key that comes after the comma.  It's made of a series of any character excpet comma, whitespace or quotes.\n//    =                     Match the equal sign between the key and value.\n//    \"                     Match the opening quote of the value.\n//    ([^\"]*?)              This will capture the value which can be any number of non quote characters.\n//    \"                     Match the values closing quote.\n//    \\s*                   There can be any amount of whitespace before the next comma.\n// )*                       Close the capture group for key value pairs.  There can be any number of these.\n// $                      The rest of the string can be whitespace but nothing else up to the end of the string.\n//\n//\n// In other some other languages the regex above would be all that was needed. However, in JavaScript the RegExp object does not\n// return all of the captures in one go.  So the regex above needs to be broken up so that captures can be retrieved\n// iteratively.\n//\n\nfunction parseChallenge(challenge) {\n  // This regex checks the structure of the whole challenge header.  The complete\n  // header needs to be checked for validity before we can be certain that\n  // we will succeed in pulling out the individual parts.\n  var bearerChallengeStructureValidation = /^\\s*Bearer\\s+([^,\\s=\"]+?)=\"([^\"]*?)\"\\s*(,\\s*([^,\\s=\"]+?)=\"([^\"]*?)\"\\s*)*$/; // This regex pulls out the key and value from the very first pair.\n\n  var firstKeyValuePairRegex = /^\\s*Bearer\\s+([^,\\s=\"]+?)=\"([^\"]*?)\"\\s*/; // This regex is used to pull out all of the key value pairs after the first one.\n  // All of these begin with a comma.\n\n  var allOtherKeyValuePairRegex = /(?:,\\s*([^,\\s=\"]+?)=\"([^\"]*?)\"\\s*)/g;\n\n  if (!bearerChallengeStructureValidation.test(challenge)) {\n    throw new Error('The challenge is not parseable as an RFC6750 OAuth2 challenge');\n  }\n\n  var challengeParameters = {};\n\n  for (var match = firstKeyValuePairRegex.exec(challenge); match; match = allOtherKeyValuePairRegex.exec(challenge)) {\n    challengeParameters[match[1]] = match[2];\n  }\n\n  return challengeParameters;\n}\n\nexports.AuthenticationParameters = AuthenticationParameters;\n/**\r\n * Creates an {@link AuthenticationParameters} object from the contents of a\r\n * www-authenticate header received from a HTTP 401 response from a resource server.\r\n * @param  {string} challenge The content fo the www-authenticate header.\r\n * @return {AuthenticationParameters}           An AuthenticationParameters object containing the parsed values from the header.\r\n */\n\nexports.createAuthenticationParametersFromHeader = function (challenge) {\n  argument.validateStringParameter(challenge, 'challenge');\n  var challengeParameters = parseChallenge(challenge);\n  var authorizationUri = challengeParameters[consts.AUTHORIZATION_URI];\n\n  if (!authorizationUri) {\n    throw new Error('Could not find \\'authorization_uri\\' in challenge header.');\n  }\n\n  var resource = challengeParameters[consts.RESOURCE];\n  return new AuthenticationParameters(authorizationUri, resource);\n};\n/**\r\n * Create an {@link AuthenticationParameters} object from a node http.IncomingMessage\r\n * object that was created as a result of a request to a resource server.  This function\r\n * expects the response to contain a HTTP 401 error code with a www-authenticate\r\n * header.\r\n * @param  {http.IncomingMessage} response A response from a http request to a resource server.\r\n * @return {AuthenticationParameters}\r\n */\n\n\nexports.createAuthenticationParametersFromResponse = function (response) {\n  if (!response) {\n    throw new Error('Mising required parameter: response');\n  }\n\n  if (!response.statusCode) {\n    throw new Error('The response parameter does not have the expected HTTP statusCode field');\n  }\n\n  if (HttpErrorCode.UNAUTHORIZED !== response.statusCode) {\n    throw new Error('The response status code does not correspond to an OAuth challenge.  ' + 'The statusCode is expected to be 401 but is: ' + response.statusCode);\n  }\n\n  if (!response.headers) {\n    throw new Error('There were no headers found in the response.');\n  }\n\n  var challenge = response.headers[consts.WWW_AUTHENTICATE_HEADER];\n\n  if (!challenge) {\n    throw new Error('The response does not contain a WWW-Authenticate header that can be used to determine the authority_uri and resource.');\n  }\n\n  return exports.createAuthenticationParametersFromHeader(challenge);\n};\n\nfunction validateUrlObject(url) {\n  if (!url || !url.href) {\n    throw new Error('Parameter is of wrong type: url');\n  }\n}\n/**\r\n * This is the callback that is passed to all acquireToken variants below.\r\n * @callback CreateAuthenticationParametersCallback\r\n * @memberOf AuthenticationContext\r\n * @param {Error}  [error]           If the request fails this parameter will contain an Error object.\r\n * @param {AuthenticationParameters} [parameters]   On a succesful request returns a {@link AuthenticationParameters}.\r\n */\n\n/**\r\n * Creates an {@link AuthenticationParameters} object by sending a get request\r\n * to the url passed to this function, and parsing the resulting http 401\r\n * response.\r\n * @param  {string|url}               url               The url of a resource server.\r\n * @param  {AuthenticationParameters} callback          Called on error or request completion.\r\n * @param  {string}                   [correlationId]   An optional correlationId to pass along with the request and to include in any logs.\r\n */\n\n\nexports.createAuthenticationParametersFromUrl = function (url, callback, correlationId) {\n  argument.validateCallbackType(callback);\n\n  try {\n    if (!url) {\n      callback(new Error('Missing required parameter: url'));\n      return;\n    }\n\n    var challengeUrl;\n\n    if ('string' === typeof url) {\n      challengeUrl = url;\n    } else {\n      validateUrlObject(url);\n      challengeUrl = url.href;\n    }\n\n    var logContext = log.createLogContext(correlationId);\n    var logger = new log.Logger('AuthenticationParameters', logContext);\n    logger.verbose('Attempting to retrieve authentication parameters');\n    logger.verbose('Attempting to retrieve authentication parameters from: ' + challengeUrl, true);\n    var options = util.createRequestOptions({\n      _callContext: {\n        _logContext: logContext\n      }\n    });\n    request.get(challengeUrl, options, function (err, response) {\n      if (err) {\n        logger.error('Authentication parameters http get failed.', err, true);\n        callback(err);\n        return;\n      }\n\n      var parameters;\n\n      try {\n        parameters = exports.createAuthenticationParametersFromResponse(response);\n      } catch (creationErr) {\n        logger.error('Unable to parse response in to authentication paramaters.', creationErr, true);\n        callback(creationErr);\n        return;\n      }\n\n      callback(null, parameters);\n    });\n  } catch (err) {\n    callback(err);\n    return;\n  }\n};\n\nmodule.exports = exports;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/adal-node/lib/authentication-parameters.js"],"names":["request","require","argument","log","util","HttpErrorCode","HttpError","consts","AUTHORIZATION_URI","RESOURCE","WWW_AUTHENTICATE_HEADER","AuthenticationParameters","authorizationUri","resource","_authorizationUri","_resource","Object","defineProperty","prototype","get","exports","parseChallenge","challenge","bearerChallengeStructureValidation","firstKeyValuePairRegex","allOtherKeyValuePairRegex","test","Error","challengeParameters","match","exec","createAuthenticationParametersFromHeader","validateStringParameter","createAuthenticationParametersFromResponse","response","statusCode","UNAUTHORIZED","headers","validateUrlObject","url","href","createAuthenticationParametersFromUrl","callback","correlationId","validateCallbackType","challengeUrl","logContext","createLogContext","logger","Logger","verbose","options","createRequestOptions","_callContext","_logContext","err","error","parameters","creationErr","module"],"mappings":"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","sourcesContent":["/*\r\n * @copyright\r\n * Copyright Â© Microsoft Open Technologies, Inc.\r\n *\r\n * All Rights Reserved\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http: *www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS\r\n * OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION\r\n * ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A\r\n * PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.\r\n *\r\n * See the Apache License, Version 2.0 for the specific language\r\n * governing permissions and limitations under the License.\r\n */\r\n\r\n'use strict';\r\n\r\nvar request = require('request');\r\n\r\nvar argument = require('./argument');\r\nvar log = require('./log');\r\nvar util = require('./util');\r\nvar HttpErrorCode = require('./constants').HttpError;\r\n\r\n/*\r\n * Constants\r\n */\r\nvar consts = {\r\n  AUTHORIZATION_URI : 'authorization_uri',\r\n  RESOURCE : 'resource',\r\n  WWW_AUTHENTICATE_HEADER : 'www-authenticate'\r\n};\r\n\r\n/**\r\n * The AuthenticationParameters class holds the parameters that are parsed from an OAuth challenge\r\n * in the www-authenticate header.\r\n * @constructor\r\n * @param {string} authorizationUri The URI of an authority that can issues tokens for the\r\n *                                  resource that issued the challenge.\r\n * @param {string} resource         The resource for a which a token should be requested from the authority.\r\n */\r\nfunction AuthenticationParameters(authorizationUri, resource) {\r\n  this._authorizationUri = authorizationUri;\r\n  this._resource = resource;\r\n}\r\n\r\n/**\r\n * The URI of an authority that can issues tokens for the resource that issued the challenge.\r\n * @instance\r\n * @memberOf AuthenticationParameters\r\n * @type {string}\r\n * @name authorizationUri\r\n */\r\nObject.defineProperty(AuthenticationParameters.prototype, 'authorizationUri', {\r\n  get : function() {\r\n    return this._authorizationUri;\r\n  }\r\n});\r\n\r\n/**\r\n * The resource for a which a token should be requested from the authority.\r\n * This property may be undefined if the resource was not returned in the challenge.\r\n * @instance\r\n * @memberOf AuthenticationParameters\r\n * @type {string}\r\n * @name authorizationUri\r\n */\r\nObject.defineProperty(AuthenticationParameters.prototype, 'resource', {\r\n  get : function() {\r\n    return this._resource;\r\n  }\r\n});\r\n\r\nvar exports = {};\r\n\r\n// The 401 challenge is a standard defined in RFC6750, which is based in part on RFC2617.\r\n// The challenge has the following form.\r\n// WWW-Authenticate : Bearer authorization_uri=\"https://login.windows.net/mytenant.com/oauth2/authorize\",Resource_id=\"00000002-0000-0000-c000-000000000000\"\r\n\r\n// This regex is used to validate the structure of the challenge header.\r\n// Match whole structure: ^\\s*Bearer\\s+([^,\\s=\"]+?)=\"([^\"]*?)\"\\s*(,\\s*([^,\\s=\"]+?)=\"([^\"]*?)\"\\s*)*$\r\n// ^                        Start at the beginning of the string.\r\n// \\s*Bearer\\s+             Match 'Bearer' surrounded by one or more amount of whitespace.\r\n// ([^,\\s=\"]+?)             This cpatures the key which is composed of any characters except comma, whitespace or a quotes.\r\n// =                        Match the = sign.\r\n// \"([^\"]*?)\"               Captures the value can be any number of non quote characters.  At this point only the first key value pair as been captured.\r\n// \\s*                      There can be any amount of white space after the first key value pair.\r\n// (                        Start a capture group to retrieve the rest of the key value pairs that are separated by commas.\r\n//    \\s*                   There can be any amount of whitespace before the comma.\r\n//    ,                     There must be a comma.\r\n//    \\s*                   There can be any amount of whitespace after the comma.\r\n//    (([^,\\s=\"]+?)         This will capture the key that comes after the comma.  It's made of a series of any character excpet comma, whitespace or quotes.\r\n//    =                     Match the equal sign between the key and value.\r\n//    \"                     Match the opening quote of the value.\r\n//    ([^\"]*?)              This will capture the value which can be any number of non quote characters.\r\n//    \"                     Match the values closing quote.\r\n//    \\s*                   There can be any amount of whitespace before the next comma.\r\n// )*                       Close the capture group for key value pairs.  There can be any number of these.\r\n// $                      The rest of the string can be whitespace but nothing else up to the end of the string.\r\n//\r\n//\r\n// In other some other languages the regex above would be all that was needed. However, in JavaScript the RegExp object does not\r\n// return all of the captures in one go.  So the regex above needs to be broken up so that captures can be retrieved\r\n// iteratively.\r\n//\r\n\r\nfunction parseChallenge(challenge) {\r\n  // This regex checks the structure of the whole challenge header.  The complete\r\n  // header needs to be checked for validity before we can be certain that\r\n  // we will succeed in pulling out the individual parts.\r\n  var bearerChallengeStructureValidation = /^\\s*Bearer\\s+([^,\\s=\"]+?)=\"([^\"]*?)\"\\s*(,\\s*([^,\\s=\"]+?)=\"([^\"]*?)\"\\s*)*$/;\r\n\r\n  // This regex pulls out the key and value from the very first pair.\r\n  var firstKeyValuePairRegex = /^\\s*Bearer\\s+([^,\\s=\"]+?)=\"([^\"]*?)\"\\s*/;\r\n\r\n  // This regex is used to pull out all of the key value pairs after the first one.\r\n  // All of these begin with a comma.\r\n  var allOtherKeyValuePairRegex = /(?:,\\s*([^,\\s=\"]+?)=\"([^\"]*?)\"\\s*)/g;\r\n\r\n\r\n  if (!bearerChallengeStructureValidation.test(challenge)) {\r\n    throw new Error('The challenge is not parseable as an RFC6750 OAuth2 challenge');\r\n  }\r\n\r\n  var challengeParameters = {};\r\n  for(var match = firstKeyValuePairRegex.exec(challenge);\r\n      match;\r\n      match = allOtherKeyValuePairRegex.exec(challenge)) {\r\n\r\n    challengeParameters[match[1]] = match[2];\r\n  }\r\n\r\n  return challengeParameters;\r\n}\r\n\r\nexports.AuthenticationParameters = AuthenticationParameters;\r\n\r\n/**\r\n * Creates an {@link AuthenticationParameters} object from the contents of a\r\n * www-authenticate header received from a HTTP 401 response from a resource server.\r\n * @param  {string} challenge The content fo the www-authenticate header.\r\n * @return {AuthenticationParameters}           An AuthenticationParameters object containing the parsed values from the header.\r\n */\r\nexports.createAuthenticationParametersFromHeader = function(challenge) {\r\n  argument.validateStringParameter(challenge, 'challenge');\r\n\r\n  var challengeParameters = parseChallenge(challenge);\r\n\r\n  var authorizationUri = challengeParameters[consts.AUTHORIZATION_URI];\r\n  if (!authorizationUri) {\r\n    throw new Error('Could not find \\'authorization_uri\\' in challenge header.');\r\n  }\r\n\r\n  var resource = challengeParameters[consts.RESOURCE];\r\n\r\n  return new AuthenticationParameters(authorizationUri, resource);\r\n};\r\n\r\n/**\r\n * Create an {@link AuthenticationParameters} object from a node http.IncomingMessage\r\n * object that was created as a result of a request to a resource server.  This function\r\n * expects the response to contain a HTTP 401 error code with a www-authenticate\r\n * header.\r\n * @param  {http.IncomingMessage} response A response from a http request to a resource server.\r\n * @return {AuthenticationParameters}\r\n */\r\nexports.createAuthenticationParametersFromResponse = function(response) {\r\n  if (!response) {\r\n    throw new Error('Mising required parameter: response');\r\n  }\r\n\r\n  if (!response.statusCode) {\r\n    throw new Error('The response parameter does not have the expected HTTP statusCode field');\r\n  }\r\n\r\n  if (HttpErrorCode.UNAUTHORIZED !== response.statusCode) {\r\n    throw new Error('The response status code does not correspond to an OAuth challenge.  ' +\r\n      'The statusCode is expected to be 401 but is: ' + response.statusCode);\r\n  }\r\n\r\n  if (!response.headers) {\r\n    throw new Error('There were no headers found in the response.');\r\n  }\r\n\r\n  var challenge = response.headers[consts.WWW_AUTHENTICATE_HEADER];\r\n  if (!challenge) {\r\n    throw new Error('The response does not contain a WWW-Authenticate header that can be used to determine the authority_uri and resource.');\r\n  }\r\n\r\n  return exports.createAuthenticationParametersFromHeader(challenge);\r\n};\r\n\r\nfunction validateUrlObject(url) {\r\n  if (!url || !url.href) {\r\n    throw new Error('Parameter is of wrong type: url');\r\n  }\r\n}\r\n\r\n/**\r\n * This is the callback that is passed to all acquireToken variants below.\r\n * @callback CreateAuthenticationParametersCallback\r\n * @memberOf AuthenticationContext\r\n * @param {Error}  [error]           If the request fails this parameter will contain an Error object.\r\n * @param {AuthenticationParameters} [parameters]   On a succesful request returns a {@link AuthenticationParameters}.\r\n */\r\n\r\n/**\r\n * Creates an {@link AuthenticationParameters} object by sending a get request\r\n * to the url passed to this function, and parsing the resulting http 401\r\n * response.\r\n * @param  {string|url}               url               The url of a resource server.\r\n * @param  {AuthenticationParameters} callback          Called on error or request completion.\r\n * @param  {string}                   [correlationId]   An optional correlationId to pass along with the request and to include in any logs.\r\n */\r\nexports.createAuthenticationParametersFromUrl = function(url, callback, correlationId) {\r\n  argument.validateCallbackType(callback);\r\n  try {\r\n    if (!url) {\r\n      callback(new Error('Missing required parameter: url'));\r\n      return;\r\n    }\r\n    var challengeUrl;\r\n    if ('string' === typeof(url)) {\r\n      challengeUrl = url;\r\n    } else {\r\n      validateUrlObject(url);\r\n      challengeUrl = url.href;\r\n    }\r\n\r\n    var logContext = log.createLogContext(correlationId);\r\n    var logger = new log.Logger('AuthenticationParameters', logContext);\r\n\r\n    logger.verbose('Attempting to retrieve authentication parameters');\r\n    logger.verbose('Attempting to retrieve authentication parameters from: ' + challengeUrl, true);\r\n    var options = util.createRequestOptions( { _callContext : { _logContext: logContext } } );\r\n    request.get(challengeUrl, options, function(err, response) {\r\n      if (err) {\r\n        logger.error('Authentication parameters http get failed.', err, true);\r\n        callback(err);\r\n        return;\r\n      }\r\n      var parameters;\r\n      try {\r\n        parameters = exports.createAuthenticationParametersFromResponse(response);\r\n      } catch(creationErr) {\r\n        logger.error('Unable to parse response in to authentication paramaters.', creationErr, true);\r\n        callback(creationErr);\r\n        return;\r\n      }\r\n      callback(null, parameters);\r\n    });\r\n  } catch(err) {\r\n    callback(err);\r\n    return;\r\n  }\r\n};\r\n\r\nmodule.exports = exports;"]},"metadata":{},"sourceType":"script"}
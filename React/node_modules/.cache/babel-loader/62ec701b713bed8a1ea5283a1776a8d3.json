{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nvar _slicedToArray = require(\"/Users/ryandavis/Development/reactapp/expresstimes/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ms_rest_js_1 = require(\"@azure/ms-rest-js\");\n\nconst login_1 = require(\"../login\");\n/**\n * Describes the credentials by retrieving token via Azure CLI.\n */\n\n\nclass AzureCliCredentials {\n  constructor(subscriptionInfo, tokenInfo, // tslint:disable-next-line: no-inferrable-types\n  resource = \"https://management.azure.com\") {\n    /**\n     * Azure resource endpoints.\n     * - Defaults to Azure Resource Manager from environment: AzureCloud. \"https://management.azure.com\"\n     * - For Azure KeyVault: \"https://vault.azure.net\"\n     * - For Azure Batch: \"https://batch.core.windows.net\"\n     * - For Azure Active Directory Graph: \"https://graph.windows.net\"\n     *\n     * To get the resource for other clouds:\n     * - `az cloud list`\n     */\n    // tslint:disable-next-line: no-inferrable-types\n    this.resource = \"https://management.azure.com\";\n    /**\n     * The number of seconds within which it is good to renew the token.\n     *  A constant set to 270 seconds (4.5 minutes).\n     */\n\n    this._tokenRenewalMarginInSeconds = 270;\n    this.subscriptionInfo = subscriptionInfo;\n    this.tokenInfo = tokenInfo;\n    this.resource = resource;\n  }\n  /**\n   * Tries to get the new token from Azure CLI, if the token has expired or the subscription has\n   * changed else uses the cached accessToken.\n   * @return The tokenResponse (tokenType and accessToken are the two important properties).\n   */\n\n\n  getToken() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._hasTokenExpired() || this._hasSubscriptionChanged() || this._hasResourceChanged()) {\n        try {\n          // refresh the access token\n          this.tokenInfo = yield AzureCliCredentials.getAccessToken({\n            subscriptionIdOrName: this.subscriptionInfo.id,\n            resource: this.resource\n          });\n        } catch (err) {\n          throw new Error(`An error occurred while refreshing the new access ` + `token:${err.stderr ? err.stderr : err.message}`);\n        }\n      }\n\n      const result = {\n        accessToken: this.tokenInfo.accessToken,\n        tokenType: this.tokenInfo.tokenType,\n        expiresOn: this.tokenInfo.expiresOn,\n        tenantId: this.tokenInfo.tenant\n      };\n      return result;\n    });\n  }\n  /**\n   * Signs a request with the Authentication header.\n   * @param The request to be signed.\n   */\n\n\n  signRequest(webResource) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const tokenResponse = yield this.getToken();\n      webResource.headers.set(ms_rest_js_1.Constants.HeaderConstants.AUTHORIZATION, `${tokenResponse.tokenType} ${tokenResponse.accessToken}`);\n      return Promise.resolve(webResource);\n    });\n  }\n\n  _hasTokenExpired() {\n    let result = true;\n    const now = Math.floor(Date.now() / 1000);\n\n    if (this.tokenInfo.expiresOn && this.tokenInfo.expiresOn instanceof Date && Math.floor(this.tokenInfo.expiresOn.getTime() / 1000) - now > this._tokenRenewalMarginInSeconds) {\n      result = false;\n    }\n\n    return result;\n  }\n\n  _hasSubscriptionChanged() {\n    return this.subscriptionInfo.id !== this.tokenInfo.subscription;\n  }\n\n  _parseToken() {\n    try {\n      const base64Url = this.tokenInfo.accessToken.split(\".\")[1];\n      const base64 = decodeURIComponent(Buffer.from(base64Url, \"base64\").toString(\"binary\").split(\"\").map(c => {\n        return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n      }).join(\"\"));\n      return JSON.parse(base64);\n    } catch (err) {\n      const msg = `An error occurred while parsing the access token: ${err.stack}`;\n      throw new Error(msg);\n    }\n  }\n\n  _isAzureResourceManagerEndpoint(newResource, currentResource) {\n    if (newResource.endsWith(\"/\")) newResource = newResource.slice(0, -1);\n    if (currentResource.endsWith(\"/\")) currentResource = currentResource.slice(0, -1);\n    return newResource === \"https://management.core.windows.net\" && currentResource === \"https://management.azure.com\" || newResource === \"https://management.azure.com\" && currentResource === \"https://management.core.windows.net\";\n  }\n\n  _hasResourceChanged() {\n    const parsedToken = this._parseToken(); // normalize the resource string, since it is possible to\n    // provide a resource without a trailing slash\n\n\n    const currentResource = parsedToken.aud && parsedToken.aud.endsWith(\"/\") ? parsedToken.aud.slice(0, -1) : parsedToken.aud;\n    const newResource = this.resource.endsWith(\"/\") ? this.resource.slice(0, -1) : this.resource;\n    const result = this._isAzureResourceManagerEndpoint(newResource, currentResource) ? false : currentResource !== newResource;\n    return result;\n  }\n  /**\n   * Gets the access token for the default or specified subscription.\n   * @param options Optional parameters that can be provided to get the access token.\n   */\n\n\n  static getAccessToken(options = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let cmd = \"account get-access-token\";\n\n        if (options.subscriptionIdOrName) {\n          cmd += ` -s \"${options.subscriptionIdOrName}\"`;\n        }\n\n        if (options.resource) {\n          cmd += ` --resource ${options.resource}`;\n        }\n\n        const result = yield login_1.execAz(cmd);\n        result.expiresOn = new Date(result.expiresOn);\n        return result;\n      } catch (err) {\n        const message = `An error occurred while getting credentials from ` + `Azure CLI: ${err.stack}`;\n        throw new Error(message);\n      }\n    });\n  }\n  /**\n   * Gets the subscription from Azure CLI.\n   * @param subscriptionIdOrName - The name or id of the subscription for which the information is\n   * required.\n   */\n\n\n  static getSubscription(subscriptionIdOrName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (subscriptionIdOrName && (typeof subscriptionIdOrName !== \"string\" || !subscriptionIdOrName.length)) {\n        throw new Error(\"'subscriptionIdOrName' must be a non-empty string.\");\n      }\n\n      try {\n        let cmd = \"account show\";\n\n        if (subscriptionIdOrName) {\n          cmd += ` -s \"${subscriptionIdOrName}\"`;\n        }\n\n        const result = yield login_1.execAz(cmd);\n        return result;\n      } catch (err) {\n        const message = `An error occurred while getting information about the current subscription from ` + `Azure CLI: ${err.stack}`;\n        throw new Error(message);\n      }\n    });\n  }\n  /**\n   * Sets the specified subscription as the default subscription for Azure CLI.\n   * @param subscriptionIdOrName The name or id of the subsciption that needs to be set as the\n   * default subscription.\n   */\n\n\n  static setDefaultSubscription(subscriptionIdOrName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        yield login_1.execAz(`account set -s ${subscriptionIdOrName}`);\n      } catch (err) {\n        const message = `An error occurred while setting the current subscription from ` + `Azure CLI: ${err.stack}`;\n        throw new Error(message);\n      }\n    });\n  }\n  /**\n   * Returns a list of all the subscriptions from Azure CLI.\n   * @param options Optional parameters that can be provided while listing all the subcriptions.\n   */\n\n\n  static listAllSubscriptions(options = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let subscriptionList = [];\n\n      try {\n        let cmd = \"account list\";\n\n        if (options.all) {\n          cmd += \" --all\";\n        }\n\n        if (options.refresh) {\n          cmd += \"--refresh\";\n        }\n\n        subscriptionList = yield login_1.execAz(cmd);\n\n        if (subscriptionList && subscriptionList.length) {\n          for (const sub of subscriptionList) {\n            if (sub.cloudName) {\n              sub.environmentName = sub.cloudName;\n              delete sub.cloudName;\n            }\n          }\n        }\n\n        return subscriptionList;\n      } catch (err) {\n        const message = `An error occurred while getting a list of all the subscription from ` + `Azure CLI: ${err.stack}`;\n        throw new Error(message);\n      }\n    });\n  }\n  /**\n   * Provides credentials that can be used by the JS SDK to interact with Azure via azure cli.\n   * **Pre-requisite**\n   * - **install azure-cli** . For more information see\n   * {@link https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest Install Azure CLI}\n   * - **login via `az login`**\n   * @param options - Optional parameters that can be provided while creating AzureCliCredentials.\n   */\n\n\n  static create(options = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const _ref = yield Promise.all([AzureCliCredentials.getSubscription(options.subscriptionIdOrName), AzureCliCredentials.getAccessToken(options)]),\n            _ref2 = _slicedToArray(_ref, 2),\n            subscriptinInfo = _ref2[0],\n            accessToken = _ref2[1];\n\n      return new AzureCliCredentials(subscriptinInfo, accessToken, options.resource);\n    });\n  }\n\n}\n\nexports.AzureCliCredentials = AzureCliCredentials;","map":{"version":3,"sources":["../../../lib/credentials/azureCliCredentials.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ms_rest_js_1 = require(\"@azure/ms-rest-js\");\nconst login_1 = require(\"../login\");\n/**\n * Describes the credentials by retrieving token via Azure CLI.\n */\nclass AzureCliCredentials {\n    constructor(subscriptionInfo, tokenInfo, \n    // tslint:disable-next-line: no-inferrable-types\n    resource = \"https://management.azure.com\") {\n        /**\n         * Azure resource endpoints.\n         * - Defaults to Azure Resource Manager from environment: AzureCloud. \"https://management.azure.com\"\n         * - For Azure KeyVault: \"https://vault.azure.net\"\n         * - For Azure Batch: \"https://batch.core.windows.net\"\n         * - For Azure Active Directory Graph: \"https://graph.windows.net\"\n         *\n         * To get the resource for other clouds:\n         * - `az cloud list`\n         */\n        // tslint:disable-next-line: no-inferrable-types\n        this.resource = \"https://management.azure.com\";\n        /**\n         * The number of seconds within which it is good to renew the token.\n         *  A constant set to 270 seconds (4.5 minutes).\n         */\n        this._tokenRenewalMarginInSeconds = 270;\n        this.subscriptionInfo = subscriptionInfo;\n        this.tokenInfo = tokenInfo;\n        this.resource = resource;\n    }\n    /**\n     * Tries to get the new token from Azure CLI, if the token has expired or the subscription has\n     * changed else uses the cached accessToken.\n     * @return The tokenResponse (tokenType and accessToken are the two important properties).\n     */\n    getToken() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._hasTokenExpired() || this._hasSubscriptionChanged() || this._hasResourceChanged()) {\n                try {\n                    // refresh the access token\n                    this.tokenInfo = yield AzureCliCredentials.getAccessToken({\n                        subscriptionIdOrName: this.subscriptionInfo.id,\n                        resource: this.resource\n                    });\n                }\n                catch (err) {\n                    throw new Error(`An error occurred while refreshing the new access ` +\n                        `token:${err.stderr ? err.stderr : err.message}`);\n                }\n            }\n            const result = {\n                accessToken: this.tokenInfo.accessToken,\n                tokenType: this.tokenInfo.tokenType,\n                expiresOn: this.tokenInfo.expiresOn,\n                tenantId: this.tokenInfo.tenant\n            };\n            return result;\n        });\n    }\n    /**\n     * Signs a request with the Authentication header.\n     * @param The request to be signed.\n     */\n    signRequest(webResource) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const tokenResponse = yield this.getToken();\n            webResource.headers.set(ms_rest_js_1.Constants.HeaderConstants.AUTHORIZATION, `${tokenResponse.tokenType} ${tokenResponse.accessToken}`);\n            return Promise.resolve(webResource);\n        });\n    }\n    _hasTokenExpired() {\n        let result = true;\n        const now = Math.floor(Date.now() / 1000);\n        if (this.tokenInfo.expiresOn &&\n            this.tokenInfo.expiresOn instanceof Date &&\n            Math.floor(this.tokenInfo.expiresOn.getTime() / 1000) - now > this._tokenRenewalMarginInSeconds) {\n            result = false;\n        }\n        return result;\n    }\n    _hasSubscriptionChanged() {\n        return this.subscriptionInfo.id !== this.tokenInfo.subscription;\n    }\n    _parseToken() {\n        try {\n            const base64Url = this.tokenInfo.accessToken.split(\".\")[1];\n            const base64 = decodeURIComponent(Buffer.from(base64Url, \"base64\").toString(\"binary\").split(\"\").map((c) => {\n                return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n            }).join(\"\"));\n            return JSON.parse(base64);\n        }\n        catch (err) {\n            const msg = `An error occurred while parsing the access token: ${err.stack}`;\n            throw new Error(msg);\n        }\n    }\n    _isAzureResourceManagerEndpoint(newResource, currentResource) {\n        if (newResource.endsWith(\"/\"))\n            newResource = newResource.slice(0, -1);\n        if (currentResource.endsWith(\"/\"))\n            currentResource = currentResource.slice(0, -1);\n        return (newResource === \"https://management.core.windows.net\" &&\n            currentResource === \"https://management.azure.com\") ||\n            (newResource === \"https://management.azure.com\" &&\n                currentResource === \"https://management.core.windows.net\");\n    }\n    _hasResourceChanged() {\n        const parsedToken = this._parseToken();\n        // normalize the resource string, since it is possible to\n        // provide a resource without a trailing slash\n        const currentResource = parsedToken.aud && parsedToken.aud.endsWith(\"/\")\n            ? parsedToken.aud.slice(0, -1)\n            : parsedToken.aud;\n        const newResource = this.resource.endsWith(\"/\")\n            ? this.resource.slice(0, -1)\n            : this.resource;\n        const result = this._isAzureResourceManagerEndpoint(newResource, currentResource)\n            ? false\n            : currentResource !== newResource;\n        return result;\n    }\n    /**\n     * Gets the access token for the default or specified subscription.\n     * @param options Optional parameters that can be provided to get the access token.\n     */\n    static getAccessToken(options = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let cmd = \"account get-access-token\";\n                if (options.subscriptionIdOrName) {\n                    cmd += ` -s \"${options.subscriptionIdOrName}\"`;\n                }\n                if (options.resource) {\n                    cmd += ` --resource ${options.resource}`;\n                }\n                const result = yield login_1.execAz(cmd);\n                result.expiresOn = new Date(result.expiresOn);\n                return result;\n            }\n            catch (err) {\n                const message = `An error occurred while getting credentials from ` +\n                    `Azure CLI: ${err.stack}`;\n                throw new Error(message);\n            }\n        });\n    }\n    /**\n     * Gets the subscription from Azure CLI.\n     * @param subscriptionIdOrName - The name or id of the subscription for which the information is\n     * required.\n     */\n    static getSubscription(subscriptionIdOrName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (subscriptionIdOrName && (typeof subscriptionIdOrName !== \"string\" || !subscriptionIdOrName.length)) {\n                throw new Error(\"'subscriptionIdOrName' must be a non-empty string.\");\n            }\n            try {\n                let cmd = \"account show\";\n                if (subscriptionIdOrName) {\n                    cmd += ` -s \"${subscriptionIdOrName}\"`;\n                }\n                const result = yield login_1.execAz(cmd);\n                return result;\n            }\n            catch (err) {\n                const message = `An error occurred while getting information about the current subscription from ` +\n                    `Azure CLI: ${err.stack}`;\n                throw new Error(message);\n            }\n        });\n    }\n    /**\n     * Sets the specified subscription as the default subscription for Azure CLI.\n     * @param subscriptionIdOrName The name or id of the subsciption that needs to be set as the\n     * default subscription.\n     */\n    static setDefaultSubscription(subscriptionIdOrName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                yield login_1.execAz(`account set -s ${subscriptionIdOrName}`);\n            }\n            catch (err) {\n                const message = `An error occurred while setting the current subscription from ` +\n                    `Azure CLI: ${err.stack}`;\n                throw new Error(message);\n            }\n        });\n    }\n    /**\n     * Returns a list of all the subscriptions from Azure CLI.\n     * @param options Optional parameters that can be provided while listing all the subcriptions.\n     */\n    static listAllSubscriptions(options = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let subscriptionList = [];\n            try {\n                let cmd = \"account list\";\n                if (options.all) {\n                    cmd += \" --all\";\n                }\n                if (options.refresh) {\n                    cmd += \"--refresh\";\n                }\n                subscriptionList = yield login_1.execAz(cmd);\n                if (subscriptionList && subscriptionList.length) {\n                    for (const sub of subscriptionList) {\n                        if (sub.cloudName) {\n                            sub.environmentName = sub.cloudName;\n                            delete sub.cloudName;\n                        }\n                    }\n                }\n                return subscriptionList;\n            }\n            catch (err) {\n                const message = `An error occurred while getting a list of all the subscription from ` +\n                    `Azure CLI: ${err.stack}`;\n                throw new Error(message);\n            }\n        });\n    }\n    /**\n     * Provides credentials that can be used by the JS SDK to interact with Azure via azure cli.\n     * **Pre-requisite**\n     * - **install azure-cli** . For more information see\n     * {@link https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest Install Azure CLI}\n     * - **login via `az login`**\n     * @param options - Optional parameters that can be provided while creating AzureCliCredentials.\n     */\n    static create(options = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const [subscriptinInfo, accessToken] = yield Promise.all([\n                AzureCliCredentials.getSubscription(options.subscriptionIdOrName),\n                AzureCliCredentials.getAccessToken(options)\n            ]);\n            return new AzureCliCredentials(subscriptinInfo, accessToken, options.resource);\n        });\n    }\n}\nexports.AzureCliCredentials = AzureCliCredentials;\n//# sourceMappingURL=azureCliCredentials.js.map"]},"metadata":{},"sourceType":"script"}
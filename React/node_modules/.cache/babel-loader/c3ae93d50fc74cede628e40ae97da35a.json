{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst NULL = (1 << 16) - 1;\nconst Binary = {\n  id: 0xAD,\n  type: 'BIGBinary',\n  name: 'Binary',\n  maximumLength: 8000,\n  declaration: function declaration(parameter) {\n    const value = parameter.value;\n    var length;\n\n    if (parameter.length) {\n      length = parameter.length;\n    } else if (value != null) {\n      length = value.length || 1;\n    } else if (value === null && !parameter.output) {\n      length = 1;\n    } else {\n      length = this.maximumLength;\n    }\n\n    return 'binary(' + length + ')';\n  },\n  resolveLength: function resolveLength(parameter) {\n    const value = parameter.value;\n\n    if (value != null) {\n      return value.length;\n    } else {\n      return this.maximumLength;\n    }\n  },\n  writeTypeInfo: function writeTypeInfo(buffer, parameter) {\n    buffer.writeUInt8(this.id);\n    buffer.writeUInt16LE(parameter.length);\n  },\n  writeParameterData: function writeParameterData(buffer, parameter, _options, cb) {\n    if (parameter.value != null) {\n      buffer.writeUInt16LE(parameter.length);\n      buffer.writeBuffer(parameter.value.slice(0, parameter.length !== undefined ? Math.min(parameter.length, this.maximumLength) : this.maximumLength));\n    } else {\n      buffer.writeUInt16LE(NULL);\n    }\n\n    cb();\n  },\n  validate: function validate(value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (!Buffer.isBuffer(value)) {\n      return new TypeError('Invalid buffer.');\n    }\n\n    return value;\n  }\n};\nvar _default = Binary;\nexports.default = _default;\nmodule.exports = Binary;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/tedious/lib/data-types/binary.js"],"names":["Object","defineProperty","exports","value","default","NULL","Binary","id","type","name","maximumLength","declaration","parameter","length","output","resolveLength","writeTypeInfo","buffer","writeUInt8","writeUInt16LE","writeParameterData","_options","cb","writeBuffer","slice","undefined","Math","min","validate","Buffer","isBuffer","TypeError","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst NULL = (1 << 16) - 1;\nconst Binary = {\n  id: 0xAD,\n  type: 'BIGBinary',\n  name: 'Binary',\n  maximumLength: 8000,\n  declaration: function declaration(parameter) {\n    const value = parameter.value;\n    var length;\n\n    if (parameter.length) {\n      length = parameter.length;\n    } else if (value != null) {\n      length = value.length || 1;\n    } else if (value === null && !parameter.output) {\n      length = 1;\n    } else {\n      length = this.maximumLength;\n    }\n\n    return 'binary(' + length + ')';\n  },\n  resolveLength: function resolveLength(parameter) {\n    const value = parameter.value;\n\n    if (value != null) {\n      return value.length;\n    } else {\n      return this.maximumLength;\n    }\n  },\n  writeTypeInfo: function writeTypeInfo(buffer, parameter) {\n    buffer.writeUInt8(this.id);\n    buffer.writeUInt16LE(parameter.length);\n  },\n  writeParameterData: function writeParameterData(buffer, parameter, _options, cb) {\n    if (parameter.value != null) {\n      buffer.writeUInt16LE(parameter.length);\n      buffer.writeBuffer(parameter.value.slice(0, parameter.length !== undefined ? Math.min(parameter.length, this.maximumLength) : this.maximumLength));\n    } else {\n      buffer.writeUInt16LE(NULL);\n    }\n\n    cb();\n  },\n  validate: function validate(value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (!Buffer.isBuffer(value)) {\n      return new TypeError('Invalid buffer.');\n    }\n\n    return value;\n  }\n};\nvar _default = Binary;\nexports.default = _default;\nmodule.exports = Binary;"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sender = exports.ParallelSendStrategy = void 0;\n\nvar _dgram = _interopRequireDefault(require(\"dgram\"));\n\nvar _dns = _interopRequireDefault(require(\"dns\"));\n\nvar _net = _interopRequireDefault(require(\"net\"));\n\nvar punycode = _interopRequireWildcard(require(\"punycode\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n\n  if (obj != null) {\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n        if (desc && (desc.get || desc.set)) {\n          Object.defineProperty(newObj, key, desc);\n        } else {\n          newObj[key] = obj[key];\n        }\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nclass ParallelSendStrategy {\n  constructor(addresses, port, request) {\n    this.addresses = addresses;\n    this.port = port;\n    this.request = request;\n    this.socketV4 = null;\n    this.socketV6 = null;\n    this.onError = null;\n    this.onMessage = null;\n  }\n\n  clearSockets() {\n    const clearSocket = (socket, onError, onMessage) => {\n      socket.removeListener('error', onError);\n      socket.removeListener('message', onMessage);\n      socket.close();\n    };\n\n    if (this.socketV4) {\n      clearSocket(this.socketV4, this.onError, this.onMessage);\n      this.socketV4 = null;\n    }\n\n    if (this.socketV6) {\n      clearSocket(this.socketV6, this.onError, this.onMessage);\n      this.socketV6 = null;\n    }\n  }\n\n  send(cb) {\n    let errorCount = 0;\n\n    const onError = err => {\n      errorCount++;\n\n      if (errorCount === this.addresses.length) {\n        this.clearSockets();\n        cb(err);\n      }\n    };\n\n    const onMessage = message => {\n      this.clearSockets();\n      cb(null, message);\n    };\n\n    const createDgramSocket = (udpType, onError, onMessage) => {\n      const socket = _dgram.default.createSocket(udpType);\n\n      socket.on('error', onError);\n      socket.on('message', onMessage);\n      return socket;\n    };\n\n    for (let j = 0; j < this.addresses.length; j++) {\n      const udpTypeV4 = 'udp4';\n      const udpTypeV6 = 'udp6';\n      const udpType = this.addresses[j].family === 6 ? udpTypeV6 : udpTypeV4;\n      let socket;\n\n      if (udpType === udpTypeV4) {\n        if (!this.socketV4) {\n          this.socketV4 = createDgramSocket(udpTypeV4, onError, onMessage);\n        }\n\n        socket = this.socketV4;\n      } else {\n        if (!this.socketV6) {\n          this.socketV6 = createDgramSocket(udpTypeV6, onError, onMessage);\n        }\n\n        socket = this.socketV6;\n      }\n\n      socket.send(this.request, 0, this.request.length, this.port, this.addresses[j].address);\n    }\n\n    this.onError = onError;\n    this.onMessage = onMessage;\n  }\n\n  cancel() {\n    this.clearSockets();\n  }\n\n}\n\nexports.ParallelSendStrategy = ParallelSendStrategy;\n\nclass Sender {\n  constructor(host, port, request) {\n    this.host = host;\n    this.port = port;\n    this.request = request;\n    this.parallelSendStrategy = null;\n  }\n\n  execute(cb) {\n    if (_net.default.isIP(this.host)) {\n      this.executeForIP(cb);\n    } else {\n      this.executeForHostname(cb);\n    }\n  }\n\n  executeForIP(cb) {\n    this.executeForAddresses([{\n      address: this.host,\n      family: _net.default.isIPv6(this.host) ? 6 : 4\n    }], cb);\n  } // Wrapper for stubbing. Sinon does not have support for stubbing module functions.\n\n\n  invokeLookupAll(host, cb) {\n    _dns.default.lookup(punycode.toASCII(host), {\n      all: true\n    }, cb);\n  }\n\n  executeForHostname(cb) {\n    this.invokeLookupAll(this.host, (err, addresses) => {\n      if (err) {\n        return cb(err);\n      }\n\n      this.executeForAddresses(addresses, cb);\n    });\n  } // Wrapper for stubbing creation of Strategy object. Sinon support for constructors\n  // seems limited.\n\n\n  createParallelSendStrategy(addresses, port, request) {\n    return new ParallelSendStrategy(addresses, port, request);\n  }\n\n  executeForAddresses(addresses, cb) {\n    this.parallelSendStrategy = this.createParallelSendStrategy(addresses, this.port, this.request);\n    this.parallelSendStrategy.send(cb);\n  }\n\n  cancel() {\n    if (this.parallelSendStrategy) {\n      this.parallelSendStrategy.cancel();\n    }\n  }\n\n}\n\nexports.Sender = Sender;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/tedious/lib/sender.js"],"names":["Object","defineProperty","exports","value","Sender","ParallelSendStrategy","_dgram","_interopRequireDefault","require","_dns","_net","punycode","_interopRequireWildcard","_getRequireWildcardCache","WeakMap","cache","obj","__esModule","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","default","constructor","addresses","port","request","socketV4","socketV6","onError","onMessage","clearSockets","clearSocket","socket","removeListener","close","send","cb","errorCount","err","length","message","createDgramSocket","udpType","createSocket","on","j","udpTypeV4","udpTypeV6","family","address","cancel","host","parallelSendStrategy","execute","isIP","executeForIP","executeForHostname","executeForAddresses","isIPv6","invokeLookupAll","lookup","toASCII","all","createParallelSendStrategy"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sender = exports.ParallelSendStrategy = void 0;\n\nvar _dgram = _interopRequireDefault(require(\"dgram\"));\n\nvar _dns = _interopRequireDefault(require(\"dns\"));\n\nvar _net = _interopRequireDefault(require(\"net\"));\n\nvar punycode = _interopRequireWildcard(require(\"punycode\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass ParallelSendStrategy {\n  constructor(addresses, port, request) {\n    this.addresses = addresses;\n    this.port = port;\n    this.request = request;\n    this.socketV4 = null;\n    this.socketV6 = null;\n    this.onError = null;\n    this.onMessage = null;\n  }\n\n  clearSockets() {\n    const clearSocket = (socket, onError, onMessage) => {\n      socket.removeListener('error', onError);\n      socket.removeListener('message', onMessage);\n      socket.close();\n    };\n\n    if (this.socketV4) {\n      clearSocket(this.socketV4, this.onError, this.onMessage);\n      this.socketV4 = null;\n    }\n\n    if (this.socketV6) {\n      clearSocket(this.socketV6, this.onError, this.onMessage);\n      this.socketV6 = null;\n    }\n  }\n\n  send(cb) {\n    let errorCount = 0;\n\n    const onError = err => {\n      errorCount++;\n\n      if (errorCount === this.addresses.length) {\n        this.clearSockets();\n        cb(err);\n      }\n    };\n\n    const onMessage = message => {\n      this.clearSockets();\n      cb(null, message);\n    };\n\n    const createDgramSocket = (udpType, onError, onMessage) => {\n      const socket = _dgram.default.createSocket(udpType);\n\n      socket.on('error', onError);\n      socket.on('message', onMessage);\n      return socket;\n    };\n\n    for (let j = 0; j < this.addresses.length; j++) {\n      const udpTypeV4 = 'udp4';\n      const udpTypeV6 = 'udp6';\n      const udpType = this.addresses[j].family === 6 ? udpTypeV6 : udpTypeV4;\n      let socket;\n\n      if (udpType === udpTypeV4) {\n        if (!this.socketV4) {\n          this.socketV4 = createDgramSocket(udpTypeV4, onError, onMessage);\n        }\n\n        socket = this.socketV4;\n      } else {\n        if (!this.socketV6) {\n          this.socketV6 = createDgramSocket(udpTypeV6, onError, onMessage);\n        }\n\n        socket = this.socketV6;\n      }\n\n      socket.send(this.request, 0, this.request.length, this.port, this.addresses[j].address);\n    }\n\n    this.onError = onError;\n    this.onMessage = onMessage;\n  }\n\n  cancel() {\n    this.clearSockets();\n  }\n\n}\n\nexports.ParallelSendStrategy = ParallelSendStrategy;\n\nclass Sender {\n  constructor(host, port, request) {\n    this.host = host;\n    this.port = port;\n    this.request = request;\n    this.parallelSendStrategy = null;\n  }\n\n  execute(cb) {\n    if (_net.default.isIP(this.host)) {\n      this.executeForIP(cb);\n    } else {\n      this.executeForHostname(cb);\n    }\n  }\n\n  executeForIP(cb) {\n    this.executeForAddresses([{\n      address: this.host,\n      family: _net.default.isIPv6(this.host) ? 6 : 4\n    }], cb);\n  } // Wrapper for stubbing. Sinon does not have support for stubbing module functions.\n\n\n  invokeLookupAll(host, cb) {\n    _dns.default.lookup(punycode.toASCII(host), {\n      all: true\n    }, cb);\n  }\n\n  executeForHostname(cb) {\n    this.invokeLookupAll(this.host, (err, addresses) => {\n      if (err) {\n        return cb(err);\n      }\n\n      this.executeForAddresses(addresses, cb);\n    });\n  } // Wrapper for stubbing creation of Strategy object. Sinon support for constructors\n  // seems limited.\n\n\n  createParallelSendStrategy(addresses, port, request) {\n    return new ParallelSendStrategy(addresses, port, request);\n  }\n\n  executeForAddresses(addresses, cb) {\n    this.parallelSendStrategy = this.createParallelSendStrategy(addresses, this.port, this.request);\n    this.parallelSendStrategy.send(cb);\n  }\n\n  cancel() {\n    if (this.parallelSendStrategy) {\n      this.parallelSendStrategy.cancel();\n    }\n  }\n\n}\n\nexports.Sender = Sender;"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _bl = _interopRequireDefault(require(\"bl\"));\n\nvar _readableStream = require(\"readable-stream\");\n\nvar _message = _interopRequireDefault(require(\"./message\"));\n\nvar _packet = require(\"./packet\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n  IncomingMessageStream\n  Transform received TDS data into individual IncomingMessage streams.\n*/\n\n\nclass IncomingMessageStream extends _readableStream.Transform {\n  constructor(debug) {\n    super({\n      readableObjectMode: true\n    });\n    this.debug = debug;\n    this.currentMessage = undefined;\n    this.bl = new _bl.default();\n  }\n\n  pause() {\n    super.pause();\n\n    if (this.currentMessage) {\n      this.currentMessage.pause();\n    }\n\n    return this;\n  }\n\n  resume() {\n    super.resume();\n\n    if (this.currentMessage) {\n      this.currentMessage.resume();\n    }\n\n    return this;\n  }\n\n  processBufferedData(callback) {\n    // The packet header is always 8 bytes of length.\n    while (this.bl.length >= _packet.HEADER_LENGTH) {\n      // Get the full packet length\n      const length = this.bl.readUInt16BE(2);\n\n      if (this.bl.length >= length) {\n        const data = this.bl.slice(0, length);\n        this.bl.consume(length); // TODO: Get rid of creating `Packet` instances here.\n\n        const packet = new _packet.Packet(data);\n        this.debug.packet('Received', packet);\n        this.debug.data(packet);\n        let message = this.currentMessage;\n\n        if (message === undefined) {\n          this.currentMessage = message = new _message.default({\n            type: packet.type(),\n            resetConnection: false\n          });\n          this.push(message);\n        }\n\n        if (packet.isLast()) {\n          // Wait until the current message was fully processed before we\n          // continue processing any remaining messages.\n          message.once('end', () => {\n            this.currentMessage = undefined;\n            this.processBufferedData(callback);\n          });\n          message.end(packet.data());\n          return;\n        } else if (!message.write(packet.data())) {\n          // If too much data is buffering up in the\n          // current message, wait for it to drain.\n          message.once('drain', () => {\n            this.processBufferedData(callback);\n          });\n          return;\n        }\n      } else {\n        break;\n      }\n    } // Not enough data to read the next packet. Stop here and wait for\n    // the next call to `_transform`.\n\n\n    callback();\n  }\n\n  _transform(chunk, _encoding, callback) {\n    this.bl.append(chunk);\n    this.processBufferedData(callback);\n  }\n\n}\n\nvar _default = IncomingMessageStream;\nexports.default = _default;\nmodule.exports = IncomingMessageStream;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/tedious/lib/incoming-message-stream.js"],"names":["Object","defineProperty","exports","value","default","_bl","_interopRequireDefault","require","_readableStream","_message","_packet","obj","__esModule","IncomingMessageStream","Transform","constructor","debug","readableObjectMode","currentMessage","undefined","bl","pause","resume","processBufferedData","callback","length","HEADER_LENGTH","readUInt16BE","data","slice","consume","packet","Packet","message","type","resetConnection","push","isLast","once","end","write","_transform","chunk","_encoding","append","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _bl = _interopRequireDefault(require(\"bl\"));\n\nvar _readableStream = require(\"readable-stream\");\n\nvar _message = _interopRequireDefault(require(\"./message\"));\n\nvar _packet = require(\"./packet\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n  IncomingMessageStream\n  Transform received TDS data into individual IncomingMessage streams.\n*/\nclass IncomingMessageStream extends _readableStream.Transform {\n  constructor(debug) {\n    super({\n      readableObjectMode: true\n    });\n    this.debug = debug;\n    this.currentMessage = undefined;\n    this.bl = new _bl.default();\n  }\n\n  pause() {\n    super.pause();\n\n    if (this.currentMessage) {\n      this.currentMessage.pause();\n    }\n\n    return this;\n  }\n\n  resume() {\n    super.resume();\n\n    if (this.currentMessage) {\n      this.currentMessage.resume();\n    }\n\n    return this;\n  }\n\n  processBufferedData(callback) {\n    // The packet header is always 8 bytes of length.\n    while (this.bl.length >= _packet.HEADER_LENGTH) {\n      // Get the full packet length\n      const length = this.bl.readUInt16BE(2);\n\n      if (this.bl.length >= length) {\n        const data = this.bl.slice(0, length);\n        this.bl.consume(length); // TODO: Get rid of creating `Packet` instances here.\n\n        const packet = new _packet.Packet(data);\n        this.debug.packet('Received', packet);\n        this.debug.data(packet);\n        let message = this.currentMessage;\n\n        if (message === undefined) {\n          this.currentMessage = message = new _message.default({\n            type: packet.type(),\n            resetConnection: false\n          });\n          this.push(message);\n        }\n\n        if (packet.isLast()) {\n          // Wait until the current message was fully processed before we\n          // continue processing any remaining messages.\n          message.once('end', () => {\n            this.currentMessage = undefined;\n            this.processBufferedData(callback);\n          });\n          message.end(packet.data());\n          return;\n        } else if (!message.write(packet.data())) {\n          // If too much data is buffering up in the\n          // current message, wait for it to drain.\n          message.once('drain', () => {\n            this.processBufferedData(callback);\n          });\n          return;\n        }\n      } else {\n        break;\n      }\n    } // Not enough data to read the next packet. Stop here and wait for\n    // the next call to `_transform`.\n\n\n    callback();\n  }\n\n  _transform(chunk, _encoding, callback) {\n    this.bl.append(chunk);\n    this.processBufferedData(callback);\n  }\n\n}\n\nvar _default = IncomingMessageStream;\nexports.default = _default;\nmodule.exports = IncomingMessageStream;"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _metadataParser = _interopRequireDefault(require(\"../metadata-parser\"));\n\nvar _token = require(\"./token\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction readTableName(parser, options, metadata, callback) {\n  if (metadata.type.hasTableName) {\n    if (options.tdsVersion >= '7_2') {\n      parser.readUInt8(numberOfTableNameParts => {\n        const tableName = [];\n        let i = 0;\n\n        function next(done) {\n          if (numberOfTableNameParts === i) {\n            return done();\n          }\n\n          parser.readUsVarChar(part => {\n            tableName.push(part);\n            i++;\n            next(done);\n          });\n        }\n\n        next(() => {\n          callback(tableName);\n        });\n      });\n    } else {\n      parser.readUsVarChar(callback);\n    }\n  } else {\n    callback(undefined);\n  }\n}\n\nfunction readColumnName(parser, options, index, metadata, callback) {\n  parser.readBVarChar(colName => {\n    if (options.columnNameReplacer) {\n      callback(options.columnNameReplacer(colName, index, metadata));\n    } else if (options.camelCaseColumns) {\n      callback(colName.replace(/^[A-Z]/, function (s) {\n        return s.toLowerCase();\n      }));\n    } else {\n      callback(colName);\n    }\n  });\n}\n\nfunction readColumn(parser, options, index, callback) {\n  (0, _metadataParser.default)(parser, options, metadata => {\n    readTableName(parser, options, metadata, tableName => {\n      readColumnName(parser, options, index, metadata, colName => {\n        callback({\n          userType: metadata.userType,\n          flags: metadata.flags,\n          type: metadata.type,\n          collation: metadata.collation,\n          precision: metadata.precision,\n          scale: metadata.scale,\n          udtInfo: metadata.udtInfo,\n          dataLength: metadata.dataLength,\n          schema: metadata.schema,\n          colName: colName,\n          tableName: tableName\n        });\n      });\n    });\n  });\n}\n\nfunction colMetadataParser(parser, _colMetadata, options, callback) {\n  parser.readUInt16LE(columnCount => {\n    const columns = [];\n    let i = 0;\n\n    function next(done) {\n      if (i === columnCount) {\n        return done();\n      }\n\n      readColumn(parser, options, i, column => {\n        columns.push(column);\n        i++;\n        next(done);\n      });\n    }\n\n    next(() => {\n      callback(new _token.ColMetadataToken(columns));\n    });\n  });\n}\n\nvar _default = colMetadataParser;\nexports.default = _default;\nmodule.exports = colMetadataParser;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/tedious/lib/token/colmetadata-token-parser.js"],"names":["Object","defineProperty","exports","value","default","_metadataParser","_interopRequireDefault","require","_token","obj","__esModule","readTableName","parser","options","metadata","callback","type","hasTableName","tdsVersion","readUInt8","numberOfTableNameParts","tableName","i","next","done","readUsVarChar","part","push","undefined","readColumnName","index","readBVarChar","colName","columnNameReplacer","camelCaseColumns","replace","s","toLowerCase","readColumn","userType","flags","collation","precision","scale","udtInfo","dataLength","schema","colMetadataParser","_colMetadata","readUInt16LE","columnCount","columns","column","ColMetadataToken","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _metadataParser = _interopRequireDefault(require(\"../metadata-parser\"));\n\nvar _token = require(\"./token\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction readTableName(parser, options, metadata, callback) {\n  if (metadata.type.hasTableName) {\n    if (options.tdsVersion >= '7_2') {\n      parser.readUInt8(numberOfTableNameParts => {\n        const tableName = [];\n        let i = 0;\n\n        function next(done) {\n          if (numberOfTableNameParts === i) {\n            return done();\n          }\n\n          parser.readUsVarChar(part => {\n            tableName.push(part);\n            i++;\n            next(done);\n          });\n        }\n\n        next(() => {\n          callback(tableName);\n        });\n      });\n    } else {\n      parser.readUsVarChar(callback);\n    }\n  } else {\n    callback(undefined);\n  }\n}\n\nfunction readColumnName(parser, options, index, metadata, callback) {\n  parser.readBVarChar(colName => {\n    if (options.columnNameReplacer) {\n      callback(options.columnNameReplacer(colName, index, metadata));\n    } else if (options.camelCaseColumns) {\n      callback(colName.replace(/^[A-Z]/, function (s) {\n        return s.toLowerCase();\n      }));\n    } else {\n      callback(colName);\n    }\n  });\n}\n\nfunction readColumn(parser, options, index, callback) {\n  (0, _metadataParser.default)(parser, options, metadata => {\n    readTableName(parser, options, metadata, tableName => {\n      readColumnName(parser, options, index, metadata, colName => {\n        callback({\n          userType: metadata.userType,\n          flags: metadata.flags,\n          type: metadata.type,\n          collation: metadata.collation,\n          precision: metadata.precision,\n          scale: metadata.scale,\n          udtInfo: metadata.udtInfo,\n          dataLength: metadata.dataLength,\n          schema: metadata.schema,\n          colName: colName,\n          tableName: tableName\n        });\n      });\n    });\n  });\n}\n\nfunction colMetadataParser(parser, _colMetadata, options, callback) {\n  parser.readUInt16LE(columnCount => {\n    const columns = [];\n    let i = 0;\n\n    function next(done) {\n      if (i === columnCount) {\n        return done();\n      }\n\n      readColumn(parser, options, i, column => {\n        columns.push(column);\n        i++;\n        next(done);\n      });\n    }\n\n    next(() => {\n      callback(new _token.ColMetadataToken(columns));\n    });\n  });\n}\n\nvar _default = colMetadataParser;\nexports.default = _default;\nmodule.exports = colMetadataParser;"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict'; // TODO: rename to OK packet\n// https://dev.mysql.com/doc/internals/en/packet-OK_Packet.html\n\nconst Packet = require('./packet.js');\n\nconst ClientConstants = require('../constants/client.js');\n\nconst ServerSatusFlags = require('../constants/server_status.js');\n\nconst EncodingToCharset = require('../constants/encoding_charset.js');\n\nclass ResultSetHeader {\n  constructor(packet, connection) {\n    const bigNumberStrings = connection.config.bigNumberStrings;\n    const encoding = connection.serverEncoding;\n    const flags = connection._handshakePacket.capabilityFlags;\n\n    const isSet = function (flag) {\n      return flags & ClientConstants[flag];\n    };\n\n    if (packet.buffer[packet.offset] !== 0) {\n      this.fieldCount = packet.readLengthCodedNumber();\n\n      if (this.fieldCount === null) {\n        this.infileName = packet.readString(undefined, encoding);\n      }\n\n      return;\n    }\n\n    this.fieldCount = packet.readInt8(); // skip OK byte\n\n    this.affectedRows = packet.readLengthCodedNumber(bigNumberStrings);\n    this.insertId = packet.readLengthCodedNumberSigned(bigNumberStrings);\n    this.info = '';\n\n    if (isSet('PROTOCOL_41')) {\n      this.serverStatus = packet.readInt16();\n      this.warningStatus = packet.readInt16();\n    } else if (isSet('TRANSACTIONS')) {\n      this.serverStatus = packet.readInt16();\n    }\n\n    let stateChanges = null;\n\n    if (isSet('SESSION_TRACK') && packet.offset < packet.end) {\n      const sessionInfoTypes = require('../constants/session_track.js');\n\n      this.info = packet.readLengthCodedString(encoding);\n\n      if (this.serverStatus && ServerSatusFlags.SERVER_SESSION_STATE_CHANGED) {\n        // session change info record - see\n        // https://dev.mysql.com/doc/internals/en/packet-OK_Packet.html#cs-sect-packet-ok-sessioninfo\n        let len = packet.offset < packet.end ? packet.readLengthCodedNumber() : 0;\n        const end = packet.offset + len;\n        let type, key, stateEnd;\n\n        if (len > 0) {\n          stateChanges = {\n            systemVariables: {},\n            schema: null,\n            trackStateChange: null\n          };\n        }\n\n        while (packet.offset < end) {\n          type = packet.readInt8();\n          len = packet.readLengthCodedNumber();\n          stateEnd = packet.offset + len;\n\n          if (type === sessionInfoTypes.SYSTEM_VARIABLES) {\n            key = packet.readLengthCodedString(encoding);\n            const val = packet.readLengthCodedString(encoding);\n            stateChanges.systemVariables[key] = val;\n\n            if (key === 'character_set_client') {\n              const charsetNumber = EncodingToCharset[val];\n              connection.config.charsetNumber = charsetNumber;\n            }\n          } else if (type === sessionInfoTypes.SCHEMA) {\n            key = packet.readLengthCodedString(encoding);\n            stateChanges.schema = key;\n          } else if (type === sessionInfoTypes.STATE_CHANGE) {\n            stateChanges.trackStateChange = packet.readLengthCodedString(encoding);\n          } else {// unsupported session track type. For now just ignore\n          }\n\n          packet.offset = stateEnd;\n        }\n      }\n    } else {\n      this.info = packet.readString(undefined, encoding);\n    }\n\n    if (stateChanges) {\n      this.stateChanges = stateChanges;\n    }\n\n    const m = this.info.match(/\\schanged:\\s*(\\d+)/i);\n\n    if (m !== null) {\n      this.changedRows = parseInt(m[1], 10);\n    }\n  } // TODO: should be consistent instance member, but it's just easier here to have just function\n\n\n  static toPacket(fieldCount, insertId) {\n    let length = 4 + Packet.lengthCodedNumberLength(fieldCount);\n\n    if (typeof insertId !== 'undefined') {\n      length += Packet.lengthCodedNumberLength(insertId);\n    }\n\n    const buffer = Buffer.allocUnsafe(length);\n    const packet = new Packet(0, buffer, 0, length);\n    packet.offset = 4;\n    packet.writeLengthCodedNumber(fieldCount);\n\n    if (typeof insertId !== 'undefined') {\n      packet.writeLengthCodedNumber(insertId);\n    }\n\n    return packet;\n  }\n\n}\n\nmodule.exports = ResultSetHeader;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/mysql2/lib/packets/resultset_header.js"],"names":["Packet","require","ClientConstants","ServerSatusFlags","EncodingToCharset","ResultSetHeader","constructor","packet","connection","bigNumberStrings","config","encoding","serverEncoding","flags","_handshakePacket","capabilityFlags","isSet","flag","buffer","offset","fieldCount","readLengthCodedNumber","infileName","readString","undefined","readInt8","affectedRows","insertId","readLengthCodedNumberSigned","info","serverStatus","readInt16","warningStatus","stateChanges","end","sessionInfoTypes","readLengthCodedString","SERVER_SESSION_STATE_CHANGED","len","type","key","stateEnd","systemVariables","schema","trackStateChange","SYSTEM_VARIABLES","val","charsetNumber","SCHEMA","STATE_CHANGE","m","match","changedRows","parseInt","toPacket","length","lengthCodedNumberLength","Buffer","allocUnsafe","writeLengthCodedNumber","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n// TODO: rename to OK packet\n// https://dev.mysql.com/doc/internals/en/packet-OK_Packet.html\n\nconst Packet = require('./packet.js');\nconst ClientConstants = require('../constants/client.js');\nconst ServerSatusFlags = require('../constants/server_status.js');\n\nconst EncodingToCharset = require('../constants/encoding_charset.js');\n\nclass ResultSetHeader {\n  constructor(packet, connection) {\n    const bigNumberStrings = connection.config.bigNumberStrings;\n    const encoding = connection.serverEncoding;\n    const flags = connection._handshakePacket.capabilityFlags;\n    const isSet = function(flag) {\n      return flags & ClientConstants[flag];\n    };\n    if (packet.buffer[packet.offset] !== 0) {\n      this.fieldCount = packet.readLengthCodedNumber();\n      if (this.fieldCount === null) {\n        this.infileName = packet.readString(undefined, encoding);\n      }\n      return;\n    }\n    this.fieldCount = packet.readInt8(); // skip OK byte\n    this.affectedRows = packet.readLengthCodedNumber(bigNumberStrings);\n    this.insertId = packet.readLengthCodedNumberSigned(bigNumberStrings);\n    this.info = '';\n    if (isSet('PROTOCOL_41')) {\n      this.serverStatus = packet.readInt16();\n      this.warningStatus = packet.readInt16();\n    } else if (isSet('TRANSACTIONS')) {\n      this.serverStatus = packet.readInt16();\n    }\n    let stateChanges = null;\n    if (isSet('SESSION_TRACK') && packet.offset < packet.end) {\n      const sessionInfoTypes = require('../constants/session_track.js');\n      this.info = packet.readLengthCodedString(encoding);\n\n      if (this.serverStatus && ServerSatusFlags.SERVER_SESSION_STATE_CHANGED) {\n        // session change info record - see\n        // https://dev.mysql.com/doc/internals/en/packet-OK_Packet.html#cs-sect-packet-ok-sessioninfo\n        let len =\n          packet.offset < packet.end ? packet.readLengthCodedNumber() : 0;\n        const end = packet.offset + len;\n        let type, key, stateEnd;\n        if (len > 0) {\n          stateChanges = {\n            systemVariables: {},\n            schema: null,\n            trackStateChange: null\n          };\n        }\n        while (packet.offset < end) {\n          type = packet.readInt8();\n          len = packet.readLengthCodedNumber();\n          stateEnd = packet.offset + len;\n          if (type === sessionInfoTypes.SYSTEM_VARIABLES) {\n            key = packet.readLengthCodedString(encoding);\n            const val = packet.readLengthCodedString(encoding);\n            stateChanges.systemVariables[key] = val;\n            if (key === 'character_set_client') {\n              const charsetNumber = EncodingToCharset[val];\n              connection.config.charsetNumber = charsetNumber;\n            }\n          } else if (type === sessionInfoTypes.SCHEMA) {\n            key = packet.readLengthCodedString(encoding);\n            stateChanges.schema = key;\n          } else if (type === sessionInfoTypes.STATE_CHANGE) {\n            stateChanges.trackStateChange = packet.readLengthCodedString(\n              encoding\n            );\n          } else {\n            // unsupported session track type. For now just ignore\n          }\n          packet.offset = stateEnd;\n        }\n      }\n    } else {\n      this.info = packet.readString(undefined, encoding);\n    }\n    if (stateChanges) {\n      this.stateChanges = stateChanges;\n    }\n    const m = this.info.match(/\\schanged:\\s*(\\d+)/i);\n    if (m !== null) {\n      this.changedRows = parseInt(m[1], 10);\n    }\n  }\n\n  // TODO: should be consistent instance member, but it's just easier here to have just function\n  static toPacket(fieldCount, insertId) {\n    let length = 4 + Packet.lengthCodedNumberLength(fieldCount);\n    if (typeof insertId !== 'undefined') {\n      length += Packet.lengthCodedNumberLength(insertId);\n    }\n    const buffer = Buffer.allocUnsafe(length);\n    const packet = new Packet(0, buffer, 0, length);\n    packet.offset = 4;\n    packet.writeLengthCodedNumber(fieldCount);\n    if (typeof insertId !== 'undefined') {\n      packet.writeLengthCodedNumber(insertId);\n    }\n    return packet;\n  }\n}\n\nmodule.exports = ResultSetHeader;\n"]},"metadata":{},"sourceType":"script"}
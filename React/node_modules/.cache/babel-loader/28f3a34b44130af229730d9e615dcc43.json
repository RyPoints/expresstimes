{"ast":null,"code":"'use strict';\n\nconst Utils = require('../../utils');\n\nconst util = require('util');\n\nconst DataTypes = require('../../data-types');\n\nconst AbstractQueryGenerator = require('../abstract/query-generator');\n\nconst semver = require('semver');\n\nconst _ = require('lodash');\n\nconst QueryGenerator = {\n  __proto__: AbstractQueryGenerator,\n  options: {},\n  dialect: 'postgres',\n\n  setSearchPath(searchPath) {\n    return `SET search_path to ${searchPath};`;\n  },\n\n  createSchema(schema) {\n    const databaseVersion = _.get(this, 'sequelize.options.databaseVersion', 0);\n\n    if (databaseVersion && semver.gte(databaseVersion, '9.2.0')) {\n      return `CREATE SCHEMA IF NOT EXISTS ${schema};`;\n    }\n\n    return `CREATE SCHEMA ${schema};`;\n  },\n\n  dropSchema(schema) {\n    return `DROP SCHEMA IF EXISTS ${schema} CASCADE;`;\n  },\n\n  showSchemasQuery() {\n    return \"SELECT schema_name FROM information_schema.schemata WHERE schema_name <> 'information_schema' AND schema_name != 'public' AND schema_name !~ E'^pg_';\";\n  },\n\n  versionQuery() {\n    return 'SHOW SERVER_VERSION';\n  },\n\n  createTableQuery(tableName, attributes, options) {\n    options = _.extend({}, options || {}); //Postgres 9.0 does not support CREATE TABLE IF NOT EXISTS, 9.1 and above do\n\n    const databaseVersion = _.get(this, 'sequelize.options.databaseVersion', 0);\n\n    const attrStr = [];\n    let comments = '';\n\n    if (options.comment && _.isString(options.comment)) {\n      comments += '; COMMENT ON TABLE <%= table %> IS ' + this.escape(options.comment);\n    }\n\n    for (const attr in attributes) {\n      const i = attributes[attr].indexOf('COMMENT');\n\n      if (i !== -1) {\n        // Move comment to a separate query\n        comments += '; ' + attributes[attr].substring(i);\n        attributes[attr] = attributes[attr].substring(0, i);\n      }\n\n      const dataType = this.dataTypeMapping(tableName, attr, attributes[attr]);\n      attrStr.push(this.quoteIdentifier(attr) + ' ' + dataType);\n    }\n\n    const values = {\n      table: this.quoteTable(tableName),\n      attributes: attrStr.join(', '),\n      comments: _.template(comments, this._templateSettings)({\n        table: this.quoteTable(tableName)\n      })\n    };\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, columns => {\n        if (columns.customIndex) {\n          values.attributes += `, UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`;\n        }\n      });\n    }\n\n    const pks = _.reduce(attributes, (acc, attribute, key) => {\n      if (_.includes(attribute, 'PRIMARY KEY')) {\n        acc.push(this.quoteIdentifier(key));\n      }\n\n      return acc;\n    }, []).join(',');\n\n    if (pks.length > 0) {\n      values.attributes += `, PRIMARY KEY (${pks})`;\n    }\n\n    return `CREATE TABLE ${databaseVersion === 0 || semver.gte(databaseVersion, '9.1.0') ? 'IF NOT EXISTS ' : ''}${values.table} (${values.attributes})${values.comments};`;\n  },\n\n  dropTableQuery(tableName, options) {\n    options = options || {};\n    return `DROP TABLE IF EXISTS ${this.quoteTable(tableName)}${options.cascade ? ' CASCADE' : ''};`;\n  },\n\n  showTablesQuery() {\n    return \"SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type LIKE '%TABLE' AND table_name != 'spatial_ref_sys';\";\n  },\n\n  describeTableQuery(tableName, schema) {\n    if (!schema) {\n      schema = 'public';\n    }\n\n    return 'SELECT pk.constraint_type as \"Constraint\", c.column_name as \"Field\", ' + 'c.column_default as \"Default\", c.is_nullable as \"Null\", ' + '(CASE WHEN c.udt_name = \\'hstore\\' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN \\'(\\' || c.character_maximum_length || \\')\\' ELSE \\'\\' END) as \"Type\", ' + '(SELECT array_agg(e.enumlabel) ' + 'FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid ' + 'WHERE t.typname=c.udt_name) AS \"special\" ' + 'FROM information_schema.columns c ' + 'LEFT JOIN (SELECT tc.table_schema, tc.table_name, ' + 'cu.column_name, tc.constraint_type ' + 'FROM information_schema.TABLE_CONSTRAINTS tc ' + 'JOIN information_schema.KEY_COLUMN_USAGE  cu ' + 'ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name ' + 'and tc.constraint_name=cu.constraint_name ' + 'and tc.constraint_type=\\'PRIMARY KEY\\') pk ' + 'ON pk.table_schema=c.table_schema ' + 'AND pk.table_name=c.table_name ' + 'AND pk.column_name=c.column_name ' + `WHERE c.table_name = ${this.escape(tableName)} AND c.table_schema = ${this.escape(schema)} `;\n  },\n\n  /**\n   * Check whether the statmement is json function or simple path\n   *\n   * @param   {String}  stmt  The statement to validate\n   * @returns {Boolean}       true if the given statement is json function\n   * @throws  {Error}         throw if the statement looks like json function but has invalid token\n   */\n  _checkValidJsonStatement(stmt) {\n    if (!_.isString(stmt)) {\n      return false;\n    } // https://www.postgresql.org/docs/current/static/functions-json.html\n\n\n    const jsonFunctionRegex = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\n    const jsonOperatorRegex = /^\\s*(->>?|#>>?|@>|<@|\\?[|&]?|\\|{2}|#-)/i;\n    const tokenCaptureRegex = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = jsonFunctionRegex.exec(string);\n\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf('(');\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const operatorMatches = jsonOperatorRegex.exec(string);\n\n      if (operatorMatches) {\n        currentIndex += operatorMatches[0].length;\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const tokenMatches = tokenCaptureRegex.exec(string);\n\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n\n        if (capturedToken === '(') {\n          openingBrackets++;\n        } else if (capturedToken === ')') {\n          closingBrackets++;\n        } else if (capturedToken === ';') {\n          hasInvalidToken = true;\n          break;\n        }\n\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n\n      break;\n    } // Check invalid json statement\n\n\n    hasInvalidToken |= openingBrackets !== closingBrackets;\n\n    if (hasJsonFunction && hasInvalidToken) {\n      throw new Error('Invalid json statement: ' + stmt);\n    } // return true if the statement has valid json function\n\n\n    return hasJsonFunction;\n  },\n\n  /**\n   * Generates an SQL query that extract JSON property of given path.\n   *\n   * @param   {String}               column  The JSON column\n   * @param   {String|Array<String>} [path]  The path to extract (optional)\n   * @returns {String}                       The generated sql query\n   * @private\n   */\n  jsonPathExtractionQuery(column, path) {\n    const paths = _.toPath(path);\n\n    const pathStr = this.escape(`{${paths.join(',')}}`);\n    const quotedColumn = this.isIdentifierQuoted(column) ? column : this.quoteIdentifier(column);\n    return `(${quotedColumn}#>>${pathStr})`;\n  },\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      // Parse nested object\n      if (smth.conditions) {\n        const conditions = _.map(this.parseConditionObject(smth.conditions), condition => `${this.jsonPathExtractionQuery(_.first(condition.path), _.tail(condition.path))} = '${condition.value}'`);\n\n        return conditions.join(' AND ');\n      } else if (smth.path) {\n        let str; // Allow specifying conditions using the postgres json syntax\n\n        if (this._checkValidJsonStatement(smth.path)) {\n          str = smth.path;\n        } else {\n          // Also support json property accessors\n          const paths = _.toPath(smth.path);\n\n          const column = paths.shift();\n          str = this.jsonPathExtractionQuery(column, paths);\n        }\n\n        if (smth.value) {\n          str += util.format(' = %s', this.escape(smth.value));\n        }\n\n        return str;\n      }\n    }\n\n    return AbstractQueryGenerator.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);\n  },\n\n  addColumnQuery(table, key, dataType) {\n    const dbDataType = this.attributeToSQL(dataType, {\n      context: 'addColumn'\n    });\n    const definition = this.dataTypeMapping(table, key, dbDataType);\n    const quotedKey = this.quoteIdentifier(key);\n    const quotedTable = this.quoteTable(this.extractTableDetails(table));\n    let query = `ALTER TABLE ${quotedTable} ADD COLUMN ${quotedKey} ${definition};`;\n\n    if (dataType.type && dataType.type instanceof DataTypes.ENUM || dataType instanceof DataTypes.ENUM) {\n      query = this.pgEnum(table, key, dataType) + query;\n    }\n\n    return query;\n  },\n\n  removeColumnQuery(tableName, attributeName) {\n    const quotedTableName = this.quoteTable(this.extractTableDetails(tableName));\n    const quotedAttributeName = this.quoteIdentifier(attributeName);\n    return `ALTER TABLE ${quotedTableName} DROP COLUMN ${quotedAttributeName};`;\n  },\n\n  changeColumnQuery(tableName, attributes) {\n    const query = 'ALTER TABLE <%= tableName %> ALTER COLUMN <%= query %>;';\n    const sql = [];\n\n    for (const attributeName in attributes) {\n      let definition = this.dataTypeMapping(tableName, attributeName, attributes[attributeName]);\n      let attrSql = '';\n\n      if (definition.indexOf('NOT NULL') > 0) {\n        attrSql += _.template(query, this._templateSettings)({\n          tableName: this.quoteTable(tableName),\n          query: this.quoteIdentifier(attributeName) + ' SET NOT NULL'\n        });\n        definition = definition.replace('NOT NULL', '').trim();\n      } else if (!definition.match(/REFERENCES/)) {\n        attrSql += _.template(query, this._templateSettings)({\n          tableName: this.quoteTable(tableName),\n          query: this.quoteIdentifier(attributeName) + ' DROP NOT NULL'\n        });\n      }\n\n      if (definition.indexOf('DEFAULT') > 0) {\n        attrSql += _.template(query, this._templateSettings)({\n          tableName: this.quoteTable(tableName),\n          query: this.quoteIdentifier(attributeName) + ' SET DEFAULT ' + definition.match(/DEFAULT ([^;]+)/)[1]\n        });\n        definition = definition.replace(/(DEFAULT[^;]+)/, '').trim();\n      } else if (!definition.match(/REFERENCES/)) {\n        attrSql += _.template(query, this._templateSettings)({\n          tableName: this.quoteTable(tableName),\n          query: this.quoteIdentifier(attributeName) + ' DROP DEFAULT'\n        });\n      }\n\n      if (attributes[attributeName].match(/^ENUM\\(/)) {\n        attrSql += this.pgEnum(tableName, attributeName, attributes[attributeName]);\n        definition = definition.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attributeName, {\n          schema: false\n        }));\n        definition += ' USING (' + this.quoteIdentifier(attributeName) + '::' + this.pgEnumName(tableName, attributeName) + ')';\n      }\n\n      if (definition.match(/UNIQUE;*$/)) {\n        definition = definition.replace(/UNIQUE;*$/, '');\n        attrSql += _.template(query.replace('ALTER COLUMN', ''), this._templateSettings)({\n          tableName: this.quoteTable(tableName),\n          query: 'ADD CONSTRAINT ' + this.quoteIdentifier(attributeName + '_unique_idx') + ' UNIQUE (' + this.quoteIdentifier(attributeName) + ')'\n        });\n      }\n\n      if (definition.match(/REFERENCES/)) {\n        definition = definition.replace(/.+?(?=REFERENCES)/, '');\n        attrSql += _.template(query.replace('ALTER COLUMN', ''), this._templateSettings)({\n          tableName: this.quoteTable(tableName),\n          query: 'ADD CONSTRAINT ' + this.quoteIdentifier(attributeName + '_foreign_idx') + ' FOREIGN KEY (' + this.quoteIdentifier(attributeName) + ') ' + definition\n        });\n      } else {\n        attrSql += _.template(query, this._templateSettings)({\n          tableName: this.quoteTable(tableName),\n          query: this.quoteIdentifier(attributeName) + ' TYPE ' + definition\n        });\n      }\n\n      sql.push(attrSql);\n    }\n\n    return sql.join('');\n  },\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const attrString = [];\n\n    for (const attributeName in attributes) {\n      attrString.push(_.template('<%= before %> TO <%= after %>', this._templateSettings)({\n        before: this.quoteIdentifier(attrBefore),\n        after: this.quoteIdentifier(attributeName)\n      }));\n    }\n\n    return `ALTER TABLE ${this.quoteTable(tableName)} RENAME COLUMN ${attrString.join(', ')};`;\n  },\n\n  fn(fnName, tableName, parameters, body, returns, language) {\n    fnName = fnName || 'testfunc';\n    language = language || 'plpgsql';\n    returns = returns ? `RETURNS ${returns}` : '';\n    parameters = parameters || '';\n    return `CREATE OR REPLACE FUNCTION pg_temp.${fnName}(${parameters}) ${returns} AS $func$ BEGIN ${body} END; $func$ LANGUAGE ${language}; SELECT * FROM pg_temp.${fnName}();`;\n  },\n\n  exceptionFn(fnName, tableName, parameters, main, then, when, returns, language) {\n    when = when || 'unique_violation';\n    const body = `${main} EXCEPTION WHEN ${when} THEN ${then};`;\n    return this.fn(fnName, tableName, parameters, body, returns, language);\n  },\n\n  upsertQuery(tableName, insertValues, updateValues, where, model, options) {\n    const primaryField = this.quoteIdentifier(model.primaryKeyField);\n    let insert = this.insertQuery(tableName, insertValues, model.rawAttributes, options);\n    let update = this.updateQuery(tableName, updateValues, where, options, model.rawAttributes);\n    insert = insert.replace('RETURNING *', `RETURNING ${primaryField} INTO primary_key`);\n    update = update.replace('RETURNING *', `RETURNING ${primaryField} INTO primary_key`);\n    return this.exceptionFn('sequelize_upsert', tableName, 'OUT created boolean, OUT primary_key text', `${insert} created := true;`, `${update}; created := false`);\n  },\n\n  deleteQuery(tableName, where, options, model) {\n    let query;\n    options = options || {};\n    tableName = this.quoteTable(tableName);\n\n    if (options.truncate === true) {\n      query = 'TRUNCATE ' + tableName;\n\n      if (options.restartIdentity) {\n        query += ' RESTART IDENTITY';\n      }\n\n      if (options.cascade) {\n        query += ' CASCADE';\n      }\n\n      return query;\n    }\n\n    if (_.isUndefined(options.limit)) {\n      options.limit = 1;\n    }\n\n    const replacements = {\n      table: tableName,\n      where: this.getWhereConditions(where, null, model, options),\n      limit: options.limit ? ' LIMIT ' + this.escape(options.limit) : ''\n    };\n\n    if (options.limit) {\n      if (!model) {\n        throw new Error('Cannot LIMIT delete without a model.');\n      }\n\n      const pks = _.map(_.values(model.primaryKeys), pk => this.quoteIdentifier(pk.field)).join(',');\n\n      replacements.primaryKeys = model.primaryKeyAttributes.length > 1 ? '(' + pks + ')' : pks;\n      replacements.primaryKeysSelection = pks;\n      query = 'DELETE FROM <%= table %> WHERE <%= primaryKeys %> IN (SELECT <%= primaryKeysSelection %> FROM <%= table %><%= where %><%= limit %>)';\n    } else {\n      query = 'DELETE FROM <%= table %><%= where %>';\n    }\n\n    if (replacements.where) {\n      replacements.where = ' WHERE ' + replacements.where;\n    }\n\n    return _.template(query, this._templateSettings)(replacements);\n  },\n\n  showIndexesQuery(tableName) {\n    let schemaJoin = '';\n    let schemaWhere = '';\n\n    if (!_.isString(tableName)) {\n      schemaJoin = ', pg_namespace s';\n      schemaWhere = ` AND s.oid = t.relnamespace AND s.nspname = '${tableName.schema}'`;\n      tableName = tableName.tableName;\n    } // This is ARCANE!\n\n\n    return 'SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, ' + 'array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) ' + `AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a${schemaJoin} ` + 'WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND ' + `t.relkind = 'r' and t.relname = '${tableName}'${schemaWhere} ` + 'GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;';\n  },\n\n  showConstraintsQuery(tableName) {\n    //Postgres converts camelCased alias to lowercase unless quoted\n    return ['SELECT constraint_catalog AS \"constraintCatalog\",', 'constraint_schema AS \"constraintSchema\",', 'constraint_name AS \"constraintName\",', 'table_catalog AS \"tableCatalog\",', 'table_schema AS \"tableSchema\",', 'table_name AS \"tableName\",', 'constraint_type AS \"constraintType\",', 'is_deferrable AS \"isDeferrable\",', 'initially_deferred AS \"initiallyDeferred\"', 'from INFORMATION_SCHEMA.table_constraints', `WHERE table_name='${tableName}';`].join(' ');\n  },\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(tableName + '_' + indexNameOrAttributes.join('_'));\n    }\n\n    return `DROP INDEX IF EXISTS ${this.quoteIdentifiers(indexName)}`;\n  },\n\n  addLimitAndOffset(options) {\n    let fragment = '';\n    /* eslint-disable */\n\n    if (options.limit != null) {\n      fragment += ' LIMIT ' + this.escape(options.limit);\n    }\n\n    if (options.offset != null) {\n      fragment += ' OFFSET ' + this.escape(options.offset);\n    }\n    /* eslint-enable */\n\n\n    return fragment;\n  },\n\n  attributeToSQL(attribute) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    let type;\n\n    if (attribute.type instanceof DataTypes.ENUM || attribute.type instanceof DataTypes.ARRAY && attribute.type.type instanceof DataTypes.ENUM) {\n      const enumType = attribute.type.type || attribute.type;\n      let values = attribute.values;\n\n      if (enumType.values && !attribute.values) {\n        values = enumType.values;\n      }\n\n      if (Array.isArray(values) && values.length > 0) {\n        type = 'ENUM(' + _.map(values, value => this.escape(value)).join(', ') + ')';\n\n        if (attribute.type instanceof DataTypes.ARRAY) {\n          type += '[]';\n        }\n      } else {\n        throw new Error(\"Values for ENUM haven't been defined.\");\n      }\n    }\n\n    if (!type) {\n      type = attribute.type;\n    }\n\n    let sql = type + '';\n\n    if (attribute.hasOwnProperty('allowNull') && !attribute.allowNull) {\n      sql += ' NOT NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      sql += ' SERIAL';\n    }\n\n    if (Utils.defaultValueSchemable(attribute.defaultValue)) {\n      sql += ' DEFAULT ' + this.escape(attribute.defaultValue, attribute);\n    }\n\n    if (attribute.unique === true) {\n      sql += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      sql += ' PRIMARY KEY';\n    }\n\n    if (attribute.references) {\n      const referencesTable = this.quoteTable(attribute.references.model);\n      let referencesKey;\n\n      if (attribute.references.key) {\n        referencesKey = this.quoteIdentifiers(attribute.references.key);\n      } else {\n        referencesKey = this.quoteIdentifier('id');\n      }\n\n      sql += ` REFERENCES ${referencesTable} (${referencesKey})`;\n\n      if (attribute.onDelete) {\n        sql += ' ON DELETE ' + attribute.onDelete.toUpperCase();\n      }\n\n      if (attribute.onUpdate) {\n        sql += ' ON UPDATE ' + attribute.onUpdate.toUpperCase();\n      }\n\n      if (attribute.references.deferrable) {\n        sql += ' ' + attribute.references.deferrable.toString(this);\n      }\n    }\n\n    return sql;\n  },\n\n  deferConstraintsQuery(options) {\n    return options.deferrable.toString(this);\n  },\n\n  setConstraintQuery(columns, type) {\n    let columnFragment = 'ALL';\n\n    if (columns) {\n      columnFragment = columns.map(column => this.quoteIdentifier(column)).join(', ');\n    }\n\n    return 'SET CONSTRAINTS ' + columnFragment + ' ' + type;\n  },\n\n  setDeferredQuery(columns) {\n    return this.setConstraintQuery(columns, 'DEFERRED');\n  },\n\n  setImmediateQuery(columns) {\n    return this.setConstraintQuery(columns, 'IMMEDIATE');\n  },\n\n  attributesToSQL(attributes, options) {\n    const result = {};\n\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n\n    return result;\n  },\n\n  createTrigger(tableName, triggerName, eventType, fireOnSpec, functionName, functionParams, optionsArray) {\n    const decodedEventType = this.decodeTriggerEventType(eventType);\n    const eventSpec = this.expandTriggerEventSpec(fireOnSpec);\n    const expandedOptions = this.expandOptions(optionsArray);\n    const paramList = this.expandFunctionParamList(functionParams);\n    return `CREATE ${this.triggerEventTypeIsConstraint(eventType)}TRIGGER ${triggerName}\\n` + `\\t${decodedEventType} ${eventSpec}\\n` + `\\tON ${tableName}\\n` + `\\t${expandedOptions}\\n` + `\\tEXECUTE PROCEDURE ${functionName}(${paramList});`;\n  },\n\n  dropTrigger(tableName, triggerName) {\n    return `DROP TRIGGER ${triggerName} ON ${tableName} RESTRICT;`;\n  },\n\n  renameTrigger(tableName, oldTriggerName, newTriggerName) {\n    return `ALTER TRIGGER ${oldTriggerName} ON ${tableName} RENAME TO ${newTriggerName};`;\n  },\n\n  createFunction(functionName, params, returnType, language, body, options) {\n    if (!functionName || !returnType || !language || !body) throw new Error('createFunction missing some parameters. Did you pass functionName, returnType, language and body?');\n    const paramList = this.expandFunctionParamList(params);\n    const indentedBody = body.replace('\\n', '\\n\\t');\n    const expandedOptions = this.expandOptions(options);\n    return `CREATE FUNCTION ${functionName}(${paramList})\\n` + `RETURNS ${returnType} AS $func$\\n` + 'BEGIN\\n' + `\\t${indentedBody}\\n` + 'END;\\n' + `$func$ language '${language}'${expandedOptions};`;\n  },\n\n  dropFunction(functionName, params) {\n    if (!functionName) throw new Error('requires functionName'); // RESTRICT is (currently, as of 9.2) default but we'll be explicit\n\n    const paramList = this.expandFunctionParamList(params);\n    return `DROP FUNCTION ${functionName}(${paramList}) RESTRICT;`;\n  },\n\n  renameFunction(oldFunctionName, params, newFunctionName) {\n    const paramList = this.expandFunctionParamList(params);\n    return `ALTER FUNCTION ${oldFunctionName}(${paramList}) RENAME TO ${newFunctionName};`;\n  },\n\n  databaseConnectionUri(config) {\n    let uri = config.protocol + '://' + config.user + ':' + config.password + '@' + config.host;\n\n    if (config.port) {\n      uri += ':' + config.port;\n    }\n\n    uri += '/' + config.database;\n\n    if (config.ssl) {\n      uri += '?ssl=' + config.ssl;\n    }\n\n    return uri;\n  },\n\n  pgEscapeAndQuote(val) {\n    return this.quoteIdentifier(Utils.removeTicks(this.escape(val), \"'\"));\n  },\n\n  expandFunctionParamList(params) {\n    if (_.isUndefined(params) || !_.isArray(params)) {\n      throw new Error('expandFunctionParamList: function parameters array required, including an empty one for no arguments');\n    }\n\n    const paramList = [];\n\n    _.each(params, curParam => {\n      const paramDef = [];\n\n      if (_.has(curParam, 'type')) {\n        if (_.has(curParam, 'direction')) {\n          paramDef.push(curParam.direction);\n        }\n\n        if (_.has(curParam, 'name')) {\n          paramDef.push(curParam.name);\n        }\n\n        paramDef.push(curParam.type);\n      } else {\n        throw new Error('function or trigger used with a parameter without any type');\n      }\n\n      const joined = paramDef.join(' ');\n      if (joined) paramList.push(joined);\n    });\n\n    return paramList.join(', ');\n  },\n\n  expandOptions(options) {\n    return _.isUndefined(options) || _.isEmpty(options) ? '' : '\\n\\t' + options.join('\\n\\t');\n  },\n\n  decodeTriggerEventType(eventSpecifier) {\n    const EVENT_DECODER = {\n      'after': 'AFTER',\n      'before': 'BEFORE',\n      'instead_of': 'INSTEAD OF',\n      'after_constraint': 'AFTER'\n    };\n\n    if (!_.has(EVENT_DECODER, eventSpecifier)) {\n      throw new Error('Invalid trigger event specified: ' + eventSpecifier);\n    }\n\n    return EVENT_DECODER[eventSpecifier];\n  },\n\n  triggerEventTypeIsConstraint(eventSpecifier) {\n    return eventSpecifier === 'after_constraint' ? 'CONSTRAINT ' : '';\n  },\n\n  expandTriggerEventSpec(fireOnSpec) {\n    if (_.isEmpty(fireOnSpec)) {\n      throw new Error('no table change events specified to trigger on');\n    }\n\n    return _.map(fireOnSpec, (fireValue, fireKey) => {\n      const EVENT_MAP = {\n        'insert': 'INSERT',\n        'update': 'UPDATE',\n        'delete': 'DELETE',\n        'truncate': 'TRUNCATE'\n      };\n\n      if (!_.has(EVENT_MAP, fireValue)) {\n        throw new Error('parseTriggerEventSpec: undefined trigger event ' + fireKey);\n      }\n\n      let eventSpec = EVENT_MAP[fireValue];\n\n      if (eventSpec === 'UPDATE') {\n        if (_.isArray(fireValue) && fireValue.length > 0) {\n          eventSpec += ' OF ' + fireValue.join(', ');\n        }\n      }\n\n      return eventSpec;\n    }).join(' OR ');\n  },\n\n  pgEnumName(tableName, attr, options) {\n    options = options || {};\n    const tableDetails = this.extractTableDetails(tableName, options);\n    let enumName = Utils.addTicks(Utils.generateEnumName(tableDetails.tableName, attr), '\"'); // pgListEnums requires the enum name only, without the schema\n\n    if (options.schema !== false && tableDetails.schema) {\n      enumName = this.quoteIdentifier(tableDetails.schema) + tableDetails.delimiter + enumName;\n    }\n\n    return enumName;\n  },\n\n  pgListEnums(tableName, attrName, options) {\n    let enumName = '';\n    const tableDetails = this.extractTableDetails(tableName, options);\n\n    if (tableDetails.tableName && attrName) {\n      enumName = ' AND t.typname=' + this.pgEnumName(tableDetails.tableName, attrName, {\n        schema: false\n      }).replace(/\"/g, \"'\");\n    }\n\n    return 'SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t ' + 'JOIN pg_enum e ON t.oid = e.enumtypid ' + 'JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace ' + `WHERE n.nspname = '${tableDetails.schema}'${enumName} GROUP BY 1`;\n  },\n\n  pgEnum(tableName, attr, dataType, options) {\n    const enumName = this.pgEnumName(tableName, attr, options);\n    let values;\n\n    if (dataType.values) {\n      values = \"ENUM('\" + dataType.values.join(\"', '\") + \"')\";\n    } else {\n      values = dataType.toString().match(/^ENUM\\(.+\\)/)[0];\n    }\n\n    let sql = 'CREATE TYPE ' + enumName + ' AS ' + values + ';';\n\n    if (!!options && options.force === true) {\n      sql = this.pgEnumDrop(tableName, attr) + sql;\n    }\n\n    return sql;\n  },\n\n  pgEnumAdd(tableName, attr, value, options) {\n    const enumName = this.pgEnumName(tableName, attr);\n    let sql = 'ALTER TYPE ' + enumName + ' ADD VALUE ';\n\n    if (semver.gte(this.sequelize.options.databaseVersion, '9.3.0')) {\n      sql += 'IF NOT EXISTS ';\n    }\n\n    sql += this.escape(value);\n\n    if (options.before) {\n      sql += ' BEFORE ' + this.escape(options.before);\n    } else if (options.after) {\n      sql += ' AFTER ' + this.escape(options.after);\n    }\n\n    return sql;\n  },\n\n  pgEnumDrop(tableName, attr, enumName) {\n    enumName = enumName || this.pgEnumName(tableName, attr);\n    return 'DROP TYPE IF EXISTS ' + enumName + '; ';\n  },\n\n  fromArray(text) {\n    text = text.replace(/^{/, '').replace(/}$/, '');\n    let matches = text.match(/(\"(?:\\\\.|[^\"\\\\\\\\])*\"|[^,]*)(?:\\s*,\\s*|\\s*$)/ig);\n\n    if (matches.length < 1) {\n      return [];\n    }\n\n    matches = matches.map(m => m.replace(/\",$/, '').replace(/,$/, '').replace(/(^\"|\"$)/, ''));\n    return matches.slice(0, -1);\n  },\n\n  padInt(i) {\n    return i < 10 ? '0' + i.toString() : i.toString();\n  },\n\n  dataTypeMapping(tableName, attr, dataType) {\n    if (_.includes(dataType, 'PRIMARY KEY')) {\n      dataType = dataType.replace(/PRIMARY KEY/, '');\n    }\n\n    if (_.includes(dataType, 'SERIAL')) {\n      if (_.includes(dataType, 'BIGINT')) {\n        dataType = dataType.replace(/SERIAL/, 'BIGSERIAL');\n        dataType = dataType.replace(/BIGINT/, '');\n      } else if (_.includes(dataType, 'SMALLINT')) {\n        dataType = dataType.replace(/SERIAL/, 'SMALLSERIAL');\n        dataType = dataType.replace(/SMALLINT/, '');\n      } else {\n        dataType = dataType.replace(/INTEGER/, '');\n      }\n\n      dataType = dataType.replace(/NOT NULL/, '');\n    }\n\n    if (dataType.match(/^ENUM\\(/)) {\n      dataType = dataType.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attr));\n    }\n\n    return dataType;\n  },\n\n  quoteIdentifier(identifier, force) {\n    if (identifier === '*') return identifier;\n\n    if (!force && this.options && this.options.quoteIdentifiers === false && identifier.indexOf('.') === -1 && identifier.indexOf('->') === -1) {\n      // default is `true`\n      // In Postgres, if tables or attributes are created double-quoted,\n      // they are also case sensitive. If they contain any uppercase\n      // characters, they must always be double-quoted. This makes it\n      // impossible to write queries in portable SQL if tables are created in\n      // this way. Hence, we strip quotes if we don't want case sensitivity.\n      return Utils.removeTicks(identifier, '\"');\n    } else {\n      return Utils.addTicks(Utils.removeTicks(identifier, '\"'), '\"');\n    }\n  },\n\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param  {String} tableName  The name of the table.\n   * @return {String}            The generated sql query.\n   * @private\n   */\n  getForeignKeysQuery(tableName) {\n    return 'SELECT conname as constraint_name, pg_catalog.pg_get_constraintdef(r.oid, true) as condef FROM pg_catalog.pg_constraint r ' + `WHERE r.conrelid = (SELECT oid FROM pg_class WHERE relname = '${tableName}' LIMIT 1) AND r.contype = 'f' ORDER BY 1;`;\n  },\n\n  /**\n   * Generate common SQL prefix for getForeignKeyReferencesQuery.\n   * @returns {String}\n   */\n  _getForeignKeyReferencesQueryPrefix() {\n    return 'SELECT ' + 'DISTINCT tc.constraint_name as constraint_name, ' + 'tc.constraint_schema as constraint_schema, ' + 'tc.constraint_catalog as constraint_catalog, ' + 'tc.table_name as table_name,' + 'tc.table_schema as table_schema,' + 'tc.table_catalog as table_catalog,' + 'kcu.column_name as column_name,' + 'ccu.table_schema  AS referenced_table_schema,' + 'ccu.table_catalog  AS referenced_table_catalog,' + 'ccu.table_name  AS referenced_table_name,' + 'ccu.column_name AS referenced_column_name ' + 'FROM information_schema.table_constraints AS tc ' + 'JOIN information_schema.key_column_usage AS kcu ' + 'ON tc.constraint_name = kcu.constraint_name ' + 'JOIN information_schema.constraint_column_usage AS ccu ' + 'ON ccu.constraint_name = tc.constraint_name ';\n  },\n\n  /**\n   * Generates an SQL query that returns all foreign keys details of a table.\n   *\n   * As for getForeignKeysQuery is not compatible with getForeignKeyReferencesQuery, so add a new function.\n   * @param {String} tableName\n   * @param {String} catalogName\n   * @param {String} schemaName\n   */\n  getForeignKeyReferencesQuery(tableName, catalogName, schemaName) {\n    return this._getForeignKeyReferencesQueryPrefix() + `WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = '${tableName}'` + (catalogName ? ` AND tc.table_catalog = '${catalogName}'` : '') + (schemaName ? ` AND tc.table_schema = '${schemaName}'` : '');\n  },\n\n  getForeignKeyReferenceQuery(table, columnName) {\n    const tableName = table.tableName || table;\n    const schema = table.schema;\n    return this._getForeignKeyReferencesQueryPrefix() + `WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name='${tableName}' AND  kcu.column_name = '${columnName}'` + (schema ? ` AND tc.table_schema = '${schema}'` : '');\n  },\n\n  /**\n   * Generates an SQL query that removes a foreign key from a table.\n   *\n   * @param  {String} tableName  The name of the table.\n   * @param  {String} foreignKey The name of the foreign key constraint.\n   * @return {String}            The generated sql query.\n   * @private\n   */\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return 'ALTER TABLE ' + this.quoteTable(tableName) + ' DROP CONSTRAINT ' + this.quoteIdentifier(foreignKey) + ';';\n  },\n\n  setAutocommitQuery(value, options) {\n    if (options.parent) {\n      return;\n    } // POSTGRES does not support setting AUTOCOMMIT = OFF as of 9.4.0\n    // Additionally it does not support AUTOCOMMIT at all starting at v9.5\n    // The assumption is that it won't be returning in future versions either\n    // If you are on a Pg version that is not semver compliant e.g. '9.5.0beta2', which fails due to the 'beta' qualification, then you need to pass\n    // the database version as \"9.5.0\" explicitly through the options param passed when creating the Sequelize instance under the key \"databaseVersion\"\n    // otherwise Pg version \"9.4.0\" is assumed by default as per Sequelize 3.14.2.\n    // For Pg versions that are semver compliant, this is auto-detected upon the first connection.\n\n\n    if (!value || semver.gte(this.sequelize.options.databaseVersion, '9.4.0')) {\n      return;\n    }\n\n    return AbstractQueryGenerator.setAutocommitQuery.call(this, value, options);\n  }\n\n};\nmodule.exports = QueryGenerator;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/sequelize/lib/dialects/postgres/query-generator.js"],"names":["Utils","require","util","DataTypes","AbstractQueryGenerator","semver","_","QueryGenerator","__proto__","options","dialect","setSearchPath","searchPath","createSchema","schema","databaseVersion","get","gte","dropSchema","showSchemasQuery","versionQuery","createTableQuery","tableName","attributes","extend","attrStr","comments","comment","isString","escape","attr","i","indexOf","substring","dataType","dataTypeMapping","push","quoteIdentifier","values","table","quoteTable","join","template","_templateSettings","uniqueKeys","each","columns","customIndex","fields","map","field","pks","reduce","acc","attribute","key","includes","length","dropTableQuery","cascade","showTablesQuery","describeTableQuery","_checkValidJsonStatement","stmt","jsonFunctionRegex","jsonOperatorRegex","tokenCaptureRegex","currentIndex","openingBrackets","closingBrackets","hasJsonFunction","hasInvalidToken","string","substr","functionMatches","exec","operatorMatches","tokenMatches","capturedToken","Error","jsonPathExtractionQuery","column","path","paths","toPath","pathStr","quotedColumn","isIdentifierQuoted","handleSequelizeMethod","smth","factory","prepend","Json","conditions","parseConditionObject","condition","first","tail","value","str","shift","format","call","addColumnQuery","dbDataType","attributeToSQL","context","definition","quotedKey","quotedTable","extractTableDetails","query","type","ENUM","pgEnum","removeColumnQuery","attributeName","quotedTableName","quotedAttributeName","changeColumnQuery","sql","attrSql","replace","trim","match","pgEnumName","renameColumnQuery","attrBefore","attrString","before","after","fn","fnName","parameters","body","returns","language","exceptionFn","main","then","when","upsertQuery","insertValues","updateValues","where","model","primaryField","primaryKeyField","insert","insertQuery","rawAttributes","update","updateQuery","deleteQuery","truncate","restartIdentity","isUndefined","limit","replacements","getWhereConditions","primaryKeys","pk","primaryKeyAttributes","primaryKeysSelection","showIndexesQuery","schemaJoin","schemaWhere","showConstraintsQuery","removeIndexQuery","indexNameOrAttributes","indexName","underscore","quoteIdentifiers","addLimitAndOffset","fragment","offset","isPlainObject","ARRAY","enumType","Array","isArray","hasOwnProperty","allowNull","autoIncrement","defaultValueSchemable","defaultValue","unique","primaryKey","references","referencesTable","referencesKey","onDelete","toUpperCase","onUpdate","deferrable","toString","deferConstraintsQuery","setConstraintQuery","columnFragment","setDeferredQuery","setImmediateQuery","attributesToSQL","result","createTrigger","triggerName","eventType","fireOnSpec","functionName","functionParams","optionsArray","decodedEventType","decodeTriggerEventType","eventSpec","expandTriggerEventSpec","expandedOptions","expandOptions","paramList","expandFunctionParamList","triggerEventTypeIsConstraint","dropTrigger","renameTrigger","oldTriggerName","newTriggerName","createFunction","params","returnType","indentedBody","dropFunction","renameFunction","oldFunctionName","newFunctionName","databaseConnectionUri","config","uri","protocol","user","password","host","port","database","ssl","pgEscapeAndQuote","val","removeTicks","curParam","paramDef","has","direction","name","joined","isEmpty","eventSpecifier","EVENT_DECODER","fireValue","fireKey","EVENT_MAP","tableDetails","enumName","addTicks","generateEnumName","delimiter","pgListEnums","attrName","force","pgEnumDrop","pgEnumAdd","sequelize","fromArray","text","matches","m","slice","padInt","identifier","getForeignKeysQuery","_getForeignKeyReferencesQueryPrefix","getForeignKeyReferencesQuery","catalogName","schemaName","getForeignKeyReferenceQuery","columnName","dropForeignKeyQuery","foreignKey","setAutocommitQuery","parent","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Utils = require('../../utils');\nconst util = require('util');\nconst DataTypes = require('../../data-types');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\nconst semver = require('semver');\nconst _ = require('lodash');\n\nconst QueryGenerator = {\n  __proto__: AbstractQueryGenerator,\n  options: {},\n  dialect: 'postgres',\n\n  setSearchPath(searchPath) {\n    return `SET search_path to ${searchPath};`;\n  },\n\n  createSchema(schema) {\n    const databaseVersion = _.get(this, 'sequelize.options.databaseVersion', 0);\n\n    if (databaseVersion && semver.gte(databaseVersion, '9.2.0')) {\n      return `CREATE SCHEMA IF NOT EXISTS ${schema};`;\n    }\n\n    return `CREATE SCHEMA ${schema};`;\n  },\n\n  dropSchema(schema) {\n    return `DROP SCHEMA IF EXISTS ${schema} CASCADE;`;\n  },\n\n  showSchemasQuery() {\n    return \"SELECT schema_name FROM information_schema.schemata WHERE schema_name <> 'information_schema' AND schema_name != 'public' AND schema_name !~ E'^pg_';\";\n  },\n\n  versionQuery() {\n    return 'SHOW SERVER_VERSION';\n  },\n\n  createTableQuery(tableName, attributes, options) {\n    options = _.extend({}, options || {});\n\n    //Postgres 9.0 does not support CREATE TABLE IF NOT EXISTS, 9.1 and above do\n    const databaseVersion = _.get(this, 'sequelize.options.databaseVersion', 0);\n    const attrStr = [];\n    let comments = '';\n\n    if (options.comment && _.isString(options.comment)) {\n      comments += '; COMMENT ON TABLE <%= table %> IS ' + this.escape(options.comment);\n    }\n\n    for (const attr in attributes) {\n      const i = attributes[attr].indexOf('COMMENT');\n      if (i !== -1) {\n        // Move comment to a separate query\n        comments += '; ' + attributes[attr].substring(i);\n        attributes[attr] = attributes[attr].substring(0, i);\n      }\n\n      const dataType = this.dataTypeMapping(tableName, attr, attributes[attr]);\n      attrStr.push(this.quoteIdentifier(attr) + ' ' + dataType);\n    }\n\n    const values = {\n      table: this.quoteTable(tableName),\n      attributes: attrStr.join(', '),\n      comments: _.template(comments, this._templateSettings)({ table: this.quoteTable(tableName) })\n    };\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, columns => {\n        if (columns.customIndex) {\n          values.attributes += `, UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`;\n        }\n      });\n    }\n\n    const pks = _.reduce(attributes, (acc, attribute, key) => {\n      if (_.includes(attribute, 'PRIMARY KEY')) {\n        acc.push(this.quoteIdentifier(key));\n      }\n      return acc;\n    }, []).join(',');\n\n    if (pks.length > 0) {\n      values.attributes += `, PRIMARY KEY (${pks})`;\n    }\n\n    return `CREATE TABLE ${databaseVersion === 0 || semver.gte(databaseVersion, '9.1.0') ? 'IF NOT EXISTS ' : ''}${values.table} (${values.attributes})${values.comments};`;\n  },\n\n  dropTableQuery(tableName, options) {\n    options = options || {};\n    return `DROP TABLE IF EXISTS ${this.quoteTable(tableName)}${options.cascade ? ' CASCADE' : ''};`;\n  },\n\n  showTablesQuery() {\n    return \"SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type LIKE '%TABLE' AND table_name != 'spatial_ref_sys';\";\n  },\n\n  describeTableQuery(tableName, schema) {\n    if (!schema) {\n      schema = 'public';\n    }\n    return 'SELECT pk.constraint_type as \"Constraint\", c.column_name as \"Field\", ' +\n              'c.column_default as \"Default\", c.is_nullable as \"Null\", ' +\n              '(CASE WHEN c.udt_name = \\'hstore\\' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN \\'(\\' || c.character_maximum_length || \\')\\' ELSE \\'\\' END) as \"Type\", ' +\n              '(SELECT array_agg(e.enumlabel) ' +\n              'FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid ' +\n              'WHERE t.typname=c.udt_name) AS \"special\" ' +\n            'FROM information_schema.columns c ' +\n            'LEFT JOIN (SELECT tc.table_schema, tc.table_name, ' +\n              'cu.column_name, tc.constraint_type ' +\n              'FROM information_schema.TABLE_CONSTRAINTS tc ' +\n              'JOIN information_schema.KEY_COLUMN_USAGE  cu ' +\n              'ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name ' +\n                'and tc.constraint_name=cu.constraint_name ' +\n                'and tc.constraint_type=\\'PRIMARY KEY\\') pk ' +\n            'ON pk.table_schema=c.table_schema ' +\n            'AND pk.table_name=c.table_name ' +\n            'AND pk.column_name=c.column_name ' +\n      `WHERE c.table_name = ${this.escape(tableName)} AND c.table_schema = ${this.escape(schema)} `;\n  },\n\n  /**\n   * Check whether the statmement is json function or simple path\n   *\n   * @param   {String}  stmt  The statement to validate\n   * @returns {Boolean}       true if the given statement is json function\n   * @throws  {Error}         throw if the statement looks like json function but has invalid token\n   */\n  _checkValidJsonStatement(stmt) {\n    if (!_.isString(stmt)) {\n      return false;\n    }\n\n    // https://www.postgresql.org/docs/current/static/functions-json.html\n    const jsonFunctionRegex = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\n    const jsonOperatorRegex = /^\\s*(->>?|#>>?|@>|<@|\\?[|&]?|\\|{2}|#-)/i;\n    const tokenCaptureRegex = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\n\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = jsonFunctionRegex.exec(string);\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf('(');\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const operatorMatches = jsonOperatorRegex.exec(string);\n      if (operatorMatches) {\n        currentIndex += operatorMatches[0].length;\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const tokenMatches = tokenCaptureRegex.exec(string);\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n        if (capturedToken === '(') {\n          openingBrackets++;\n        } else if (capturedToken === ')') {\n          closingBrackets++;\n        } else if (capturedToken === ';') {\n          hasInvalidToken = true;\n          break;\n        }\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n\n      break;\n    }\n\n    // Check invalid json statement\n    hasInvalidToken |= openingBrackets !== closingBrackets;\n    if (hasJsonFunction && hasInvalidToken) {\n      throw new Error('Invalid json statement: ' + stmt);\n    }\n\n    // return true if the statement has valid json function\n    return hasJsonFunction;\n  },\n\n  /**\n   * Generates an SQL query that extract JSON property of given path.\n   *\n   * @param   {String}               column  The JSON column\n   * @param   {String|Array<String>} [path]  The path to extract (optional)\n   * @returns {String}                       The generated sql query\n   * @private\n   */\n  jsonPathExtractionQuery(column, path) {\n    const paths = _.toPath(path);\n    const pathStr = this.escape(`{${paths.join(',')}}`);\n    const quotedColumn = this.isIdentifierQuoted(column) ? column : this.quoteIdentifier(column);\n    return `(${quotedColumn}#>>${pathStr})`;\n  },\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      // Parse nested object\n      if (smth.conditions) {\n        const conditions = _.map(this.parseConditionObject(smth.conditions), condition =>\n          `${this.jsonPathExtractionQuery(_.first(condition.path), _.tail(condition.path))} = '${condition.value}'`\n        );\n\n        return conditions.join(' AND ');\n      } else if (smth.path) {\n        let str;\n\n        // Allow specifying conditions using the postgres json syntax\n        if (this._checkValidJsonStatement(smth.path)) {\n          str = smth.path;\n        } else {\n          // Also support json property accessors\n          const paths = _.toPath(smth.path);\n          const column = paths.shift();\n          str = this.jsonPathExtractionQuery(column, paths);\n        }\n\n        if (smth.value) {\n          str += util.format(' = %s', this.escape(smth.value));\n        }\n\n        return str;\n      }\n    }\n    return AbstractQueryGenerator.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);\n  },\n\n  addColumnQuery(table, key, dataType) {\n\n    const dbDataType = this.attributeToSQL(dataType, { context: 'addColumn' });\n    const definition = this.dataTypeMapping(table, key, dbDataType);\n    const quotedKey = this.quoteIdentifier(key);\n    const quotedTable = this.quoteTable(this.extractTableDetails(table));\n\n    let query = `ALTER TABLE ${quotedTable} ADD COLUMN ${quotedKey} ${definition};`;\n\n    if (dataType.type && dataType.type instanceof DataTypes.ENUM || dataType instanceof DataTypes.ENUM) {\n      query = this.pgEnum(table, key, dataType) + query;\n    }\n\n    return query;\n  },\n\n  removeColumnQuery(tableName, attributeName) {\n    const quotedTableName = this.quoteTable(this.extractTableDetails(tableName));\n    const quotedAttributeName = this.quoteIdentifier(attributeName);\n    return `ALTER TABLE ${quotedTableName} DROP COLUMN ${quotedAttributeName};`;\n  },\n\n  changeColumnQuery(tableName, attributes) {\n    const query = 'ALTER TABLE <%= tableName %> ALTER COLUMN <%= query %>;';\n    const sql = [];\n\n    for (const attributeName in attributes) {\n      let definition = this.dataTypeMapping(tableName, attributeName, attributes[attributeName]);\n      let attrSql = '';\n\n      if (definition.indexOf('NOT NULL') > 0) {\n        attrSql += _.template(query, this._templateSettings)({\n          tableName: this.quoteTable(tableName),\n          query: this.quoteIdentifier(attributeName) + ' SET NOT NULL'\n        });\n\n        definition = definition.replace('NOT NULL', '').trim();\n      } else if (!definition.match(/REFERENCES/)) {\n        attrSql += _.template(query, this._templateSettings)({\n          tableName: this.quoteTable(tableName),\n          query: this.quoteIdentifier(attributeName) + ' DROP NOT NULL'\n        });\n      }\n\n      if (definition.indexOf('DEFAULT') > 0) {\n        attrSql += _.template(query, this._templateSettings)({\n          tableName: this.quoteTable(tableName),\n          query: this.quoteIdentifier(attributeName) + ' SET DEFAULT ' + definition.match(/DEFAULT ([^;]+)/)[1]\n        });\n\n        definition = definition.replace(/(DEFAULT[^;]+)/, '').trim();\n      } else if (!definition.match(/REFERENCES/)) {\n        attrSql += _.template(query, this._templateSettings)({\n          tableName: this.quoteTable(tableName),\n          query: this.quoteIdentifier(attributeName) + ' DROP DEFAULT'\n        });\n      }\n\n      if (attributes[attributeName].match(/^ENUM\\(/)) {\n        attrSql += this.pgEnum(tableName, attributeName, attributes[attributeName]);\n        definition = definition.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attributeName, { schema: false }));\n        definition += ' USING (' + this.quoteIdentifier(attributeName) + '::' + this.pgEnumName(tableName, attributeName) + ')';\n      }\n\n      if (definition.match(/UNIQUE;*$/)) {\n        definition = definition.replace(/UNIQUE;*$/, '');\n\n        attrSql += _.template(query.replace('ALTER COLUMN', ''), this._templateSettings)({\n          tableName: this.quoteTable(tableName),\n          query: 'ADD CONSTRAINT ' + this.quoteIdentifier(attributeName + '_unique_idx') + ' UNIQUE (' + this.quoteIdentifier(attributeName) + ')'\n        });\n      }\n\n      if (definition.match(/REFERENCES/)) {\n        definition = definition.replace(/.+?(?=REFERENCES)/, '');\n        attrSql += _.template(query.replace('ALTER COLUMN', ''), this._templateSettings)({\n          tableName: this.quoteTable(tableName),\n          query: 'ADD CONSTRAINT ' + this.quoteIdentifier(attributeName + '_foreign_idx') + ' FOREIGN KEY (' + this.quoteIdentifier(attributeName) + ') ' + definition\n        });\n      } else {\n        attrSql += _.template(query, this._templateSettings)({\n          tableName: this.quoteTable(tableName),\n          query: this.quoteIdentifier(attributeName) + ' TYPE ' + definition\n        });\n      }\n\n      sql.push(attrSql);\n    }\n\n    return sql.join('');\n  },\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n\n    const attrString = [];\n\n    for (const attributeName in attributes) {\n      attrString.push(_.template('<%= before %> TO <%= after %>', this._templateSettings)({\n        before: this.quoteIdentifier(attrBefore),\n        after: this.quoteIdentifier(attributeName)\n      }));\n    }\n\n    return `ALTER TABLE ${this.quoteTable(tableName)} RENAME COLUMN ${attrString.join(', ')};`;\n  },\n\n  fn(fnName, tableName, parameters, body, returns, language) {\n    fnName = fnName || 'testfunc';\n    language = language || 'plpgsql';\n    returns = returns ? `RETURNS ${returns}` : '';\n    parameters = parameters || '';\n\n    return `CREATE OR REPLACE FUNCTION pg_temp.${fnName}(${parameters}) ${returns} AS $func$ BEGIN ${body} END; $func$ LANGUAGE ${language}; SELECT * FROM pg_temp.${fnName}();`;\n  },\n\n  exceptionFn(fnName, tableName, parameters, main, then, when, returns, language) {\n    when = when || 'unique_violation';\n\n    const body = `${main} EXCEPTION WHEN ${when} THEN ${then};`;\n\n    return this.fn(fnName, tableName, parameters, body, returns, language);\n  },\n\n  upsertQuery(tableName, insertValues, updateValues, where, model, options) {\n    const primaryField = this.quoteIdentifier(model.primaryKeyField);\n\n    let insert = this.insertQuery(tableName, insertValues, model.rawAttributes, options);\n    let update = this.updateQuery(tableName, updateValues, where, options, model.rawAttributes);\n\n    insert = insert.replace('RETURNING *', `RETURNING ${primaryField} INTO primary_key`);\n    update = update.replace('RETURNING *', `RETURNING ${primaryField} INTO primary_key`);\n\n    return this.exceptionFn(\n      'sequelize_upsert',\n      tableName,\n      'OUT created boolean, OUT primary_key text',\n      `${insert} created := true;`,\n      `${update}; created := false`\n    );\n  },\n\n  deleteQuery(tableName, where, options, model) {\n    let query;\n\n    options = options || {};\n\n    tableName = this.quoteTable(tableName);\n\n    if (options.truncate === true) {\n      query = 'TRUNCATE ' + tableName;\n\n      if (options.restartIdentity) {\n        query += ' RESTART IDENTITY';\n      }\n\n      if (options.cascade) {\n        query += ' CASCADE';\n      }\n\n      return query;\n    }\n\n    if (_.isUndefined(options.limit)) {\n      options.limit = 1;\n    }\n\n    const replacements = {\n      table: tableName,\n      where: this.getWhereConditions(where, null, model, options),\n      limit: options.limit ? ' LIMIT ' + this.escape(options.limit) : ''\n    };\n\n    if (options.limit) {\n      if (!model) {\n        throw new Error('Cannot LIMIT delete without a model.');\n      }\n\n      const pks = _.map(_.values(model.primaryKeys), pk => this.quoteIdentifier(pk.field)).join(',');\n\n      replacements.primaryKeys = model.primaryKeyAttributes.length > 1 ? '(' + pks + ')' : pks;\n      replacements.primaryKeysSelection = pks;\n\n      query = 'DELETE FROM <%= table %> WHERE <%= primaryKeys %> IN (SELECT <%= primaryKeysSelection %> FROM <%= table %><%= where %><%= limit %>)';\n    } else {\n      query = 'DELETE FROM <%= table %><%= where %>';\n    }\n\n    if (replacements.where) {\n      replacements.where = ' WHERE ' + replacements.where;\n    }\n\n    return _.template(query, this._templateSettings)(replacements);\n  },\n\n  showIndexesQuery(tableName) {\n    let schemaJoin = '';\n    let schemaWhere = '';\n    if (!_.isString(tableName)) {\n      schemaJoin = ', pg_namespace s';\n      schemaWhere = ` AND s.oid = t.relnamespace AND s.nspname = '${tableName.schema}'`;\n      tableName = tableName.tableName;\n    }\n\n    // This is ARCANE!\n    return 'SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, ' +\n      'array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) ' +\n      `AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a${schemaJoin} ` +\n      'WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND ' +\n      `t.relkind = 'r' and t.relname = '${tableName}'${schemaWhere} ` +\n      'GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;';\n  },\n\n  showConstraintsQuery(tableName) {\n    //Postgres converts camelCased alias to lowercase unless quoted\n    return [\n      'SELECT constraint_catalog AS \"constraintCatalog\",',\n      'constraint_schema AS \"constraintSchema\",',\n      'constraint_name AS \"constraintName\",',\n      'table_catalog AS \"tableCatalog\",',\n      'table_schema AS \"tableSchema\",',\n      'table_name AS \"tableName\",',\n      'constraint_type AS \"constraintType\",',\n      'is_deferrable AS \"isDeferrable\",',\n      'initially_deferred AS \"initiallyDeferred\"',\n      'from INFORMATION_SCHEMA.table_constraints',\n      `WHERE table_name='${tableName}';`\n    ].join(' ');\n  },\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(tableName + '_' + indexNameOrAttributes.join('_'));\n    }\n\n    return `DROP INDEX IF EXISTS ${this.quoteIdentifiers(indexName)}`;\n  },\n\n  addLimitAndOffset(options) {\n    let fragment = '';\n    /* eslint-disable */\n    if (options.limit != null) {\n      fragment += ' LIMIT ' + this.escape(options.limit);\n    }\n    if (options.offset != null) {\n      fragment += ' OFFSET ' + this.escape(options.offset);\n    }\n    /* eslint-enable */\n\n    return fragment;\n  },\n\n  attributeToSQL(attribute) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    let type;\n    if (\n      attribute.type instanceof DataTypes.ENUM ||\n      (attribute.type instanceof DataTypes.ARRAY && attribute.type.type instanceof DataTypes.ENUM)\n    ) {\n      const enumType = attribute.type.type || attribute.type;\n      let values = attribute.values;\n\n      if (enumType.values && !attribute.values) {\n        values = enumType.values;\n      }\n\n      if (Array.isArray(values) && values.length > 0) {\n        type = 'ENUM(' + _.map(values, value => this.escape(value)).join(', ') + ')';\n\n        if (attribute.type instanceof DataTypes.ARRAY) {\n          type += '[]';\n        }\n\n      } else {\n        throw new Error(\"Values for ENUM haven't been defined.\");\n      }\n    }\n\n    if (!type) {\n      type = attribute.type;\n    }\n\n    let sql = type + '';\n\n    if (attribute.hasOwnProperty('allowNull') && !attribute.allowNull) {\n      sql += ' NOT NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      sql += ' SERIAL';\n    }\n\n    if (Utils.defaultValueSchemable(attribute.defaultValue)) {\n      sql += ' DEFAULT ' + this.escape(attribute.defaultValue, attribute);\n    }\n\n    if (attribute.unique === true) {\n      sql += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      sql += ' PRIMARY KEY';\n    }\n\n    if (attribute.references) {\n      const referencesTable = this.quoteTable(attribute.references.model);\n      let referencesKey;\n\n      if (attribute.references.key) {\n        referencesKey = this.quoteIdentifiers(attribute.references.key);\n      } else {\n        referencesKey = this.quoteIdentifier('id');\n      }\n\n      sql += ` REFERENCES ${referencesTable} (${referencesKey})`;\n\n      if (attribute.onDelete) {\n        sql += ' ON DELETE ' + attribute.onDelete.toUpperCase();\n      }\n\n      if (attribute.onUpdate) {\n        sql += ' ON UPDATE ' + attribute.onUpdate.toUpperCase();\n      }\n\n      if (attribute.references.deferrable) {\n        sql += ' ' + attribute.references.deferrable.toString(this);\n      }\n    }\n\n    return sql;\n  },\n\n  deferConstraintsQuery(options) {\n    return options.deferrable.toString(this);\n  },\n\n  setConstraintQuery(columns, type) {\n    let columnFragment = 'ALL';\n\n    if (columns) {\n      columnFragment = columns.map(column => this.quoteIdentifier(column)).join(', ');\n    }\n\n    return 'SET CONSTRAINTS ' + columnFragment + ' ' + type;\n  },\n\n  setDeferredQuery(columns) {\n    return this.setConstraintQuery(columns, 'DEFERRED');\n  },\n\n  setImmediateQuery(columns) {\n    return this.setConstraintQuery(columns, 'IMMEDIATE');\n  },\n\n  attributesToSQL(attributes, options) {\n    const result = {};\n\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n\n    return result;\n  },\n\n  createTrigger(tableName, triggerName, eventType, fireOnSpec, functionName, functionParams, optionsArray) {\n\n    const decodedEventType = this.decodeTriggerEventType(eventType);\n    const eventSpec = this.expandTriggerEventSpec(fireOnSpec);\n    const expandedOptions = this.expandOptions(optionsArray);\n    const paramList = this.expandFunctionParamList(functionParams);\n\n    return `CREATE ${this.triggerEventTypeIsConstraint(eventType)}TRIGGER ${triggerName}\\n`\n      + `\\t${decodedEventType} ${eventSpec}\\n`\n      + `\\tON ${tableName}\\n`\n      + `\\t${expandedOptions}\\n`\n      + `\\tEXECUTE PROCEDURE ${functionName}(${paramList});`;\n  },\n\n  dropTrigger(tableName, triggerName) {\n    return `DROP TRIGGER ${triggerName} ON ${tableName} RESTRICT;`;\n  },\n\n  renameTrigger(tableName, oldTriggerName, newTriggerName) {\n    return `ALTER TRIGGER ${oldTriggerName} ON ${tableName} RENAME TO ${newTriggerName};`;\n  },\n\n  createFunction(functionName, params, returnType, language, body, options) {\n    if (!functionName || !returnType || !language || !body) throw new Error('createFunction missing some parameters. Did you pass functionName, returnType, language and body?');\n\n    const paramList = this.expandFunctionParamList(params);\n    const indentedBody = body.replace('\\n', '\\n\\t');\n    const expandedOptions = this.expandOptions(options);\n\n    return `CREATE FUNCTION ${functionName}(${paramList})\\n`\n      + `RETURNS ${returnType} AS $func$\\n`\n      + 'BEGIN\\n'\n      + `\\t${indentedBody}\\n`\n      + 'END;\\n'\n      + `$func$ language '${language}'${expandedOptions};`;\n  },\n\n  dropFunction(functionName, params) {\n    if (!functionName) throw new Error('requires functionName');\n    // RESTRICT is (currently, as of 9.2) default but we'll be explicit\n    const paramList = this.expandFunctionParamList(params);\n    return `DROP FUNCTION ${functionName}(${paramList}) RESTRICT;`;\n  },\n\n  renameFunction(oldFunctionName, params, newFunctionName) {\n    const paramList = this.expandFunctionParamList(params);\n    return `ALTER FUNCTION ${oldFunctionName}(${paramList}) RENAME TO ${newFunctionName};`;\n  },\n\n  databaseConnectionUri(config) {\n    let uri = config.protocol + '://' + config.user + ':' + config.password + '@' + config.host;\n    if (config.port) {\n      uri += ':' + config.port;\n    }\n    uri += '/' + config.database;\n    if (config.ssl) {\n      uri += '?ssl=' + config.ssl;\n    }\n    return uri;\n  },\n\n  pgEscapeAndQuote(val) {\n    return this.quoteIdentifier(Utils.removeTicks(this.escape(val), \"'\"));\n  },\n\n  expandFunctionParamList(params) {\n    if (_.isUndefined(params) || !_.isArray(params)) {\n      throw new Error('expandFunctionParamList: function parameters array required, including an empty one for no arguments');\n    }\n\n    const paramList = [];\n    _.each(params, curParam => {\n      const paramDef = [];\n      if (_.has(curParam, 'type')) {\n        if (_.has(curParam, 'direction')) { paramDef.push(curParam.direction); }\n        if (_.has(curParam, 'name')) { paramDef.push(curParam.name); }\n        paramDef.push(curParam.type);\n      } else {\n        throw new Error('function or trigger used with a parameter without any type');\n      }\n\n      const joined = paramDef.join(' ');\n      if (joined) paramList.push(joined);\n\n    });\n\n    return paramList.join(', ');\n  },\n\n  expandOptions(options) {\n    return _.isUndefined(options) || _.isEmpty(options) ?\n      '' : '\\n\\t' + options.join('\\n\\t');\n  },\n\n  decodeTriggerEventType(eventSpecifier) {\n    const EVENT_DECODER = {\n      'after': 'AFTER',\n      'before': 'BEFORE',\n      'instead_of': 'INSTEAD OF',\n      'after_constraint': 'AFTER'\n    };\n\n    if (!_.has(EVENT_DECODER, eventSpecifier)) {\n      throw new Error('Invalid trigger event specified: ' + eventSpecifier);\n    }\n\n    return EVENT_DECODER[eventSpecifier];\n  },\n\n  triggerEventTypeIsConstraint(eventSpecifier) {\n    return eventSpecifier === 'after_constraint' ? 'CONSTRAINT ' : '';\n  },\n\n  expandTriggerEventSpec(fireOnSpec) {\n    if (_.isEmpty(fireOnSpec)) {\n      throw new Error('no table change events specified to trigger on');\n    }\n\n    return _.map(fireOnSpec, (fireValue, fireKey) => {\n      const EVENT_MAP = {\n        'insert': 'INSERT',\n        'update': 'UPDATE',\n        'delete': 'DELETE',\n        'truncate': 'TRUNCATE'\n      };\n\n      if (!_.has(EVENT_MAP, fireValue)) {\n        throw new Error('parseTriggerEventSpec: undefined trigger event ' + fireKey);\n      }\n\n      let eventSpec = EVENT_MAP[fireValue];\n      if (eventSpec === 'UPDATE') {\n        if (_.isArray(fireValue) && fireValue.length > 0) {\n          eventSpec += ' OF ' + fireValue.join(', ');\n        }\n      }\n\n      return eventSpec;\n    }).join(' OR ');\n  },\n\n  pgEnumName(tableName, attr, options) {\n    options = options || {};\n\n    const tableDetails = this.extractTableDetails(tableName, options);\n    let enumName = Utils.addTicks(Utils.generateEnumName(tableDetails.tableName, attr), '\"');\n\n    // pgListEnums requires the enum name only, without the schema\n    if (options.schema !== false && tableDetails.schema) {\n      enumName = this.quoteIdentifier(tableDetails.schema) + tableDetails.delimiter + enumName;\n    }\n\n    return enumName;\n  },\n\n  pgListEnums(tableName, attrName, options) {\n    let enumName = '';\n    const tableDetails = this.extractTableDetails(tableName, options);\n\n    if (tableDetails.tableName && attrName) {\n      enumName = ' AND t.typname=' + this.pgEnumName(tableDetails.tableName, attrName, { schema: false }).replace(/\"/g, \"'\");\n    }\n\n    return 'SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t ' +\n      'JOIN pg_enum e ON t.oid = e.enumtypid ' +\n      'JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace ' +\n      `WHERE n.nspname = '${tableDetails.schema}'${enumName} GROUP BY 1`;\n  },\n\n  pgEnum(tableName, attr, dataType, options) {\n    const enumName = this.pgEnumName(tableName, attr, options);\n    let values;\n\n    if (dataType.values) {\n      values = \"ENUM('\" + dataType.values.join(\"', '\") + \"')\";\n    } else {\n      values = dataType.toString().match(/^ENUM\\(.+\\)/)[0];\n    }\n\n    let sql = 'CREATE TYPE ' + enumName + ' AS ' + values + ';';\n    if (!!options && options.force === true) {\n      sql = this.pgEnumDrop(tableName, attr) + sql;\n    }\n    return sql;\n  },\n\n  pgEnumAdd(tableName, attr, value, options) {\n    const enumName = this.pgEnumName(tableName, attr);\n    let sql = 'ALTER TYPE ' + enumName + ' ADD VALUE ';\n\n    if (semver.gte(this.sequelize.options.databaseVersion, '9.3.0')) {\n      sql += 'IF NOT EXISTS ';\n    }\n    sql += this.escape(value);\n\n    if (options.before) {\n      sql += ' BEFORE ' + this.escape(options.before);\n    } else if (options.after) {\n      sql += ' AFTER ' + this.escape(options.after);\n    }\n\n    return sql;\n  },\n\n  pgEnumDrop(tableName, attr, enumName) {\n    enumName = enumName || this.pgEnumName(tableName, attr);\n    return 'DROP TYPE IF EXISTS ' + enumName + '; ';\n  },\n\n  fromArray(text) {\n    text = text.replace(/^{/, '').replace(/}$/, '');\n    let matches = text.match(/(\"(?:\\\\.|[^\"\\\\\\\\])*\"|[^,]*)(?:\\s*,\\s*|\\s*$)/ig);\n\n    if (matches.length < 1) {\n      return [];\n    }\n\n    matches = matches.map(m => m.replace(/\",$/, '').replace(/,$/, '').replace(/(^\"|\"$)/, ''));\n\n    return matches.slice(0, -1);\n  },\n\n  padInt(i) {\n    return i < 10 ? '0' + i.toString() : i.toString();\n  },\n\n  dataTypeMapping(tableName, attr, dataType) {\n    if (_.includes(dataType, 'PRIMARY KEY')) {\n      dataType = dataType.replace(/PRIMARY KEY/, '');\n    }\n\n    if (_.includes(dataType, 'SERIAL')) {\n      if (_.includes(dataType, 'BIGINT')) {\n        dataType = dataType.replace(/SERIAL/, 'BIGSERIAL');\n        dataType = dataType.replace(/BIGINT/, '');\n      } else if (_.includes(dataType, 'SMALLINT')) {\n        dataType = dataType.replace(/SERIAL/, 'SMALLSERIAL');\n        dataType = dataType.replace(/SMALLINT/, '');        \n      } else {\n        dataType = dataType.replace(/INTEGER/, '');\n      }\n      dataType = dataType.replace(/NOT NULL/, '');\n    }\n\n    if (dataType.match(/^ENUM\\(/)) {\n      dataType = dataType.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attr));\n    }\n\n    return dataType;\n  },\n\n  quoteIdentifier(identifier, force) {\n    if (identifier === '*') return identifier;\n    if (!force && this.options && this.options.quoteIdentifiers === false && identifier.indexOf('.') === -1 && identifier.indexOf('->') === -1) { // default is `true`\n      // In Postgres, if tables or attributes are created double-quoted,\n      // they are also case sensitive. If they contain any uppercase\n      // characters, they must always be double-quoted. This makes it\n      // impossible to write queries in portable SQL if tables are created in\n      // this way. Hence, we strip quotes if we don't want case sensitivity.\n      return Utils.removeTicks(identifier, '\"');\n    } else {\n      return Utils.addTicks(Utils.removeTicks(identifier, '\"'), '\"');\n    }\n  },\n\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param  {String} tableName  The name of the table.\n   * @return {String}            The generated sql query.\n   * @private\n   */\n  getForeignKeysQuery(tableName) {\n    return 'SELECT conname as constraint_name, pg_catalog.pg_get_constraintdef(r.oid, true) as condef FROM pg_catalog.pg_constraint r ' +\n      `WHERE r.conrelid = (SELECT oid FROM pg_class WHERE relname = '${tableName}' LIMIT 1) AND r.contype = 'f' ORDER BY 1;`;\n  },\n\n  /**\n   * Generate common SQL prefix for getForeignKeyReferencesQuery.\n   * @returns {String}\n   */\n  _getForeignKeyReferencesQueryPrefix() {\n    return 'SELECT ' +\n        'DISTINCT tc.constraint_name as constraint_name, ' +\n        'tc.constraint_schema as constraint_schema, ' +\n        'tc.constraint_catalog as constraint_catalog, ' +\n        'tc.table_name as table_name,' +\n        'tc.table_schema as table_schema,' +\n        'tc.table_catalog as table_catalog,' +\n        'kcu.column_name as column_name,' +\n        'ccu.table_schema  AS referenced_table_schema,' +\n        'ccu.table_catalog  AS referenced_table_catalog,' +\n        'ccu.table_name  AS referenced_table_name,' +\n        'ccu.column_name AS referenced_column_name ' +\n      'FROM information_schema.table_constraints AS tc ' +\n        'JOIN information_schema.key_column_usage AS kcu ' +\n          'ON tc.constraint_name = kcu.constraint_name ' +\n        'JOIN information_schema.constraint_column_usage AS ccu ' +\n          'ON ccu.constraint_name = tc.constraint_name ';\n  },\n\n  /**\n   * Generates an SQL query that returns all foreign keys details of a table.\n   *\n   * As for getForeignKeysQuery is not compatible with getForeignKeyReferencesQuery, so add a new function.\n   * @param {String} tableName\n   * @param {String} catalogName\n   * @param {String} schemaName\n   */\n  getForeignKeyReferencesQuery(tableName, catalogName, schemaName) {\n    return this._getForeignKeyReferencesQueryPrefix() +\n      `WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = '${tableName}'` +\n      (catalogName ? ` AND tc.table_catalog = '${catalogName}'` : '') +\n      (schemaName ? ` AND tc.table_schema = '${schemaName}'` : '');\n  },\n\n  getForeignKeyReferenceQuery(table, columnName) {\n    const tableName = table.tableName || table;\n    const schema = table.schema;\n    return this._getForeignKeyReferencesQueryPrefix() +\n      `WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name='${tableName}' AND  kcu.column_name = '${columnName}'` +\n      (schema ? ` AND tc.table_schema = '${schema}'` : '');\n  },\n\n  /**\n   * Generates an SQL query that removes a foreign key from a table.\n   *\n   * @param  {String} tableName  The name of the table.\n   * @param  {String} foreignKey The name of the foreign key constraint.\n   * @return {String}            The generated sql query.\n   * @private\n   */\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return 'ALTER TABLE ' + this.quoteTable(tableName) + ' DROP CONSTRAINT ' + this.quoteIdentifier(foreignKey) + ';';\n  },\n\n  setAutocommitQuery(value, options) {\n    if (options.parent) {\n      return;\n    }\n\n    // POSTGRES does not support setting AUTOCOMMIT = OFF as of 9.4.0\n    // Additionally it does not support AUTOCOMMIT at all starting at v9.5\n    // The assumption is that it won't be returning in future versions either\n    // If you are on a Pg version that is not semver compliant e.g. '9.5.0beta2', which fails due to the 'beta' qualification, then you need to pass\n    // the database version as \"9.5.0\" explicitly through the options param passed when creating the Sequelize instance under the key \"databaseVersion\"\n    // otherwise Pg version \"9.4.0\" is assumed by default as per Sequelize 3.14.2.\n    // For Pg versions that are semver compliant, this is auto-detected upon the first connection.\n    if (!value || semver.gte(this.sequelize.options.databaseVersion, '9.4.0')) {\n      return;\n    }\n\n    return AbstractQueryGenerator.setAutocommitQuery.call(this, value, options);\n  }\n};\n\nmodule.exports = QueryGenerator;\n"]},"metadata":{},"sourceType":"script"}
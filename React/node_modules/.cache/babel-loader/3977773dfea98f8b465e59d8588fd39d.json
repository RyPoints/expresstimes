{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\n\nvar _os = _interopRequireDefault(require(\"os\"));\n\nvar _constants = _interopRequireDefault(require(\"constants\"));\n\nvar _tls = require(\"tls\");\n\nvar _msRestNodeauth = require(\"@azure/ms-rest-nodeauth\");\n\nvar _bulkLoad = _interopRequireDefault(require(\"./bulk-load\"));\n\nvar _debug = _interopRequireDefault(require(\"./debug\"));\n\nvar _events = require(\"events\");\n\nvar _instanceLookup = require(\"./instance-lookup\");\n\nvar _transientErrorLookup = require(\"./transient-error-lookup\");\n\nvar _packet = require(\"./packet\");\n\nvar _preloginPayload = _interopRequireDefault(require(\"./prelogin-payload\"));\n\nvar _login7Payload = _interopRequireDefault(require(\"./login7-payload\"));\n\nvar _ntlmPayload = _interopRequireDefault(require(\"./ntlm-payload\"));\n\nvar _request = _interopRequireDefault(require(\"./request\"));\n\nvar _rpcrequestPayload = _interopRequireDefault(require(\"./rpcrequest-payload\"));\n\nvar _sqlbatchPayload = _interopRequireDefault(require(\"./sqlbatch-payload\"));\n\nvar _messageIo = _interopRequireDefault(require(\"./message-io\"));\n\nvar _tokenStreamParser = require(\"./token/token-stream-parser\");\n\nvar _transaction = require(\"./transaction\");\n\nvar _errors = require(\"./errors\");\n\nvar _connector = require(\"./connector\");\n\nvar _library = require(\"./library\");\n\nvar _tdsVersions = require(\"./tds-versions\");\n\nvar _ntlm = require(\"./ntlm\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // A rather basic state machine for managing a connection.\n// Implements something approximating s3.2.1.\n\n\nconst KEEP_ALIVE_INITIAL_DELAY = 30 * 1000;\nconst DEFAULT_CONNECT_TIMEOUT = 15 * 1000;\nconst DEFAULT_CLIENT_REQUEST_TIMEOUT = 15 * 1000;\nconst DEFAULT_CANCEL_TIMEOUT = 5 * 1000;\nconst DEFAULT_CONNECT_RETRY_INTERVAL = 500;\nconst DEFAULT_PACKET_SIZE = 4 * 1024;\nconst DEFAULT_TEXTSIZE = '2147483647';\nconst DEFAULT_DATEFIRST = 7;\nconst DEFAULT_PORT = 1433;\nconst DEFAULT_TDS_VERSION = '7_4';\nconst DEFAULT_LANGUAGE = 'us_english';\nconst DEFAULT_DATEFORMAT = 'mdy';\nconst CLEANUP_TYPE = {\n  NORMAL: 0,\n  REDIRECT: 1,\n  RETRY: 2\n};\n\nclass Connection extends _events.EventEmitter {\n  constructor(config) {\n    super();\n\n    if (typeof config !== 'object' || config === null) {\n      throw new TypeError('The \"config\" argument is required and must be of type Object.');\n    }\n\n    if (typeof config.server !== 'string') {\n      throw new TypeError('The \"config.server\" property is required and must be of type string.');\n    }\n\n    this.fedAuthRequired = false;\n    this.fedAuthInfoToken = undefined;\n    let authentication;\n\n    if (config.authentication !== undefined) {\n      if (typeof config.authentication !== 'object' || config.authentication === null) {\n        throw new TypeError('The \"config.authentication\" property must be of type Object.');\n      }\n\n      const type = config.authentication.type;\n      const options = config.authentication.options === undefined ? {} : config.authentication.options;\n\n      if (typeof type !== 'string') {\n        throw new TypeError('The \"config.authentication.type\" property must be of type string.');\n      }\n\n      if (type !== 'default' && type !== 'ntlm' && type !== 'azure-active-directory-password' && type !== 'azure-active-directory-access-token' && type !== 'azure-active-directory-msi-vm' && type !== 'azure-active-directory-msi-app-service' && type !== 'azure-active-directory-service-principal-secret') {\n        throw new TypeError('The \"type\" property must one of \"default\", \"ntlm\", \"azure-active-directory-password\", \"azure-active-directory-access-token\", \"azure-active-directory-msi-vm\" or \"azure-active-directory-msi-app-service\" or \"azure-active-directory-service-principal-secret\".');\n      }\n\n      if (typeof options !== 'object' || options === null) {\n        throw new TypeError('The \"config.authentication.options\" property must be of type object.');\n      }\n\n      if (type === 'ntlm') {\n        if (typeof options.domain !== 'string') {\n          throw new TypeError('The \"config.authentication.options.domain\" property must be of type string.');\n        }\n\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'ntlm',\n          options: {\n            userName: options.userName,\n            password: options.password,\n            domain: options.domain && options.domain.toUpperCase()\n          }\n        };\n      } else if (type === 'azure-active-directory-password') {\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-password',\n          options: {\n            userName: options.userName,\n            password: options.password\n          }\n        };\n      } else if (type === 'azure-active-directory-access-token') {\n        if (typeof options.token !== 'string') {\n          throw new TypeError('The \"config.authentication.options.token\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-access-token',\n          options: {\n            token: options.token\n          }\n        };\n      } else if (type === 'azure-active-directory-msi-vm') {\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        if (options.msiEndpoint !== undefined && typeof options.msiEndpoint !== 'string') {\n          throw new TypeError('The \"config.authentication.options.msiEndpoint\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-msi-vm',\n          options: {\n            clientId: options.clientId,\n            msiEndpoint: options.msiEndpoint\n          }\n        };\n      } else if (type === 'azure-active-directory-msi-app-service') {\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        if (options.msiEndpoint !== undefined && typeof options.msiEndpoint !== 'string') {\n          throw new TypeError('The \"config.authentication.options.msiEndpoint\" property must be of type string.');\n        }\n\n        if (options.msiSecret !== undefined && typeof options.msiSecret !== 'string') {\n          throw new TypeError('The \"config.authentication.options.msiSecret\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-msi-app-service',\n          options: {\n            clientId: options.clientId,\n            msiEndpoint: options.msiEndpoint,\n            msiSecret: options.msiSecret\n          }\n        };\n      } else if (type === 'azure-active-directory-service-principal-secret') {\n        if (typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        if (typeof options.clientSecret !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientSecret\" property must be of type string.');\n        }\n\n        if (typeof options.tenantId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.tenantId\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-service-principal-secret',\n          options: {\n            clientId: options.clientId,\n            clientSecret: options.clientSecret,\n            tenantId: options.tenantId\n          }\n        };\n      } else {\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'default',\n          options: {\n            userName: options.userName,\n            password: options.password\n          }\n        };\n      }\n    } else {\n      authentication = {\n        type: 'default',\n        options: {\n          userName: undefined,\n          password: undefined\n        }\n      };\n    }\n\n    this.config = {\n      server: config.server,\n      authentication: authentication,\n      options: {\n        abortTransactionOnError: false,\n        appName: undefined,\n        camelCaseColumns: false,\n        cancelTimeout: DEFAULT_CANCEL_TIMEOUT,\n        columnNameReplacer: undefined,\n        connectionRetryInterval: DEFAULT_CONNECT_RETRY_INTERVAL,\n        connectTimeout: DEFAULT_CONNECT_TIMEOUT,\n        connectionIsolationLevel: _transaction.ISOLATION_LEVEL.READ_COMMITTED,\n        cryptoCredentialsDetails: {},\n        database: undefined,\n        datefirst: DEFAULT_DATEFIRST,\n        dateFormat: DEFAULT_DATEFORMAT,\n        debug: {\n          data: false,\n          packet: false,\n          payload: false,\n          token: false\n        },\n        enableAnsiNull: true,\n        enableAnsiNullDefault: true,\n        enableAnsiPadding: true,\n        enableAnsiWarnings: true,\n        enableArithAbort: false,\n        enableConcatNullYieldsNull: true,\n        enableCursorCloseOnCommit: null,\n        enableImplicitTransactions: false,\n        enableNumericRoundabort: false,\n        enableQuotedIdentifier: true,\n        encrypt: false,\n        fallbackToDefaultDb: false,\n        instanceName: undefined,\n        isolationLevel: _transaction.ISOLATION_LEVEL.READ_COMMITTED,\n        language: DEFAULT_LANGUAGE,\n        localAddress: undefined,\n        maxRetriesOnTransientErrors: 3,\n        multiSubnetFailover: false,\n        packetSize: DEFAULT_PACKET_SIZE,\n        port: DEFAULT_PORT,\n        readOnlyIntent: false,\n        requestTimeout: DEFAULT_CLIENT_REQUEST_TIMEOUT,\n        rowCollectionOnDone: false,\n        rowCollectionOnRequestCompletion: false,\n        tdsVersion: DEFAULT_TDS_VERSION,\n        textsize: DEFAULT_TEXTSIZE,\n        trustServerCertificate: true,\n        useColumnNames: false,\n        useUTC: true,\n        lowerCaseGuids: false\n      }\n    };\n\n    if (config.options) {\n      if (config.options.port && config.options.instanceName) {\n        throw new Error('Port and instanceName are mutually exclusive, but ' + config.options.port + ' and ' + config.options.instanceName + ' provided');\n      }\n\n      if (config.options.abortTransactionOnError !== undefined) {\n        if (typeof config.options.abortTransactionOnError !== 'boolean' && config.options.abortTransactionOnError !== null) {\n          throw new TypeError('The \"config.options.abortTransactionOnError\" property must be of type string or null.');\n        }\n\n        this.config.options.abortTransactionOnError = config.options.abortTransactionOnError;\n      }\n\n      if (config.options.appName !== undefined) {\n        if (typeof config.options.appName !== 'string') {\n          throw new TypeError('The \"config.options.appName\" property must be of type string.');\n        }\n\n        this.config.options.appName = config.options.appName;\n      }\n\n      if (config.options.camelCaseColumns !== undefined) {\n        if (typeof config.options.camelCaseColumns !== 'boolean') {\n          throw new TypeError('The \"config.options.camelCaseColumns\" property must be of type boolean.');\n        }\n\n        this.config.options.camelCaseColumns = config.options.camelCaseColumns;\n      }\n\n      if (config.options.cancelTimeout !== undefined) {\n        if (typeof config.options.cancelTimeout !== 'number') {\n          throw new TypeError('The \"config.options.cancelTimeout\" property must be of type number.');\n        }\n\n        this.config.options.cancelTimeout = config.options.cancelTimeout;\n      }\n\n      if (config.options.columnNameReplacer) {\n        if (typeof config.options.columnNameReplacer !== 'function') {\n          throw new TypeError('The \"config.options.cancelTimeout\" property must be of type function.');\n        }\n\n        this.config.options.columnNameReplacer = config.options.columnNameReplacer;\n      }\n\n      if (config.options.connectTimeout !== undefined) {\n        if (typeof config.options.connectTimeout !== 'number') {\n          throw new TypeError('The \"config.options.connectTimeout\" property must be of type number.');\n        }\n\n        this.config.options.connectTimeout = config.options.connectTimeout;\n      }\n\n      if (config.options.connectionIsolationLevel !== undefined) {\n        this.config.options.connectionIsolationLevel = config.options.connectionIsolationLevel;\n      }\n\n      if (config.options.connectTimeout !== undefined) {\n        if (typeof config.options.connectTimeout !== 'number') {\n          throw new TypeError('The \"config.options.connectTimeout\" property must be of type number.');\n        }\n\n        this.config.options.connectTimeout = config.options.connectTimeout;\n      }\n\n      if (config.options.cryptoCredentialsDetails !== undefined) {\n        if (typeof config.options.cryptoCredentialsDetails !== 'object' || config.options.cryptoCredentialsDetails === null) {\n          throw new TypeError('The \"config.options.cryptoCredentialsDetails\" property must be of type Object.');\n        }\n\n        this.config.options.cryptoCredentialsDetails = config.options.cryptoCredentialsDetails;\n      }\n\n      if (config.options.database !== undefined) {\n        if (typeof config.options.database !== 'string') {\n          throw new TypeError('The \"config.options.database\" property must be of type string.');\n        }\n\n        this.config.options.database = config.options.database;\n      }\n\n      if (config.options.datefirst !== undefined) {\n        if (typeof config.options.datefirst !== 'number' && config.options.datefirst !== null) {\n          throw new TypeError('The \"config.options.datefirst\" property must be of type number.');\n        }\n\n        if (config.options.datefirst !== null && (config.options.datefirst < 1 || config.options.datefirst > 7)) {\n          throw new RangeError('The \"config.options.datefirst\" property must be >= 1 and <= 7');\n        }\n\n        this.config.options.datefirst = config.options.datefirst;\n      }\n\n      if (config.options.dateFormat !== undefined) {\n        if (typeof config.options.dateFormat !== 'string' && config.options.dateFormat !== null) {\n          throw new TypeError('The \"config.options.dateFormat\" property must be of type string or null.');\n        }\n\n        this.config.options.dateFormat = config.options.dateFormat;\n      }\n\n      if (config.options.debug) {\n        if (config.options.debug.data !== undefined) {\n          if (typeof config.options.debug.data !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.data\" property must be of type boolean.');\n          }\n\n          this.config.options.debug.data = config.options.debug.data;\n        }\n\n        if (config.options.debug.packet !== undefined) {\n          if (typeof config.options.debug.packet !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.packet\" property must be of type boolean.');\n          }\n\n          this.config.options.debug.packet = config.options.debug.packet;\n        }\n\n        if (config.options.debug.payload !== undefined) {\n          if (typeof config.options.debug.payload !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.payload\" property must be of type boolean.');\n          }\n\n          this.config.options.debug.payload = config.options.debug.payload;\n        }\n\n        if (config.options.debug.token !== undefined) {\n          if (typeof config.options.debug.token !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.token\" property must be of type boolean.');\n          }\n\n          this.config.options.debug.token = config.options.debug.token;\n        }\n      }\n\n      if (config.options.enableAnsiNull !== undefined) {\n        if (typeof config.options.enableAnsiNull !== 'boolean' && config.options.enableAnsiNull !== null) {\n          throw new TypeError('The \"config.options.enableAnsiNull\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableAnsiNull = config.options.enableAnsiNull;\n      }\n\n      if (config.options.enableAnsiNullDefault !== undefined) {\n        if (typeof config.options.enableAnsiNullDefault !== 'boolean' && config.options.enableAnsiNullDefault !== null) {\n          throw new TypeError('The \"config.options.enableAnsiNullDefault\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableAnsiNullDefault = config.options.enableAnsiNullDefault;\n      }\n\n      if (config.options.enableAnsiPadding !== undefined) {\n        if (typeof config.options.enableAnsiPadding !== 'boolean' && config.options.enableAnsiPadding !== null) {\n          throw new TypeError('The \"config.options.enableAnsiPadding\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableAnsiPadding = config.options.enableAnsiPadding;\n      }\n\n      if (config.options.enableAnsiWarnings !== undefined) {\n        if (typeof config.options.enableAnsiWarnings !== 'boolean' && config.options.enableAnsiWarnings !== null) {\n          throw new TypeError('The \"config.options.enableAnsiWarnings\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableAnsiWarnings = config.options.enableAnsiWarnings;\n      }\n\n      if (config.options.enableArithAbort !== undefined) {\n        if (typeof config.options.enableArithAbort !== 'boolean' && config.options.enableArithAbort !== null) {\n          throw new TypeError('The \"config.options.enableArithAbort\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableArithAbort = config.options.enableArithAbort;\n      }\n\n      if (config.options.enableConcatNullYieldsNull !== undefined) {\n        if (typeof config.options.enableConcatNullYieldsNull !== 'boolean' && config.options.enableConcatNullYieldsNull !== null) {\n          throw new TypeError('The \"config.options.enableConcatNullYieldsNull\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableConcatNullYieldsNull = config.options.enableConcatNullYieldsNull;\n      }\n\n      if (config.options.enableCursorCloseOnCommit !== undefined) {\n        if (typeof config.options.enableCursorCloseOnCommit !== 'boolean' && config.options.enableCursorCloseOnCommit !== null) {\n          throw new TypeError('The \"config.options.enableCursorCloseOnCommit\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableCursorCloseOnCommit = config.options.enableCursorCloseOnCommit;\n      }\n\n      if (config.options.enableImplicitTransactions !== undefined) {\n        if (typeof config.options.enableImplicitTransactions !== 'boolean' && config.options.enableImplicitTransactions !== null) {\n          throw new TypeError('The \"config.options.enableImplicitTransactions\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableImplicitTransactions = config.options.enableImplicitTransactions;\n      }\n\n      if (config.options.enableNumericRoundabort !== undefined) {\n        if (typeof config.options.enableNumericRoundabort !== 'boolean' && config.options.enableNumericRoundabort !== null) {\n          throw new TypeError('The \"config.options.enableNumericRoundabort\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableNumericRoundabort = config.options.enableNumericRoundabort;\n      }\n\n      if (config.options.enableQuotedIdentifier !== undefined) {\n        if (typeof config.options.enableQuotedIdentifier !== 'boolean' && config.options.enableQuotedIdentifier !== null) {\n          throw new TypeError('The \"config.options.enableQuotedIdentifier\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableQuotedIdentifier = config.options.enableQuotedIdentifier;\n      }\n\n      if (config.options.encrypt !== undefined) {\n        if (typeof config.options.encrypt !== 'boolean') {\n          throw new TypeError('The \"config.options.encrypt\" property must be of type boolean.');\n        }\n\n        this.config.options.encrypt = config.options.encrypt;\n      } else {\n        this.config.options.encrypt = true;\n      }\n\n      if (config.options.fallbackToDefaultDb !== undefined) {\n        if (typeof config.options.fallbackToDefaultDb !== 'boolean') {\n          throw new TypeError('The \"config.options.fallbackToDefaultDb\" property must be of type boolean.');\n        }\n\n        this.config.options.fallbackToDefaultDb = config.options.fallbackToDefaultDb;\n      }\n\n      if (config.options.instanceName !== undefined) {\n        if (typeof config.options.instanceName !== 'string') {\n          throw new TypeError('The \"config.options.instanceName\" property must be of type string.');\n        }\n\n        this.config.options.instanceName = config.options.instanceName;\n        this.config.options.port = undefined;\n      }\n\n      if (config.options.isolationLevel !== undefined) {\n        if (typeof config.options.isolationLevel !== 'number') {\n          throw new TypeError('The \"config.options.language\" property must be of type numer.');\n        }\n\n        this.config.options.isolationLevel = config.options.isolationLevel;\n      }\n\n      if (config.options.language !== undefined) {\n        if (typeof config.options.language !== 'string' && config.options.language !== null) {\n          throw new TypeError('The \"config.options.language\" property must be of type string or null.');\n        }\n\n        this.config.options.language = config.options.language;\n      }\n\n      if (config.options.localAddress !== undefined) {\n        if (typeof config.options.localAddress !== 'string') {\n          throw new TypeError('The \"config.options.localAddress\" property must be of type string.');\n        }\n\n        this.config.options.localAddress = config.options.localAddress;\n      }\n\n      if (config.options.multiSubnetFailover !== undefined) {\n        if (typeof config.options.multiSubnetFailover !== 'boolean') {\n          throw new TypeError('The \"config.options.multiSubnetFailover\" property must be of type boolean.');\n        }\n\n        this.config.options.multiSubnetFailover = config.options.multiSubnetFailover;\n      }\n\n      if (config.options.packetSize !== undefined) {\n        if (typeof config.options.packetSize !== 'number') {\n          throw new TypeError('The \"config.options.packetSize\" property must be of type number.');\n        }\n\n        this.config.options.packetSize = config.options.packetSize;\n      }\n\n      if (config.options.port !== undefined) {\n        if (typeof config.options.port !== 'number') {\n          throw new TypeError('The \"config.options.port\" property must be of type number.');\n        }\n\n        if (config.options.port <= 0 || config.options.port >= 65536) {\n          throw new RangeError('The \"config.options.port\" property must be > 0 and < 65536');\n        }\n\n        this.config.options.port = config.options.port;\n        this.config.options.instanceName = undefined;\n      }\n\n      if (config.options.readOnlyIntent !== undefined) {\n        if (typeof config.options.readOnlyIntent !== 'boolean') {\n          throw new TypeError('The \"config.options.readOnlyIntent\" property must be of type boolean.');\n        }\n\n        this.config.options.readOnlyIntent = config.options.readOnlyIntent;\n      }\n\n      if (config.options.requestTimeout !== undefined) {\n        if (typeof config.options.requestTimeout !== 'number') {\n          throw new TypeError('The \"config.options.requestTimeout\" property must be of type number.');\n        }\n\n        this.config.options.requestTimeout = config.options.requestTimeout;\n      }\n\n      if (config.options.maxRetriesOnTransientErrors !== undefined) {\n        if (typeof config.options.maxRetriesOnTransientErrors !== 'number') {\n          throw new TypeError('The \"config.options.maxRetriesOnTransientErrors\" property must be of type number.');\n        }\n\n        if (config.options.maxRetriesOnTransientErrors < 0) {\n          throw new TypeError('The \"config.options.maxRetriesOnTransientErrors\" property must be equal or greater than 0.');\n        }\n\n        this.config.options.maxRetriesOnTransientErrors = config.options.maxRetriesOnTransientErrors;\n      }\n\n      if (config.options.connectionRetryInterval !== undefined) {\n        if (typeof config.options.connectionRetryInterval !== 'number') {\n          throw new TypeError('The \"config.options.connectionRetryInterval\" property must be of type number.');\n        }\n\n        if (config.options.connectionRetryInterval <= 0) {\n          throw new TypeError('The \"config.options.connectionRetryInterval\" property must be greater than 0.');\n        }\n\n        this.config.options.connectionRetryInterval = config.options.connectionRetryInterval;\n      }\n\n      if (config.options.rowCollectionOnDone !== undefined) {\n        if (typeof config.options.rowCollectionOnDone !== 'boolean') {\n          throw new TypeError('The \"config.options.rowCollectionOnDone\" property must be of type boolean.');\n        }\n\n        this.config.options.rowCollectionOnDone = config.options.rowCollectionOnDone;\n      }\n\n      if (config.options.rowCollectionOnRequestCompletion !== undefined) {\n        if (typeof config.options.rowCollectionOnRequestCompletion !== 'boolean') {\n          throw new TypeError('The \"config.options.rowCollectionOnRequestCompletion\" property must be of type boolean.');\n        }\n\n        this.config.options.rowCollectionOnRequestCompletion = config.options.rowCollectionOnRequestCompletion;\n      }\n\n      if (config.options.tdsVersion !== undefined) {\n        if (typeof config.options.tdsVersion !== 'string') {\n          throw new TypeError('The \"config.options.tdsVersion\" property must be of type string.');\n        }\n\n        this.config.options.tdsVersion = config.options.tdsVersion;\n      }\n\n      if (config.options.textsize !== undefined) {\n        if (typeof config.options.textsize !== 'number' && config.options.textsize !== null) {\n          throw new TypeError('The \"config.options.textsize\" property must be of type number or null.');\n        }\n\n        this.config.options.textsize = config.options.textsize;\n      }\n\n      if (config.options.trustServerCertificate !== undefined) {\n        if (typeof config.options.trustServerCertificate !== 'boolean') {\n          throw new TypeError('The \"config.options.trustServerCertificate\" property must be of type boolean.');\n        }\n\n        this.config.options.trustServerCertificate = config.options.trustServerCertificate;\n      }\n\n      if (config.options.useColumnNames !== undefined) {\n        if (typeof config.options.useColumnNames !== 'boolean') {\n          throw new TypeError('The \"config.options.useColumnNames\" property must be of type boolean.');\n        }\n\n        this.config.options.useColumnNames = config.options.useColumnNames;\n      }\n\n      if (config.options.useUTC !== undefined) {\n        if (typeof config.options.useUTC !== 'boolean') {\n          throw new TypeError('The \"config.options.useUTC\" property must be of type boolean.');\n        }\n\n        this.config.options.useUTC = config.options.useUTC;\n      }\n\n      if (config.options.lowerCaseGuids !== undefined) {\n        if (typeof config.options.lowerCaseGuids !== 'boolean') {\n          throw new TypeError('The \"config.options.lowerCaseGuids\" property must be of type boolean.');\n        }\n\n        this.config.options.lowerCaseGuids = config.options.lowerCaseGuids;\n      }\n    }\n\n    let credentialsDetails = this.config.options.cryptoCredentialsDetails;\n\n    if (credentialsDetails.secureOptions === undefined) {\n      // If the caller has not specified their own `secureOptions`,\n      // we set `SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS` here.\n      // Older SQL Server instances running on older Windows versions have\n      // trouble with the BEAST workaround in OpenSSL.\n      // As BEAST is a browser specific exploit, we can just disable this option here.\n      credentialsDetails = Object.create(credentialsDetails, {\n        secureOptions: {\n          value: _constants.default.SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS\n        }\n      });\n    }\n\n    this.secureContext = (0, _tls.createSecureContext)(credentialsDetails);\n    this.debug = this.createDebug();\n    this.tokenStreamParser = this.createTokenStreamParser();\n    this.inTransaction = false;\n    this.transactionDescriptors = [Buffer.from([0, 0, 0, 0, 0, 0, 0, 0])]; // 'beginTransaction', 'commitTransaction' and 'rollbackTransaction'\n    // events are utilized to maintain inTransaction property state which in\n    // turn is used in managing transactions. These events are only fired for\n    // TDS version 7.2 and beyond. The properties below are used to emulate\n    // equivalent behavior for TDS versions before 7.2.\n\n    this.transactionDepth = 0;\n    this.isSqlBatch = false;\n    this.closed = false;\n    this.loggedIn = false;\n    this.messageBuffer = Buffer.alloc(0);\n    this.curTransientRetryCount = 0;\n    this.transientErrorLookup = new _transientErrorLookup.TransientErrorLookup();\n    this.state = this.STATE.CONNECTING;\n    this.state.enter.call(this);\n  }\n\n  close() {\n    this.transitionTo(this.STATE.FINAL);\n  }\n\n  initialiseConnection() {\n    this.connect();\n    this.createConnectTimer();\n  }\n\n  cleanupConnection(cleanupType) {\n    if (!this.closed) {\n      this.clearConnectTimer();\n      this.clearRequestTimer();\n      this.clearRetryTimer();\n      this.closeConnection();\n\n      if (cleanupType === CLEANUP_TYPE.REDIRECT) {\n        this.emit('rerouting');\n      } else if (cleanupType !== CLEANUP_TYPE.RETRY) {\n        process.nextTick(() => {\n          this.emit('end');\n        });\n      }\n\n      const request = this.request;\n\n      if (request) {\n        const err = (0, _errors.RequestError)('Connection closed before request completed.', 'ECLOSE');\n        request.callback(err);\n        this.request = undefined;\n      }\n\n      this.closed = true;\n      this.loggedIn = false;\n      this.loginError = undefined;\n    }\n  }\n\n  createDebug() {\n    const debug = new _debug.default(this.config.options.debug);\n    debug.on('debug', message => {\n      this.emit('debug', message);\n    });\n    return debug;\n  }\n\n  createTokenStreamParser() {\n    const tokenStreamParser = new _tokenStreamParser.Parser(this.debug, undefined, this.config.options);\n    tokenStreamParser.on('infoMessage', token => {\n      this.emit('infoMessage', token);\n    });\n    tokenStreamParser.on('sspichallenge', token => {\n      if (token.ntlmpacket) {\n        this.ntlmpacket = token.ntlmpacket;\n        this.ntlmpacketBuffer = token.ntlmpacketBuffer;\n      }\n\n      this.emit('sspichallenge', token);\n    });\n    tokenStreamParser.on('errorMessage', token => {\n      this.emit('errorMessage', token);\n\n      if (this.loggedIn) {\n        const request = this.request;\n\n        if (request) {\n          if (!request.canceled) {\n            const error = new _errors.RequestError(token.message, 'EREQUEST');\n            error.number = token.number;\n            error.state = token.state;\n            error.class = token.class;\n            error.serverName = token.serverName;\n            error.procName = token.procName;\n            error.lineNumber = token.lineNumber;\n            request.error = error;\n          }\n        }\n      } else {\n        const error = (0, _errors.ConnectionError)(token.message, 'ELOGIN');\n        const isLoginErrorTransient = this.transientErrorLookup.isTransientError(token.number);\n\n        if (isLoginErrorTransient && this.curTransientRetryCount !== this.config.options.maxRetriesOnTransientErrors) {\n          error.isTransient = true;\n        }\n\n        this.loginError = error;\n      }\n    });\n    tokenStreamParser.on('databaseChange', token => {\n      this.emit('databaseChange', token.newValue);\n    });\n    tokenStreamParser.on('languageChange', token => {\n      this.emit('languageChange', token.newValue);\n    });\n    tokenStreamParser.on('charsetChange', token => {\n      this.emit('charsetChange', token.newValue);\n    });\n    tokenStreamParser.on('fedAuthInfo', token => {\n      this.dispatchEvent('fedAuthInfo', token);\n    });\n    tokenStreamParser.on('featureExtAck', token => {\n      this.dispatchEvent('featureExtAck', token);\n    });\n    tokenStreamParser.on('loginack', token => {\n      if (!token.tdsVersion) {\n        // unsupported TDS version\n        this.loginError = (0, _errors.ConnectionError)('Server responded with unknown TDS version.', 'ETDS');\n        this.loggedIn = false;\n        return;\n      }\n\n      if (!token.interface) {\n        // unsupported interface\n        this.loginError = (0, _errors.ConnectionError)('Server responded with unsupported interface.', 'EINTERFACENOTSUPP');\n        this.loggedIn = false;\n        return;\n      } // use negotiated version\n\n\n      this.config.options.tdsVersion = token.tdsVersion;\n      this.loggedIn = true;\n    });\n    tokenStreamParser.on('routingChange', token => {\n      this.routingData = token.newValue;\n      this.dispatchEvent('routingChange');\n    });\n    tokenStreamParser.on('packetSizeChange', token => {\n      this.messageIo.packetSize(token.newValue);\n    }); // A new top-level transaction was started. This is not fired\n    // for nested transactions.\n\n    tokenStreamParser.on('beginTransaction', token => {\n      this.transactionDescriptors.push(token.newValue);\n      this.inTransaction = true;\n    }); // A top-level transaction was committed. This is not fired\n    // for nested transactions.\n\n    tokenStreamParser.on('commitTransaction', () => {\n      this.transactionDescriptors.length = 1;\n      this.inTransaction = false;\n    }); // A top-level transaction was rolled back. This is not fired\n    // for nested transactions. This is also fired if a batch\n    // aborting error happened that caused a rollback.\n\n    tokenStreamParser.on('rollbackTransaction', () => {\n      this.transactionDescriptors.length = 1; // An outermost transaction was rolled back. Reset the transaction counter\n\n      this.inTransaction = false;\n      this.emit('rollbackTransaction');\n    });\n    tokenStreamParser.on('columnMetadata', token => {\n      const request = this.request;\n\n      if (request) {\n        if (!request.canceled) {\n          if (this.config.options.useColumnNames) {\n            const columns = {};\n\n            for (let j = 0, len = token.columns.length; j < len; j++) {\n              const col = token.columns[j];\n\n              if (columns[col.colName] == null) {\n                columns[col.colName] = col;\n              }\n            }\n\n            request.emit('columnMetadata', columns);\n          } else {\n            request.emit('columnMetadata', token.columns);\n          }\n        }\n      } else {\n        this.emit('error', new Error(\"Received 'columnMetadata' when no sqlRequest is in progress\"));\n        this.close();\n      }\n    });\n    tokenStreamParser.on('order', token => {\n      const request = this.request;\n\n      if (request) {\n        if (!request.canceled) {\n          request.emit('order', token.orderColumns);\n        }\n      } else {\n        this.emit('error', new Error(\"Received 'order' when no sqlRequest is in progress\"));\n        this.close();\n      }\n    });\n    tokenStreamParser.on('row', token => {\n      const request = this.request;\n\n      if (request) {\n        if (!request.canceled) {\n          if (this.config.options.rowCollectionOnRequestCompletion) {\n            request.rows.push(token.columns);\n          }\n\n          if (this.config.options.rowCollectionOnDone) {\n            request.rst.push(token.columns);\n          }\n\n          if (!(this.state === this.STATE.SENT_ATTENTION && request.paused)) {\n            request.emit('row', token.columns);\n          }\n        }\n      } else {\n        this.emit('error', new Error(\"Received 'row' when no sqlRequest is in progress\"));\n        this.close();\n      }\n    });\n    tokenStreamParser.on('returnStatus', token => {\n      const request = this.request;\n\n      if (request) {\n        if (!request.canceled) {\n          // Keep value for passing in 'doneProc' event.\n          this.procReturnStatusValue = token.value;\n        }\n      }\n    });\n    tokenStreamParser.on('returnValue', token => {\n      const request = this.request;\n\n      if (request) {\n        if (!request.canceled) {\n          request.emit('returnValue', token.paramName, token.value, token.metadata);\n        }\n      }\n    });\n    tokenStreamParser.on('doneProc', token => {\n      const request = this.request;\n\n      if (request) {\n        if (!request.canceled) {\n          request.emit('doneProc', token.rowCount, token.more, this.procReturnStatusValue, request.rst);\n          this.procReturnStatusValue = undefined;\n\n          if (token.rowCount !== undefined) {\n            request.rowCount += token.rowCount;\n          }\n\n          if (this.config.options.rowCollectionOnDone) {\n            request.rst = [];\n          }\n        }\n      }\n    });\n    tokenStreamParser.on('doneInProc', token => {\n      const request = this.request;\n\n      if (request) {\n        if (!request.canceled) {\n          request.emit('doneInProc', token.rowCount, token.more, request.rst);\n\n          if (token.rowCount !== undefined) {\n            request.rowCount += token.rowCount;\n          }\n\n          if (this.config.options.rowCollectionOnDone) {\n            request.rst = [];\n          }\n        }\n      }\n    });\n    tokenStreamParser.on('done', token => {\n      const request = this.request;\n\n      if (request) {\n        if (token.attention) {\n          this.dispatchEvent('attention');\n        }\n\n        if (request.canceled) {\n          // If we received a `DONE` token with `DONE_ERROR`, but no previous `ERROR` token,\n          // We assume this is the indication that an in-flight request was canceled.\n          if (token.sqlError && !request.error) {\n            this.clearCancelTimer();\n            request.error = (0, _errors.RequestError)('Canceled.', 'ECANCEL');\n          }\n        } else {\n          if (token.sqlError && !request.error) {\n            // check if the DONE_ERROR flags was set, but an ERROR token was not sent.\n            request.error = (0, _errors.RequestError)('An unknown error has occurred.', 'UNKNOWN');\n          }\n\n          request.emit('done', token.rowCount, token.more, request.rst);\n\n          if (token.rowCount !== undefined) {\n            request.rowCount += token.rowCount;\n          }\n\n          if (this.config.options.rowCollectionOnDone) {\n            request.rst = [];\n          }\n        }\n      }\n    });\n    tokenStreamParser.on('endOfMessage', () => {\n      // EOM pseudo token received\n      if (this.state === this.STATE.SENT_CLIENT_REQUEST) {\n        this.dispatchEvent('endOfMessageMarkerReceived');\n      }\n    });\n    tokenStreamParser.on('resetConnection', () => {\n      this.emit('resetConnection');\n    });\n    tokenStreamParser.on('drain', () => {\n      // Bridge the release of backpressure from the token stream parser\n      // transform to the packet stream transform.\n      this.messageIo.resume();\n    });\n    return tokenStreamParser;\n  }\n\n  connect() {\n    if (this.config.options.port) {\n      return this.connectOnPort(this.config.options.port, this.config.options.multiSubnetFailover);\n    } else {\n      return new _instanceLookup.InstanceLookup().instanceLookup({\n        server: this.config.server,\n        instanceName: this.config.options.instanceName,\n        timeout: this.config.options.connectTimeout\n      }, (message, port) => {\n        if (this.state === this.STATE.FINAL) {\n          return;\n        }\n\n        if (message) {\n          this.emit('connect', (0, _errors.ConnectionError)(message, 'EINSTLOOKUP'));\n        } else {\n          this.connectOnPort(port, this.config.options.multiSubnetFailover);\n        }\n      });\n    }\n  }\n\n  connectOnPort(port, multiSubnetFailover) {\n    const connectOpts = {\n      host: this.routingData ? this.routingData.server : this.config.server,\n      port: this.routingData ? this.routingData.port : port,\n      localAddress: this.config.options.localAddress\n    };\n    new _connector.Connector(connectOpts, multiSubnetFailover).execute((err, socket) => {\n      if (err) {\n        return this.socketError(err);\n      }\n\n      if (this.state === this.STATE.FINAL) {\n        socket.destroy();\n        return;\n      }\n\n      socket.on('error', error => {\n        this.socketError(error);\n      });\n      socket.on('close', () => {\n        this.socketClose();\n      });\n      socket.on('end', () => {\n        this.socketEnd();\n      });\n      socket.setKeepAlive(true, KEEP_ALIVE_INITIAL_DELAY);\n      this.messageIo = new _messageIo.default(socket, this.config.options.packetSize, this.debug);\n      this.messageIo.on('data', data => {\n        this.dispatchEvent('data', data);\n      });\n      this.messageIo.on('message', () => {\n        this.dispatchEvent('message');\n      });\n      this.messageIo.on('secure', cleartext => {\n        this.emit('secure', cleartext);\n      });\n      this.socket = socket;\n      this.socketConnect();\n    });\n  }\n\n  closeConnection() {\n    if (this.socket) {\n      this.socket.destroy();\n    }\n  }\n\n  createConnectTimer() {\n    this.connectTimer = setTimeout(() => {\n      this.connectTimeout();\n    }, this.config.options.connectTimeout);\n  }\n\n  createCancelTimer() {\n    this.clearCancelTimer();\n    const timeout = this.config.options.cancelTimeout;\n\n    if (timeout > 0) {\n      this.cancelTimer = setTimeout(() => {\n        this.cancelTimeout();\n      }, timeout);\n    }\n  }\n\n  createRequestTimer() {\n    this.clearRequestTimer(); // release old timer, just to be safe\n\n    const request = this.request;\n    const timeout = request.timeout !== undefined ? request.timeout : this.config.options.requestTimeout;\n\n    if (timeout) {\n      this.requestTimer = setTimeout(() => {\n        this.requestTimeout();\n      }, timeout);\n    }\n  }\n\n  createRetryTimer() {\n    this.clearRetryTimer();\n    this.retryTimer = setTimeout(() => {\n      this.retryTimeout();\n    }, this.config.options.connectionRetryInterval);\n  }\n\n  connectTimeout() {\n    const message = `Failed to connect to ${this.config.server}${this.config.options.port ? `:${this.config.options.port}` : `\\\\${this.config.options.instanceName}`} in ${this.config.options.connectTimeout}ms`;\n    this.debug.log(message);\n    this.emit('connect', (0, _errors.ConnectionError)(message, 'ETIMEOUT'));\n    this.connectTimer = undefined;\n    this.dispatchEvent('connectTimeout');\n  }\n\n  cancelTimeout() {\n    const message = `Failed to cancel request in ${this.config.options.cancelTimeout}ms`;\n    this.debug.log(message);\n    this.dispatchEvent('socketError', (0, _errors.ConnectionError)(message, 'ETIMEOUT'));\n  }\n\n  requestTimeout() {\n    this.requestTimer = undefined;\n    const request = this.request;\n    request.cancel();\n    const timeout = request.timeout !== undefined ? request.timeout : this.config.options.requestTimeout;\n    const message = 'Timeout: Request failed to complete in ' + timeout + 'ms';\n    request.error = (0, _errors.RequestError)(message, 'ETIMEOUT');\n  }\n\n  retryTimeout() {\n    this.retryTimer = undefined;\n    this.emit('retry');\n    this.transitionTo(this.STATE.CONNECTING);\n  }\n\n  clearConnectTimer() {\n    if (this.connectTimer) {\n      clearTimeout(this.connectTimer);\n    }\n  }\n\n  clearCancelTimer() {\n    if (this.cancelTimer) {\n      clearTimeout(this.cancelTimer);\n    }\n  }\n\n  clearRequestTimer() {\n    if (this.requestTimer) {\n      clearTimeout(this.requestTimer);\n      this.requestTimer = undefined;\n    }\n  }\n\n  clearRetryTimer() {\n    if (this.retryTimer) {\n      clearTimeout(this.retryTimer);\n      this.retryTimer = undefined;\n    }\n  }\n\n  transitionTo(newState) {\n    if (this.state === newState) {\n      this.debug.log('State is already ' + newState.name);\n      return;\n    }\n\n    if (this.state && this.state.exit) {\n      this.state.exit.call(this, newState);\n    }\n\n    this.debug.log('State change: ' + (this.state ? this.state.name : 'undefined') + ' -> ' + newState.name);\n    this.state = newState;\n\n    if (this.state.enter) {\n      this.state.enter.apply(this);\n    }\n  }\n\n  getEventHandler(eventName) {\n    const handler = this.state.events[eventName];\n\n    if (!handler) {\n      throw new Error(`No event '${eventName}' in state '${this.state.name}'`);\n    }\n\n    return handler;\n  }\n\n  dispatchEvent(eventName, ...args) {\n    const handler = this.state.events[eventName];\n\n    if (handler) {\n      handler.apply(this, args);\n    } else {\n      this.emit('error', new Error(`No event '${eventName}' in state '${this.state.name}'`));\n      this.close();\n    }\n  }\n\n  socketError(error) {\n    if (this.state === this.STATE.CONNECTING || this.state === this.STATE.SENT_TLSSSLNEGOTIATION) {\n      const message = `Failed to connect to ${this.config.server}:${this.config.options.port} - ${error.message}`;\n      this.debug.log(message);\n      this.emit('connect', (0, _errors.ConnectionError)(message, 'ESOCKET'));\n    } else {\n      const message = `Connection lost - ${error.message}`;\n      this.debug.log(message);\n      this.emit('error', (0, _errors.ConnectionError)(message, 'ESOCKET'));\n    }\n\n    this.dispatchEvent('socketError', error);\n  }\n\n  socketConnect() {\n    this.closed = false;\n    this.debug.log('connected to ' + this.config.server + ':' + this.config.options.port);\n    this.dispatchEvent('socketConnect');\n  }\n\n  socketEnd() {\n    this.debug.log('socket ended');\n\n    if (this.state !== this.STATE.FINAL) {\n      const error = new Error('socket hang up');\n      error.code = 'ECONNRESET';\n      this.socketError(error);\n    }\n  }\n\n  socketClose() {\n    this.debug.log('connection to ' + this.config.server + ':' + this.config.options.port + ' closed');\n\n    if (this.state === this.STATE.REROUTING) {\n      this.debug.log('Rerouting to ' + this.routingData.server + ':' + this.routingData.port);\n      this.dispatchEvent('reconnect');\n    } else if (this.state === this.STATE.TRANSIENT_FAILURE_RETRY) {\n      const server = this.routingData ? this.routingData.server : this.config.server;\n      const port = this.routingData ? this.routingData.port : this.config.options.port;\n      this.debug.log('Retry after transient failure connecting to ' + server + ':' + port);\n      this.dispatchEvent('retry');\n    } else {\n      this.transitionTo(this.STATE.FINAL);\n    }\n  }\n\n  sendPreLogin() {\n    const payload = new _preloginPayload.default({\n      encrypt: this.config.options.encrypt\n    });\n    this.messageIo.sendMessage(_packet.TYPE.PRELOGIN, payload.data);\n    this.debug.payload(function () {\n      return payload.toString('  ');\n    });\n  }\n\n  emptyMessageBuffer() {\n    this.messageBuffer = Buffer.alloc(0);\n  }\n\n  addToMessageBuffer(data) {\n    this.messageBuffer = Buffer.concat([this.messageBuffer, data]);\n  }\n\n  sendLogin7Packet() {\n    const payload = new _login7Payload.default({\n      tdsVersion: _tdsVersions.versions[this.config.options.tdsVersion],\n      packetSize: this.config.options.packetSize,\n      clientProgVer: 0,\n      clientPid: process.pid,\n      connectionId: 0,\n      clientTimeZone: new Date().getTimezoneOffset(),\n      clientLcid: 0x00000409\n    });\n    const authentication = this.config.authentication;\n\n    switch (authentication.type) {\n      case 'azure-active-directory-password':\n        payload.fedAuth = {\n          type: 'ADAL',\n          echo: this.fedAuthRequired,\n          workflow: 'default'\n        };\n        break;\n\n      case 'azure-active-directory-access-token':\n        payload.fedAuth = {\n          type: 'SECURITYTOKEN',\n          echo: this.fedAuthRequired,\n          fedAuthToken: authentication.options.token\n        };\n        break;\n\n      case 'azure-active-directory-msi-vm':\n      case 'azure-active-directory-msi-app-service':\n      case 'azure-active-directory-service-principal-secret':\n        payload.fedAuth = {\n          type: 'ADAL',\n          echo: this.fedAuthRequired,\n          workflow: 'integrated'\n        };\n        break;\n\n      case 'ntlm':\n        payload.sspi = (0, _ntlm.createNTLMRequest)({\n          domain: authentication.options.domain\n        });\n        break;\n\n      default:\n        payload.userName = authentication.options.userName;\n        payload.password = authentication.options.password;\n    }\n\n    payload.hostname = _os.default.hostname();\n    payload.serverName = this.routingData ? this.routingData.server : this.config.server;\n    payload.appName = this.config.options.appName || 'Tedious';\n    payload.libraryName = _library.name;\n    payload.language = this.config.options.language;\n    payload.database = this.config.options.database;\n    payload.clientId = Buffer.from([1, 2, 3, 4, 5, 6]);\n    payload.readOnlyIntent = this.config.options.readOnlyIntent;\n    payload.initDbFatal = !this.config.options.fallbackToDefaultDb;\n    this.routingData = undefined;\n    this.messageIo.sendMessage(_packet.TYPE.LOGIN7, payload.toBuffer());\n    this.debug.payload(function () {\n      return payload.toString('  ');\n    });\n  }\n\n  sendFedAuthTokenMessage(token) {\n    const accessTokenLen = Buffer.byteLength(token, 'ucs2');\n    const data = Buffer.alloc(8 + accessTokenLen);\n    let offset = 0;\n    offset = data.writeUInt32LE(accessTokenLen + 4, offset);\n    offset = data.writeUInt32LE(accessTokenLen, offset);\n    data.write(token, offset, 'ucs2');\n    this.messageIo.sendMessage(_packet.TYPE.FEDAUTH_TOKEN, data); // sent the fedAuth token message, the rest is similar to standard login 7\n\n    this.transitionTo(this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\n  } // Returns false to apply backpressure.\n\n\n  sendDataToTokenStreamParser(data) {\n    return this.tokenStreamParser.addBuffer(data);\n  } // This is an internal method that is called from Request.pause().\n  // It has to check whether the passed Request object represents the currently\n  // active request, because the application might have called Request.pause()\n  // on an old inactive Request object.\n\n\n  pauseRequest(request) {\n    if (this.isRequestActive(request)) {\n      this.tokenStreamParser.pause();\n    }\n  } // This is an internal method that is called from Request.resume().\n\n\n  resumeRequest(request) {\n    if (this.isRequestActive(request)) {\n      this.tokenStreamParser.resume();\n    }\n  } // Returns true if the passed request is the currently active request of the connection.\n\n\n  isRequestActive(request) {\n    return request === this.request && this.state === this.STATE.SENT_CLIENT_REQUEST;\n  }\n\n  sendInitialSql() {\n    const payload = new _sqlbatchPayload.default(this.getInitialSql(), this.currentTransactionDescriptor(), this.config.options);\n    payload.getData(data => {\n      return this.messageIo.sendMessage(_packet.TYPE.SQL_BATCH, data);\n    });\n  }\n\n  getInitialSql() {\n    const options = [];\n\n    if (this.config.options.enableAnsiNull === true) {\n      options.push('set ansi_nulls on');\n    } else if (this.config.options.enableAnsiNull === false) {\n      options.push('set ansi_nulls off');\n    }\n\n    if (this.config.options.enableAnsiNullDefault === true) {\n      options.push('set ansi_null_dflt_on on');\n    } else if (this.config.options.enableAnsiNullDefault === false) {\n      options.push('set ansi_null_dflt_on off');\n    }\n\n    if (this.config.options.enableAnsiPadding === true) {\n      options.push('set ansi_padding on');\n    } else if (this.config.options.enableAnsiPadding === false) {\n      options.push('set ansi_padding off');\n    }\n\n    if (this.config.options.enableAnsiWarnings === true) {\n      options.push('set ansi_warnings on');\n    } else if (this.config.options.enableAnsiWarnings === false) {\n      options.push('set ansi_warnings off');\n    }\n\n    if (this.config.options.enableArithAbort === true) {\n      options.push('set arithabort on');\n    } else if (this.config.options.enableArithAbort === false) {\n      options.push('set arithabort off');\n    }\n\n    if (this.config.options.enableConcatNullYieldsNull === true) {\n      options.push('set concat_null_yields_null on');\n    } else if (this.config.options.enableArithAbort === false) {\n      options.push('set concat_null_yields_null off');\n    }\n\n    if (this.config.options.enableCursorCloseOnCommit === true) {\n      options.push('set cursor_close_on_commit on');\n    } else if (this.config.options.enableCursorCloseOnCommit === false) {\n      options.push('set cursor_close_on_commit off');\n    }\n\n    if (this.config.options.datefirst !== null) {\n      options.push(`set datefirst ${this.config.options.datefirst}`);\n    }\n\n    if (this.config.options.dateFormat !== null) {\n      options.push(`set dateformat ${this.config.options.dateFormat}`);\n    }\n\n    if (this.config.options.enableImplicitTransactions === true) {\n      options.push('set implicit_transactions on');\n    } else if (this.config.options.enableImplicitTransactions === false) {\n      options.push('set implicit_transactions off');\n    }\n\n    if (this.config.options.language !== null) {\n      options.push(`set language ${this.config.options.language}`);\n    }\n\n    if (this.config.options.enableNumericRoundabort === true) {\n      options.push('set numeric_roundabort on');\n    } else if (this.config.options.enableNumericRoundabort === false) {\n      options.push('set numeric_roundabort off');\n    }\n\n    if (this.config.options.enableQuotedIdentifier === true) {\n      options.push('set quoted_identifier on');\n    } else if (this.config.options.enableQuotedIdentifier === false) {\n      options.push('set quoted_identifier off');\n    }\n\n    if (this.config.options.textsize !== null) {\n      options.push(`set textsize ${this.config.options.textsize}`);\n    }\n\n    if (this.config.options.connectionIsolationLevel !== null) {\n      options.push(`set transaction isolation level ${this.getIsolationLevelText(this.config.options.connectionIsolationLevel)}`);\n    }\n\n    if (this.config.options.abortTransactionOnError === true) {\n      options.push('set xact_abort on');\n    } else if (this.config.options.abortTransactionOnError === false) {\n      options.push('set xact_abort off');\n    }\n\n    return options.join('\\n');\n  }\n\n  processedInitialSql() {\n    this.clearConnectTimer();\n    this.emit('connect');\n  }\n\n  execSqlBatch(request) {\n    this.makeRequest(request, _packet.TYPE.SQL_BATCH, new _sqlbatchPayload.default(request.sqlTextOrProcedure, this.currentTransactionDescriptor(), this.config.options));\n  }\n\n  execSql(request) {\n    request.transformIntoExecuteSqlRpc();\n    const error = request.error;\n\n    if (error != null) {\n      process.nextTick(() => {\n        this.debug.log(error.message);\n        request.callback(error);\n      });\n      return;\n    }\n\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default(request, this.currentTransactionDescriptor(), this.config.options));\n  }\n  /**\n   @function newBulkLoad\n   @param {string} table - Table's name.\n   @param {Object} [options] - BulkLoad options.\n   @param {boolean} [options.checkConstraints=false] - Honors constraints during bulk load, it is disabled by default.\n   @param {boolean} [options.fireTriggers=false] - Honors insert triggers during bulk load, it is disabled by default.\n   @param {boolean} [options.keepNulls=false] - Honors null value passed, ignores the default values set on table.\n   @param {boolean} [options.tableLock=false] - Places a bulk update(BU) lock on table while performing bulk load. Uses row locks by default.\n   @param {callback} callback - Function to call after BulkLoad executes.\n   */\n\n\n  newBulkLoad(table, callbackOrOptions, callback) {\n    let options;\n\n    if (callback === undefined) {\n      callback = callbackOrOptions;\n      options = {};\n    } else {\n      options = callbackOrOptions;\n    }\n\n    if (typeof options !== 'object') {\n      throw new TypeError('\"options\" argument must be an object');\n    }\n\n    return new _bulkLoad.default(table, this.config.options, options, callback);\n  }\n\n  execBulkLoad(bulkLoad) {\n    bulkLoad.executionStarted = true;\n    const request = new _request.default(bulkLoad.getBulkInsertSql(), error => {\n      if (error) {\n        if (error.code === 'UNKNOWN') {\n          error.message += ' This is likely because the schema of the BulkLoad does not match the schema of the table you are attempting to insert into.';\n        }\n\n        bulkLoad.error = error;\n        bulkLoad.callback(error);\n        return;\n      }\n\n      this.makeRequest(bulkLoad, _packet.TYPE.BULK_LOAD);\n    });\n    bulkLoad.once('cancel', () => {\n      request.cancel();\n    });\n    this.execSqlBatch(request);\n  }\n\n  prepare(request) {\n    request.transformIntoPrepareRpc();\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default(request, this.currentTransactionDescriptor(), this.config.options));\n  }\n\n  unprepare(request) {\n    request.transformIntoUnprepareRpc();\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default(request, this.currentTransactionDescriptor(), this.config.options));\n  }\n\n  execute(request, parameters) {\n    request.transformIntoExecuteRpc(parameters);\n    const error = request.error;\n\n    if (error != null) {\n      process.nextTick(() => {\n        this.debug.log(error.message);\n        request.callback(error);\n      });\n      return;\n    }\n\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default(request, this.currentTransactionDescriptor(), this.config.options));\n  }\n\n  callProcedure(request) {\n    request.validateParameters();\n    const error = request.error;\n\n    if (error != null) {\n      process.nextTick(() => {\n        this.debug.log(error.message);\n        request.callback(error);\n      });\n      return;\n    }\n\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default(request, this.currentTransactionDescriptor(), this.config.options));\n  }\n\n  beginTransaction(callback, name = '', isolationLevel = this.config.options.isolationLevel) {\n    const transaction = new _transaction.Transaction(name, isolationLevel);\n\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new _request.default('SET TRANSACTION ISOLATION LEVEL ' + transaction.isolationLevelToTSQL() + ';BEGIN TRAN ' + transaction.name, err => {\n        this.transactionDepth++;\n\n        if (this.transactionDepth === 1) {\n          this.inTransaction = true;\n        }\n\n        callback(err);\n      }));\n    }\n\n    const request = new _request.default(undefined, err => {\n      return callback(err, this.currentTransactionDescriptor());\n    });\n    return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.beginPayload(this.currentTransactionDescriptor()));\n  }\n\n  commitTransaction(callback, name = '') {\n    const transaction = new _transaction.Transaction(name);\n\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new _request.default('COMMIT TRAN ' + transaction.name, err => {\n        this.transactionDepth--;\n\n        if (this.transactionDepth === 0) {\n          this.inTransaction = false;\n        }\n\n        callback(err);\n      }));\n    }\n\n    const request = new _request.default(undefined, callback);\n    return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.commitPayload(this.currentTransactionDescriptor()));\n  }\n\n  rollbackTransaction(callback, name = '') {\n    const transaction = new _transaction.Transaction(name);\n\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new _request.default('ROLLBACK TRAN ' + transaction.name, err => {\n        this.transactionDepth--;\n\n        if (this.transactionDepth === 0) {\n          this.inTransaction = false;\n        }\n\n        callback(err);\n      }));\n    }\n\n    const request = new _request.default(undefined, callback);\n    return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.rollbackPayload(this.currentTransactionDescriptor()));\n  }\n\n  saveTransaction(callback, name) {\n    const transaction = new _transaction.Transaction(name);\n\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new _request.default('SAVE TRAN ' + transaction.name, err => {\n        this.transactionDepth++;\n        callback(err);\n      }));\n    }\n\n    const request = new _request.default(undefined, callback);\n    return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.savePayload(this.currentTransactionDescriptor()));\n  }\n\n  transaction(cb, isolationLevel) {\n    if (typeof cb !== 'function') {\n      throw new TypeError('`cb` must be a function');\n    }\n\n    const useSavepoint = this.inTransaction;\n\n    const name = '_tedious_' + _crypto.default.randomBytes(10).toString('hex');\n\n    const txDone = (err, done, ...args) => {\n      if (err) {\n        if (this.inTransaction && this.state === this.STATE.LOGGED_IN) {\n          this.rollbackTransaction(txErr => {\n            done(txErr || err, ...args);\n          }, name);\n        } else {\n          done(err, ...args);\n        }\n      } else if (useSavepoint) {\n        if (this.config.options.tdsVersion < '7_2') {\n          this.transactionDepth--;\n        }\n\n        done(null, ...args);\n      } else {\n        this.commitTransaction(txErr => {\n          done(txErr, ...args);\n        }, name);\n      }\n    };\n\n    if (useSavepoint) {\n      return this.saveTransaction(err => {\n        if (err) {\n          return cb(err);\n        }\n\n        if (isolationLevel) {\n          return this.execSqlBatch(new _request.default('SET transaction isolation level ' + this.getIsolationLevelText(isolationLevel), err => {\n            return cb(err, txDone);\n          }));\n        } else {\n          return cb(null, txDone);\n        }\n      }, name);\n    } else {\n      return this.beginTransaction(err => {\n        if (err) {\n          return cb(err);\n        }\n\n        return cb(null, txDone);\n      }, name, isolationLevel);\n    }\n  }\n\n  makeRequest(request, packetType, payload) {\n    if (this.state !== this.STATE.LOGGED_IN) {\n      const message = 'Requests can only be made in the ' + this.STATE.LOGGED_IN.name + ' state, not the ' + this.state.name + ' state';\n      this.debug.log(message);\n      request.callback((0, _errors.RequestError)(message, 'EINVALIDSTATE'));\n    } else if (request.canceled) {\n      process.nextTick(() => {\n        request.callback((0, _errors.RequestError)('Canceled.', 'ECANCEL'));\n      });\n    } else {\n      if (packetType === _packet.TYPE.SQL_BATCH) {\n        this.isSqlBatch = true;\n      } else {\n        this.isSqlBatch = false;\n      }\n\n      this.request = request;\n      request.connection = this;\n      request.rowCount = 0;\n      request.rows = [];\n      request.rst = [];\n      let message;\n      request.once('cancel', () => {\n        if (!this.isRequestActive(request)) {\n          // Cancel was called on a request that is no longer active on this connection\n          return;\n        } // There's three ways to handle request cancelation:\n\n\n        if (this.state === this.STATE.BUILDING_CLIENT_REQUEST) {\n          // The request was cancelled before buffering finished\n          this.request = undefined;\n          request.callback((0, _errors.RequestError)('Canceled.', 'ECANCEL'));\n          this.transitionTo(this.STATE.LOGGED_IN);\n        } else if (message.writable) {\n          // - if the message is still writable, we'll set the ignore bit\n          //   and end the message.\n          message.ignore = true;\n          message.end();\n        } else {\n          // - but if the message has been ended (and thus has been fully sent off),\n          //   we need to send an `ATTENTION` message to the server\n          this.messageIo.sendMessage(_packet.TYPE.ATTENTION);\n          this.transitionTo(this.STATE.SENT_ATTENTION);\n        }\n\n        this.clearRequestTimer();\n        this.createCancelTimer();\n      });\n\n      if (request instanceof _bulkLoad.default) {\n        message = request.getMessageStream(); // If the bulkload was not put into streaming mode by the user,\n        // we end the rowToPacketTransform here for them.\n        //\n        // If it was put into streaming mode, it's the user's responsibility\n        // to end the stream.\n\n        if (!request.streamingMode) {\n          request.rowToPacketTransform.end();\n        }\n\n        this.messageIo.outgoingMessageStream.write(message);\n        this.transitionTo(this.STATE.SENT_CLIENT_REQUEST);\n\n        if (request.paused) {\n          // Request.pause() has been called before the request was started\n          this.pauseRequest(request);\n        }\n      } else {\n        this.createRequestTimer(); // Transition to an intermediate state to ensure that no new requests\n        // are made on the connection while the buffer is being populated.\n\n        this.transitionTo(this.STATE.BUILDING_CLIENT_REQUEST);\n        payload.getData(data => {\n          if (this.state !== this.STATE.BUILDING_CLIENT_REQUEST) {\n            // Something else has happened on the connection since starting to\n            // build the request. That state change should have invoked the\n            // request handler so there is nothing to do at this point.\n            return;\n          }\n\n          message = this.messageIo.sendMessage(packetType, data, this.resetConnectionOnNextRequest);\n          this.resetConnectionOnNextRequest = false;\n          this.debug.payload(function () {\n            return payload.toString('  ');\n          });\n          this.transitionTo(this.STATE.SENT_CLIENT_REQUEST);\n\n          if (request.paused) {\n            // Request.pause() has been called before the request was started\n            this.pauseRequest(request);\n          }\n        });\n      }\n    }\n  }\n\n  cancel() {\n    if (!this.request) {\n      return false;\n    }\n\n    if (this.request.canceled) {\n      return false;\n    }\n\n    this.request.cancel();\n    return true;\n  }\n\n  reset(callback) {\n    const request = new _request.default(this.getInitialSql(), err => {\n      if (this.config.options.tdsVersion < '7_2') {\n        this.inTransaction = false;\n      }\n\n      callback(err);\n    });\n    this.resetConnectionOnNextRequest = true;\n    this.execSqlBatch(request);\n  }\n\n  currentTransactionDescriptor() {\n    return this.transactionDescriptors[this.transactionDescriptors.length - 1];\n  }\n\n  getIsolationLevelText(isolationLevel) {\n    switch (isolationLevel) {\n      case _transaction.ISOLATION_LEVEL.READ_UNCOMMITTED:\n        return 'read uncommitted';\n\n      case _transaction.ISOLATION_LEVEL.REPEATABLE_READ:\n        return 'repeatable read';\n\n      case _transaction.ISOLATION_LEVEL.SERIALIZABLE:\n        return 'serializable';\n\n      case _transaction.ISOLATION_LEVEL.SNAPSHOT:\n        return 'snapshot';\n\n      default:\n        return 'read committed';\n    }\n  }\n\n}\n\nvar _default = Connection;\nexports.default = _default;\nmodule.exports = Connection;\nConnection.prototype.STATE = {\n  CONNECTING: {\n    name: 'Connecting',\n    enter: function enter() {\n      this.initialiseConnection();\n    },\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      socketConnect: function socketConnect() {\n        this.sendPreLogin();\n        this.transitionTo(this.STATE.SENT_PRELOGIN);\n      }\n    }\n  },\n  SENT_PRELOGIN: {\n    name: 'SentPrelogin',\n    enter: function enter() {\n      this.emptyMessageBuffer();\n    },\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      data: function (_data) {\n        function data(_x) {\n          return _data.apply(this, arguments);\n        }\n\n        data.toString = function () {\n          return _data.toString();\n        };\n\n        return data;\n      }(function (data) {\n        this.addToMessageBuffer(data);\n      }),\n      message: function message() {\n        const preloginPayload = new _preloginPayload.default(this.messageBuffer);\n        this.debug.payload(function () {\n          return preloginPayload.toString('  ');\n        });\n\n        if (preloginPayload.fedAuthRequired === 1) {\n          this.fedAuthRequired = true;\n        }\n\n        if (preloginPayload.encryptionString === 'ON' || preloginPayload.encryptionString === 'REQ') {\n          if (!this.config.options.encrypt) {\n            this.emit('connect', (0, _errors.ConnectionError)(\"Server requires encryption, set 'encrypt' config option to true.\", 'EENCRYPT'));\n            return this.close();\n          }\n\n          this.messageIo.startTls(this.secureContext, this.config.server, this.config.options.trustServerCertificate);\n          this.transitionTo(this.STATE.SENT_TLSSSLNEGOTIATION);\n        } else {\n          this.sendLogin7Packet();\n          const authentication = this.config.authentication;\n\n          if (authentication.type === 'ntlm') {\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_NTLM);\n          } else {\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\n          }\n        }\n      }\n    }\n  },\n  REROUTING: {\n    name: 'ReRouting',\n    enter: function enter() {\n      this.cleanupConnection(CLEANUP_TYPE.REDIRECT);\n    },\n    events: {\n      message: function message() {},\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      reconnect: function reconnect() {\n        this.transitionTo(this.STATE.CONNECTING);\n      }\n    }\n  },\n  TRANSIENT_FAILURE_RETRY: {\n    name: 'TRANSIENT_FAILURE_RETRY',\n    enter: function enter() {\n      this.curTransientRetryCount++;\n      this.cleanupConnection(CLEANUP_TYPE.RETRY);\n    },\n    events: {\n      message: function message() {},\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      retry: function retry() {\n        this.createRetryTimer();\n      }\n    }\n  },\n  SENT_TLSSSLNEGOTIATION: {\n    name: 'SentTLSSSLNegotiation',\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      data: function (_data2) {\n        function data(_x2) {\n          return _data2.apply(this, arguments);\n        }\n\n        data.toString = function () {\n          return _data2.toString();\n        };\n\n        return data;\n      }(function (data) {\n        this.messageIo.tlsHandshakeData(data);\n      }),\n      message: function message() {\n        if (this.messageIo.tlsNegotiationComplete) {\n          this.sendLogin7Packet();\n          const authentication = this.config.authentication;\n\n          if (authentication.type === 'azure-active-directory-password' || authentication.type === 'azure-active-directory-msi-vm' || authentication.type === 'azure-active-directory-msi-app-service' || authentication.type === 'azure-active-directory-service-principal-secret') {\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_FEDAUTH);\n          } else if (authentication.type === 'ntlm') {\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_NTLM);\n          } else {\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\n          }\n        }\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_STANDARD_LOGIN: {\n    name: 'SentLogin7WithStandardLogin',\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      data: function (_data3) {\n        function data(_x3) {\n          return _data3.apply(this, arguments);\n        }\n\n        data.toString = function () {\n          return _data3.toString();\n        };\n\n        return data;\n      }(function (data) {\n        this.sendDataToTokenStreamParser(data);\n      }),\n      routingChange: function routingChange() {\n        this.transitionTo(this.STATE.REROUTING);\n      },\n      featureExtAck: function featureExtAck(token) {\n        const authentication = this.config.authentication;\n\n        if (authentication.type === 'azure-active-directory-password' || authentication.type === 'azure-active-directory-access-token' || authentication.type === 'azure-active-directory-msi-vm' || authentication.type === 'azure-active-directory-msi-app-service' || authentication.type === 'azure-active-directory-service-principal-secret') {\n          if (token.fedAuth === undefined) {\n            this.loginError = (0, _errors.ConnectionError)('Did not receive Active Directory authentication acknowledgement');\n            this.loggedIn = false;\n          } else if (token.fedAuth.length !== 0) {\n            this.loginError = (0, _errors.ConnectionError)(`Active Directory authentication acknowledgment for ${authentication.type} authentication method includes extra data`);\n            this.loggedIn = false;\n          }\n        } else if (token.fedAuth === undefined) {\n          this.loginError = (0, _errors.ConnectionError)('Received acknowledgement for unknown feature');\n          this.loggedIn = false;\n        } else {\n          this.loginError = (0, _errors.ConnectionError)('Did not request Active Directory authentication, but received the acknowledgment');\n          this.loggedIn = false;\n        }\n      },\n      message: function message() {\n        if (this.loggedIn) {\n          this.transitionTo(this.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n        } else if (this.loginError) {\n          if (this.loginError.isTransient) {\n            this.debug.log('Initiating retry on transient error');\n            this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\n          } else {\n            this.emit('connect', this.loginError);\n            this.transitionTo(this.STATE.FINAL);\n          }\n        } else {\n          this.emit('connect', (0, _errors.ConnectionError)('Login failed.', 'ELOGIN'));\n          this.transitionTo(this.STATE.FINAL);\n        }\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_NTLM: {\n    name: 'SentLogin7WithNTLMLogin',\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      data: function (_data4) {\n        function data(_x4) {\n          return _data4.apply(this, arguments);\n        }\n\n        data.toString = function () {\n          return _data4.toString();\n        };\n\n        return data;\n      }(function (data) {\n        this.sendDataToTokenStreamParser(data);\n      }),\n      message: function message() {\n        if (this.ntlmpacket) {\n          const authentication = this.config.authentication;\n          const payload = new _ntlmPayload.default({\n            domain: authentication.options.domain,\n            userName: authentication.options.userName,\n            password: authentication.options.password,\n            ntlmpacket: this.ntlmpacket\n          });\n          this.messageIo.sendMessage(_packet.TYPE.NTLMAUTH_PKT, payload.data);\n          this.debug.payload(function () {\n            return payload.toString('  ');\n          });\n          this.ntlmpacket = undefined;\n        } else if (this.loggedIn) {\n          this.transitionTo(this.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n        } else if (this.loginError) {\n          if (this.loginError.isTransient) {\n            this.debug.log('Initiating retry on transient error');\n            this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\n          } else {\n            this.emit('connect', this.loginError);\n            this.transitionTo(this.STATE.FINAL);\n          }\n        } else {\n          this.emit('connect', (0, _errors.ConnectionError)('Login failed.', 'ELOGIN'));\n          this.transitionTo(this.STATE.FINAL);\n        }\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_FEDAUTH: {\n    name: 'SentLogin7Withfedauth',\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      data: function (_data5) {\n        function data(_x5) {\n          return _data5.apply(this, arguments);\n        }\n\n        data.toString = function () {\n          return _data5.toString();\n        };\n\n        return data;\n      }(function (data) {\n        this.sendDataToTokenStreamParser(data);\n      }),\n      routingChange: function routingChange() {\n        this.transitionTo(this.STATE.REROUTING);\n      },\n      fedAuthInfo: function fedAuthInfo(token) {\n        this.fedAuthInfoToken = token;\n      },\n      message: function message() {\n        const fedAuthInfoToken = this.fedAuthInfoToken;\n\n        if (fedAuthInfoToken && fedAuthInfoToken.stsurl && fedAuthInfoToken.spn) {\n          const authentication = this.config.authentication;\n\n          const getToken = callback => {\n            const getTokenFromCredentials = (err, credentials) => {\n              if (err) {\n                return callback(err);\n              }\n\n              credentials.getToken().then(tokenResponse => {\n                callback(null, tokenResponse.accessToken);\n              }, callback);\n            };\n\n            if (authentication.type === 'azure-active-directory-password') {\n              (0, _msRestNodeauth.loginWithUsernamePassword)(authentication.options.userName, authentication.options.password, {\n                clientId: '7f98cb04-cd1e-40df-9140-3bf7e2cea4db',\n                tokenAudience: fedAuthInfoToken.spn\n              }, getTokenFromCredentials);\n            } else if (authentication.type === 'azure-active-directory-msi-vm') {\n              (0, _msRestNodeauth.loginWithVmMSI)({\n                clientId: authentication.options.clientId,\n                msiEndpoint: authentication.options.msiEndpoint,\n                resource: fedAuthInfoToken.spn\n              }, getTokenFromCredentials);\n            } else if (authentication.type === 'azure-active-directory-msi-app-service') {\n              (0, _msRestNodeauth.loginWithAppServiceMSI)({\n                msiEndpoint: authentication.options.msiEndpoint,\n                msiSecret: authentication.options.msiSecret,\n                resource: fedAuthInfoToken.spn\n              }, getTokenFromCredentials);\n            } else if (authentication.type === 'azure-active-directory-service-principal-secret') {\n              (0, _msRestNodeauth.loginWithServicePrincipalSecret)(authentication.options.clientId, authentication.options.clientSecret, authentication.options.tenantId, {\n                tokenAudience: fedAuthInfoToken.spn\n              }, getTokenFromCredentials);\n            }\n          };\n\n          getToken((err, token) => {\n            if (err) {\n              this.loginError = (0, _errors.ConnectionError)('Security token could not be authenticated or authorized.', 'EFEDAUTH');\n              this.emit('connect', this.loginError);\n              this.transitionTo(this.STATE.FINAL);\n              return;\n            }\n\n            this.sendFedAuthTokenMessage(token);\n          });\n        } else if (this.loginError) {\n          if (this.loginError.isTransient) {\n            this.debug.log('Initiating retry on transient error');\n            this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\n          } else {\n            this.emit('connect', this.loginError);\n            this.transitionTo(this.STATE.FINAL);\n          }\n        } else {\n          this.emit('connect', (0, _errors.ConnectionError)('Login failed.', 'ELOGIN'));\n          this.transitionTo(this.STATE.FINAL);\n        }\n      }\n    }\n  },\n  LOGGED_IN_SENDING_INITIAL_SQL: {\n    name: 'LoggedInSendingInitialSql',\n    enter: function enter() {\n      this.sendInitialSql();\n    },\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      data: function (_data6) {\n        function data(_x6) {\n          return _data6.apply(this, arguments);\n        }\n\n        data.toString = function () {\n          return _data6.toString();\n        };\n\n        return data;\n      }(function (data) {\n        this.sendDataToTokenStreamParser(data);\n      }),\n      message: function message() {\n        this.transitionTo(this.STATE.LOGGED_IN);\n        this.processedInitialSql();\n      }\n    }\n  },\n  LOGGED_IN: {\n    name: 'LoggedIn',\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  BUILDING_CLIENT_REQUEST: {\n    name: 'BuildingClientRequest',\n    events: {\n      socketError: function socketError(err) {\n        const sqlRequest = this.request;\n        this.request = undefined;\n        this.transitionTo(this.STATE.FINAL);\n        sqlRequest.callback(err);\n      }\n    }\n  },\n  SENT_CLIENT_REQUEST: {\n    name: 'SentClientRequest',\n    exit: function exit(nextState) {\n      this.clearRequestTimer();\n\n      if (nextState !== this.STATE.FINAL) {\n        this.tokenStreamParser.resume();\n      }\n    },\n    events: {\n      socketError: function socketError(err) {\n        const sqlRequest = this.request;\n        this.request = undefined;\n        this.transitionTo(this.STATE.FINAL);\n        sqlRequest.callback(err);\n      },\n      data: function (_data7) {\n        function data(_x7) {\n          return _data7.apply(this, arguments);\n        }\n\n        data.toString = function () {\n          return _data7.toString();\n        };\n\n        return data;\n      }(function (data) {\n        this.clearRequestTimer(); // request timer is stopped on first data package\n\n        const ret = this.sendDataToTokenStreamParser(data);\n\n        if (ret === false) {\n          // Bridge backpressure from the token stream parser transform to the\n          // packet stream transform.\n          this.messageIo.pause();\n        }\n      }),\n      message: function message() {\n        // We have to channel the 'message' (EOM) event through the token stream\n        // parser transform, to keep it in line with the flow of the tokens, when\n        // the incoming data flow is paused and resumed.\n        this.tokenStreamParser.addEndOfMessageMarker();\n      },\n      endOfMessageMarkerReceived: function endOfMessageMarkerReceived() {\n        this.transitionTo(this.STATE.LOGGED_IN);\n        const sqlRequest = this.request;\n        this.request = undefined;\n\n        if (this.config.options.tdsVersion < '7_2' && sqlRequest.error && this.isSqlBatch) {\n          this.inTransaction = false;\n        }\n\n        sqlRequest.callback(sqlRequest.error, sqlRequest.rowCount, sqlRequest.rows);\n      }\n    }\n  },\n  SENT_ATTENTION: {\n    name: 'SentAttention',\n    enter: function enter() {\n      this.attentionReceived = false;\n    },\n    events: {\n      socketError: function socketError(err) {\n        const sqlRequest = this.request;\n        this.request = undefined;\n        this.transitionTo(this.STATE.FINAL);\n        sqlRequest.callback(err);\n      },\n      data: function (_data8) {\n        function data(_x8) {\n          return _data8.apply(this, arguments);\n        }\n\n        data.toString = function () {\n          return _data8.toString();\n        };\n\n        return data;\n      }(function (data) {\n        this.sendDataToTokenStreamParser(data);\n      }),\n      attention: function attention() {\n        this.attentionReceived = true;\n      },\n      message: function message() {\n        // 3.2.5.7 Sent Attention State\n        // Discard any data contained in the response, until we receive the attention response\n        if (this.attentionReceived) {\n          this.clearCancelTimer();\n          const sqlRequest = this.request;\n          this.request = undefined;\n          this.transitionTo(this.STATE.LOGGED_IN);\n\n          if (sqlRequest.error && sqlRequest.error instanceof _errors.RequestError && sqlRequest.error.code === 'ETIMEOUT') {\n            sqlRequest.callback(sqlRequest.error);\n          } else {\n            sqlRequest.callback((0, _errors.RequestError)('Canceled.', 'ECANCEL'));\n          }\n        }\n      }\n    }\n  },\n  FINAL: {\n    name: 'Final',\n    enter: function enter() {\n      this.cleanupConnection(CLEANUP_TYPE.NORMAL);\n    },\n    events: {\n      loginFailed: function loginFailed() {// Do nothing. The connection was probably closed by the client code.\n      },\n      connectTimeout: function connectTimeout() {// Do nothing, as the timer should be cleaned up.\n      },\n      message: function message() {// Do nothing\n      },\n      socketError: function socketError() {// Do nothing\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/tedious/lib/connection.js"],"names":["Object","defineProperty","exports","value","default","_crypto","_interopRequireDefault","require","_os","_constants","_tls","_msRestNodeauth","_bulkLoad","_debug","_events","_instanceLookup","_transientErrorLookup","_packet","_preloginPayload","_login7Payload","_ntlmPayload","_request","_rpcrequestPayload","_sqlbatchPayload","_messageIo","_tokenStreamParser","_transaction","_errors","_connector","_library","_tdsVersions","_ntlm","obj","__esModule","KEEP_ALIVE_INITIAL_DELAY","DEFAULT_CONNECT_TIMEOUT","DEFAULT_CLIENT_REQUEST_TIMEOUT","DEFAULT_CANCEL_TIMEOUT","DEFAULT_CONNECT_RETRY_INTERVAL","DEFAULT_PACKET_SIZE","DEFAULT_TEXTSIZE","DEFAULT_DATEFIRST","DEFAULT_PORT","DEFAULT_TDS_VERSION","DEFAULT_LANGUAGE","DEFAULT_DATEFORMAT","CLEANUP_TYPE","NORMAL","REDIRECT","RETRY","Connection","EventEmitter","constructor","config","TypeError","server","fedAuthRequired","fedAuthInfoToken","undefined","authentication","type","options","domain","userName","password","toUpperCase","token","clientId","msiEndpoint","msiSecret","clientSecret","tenantId","abortTransactionOnError","appName","camelCaseColumns","cancelTimeout","columnNameReplacer","connectionRetryInterval","connectTimeout","connectionIsolationLevel","ISOLATION_LEVEL","READ_COMMITTED","cryptoCredentialsDetails","database","datefirst","dateFormat","debug","data","packet","payload","enableAnsiNull","enableAnsiNullDefault","enableAnsiPadding","enableAnsiWarnings","enableArithAbort","enableConcatNullYieldsNull","enableCursorCloseOnCommit","enableImplicitTransactions","enableNumericRoundabort","enableQuotedIdentifier","encrypt","fallbackToDefaultDb","instanceName","isolationLevel","language","localAddress","maxRetriesOnTransientErrors","multiSubnetFailover","packetSize","port","readOnlyIntent","requestTimeout","rowCollectionOnDone","rowCollectionOnRequestCompletion","tdsVersion","textsize","trustServerCertificate","useColumnNames","useUTC","lowerCaseGuids","Error","RangeError","credentialsDetails","secureOptions","create","SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS","secureContext","createSecureContext","createDebug","tokenStreamParser","createTokenStreamParser","inTransaction","transactionDescriptors","Buffer","from","transactionDepth","isSqlBatch","closed","loggedIn","messageBuffer","alloc","curTransientRetryCount","transientErrorLookup","TransientErrorLookup","state","STATE","CONNECTING","enter","call","close","transitionTo","FINAL","initialiseConnection","connect","createConnectTimer","cleanupConnection","cleanupType","clearConnectTimer","clearRequestTimer","clearRetryTimer","closeConnection","emit","process","nextTick","request","err","RequestError","callback","loginError","on","message","Parser","ntlmpacket","ntlmpacketBuffer","canceled","error","number","class","serverName","procName","lineNumber","ConnectionError","isLoginErrorTransient","isTransientError","isTransient","newValue","dispatchEvent","interface","routingData","messageIo","push","length","columns","j","len","col","colName","orderColumns","rows","rst","SENT_ATTENTION","paused","procReturnStatusValue","paramName","metadata","rowCount","more","attention","sqlError","clearCancelTimer","SENT_CLIENT_REQUEST","resume","connectOnPort","InstanceLookup","instanceLookup","timeout","connectOpts","host","Connector","execute","socket","socketError","destroy","socketClose","socketEnd","setKeepAlive","cleartext","socketConnect","connectTimer","setTimeout","createCancelTimer","cancelTimer","createRequestTimer","requestTimer","createRetryTimer","retryTimer","retryTimeout","log","cancel","clearTimeout","newState","name","exit","apply","getEventHandler","eventName","handler","events","args","SENT_TLSSSLNEGOTIATION","code","REROUTING","TRANSIENT_FAILURE_RETRY","sendPreLogin","sendMessage","TYPE","PRELOGIN","toString","emptyMessageBuffer","addToMessageBuffer","concat","sendLogin7Packet","versions","clientProgVer","clientPid","pid","connectionId","clientTimeZone","Date","getTimezoneOffset","clientLcid","fedAuth","echo","workflow","fedAuthToken","sspi","createNTLMRequest","hostname","libraryName","initDbFatal","LOGIN7","toBuffer","sendFedAuthTokenMessage","accessTokenLen","byteLength","offset","writeUInt32LE","write","FEDAUTH_TOKEN","SENT_LOGIN7_WITH_STANDARD_LOGIN","sendDataToTokenStreamParser","addBuffer","pauseRequest","isRequestActive","pause","resumeRequest","sendInitialSql","getInitialSql","currentTransactionDescriptor","getData","SQL_BATCH","getIsolationLevelText","join","processedInitialSql","execSqlBatch","makeRequest","sqlTextOrProcedure","execSql","transformIntoExecuteSqlRpc","RPC_REQUEST","newBulkLoad","table","callbackOrOptions","execBulkLoad","bulkLoad","executionStarted","getBulkInsertSql","BULK_LOAD","once","prepare","transformIntoPrepareRpc","unprepare","transformIntoUnprepareRpc","parameters","transformIntoExecuteRpc","callProcedure","validateParameters","beginTransaction","transaction","Transaction","isolationLevelToTSQL","TRANSACTION_MANAGER","beginPayload","commitTransaction","commitPayload","rollbackTransaction","rollbackPayload","saveTransaction","savePayload","cb","useSavepoint","randomBytes","txDone","done","LOGGED_IN","txErr","packetType","connection","BUILDING_CLIENT_REQUEST","writable","ignore","end","ATTENTION","getMessageStream","streamingMode","rowToPacketTransform","outgoingMessageStream","resetConnectionOnNextRequest","reset","READ_UNCOMMITTED","REPEATABLE_READ","SERIALIZABLE","SNAPSHOT","_default","module","prototype","SENT_PRELOGIN","_data","_x","arguments","preloginPayload","encryptionString","startTls","SENT_LOGIN7_WITH_NTLM","reconnect","retry","_data2","_x2","tlsHandshakeData","tlsNegotiationComplete","SENT_LOGIN7_WITH_FEDAUTH","_data3","_x3","routingChange","featureExtAck","LOGGED_IN_SENDING_INITIAL_SQL","_data4","_x4","NTLMAUTH_PKT","_data5","_x5","fedAuthInfo","stsurl","spn","getToken","getTokenFromCredentials","credentials","then","tokenResponse","accessToken","loginWithUsernamePassword","tokenAudience","loginWithVmMSI","resource","loginWithAppServiceMSI","loginWithServicePrincipalSecret","_data6","_x6","sqlRequest","nextState","_data7","_x7","ret","addEndOfMessageMarker","endOfMessageMarkerReceived","attentionReceived","_data8","_x8","loginFailed"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\n\nvar _os = _interopRequireDefault(require(\"os\"));\n\nvar _constants = _interopRequireDefault(require(\"constants\"));\n\nvar _tls = require(\"tls\");\n\nvar _msRestNodeauth = require(\"@azure/ms-rest-nodeauth\");\n\nvar _bulkLoad = _interopRequireDefault(require(\"./bulk-load\"));\n\nvar _debug = _interopRequireDefault(require(\"./debug\"));\n\nvar _events = require(\"events\");\n\nvar _instanceLookup = require(\"./instance-lookup\");\n\nvar _transientErrorLookup = require(\"./transient-error-lookup\");\n\nvar _packet = require(\"./packet\");\n\nvar _preloginPayload = _interopRequireDefault(require(\"./prelogin-payload\"));\n\nvar _login7Payload = _interopRequireDefault(require(\"./login7-payload\"));\n\nvar _ntlmPayload = _interopRequireDefault(require(\"./ntlm-payload\"));\n\nvar _request = _interopRequireDefault(require(\"./request\"));\n\nvar _rpcrequestPayload = _interopRequireDefault(require(\"./rpcrequest-payload\"));\n\nvar _sqlbatchPayload = _interopRequireDefault(require(\"./sqlbatch-payload\"));\n\nvar _messageIo = _interopRequireDefault(require(\"./message-io\"));\n\nvar _tokenStreamParser = require(\"./token/token-stream-parser\");\n\nvar _transaction = require(\"./transaction\");\n\nvar _errors = require(\"./errors\");\n\nvar _connector = require(\"./connector\");\n\nvar _library = require(\"./library\");\n\nvar _tdsVersions = require(\"./tds-versions\");\n\nvar _ntlm = require(\"./ntlm\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// A rather basic state machine for managing a connection.\n// Implements something approximating s3.2.1.\nconst KEEP_ALIVE_INITIAL_DELAY = 30 * 1000;\nconst DEFAULT_CONNECT_TIMEOUT = 15 * 1000;\nconst DEFAULT_CLIENT_REQUEST_TIMEOUT = 15 * 1000;\nconst DEFAULT_CANCEL_TIMEOUT = 5 * 1000;\nconst DEFAULT_CONNECT_RETRY_INTERVAL = 500;\nconst DEFAULT_PACKET_SIZE = 4 * 1024;\nconst DEFAULT_TEXTSIZE = '2147483647';\nconst DEFAULT_DATEFIRST = 7;\nconst DEFAULT_PORT = 1433;\nconst DEFAULT_TDS_VERSION = '7_4';\nconst DEFAULT_LANGUAGE = 'us_english';\nconst DEFAULT_DATEFORMAT = 'mdy';\nconst CLEANUP_TYPE = {\n  NORMAL: 0,\n  REDIRECT: 1,\n  RETRY: 2\n};\n\nclass Connection extends _events.EventEmitter {\n  constructor(config) {\n    super();\n\n    if (typeof config !== 'object' || config === null) {\n      throw new TypeError('The \"config\" argument is required and must be of type Object.');\n    }\n\n    if (typeof config.server !== 'string') {\n      throw new TypeError('The \"config.server\" property is required and must be of type string.');\n    }\n\n    this.fedAuthRequired = false;\n    this.fedAuthInfoToken = undefined;\n    let authentication;\n\n    if (config.authentication !== undefined) {\n      if (typeof config.authentication !== 'object' || config.authentication === null) {\n        throw new TypeError('The \"config.authentication\" property must be of type Object.');\n      }\n\n      const type = config.authentication.type;\n      const options = config.authentication.options === undefined ? {} : config.authentication.options;\n\n      if (typeof type !== 'string') {\n        throw new TypeError('The \"config.authentication.type\" property must be of type string.');\n      }\n\n      if (type !== 'default' && type !== 'ntlm' && type !== 'azure-active-directory-password' && type !== 'azure-active-directory-access-token' && type !== 'azure-active-directory-msi-vm' && type !== 'azure-active-directory-msi-app-service' && type !== 'azure-active-directory-service-principal-secret') {\n        throw new TypeError('The \"type\" property must one of \"default\", \"ntlm\", \"azure-active-directory-password\", \"azure-active-directory-access-token\", \"azure-active-directory-msi-vm\" or \"azure-active-directory-msi-app-service\" or \"azure-active-directory-service-principal-secret\".');\n      }\n\n      if (typeof options !== 'object' || options === null) {\n        throw new TypeError('The \"config.authentication.options\" property must be of type object.');\n      }\n\n      if (type === 'ntlm') {\n        if (typeof options.domain !== 'string') {\n          throw new TypeError('The \"config.authentication.options.domain\" property must be of type string.');\n        }\n\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'ntlm',\n          options: {\n            userName: options.userName,\n            password: options.password,\n            domain: options.domain && options.domain.toUpperCase()\n          }\n        };\n      } else if (type === 'azure-active-directory-password') {\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-password',\n          options: {\n            userName: options.userName,\n            password: options.password\n          }\n        };\n      } else if (type === 'azure-active-directory-access-token') {\n        if (typeof options.token !== 'string') {\n          throw new TypeError('The \"config.authentication.options.token\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-access-token',\n          options: {\n            token: options.token\n          }\n        };\n      } else if (type === 'azure-active-directory-msi-vm') {\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        if (options.msiEndpoint !== undefined && typeof options.msiEndpoint !== 'string') {\n          throw new TypeError('The \"config.authentication.options.msiEndpoint\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-msi-vm',\n          options: {\n            clientId: options.clientId,\n            msiEndpoint: options.msiEndpoint\n          }\n        };\n      } else if (type === 'azure-active-directory-msi-app-service') {\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        if (options.msiEndpoint !== undefined && typeof options.msiEndpoint !== 'string') {\n          throw new TypeError('The \"config.authentication.options.msiEndpoint\" property must be of type string.');\n        }\n\n        if (options.msiSecret !== undefined && typeof options.msiSecret !== 'string') {\n          throw new TypeError('The \"config.authentication.options.msiSecret\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-msi-app-service',\n          options: {\n            clientId: options.clientId,\n            msiEndpoint: options.msiEndpoint,\n            msiSecret: options.msiSecret\n          }\n        };\n      } else if (type === 'azure-active-directory-service-principal-secret') {\n        if (typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        if (typeof options.clientSecret !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientSecret\" property must be of type string.');\n        }\n\n        if (typeof options.tenantId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.tenantId\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-service-principal-secret',\n          options: {\n            clientId: options.clientId,\n            clientSecret: options.clientSecret,\n            tenantId: options.tenantId\n          }\n        };\n      } else {\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'default',\n          options: {\n            userName: options.userName,\n            password: options.password\n          }\n        };\n      }\n    } else {\n      authentication = {\n        type: 'default',\n        options: {\n          userName: undefined,\n          password: undefined\n        }\n      };\n    }\n\n    this.config = {\n      server: config.server,\n      authentication: authentication,\n      options: {\n        abortTransactionOnError: false,\n        appName: undefined,\n        camelCaseColumns: false,\n        cancelTimeout: DEFAULT_CANCEL_TIMEOUT,\n        columnNameReplacer: undefined,\n        connectionRetryInterval: DEFAULT_CONNECT_RETRY_INTERVAL,\n        connectTimeout: DEFAULT_CONNECT_TIMEOUT,\n        connectionIsolationLevel: _transaction.ISOLATION_LEVEL.READ_COMMITTED,\n        cryptoCredentialsDetails: {},\n        database: undefined,\n        datefirst: DEFAULT_DATEFIRST,\n        dateFormat: DEFAULT_DATEFORMAT,\n        debug: {\n          data: false,\n          packet: false,\n          payload: false,\n          token: false\n        },\n        enableAnsiNull: true,\n        enableAnsiNullDefault: true,\n        enableAnsiPadding: true,\n        enableAnsiWarnings: true,\n        enableArithAbort: false,\n        enableConcatNullYieldsNull: true,\n        enableCursorCloseOnCommit: null,\n        enableImplicitTransactions: false,\n        enableNumericRoundabort: false,\n        enableQuotedIdentifier: true,\n        encrypt: false,\n        fallbackToDefaultDb: false,\n        instanceName: undefined,\n        isolationLevel: _transaction.ISOLATION_LEVEL.READ_COMMITTED,\n        language: DEFAULT_LANGUAGE,\n        localAddress: undefined,\n        maxRetriesOnTransientErrors: 3,\n        multiSubnetFailover: false,\n        packetSize: DEFAULT_PACKET_SIZE,\n        port: DEFAULT_PORT,\n        readOnlyIntent: false,\n        requestTimeout: DEFAULT_CLIENT_REQUEST_TIMEOUT,\n        rowCollectionOnDone: false,\n        rowCollectionOnRequestCompletion: false,\n        tdsVersion: DEFAULT_TDS_VERSION,\n        textsize: DEFAULT_TEXTSIZE,\n        trustServerCertificate: true,\n        useColumnNames: false,\n        useUTC: true,\n        lowerCaseGuids: false\n      }\n    };\n\n    if (config.options) {\n      if (config.options.port && config.options.instanceName) {\n        throw new Error('Port and instanceName are mutually exclusive, but ' + config.options.port + ' and ' + config.options.instanceName + ' provided');\n      }\n\n      if (config.options.abortTransactionOnError !== undefined) {\n        if (typeof config.options.abortTransactionOnError !== 'boolean' && config.options.abortTransactionOnError !== null) {\n          throw new TypeError('The \"config.options.abortTransactionOnError\" property must be of type string or null.');\n        }\n\n        this.config.options.abortTransactionOnError = config.options.abortTransactionOnError;\n      }\n\n      if (config.options.appName !== undefined) {\n        if (typeof config.options.appName !== 'string') {\n          throw new TypeError('The \"config.options.appName\" property must be of type string.');\n        }\n\n        this.config.options.appName = config.options.appName;\n      }\n\n      if (config.options.camelCaseColumns !== undefined) {\n        if (typeof config.options.camelCaseColumns !== 'boolean') {\n          throw new TypeError('The \"config.options.camelCaseColumns\" property must be of type boolean.');\n        }\n\n        this.config.options.camelCaseColumns = config.options.camelCaseColumns;\n      }\n\n      if (config.options.cancelTimeout !== undefined) {\n        if (typeof config.options.cancelTimeout !== 'number') {\n          throw new TypeError('The \"config.options.cancelTimeout\" property must be of type number.');\n        }\n\n        this.config.options.cancelTimeout = config.options.cancelTimeout;\n      }\n\n      if (config.options.columnNameReplacer) {\n        if (typeof config.options.columnNameReplacer !== 'function') {\n          throw new TypeError('The \"config.options.cancelTimeout\" property must be of type function.');\n        }\n\n        this.config.options.columnNameReplacer = config.options.columnNameReplacer;\n      }\n\n      if (config.options.connectTimeout !== undefined) {\n        if (typeof config.options.connectTimeout !== 'number') {\n          throw new TypeError('The \"config.options.connectTimeout\" property must be of type number.');\n        }\n\n        this.config.options.connectTimeout = config.options.connectTimeout;\n      }\n\n      if (config.options.connectionIsolationLevel !== undefined) {\n        this.config.options.connectionIsolationLevel = config.options.connectionIsolationLevel;\n      }\n\n      if (config.options.connectTimeout !== undefined) {\n        if (typeof config.options.connectTimeout !== 'number') {\n          throw new TypeError('The \"config.options.connectTimeout\" property must be of type number.');\n        }\n\n        this.config.options.connectTimeout = config.options.connectTimeout;\n      }\n\n      if (config.options.cryptoCredentialsDetails !== undefined) {\n        if (typeof config.options.cryptoCredentialsDetails !== 'object' || config.options.cryptoCredentialsDetails === null) {\n          throw new TypeError('The \"config.options.cryptoCredentialsDetails\" property must be of type Object.');\n        }\n\n        this.config.options.cryptoCredentialsDetails = config.options.cryptoCredentialsDetails;\n      }\n\n      if (config.options.database !== undefined) {\n        if (typeof config.options.database !== 'string') {\n          throw new TypeError('The \"config.options.database\" property must be of type string.');\n        }\n\n        this.config.options.database = config.options.database;\n      }\n\n      if (config.options.datefirst !== undefined) {\n        if (typeof config.options.datefirst !== 'number' && config.options.datefirst !== null) {\n          throw new TypeError('The \"config.options.datefirst\" property must be of type number.');\n        }\n\n        if (config.options.datefirst !== null && (config.options.datefirst < 1 || config.options.datefirst > 7)) {\n          throw new RangeError('The \"config.options.datefirst\" property must be >= 1 and <= 7');\n        }\n\n        this.config.options.datefirst = config.options.datefirst;\n      }\n\n      if (config.options.dateFormat !== undefined) {\n        if (typeof config.options.dateFormat !== 'string' && config.options.dateFormat !== null) {\n          throw new TypeError('The \"config.options.dateFormat\" property must be of type string or null.');\n        }\n\n        this.config.options.dateFormat = config.options.dateFormat;\n      }\n\n      if (config.options.debug) {\n        if (config.options.debug.data !== undefined) {\n          if (typeof config.options.debug.data !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.data\" property must be of type boolean.');\n          }\n\n          this.config.options.debug.data = config.options.debug.data;\n        }\n\n        if (config.options.debug.packet !== undefined) {\n          if (typeof config.options.debug.packet !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.packet\" property must be of type boolean.');\n          }\n\n          this.config.options.debug.packet = config.options.debug.packet;\n        }\n\n        if (config.options.debug.payload !== undefined) {\n          if (typeof config.options.debug.payload !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.payload\" property must be of type boolean.');\n          }\n\n          this.config.options.debug.payload = config.options.debug.payload;\n        }\n\n        if (config.options.debug.token !== undefined) {\n          if (typeof config.options.debug.token !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.token\" property must be of type boolean.');\n          }\n\n          this.config.options.debug.token = config.options.debug.token;\n        }\n      }\n\n      if (config.options.enableAnsiNull !== undefined) {\n        if (typeof config.options.enableAnsiNull !== 'boolean' && config.options.enableAnsiNull !== null) {\n          throw new TypeError('The \"config.options.enableAnsiNull\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableAnsiNull = config.options.enableAnsiNull;\n      }\n\n      if (config.options.enableAnsiNullDefault !== undefined) {\n        if (typeof config.options.enableAnsiNullDefault !== 'boolean' && config.options.enableAnsiNullDefault !== null) {\n          throw new TypeError('The \"config.options.enableAnsiNullDefault\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableAnsiNullDefault = config.options.enableAnsiNullDefault;\n      }\n\n      if (config.options.enableAnsiPadding !== undefined) {\n        if (typeof config.options.enableAnsiPadding !== 'boolean' && config.options.enableAnsiPadding !== null) {\n          throw new TypeError('The \"config.options.enableAnsiPadding\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableAnsiPadding = config.options.enableAnsiPadding;\n      }\n\n      if (config.options.enableAnsiWarnings !== undefined) {\n        if (typeof config.options.enableAnsiWarnings !== 'boolean' && config.options.enableAnsiWarnings !== null) {\n          throw new TypeError('The \"config.options.enableAnsiWarnings\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableAnsiWarnings = config.options.enableAnsiWarnings;\n      }\n\n      if (config.options.enableArithAbort !== undefined) {\n        if (typeof config.options.enableArithAbort !== 'boolean' && config.options.enableArithAbort !== null) {\n          throw new TypeError('The \"config.options.enableArithAbort\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableArithAbort = config.options.enableArithAbort;\n      }\n\n      if (config.options.enableConcatNullYieldsNull !== undefined) {\n        if (typeof config.options.enableConcatNullYieldsNull !== 'boolean' && config.options.enableConcatNullYieldsNull !== null) {\n          throw new TypeError('The \"config.options.enableConcatNullYieldsNull\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableConcatNullYieldsNull = config.options.enableConcatNullYieldsNull;\n      }\n\n      if (config.options.enableCursorCloseOnCommit !== undefined) {\n        if (typeof config.options.enableCursorCloseOnCommit !== 'boolean' && config.options.enableCursorCloseOnCommit !== null) {\n          throw new TypeError('The \"config.options.enableCursorCloseOnCommit\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableCursorCloseOnCommit = config.options.enableCursorCloseOnCommit;\n      }\n\n      if (config.options.enableImplicitTransactions !== undefined) {\n        if (typeof config.options.enableImplicitTransactions !== 'boolean' && config.options.enableImplicitTransactions !== null) {\n          throw new TypeError('The \"config.options.enableImplicitTransactions\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableImplicitTransactions = config.options.enableImplicitTransactions;\n      }\n\n      if (config.options.enableNumericRoundabort !== undefined) {\n        if (typeof config.options.enableNumericRoundabort !== 'boolean' && config.options.enableNumericRoundabort !== null) {\n          throw new TypeError('The \"config.options.enableNumericRoundabort\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableNumericRoundabort = config.options.enableNumericRoundabort;\n      }\n\n      if (config.options.enableQuotedIdentifier !== undefined) {\n        if (typeof config.options.enableQuotedIdentifier !== 'boolean' && config.options.enableQuotedIdentifier !== null) {\n          throw new TypeError('The \"config.options.enableQuotedIdentifier\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableQuotedIdentifier = config.options.enableQuotedIdentifier;\n      }\n\n      if (config.options.encrypt !== undefined) {\n        if (typeof config.options.encrypt !== 'boolean') {\n          throw new TypeError('The \"config.options.encrypt\" property must be of type boolean.');\n        }\n\n        this.config.options.encrypt = config.options.encrypt;\n      } else {\n        this.config.options.encrypt = true;\n      }\n\n      if (config.options.fallbackToDefaultDb !== undefined) {\n        if (typeof config.options.fallbackToDefaultDb !== 'boolean') {\n          throw new TypeError('The \"config.options.fallbackToDefaultDb\" property must be of type boolean.');\n        }\n\n        this.config.options.fallbackToDefaultDb = config.options.fallbackToDefaultDb;\n      }\n\n      if (config.options.instanceName !== undefined) {\n        if (typeof config.options.instanceName !== 'string') {\n          throw new TypeError('The \"config.options.instanceName\" property must be of type string.');\n        }\n\n        this.config.options.instanceName = config.options.instanceName;\n        this.config.options.port = undefined;\n      }\n\n      if (config.options.isolationLevel !== undefined) {\n        if (typeof config.options.isolationLevel !== 'number') {\n          throw new TypeError('The \"config.options.language\" property must be of type numer.');\n        }\n\n        this.config.options.isolationLevel = config.options.isolationLevel;\n      }\n\n      if (config.options.language !== undefined) {\n        if (typeof config.options.language !== 'string' && config.options.language !== null) {\n          throw new TypeError('The \"config.options.language\" property must be of type string or null.');\n        }\n\n        this.config.options.language = config.options.language;\n      }\n\n      if (config.options.localAddress !== undefined) {\n        if (typeof config.options.localAddress !== 'string') {\n          throw new TypeError('The \"config.options.localAddress\" property must be of type string.');\n        }\n\n        this.config.options.localAddress = config.options.localAddress;\n      }\n\n      if (config.options.multiSubnetFailover !== undefined) {\n        if (typeof config.options.multiSubnetFailover !== 'boolean') {\n          throw new TypeError('The \"config.options.multiSubnetFailover\" property must be of type boolean.');\n        }\n\n        this.config.options.multiSubnetFailover = config.options.multiSubnetFailover;\n      }\n\n      if (config.options.packetSize !== undefined) {\n        if (typeof config.options.packetSize !== 'number') {\n          throw new TypeError('The \"config.options.packetSize\" property must be of type number.');\n        }\n\n        this.config.options.packetSize = config.options.packetSize;\n      }\n\n      if (config.options.port !== undefined) {\n        if (typeof config.options.port !== 'number') {\n          throw new TypeError('The \"config.options.port\" property must be of type number.');\n        }\n\n        if (config.options.port <= 0 || config.options.port >= 65536) {\n          throw new RangeError('The \"config.options.port\" property must be > 0 and < 65536');\n        }\n\n        this.config.options.port = config.options.port;\n        this.config.options.instanceName = undefined;\n      }\n\n      if (config.options.readOnlyIntent !== undefined) {\n        if (typeof config.options.readOnlyIntent !== 'boolean') {\n          throw new TypeError('The \"config.options.readOnlyIntent\" property must be of type boolean.');\n        }\n\n        this.config.options.readOnlyIntent = config.options.readOnlyIntent;\n      }\n\n      if (config.options.requestTimeout !== undefined) {\n        if (typeof config.options.requestTimeout !== 'number') {\n          throw new TypeError('The \"config.options.requestTimeout\" property must be of type number.');\n        }\n\n        this.config.options.requestTimeout = config.options.requestTimeout;\n      }\n\n      if (config.options.maxRetriesOnTransientErrors !== undefined) {\n        if (typeof config.options.maxRetriesOnTransientErrors !== 'number') {\n          throw new TypeError('The \"config.options.maxRetriesOnTransientErrors\" property must be of type number.');\n        }\n\n        if (config.options.maxRetriesOnTransientErrors < 0) {\n          throw new TypeError('The \"config.options.maxRetriesOnTransientErrors\" property must be equal or greater than 0.');\n        }\n\n        this.config.options.maxRetriesOnTransientErrors = config.options.maxRetriesOnTransientErrors;\n      }\n\n      if (config.options.connectionRetryInterval !== undefined) {\n        if (typeof config.options.connectionRetryInterval !== 'number') {\n          throw new TypeError('The \"config.options.connectionRetryInterval\" property must be of type number.');\n        }\n\n        if (config.options.connectionRetryInterval <= 0) {\n          throw new TypeError('The \"config.options.connectionRetryInterval\" property must be greater than 0.');\n        }\n\n        this.config.options.connectionRetryInterval = config.options.connectionRetryInterval;\n      }\n\n      if (config.options.rowCollectionOnDone !== undefined) {\n        if (typeof config.options.rowCollectionOnDone !== 'boolean') {\n          throw new TypeError('The \"config.options.rowCollectionOnDone\" property must be of type boolean.');\n        }\n\n        this.config.options.rowCollectionOnDone = config.options.rowCollectionOnDone;\n      }\n\n      if (config.options.rowCollectionOnRequestCompletion !== undefined) {\n        if (typeof config.options.rowCollectionOnRequestCompletion !== 'boolean') {\n          throw new TypeError('The \"config.options.rowCollectionOnRequestCompletion\" property must be of type boolean.');\n        }\n\n        this.config.options.rowCollectionOnRequestCompletion = config.options.rowCollectionOnRequestCompletion;\n      }\n\n      if (config.options.tdsVersion !== undefined) {\n        if (typeof config.options.tdsVersion !== 'string') {\n          throw new TypeError('The \"config.options.tdsVersion\" property must be of type string.');\n        }\n\n        this.config.options.tdsVersion = config.options.tdsVersion;\n      }\n\n      if (config.options.textsize !== undefined) {\n        if (typeof config.options.textsize !== 'number' && config.options.textsize !== null) {\n          throw new TypeError('The \"config.options.textsize\" property must be of type number or null.');\n        }\n\n        this.config.options.textsize = config.options.textsize;\n      }\n\n      if (config.options.trustServerCertificate !== undefined) {\n        if (typeof config.options.trustServerCertificate !== 'boolean') {\n          throw new TypeError('The \"config.options.trustServerCertificate\" property must be of type boolean.');\n        }\n\n        this.config.options.trustServerCertificate = config.options.trustServerCertificate;\n      }\n\n      if (config.options.useColumnNames !== undefined) {\n        if (typeof config.options.useColumnNames !== 'boolean') {\n          throw new TypeError('The \"config.options.useColumnNames\" property must be of type boolean.');\n        }\n\n        this.config.options.useColumnNames = config.options.useColumnNames;\n      }\n\n      if (config.options.useUTC !== undefined) {\n        if (typeof config.options.useUTC !== 'boolean') {\n          throw new TypeError('The \"config.options.useUTC\" property must be of type boolean.');\n        }\n\n        this.config.options.useUTC = config.options.useUTC;\n      }\n\n      if (config.options.lowerCaseGuids !== undefined) {\n        if (typeof config.options.lowerCaseGuids !== 'boolean') {\n          throw new TypeError('The \"config.options.lowerCaseGuids\" property must be of type boolean.');\n        }\n\n        this.config.options.lowerCaseGuids = config.options.lowerCaseGuids;\n      }\n    }\n\n    let credentialsDetails = this.config.options.cryptoCredentialsDetails;\n\n    if (credentialsDetails.secureOptions === undefined) {\n      // If the caller has not specified their own `secureOptions`,\n      // we set `SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS` here.\n      // Older SQL Server instances running on older Windows versions have\n      // trouble with the BEAST workaround in OpenSSL.\n      // As BEAST is a browser specific exploit, we can just disable this option here.\n      credentialsDetails = Object.create(credentialsDetails, {\n        secureOptions: {\n          value: _constants.default.SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS\n        }\n      });\n    }\n\n    this.secureContext = (0, _tls.createSecureContext)(credentialsDetails);\n    this.debug = this.createDebug();\n    this.tokenStreamParser = this.createTokenStreamParser();\n    this.inTransaction = false;\n    this.transactionDescriptors = [Buffer.from([0, 0, 0, 0, 0, 0, 0, 0])]; // 'beginTransaction', 'commitTransaction' and 'rollbackTransaction'\n    // events are utilized to maintain inTransaction property state which in\n    // turn is used in managing transactions. These events are only fired for\n    // TDS version 7.2 and beyond. The properties below are used to emulate\n    // equivalent behavior for TDS versions before 7.2.\n\n    this.transactionDepth = 0;\n    this.isSqlBatch = false;\n    this.closed = false;\n    this.loggedIn = false;\n    this.messageBuffer = Buffer.alloc(0);\n    this.curTransientRetryCount = 0;\n    this.transientErrorLookup = new _transientErrorLookup.TransientErrorLookup();\n    this.state = this.STATE.CONNECTING;\n    this.state.enter.call(this);\n  }\n\n  close() {\n    this.transitionTo(this.STATE.FINAL);\n  }\n\n  initialiseConnection() {\n    this.connect();\n    this.createConnectTimer();\n  }\n\n  cleanupConnection(cleanupType) {\n    if (!this.closed) {\n      this.clearConnectTimer();\n      this.clearRequestTimer();\n      this.clearRetryTimer();\n      this.closeConnection();\n\n      if (cleanupType === CLEANUP_TYPE.REDIRECT) {\n        this.emit('rerouting');\n      } else if (cleanupType !== CLEANUP_TYPE.RETRY) {\n        process.nextTick(() => {\n          this.emit('end');\n        });\n      }\n\n      const request = this.request;\n\n      if (request) {\n        const err = (0, _errors.RequestError)('Connection closed before request completed.', 'ECLOSE');\n        request.callback(err);\n        this.request = undefined;\n      }\n\n      this.closed = true;\n      this.loggedIn = false;\n      this.loginError = undefined;\n    }\n  }\n\n  createDebug() {\n    const debug = new _debug.default(this.config.options.debug);\n    debug.on('debug', message => {\n      this.emit('debug', message);\n    });\n    return debug;\n  }\n\n  createTokenStreamParser() {\n    const tokenStreamParser = new _tokenStreamParser.Parser(this.debug, undefined, this.config.options);\n    tokenStreamParser.on('infoMessage', token => {\n      this.emit('infoMessage', token);\n    });\n    tokenStreamParser.on('sspichallenge', token => {\n      if (token.ntlmpacket) {\n        this.ntlmpacket = token.ntlmpacket;\n        this.ntlmpacketBuffer = token.ntlmpacketBuffer;\n      }\n\n      this.emit('sspichallenge', token);\n    });\n    tokenStreamParser.on('errorMessage', token => {\n      this.emit('errorMessage', token);\n\n      if (this.loggedIn) {\n        const request = this.request;\n\n        if (request) {\n          if (!request.canceled) {\n            const error = new _errors.RequestError(token.message, 'EREQUEST');\n            error.number = token.number;\n            error.state = token.state;\n            error.class = token.class;\n            error.serverName = token.serverName;\n            error.procName = token.procName;\n            error.lineNumber = token.lineNumber;\n            request.error = error;\n          }\n        }\n      } else {\n        const error = (0, _errors.ConnectionError)(token.message, 'ELOGIN');\n        const isLoginErrorTransient = this.transientErrorLookup.isTransientError(token.number);\n\n        if (isLoginErrorTransient && this.curTransientRetryCount !== this.config.options.maxRetriesOnTransientErrors) {\n          error.isTransient = true;\n        }\n\n        this.loginError = error;\n      }\n    });\n    tokenStreamParser.on('databaseChange', token => {\n      this.emit('databaseChange', token.newValue);\n    });\n    tokenStreamParser.on('languageChange', token => {\n      this.emit('languageChange', token.newValue);\n    });\n    tokenStreamParser.on('charsetChange', token => {\n      this.emit('charsetChange', token.newValue);\n    });\n    tokenStreamParser.on('fedAuthInfo', token => {\n      this.dispatchEvent('fedAuthInfo', token);\n    });\n    tokenStreamParser.on('featureExtAck', token => {\n      this.dispatchEvent('featureExtAck', token);\n    });\n    tokenStreamParser.on('loginack', token => {\n      if (!token.tdsVersion) {\n        // unsupported TDS version\n        this.loginError = (0, _errors.ConnectionError)('Server responded with unknown TDS version.', 'ETDS');\n        this.loggedIn = false;\n        return;\n      }\n\n      if (!token.interface) {\n        // unsupported interface\n        this.loginError = (0, _errors.ConnectionError)('Server responded with unsupported interface.', 'EINTERFACENOTSUPP');\n        this.loggedIn = false;\n        return;\n      } // use negotiated version\n\n\n      this.config.options.tdsVersion = token.tdsVersion;\n      this.loggedIn = true;\n    });\n    tokenStreamParser.on('routingChange', token => {\n      this.routingData = token.newValue;\n      this.dispatchEvent('routingChange');\n    });\n    tokenStreamParser.on('packetSizeChange', token => {\n      this.messageIo.packetSize(token.newValue);\n    }); // A new top-level transaction was started. This is not fired\n    // for nested transactions.\n\n    tokenStreamParser.on('beginTransaction', token => {\n      this.transactionDescriptors.push(token.newValue);\n      this.inTransaction = true;\n    }); // A top-level transaction was committed. This is not fired\n    // for nested transactions.\n\n    tokenStreamParser.on('commitTransaction', () => {\n      this.transactionDescriptors.length = 1;\n      this.inTransaction = false;\n    }); // A top-level transaction was rolled back. This is not fired\n    // for nested transactions. This is also fired if a batch\n    // aborting error happened that caused a rollback.\n\n    tokenStreamParser.on('rollbackTransaction', () => {\n      this.transactionDescriptors.length = 1; // An outermost transaction was rolled back. Reset the transaction counter\n\n      this.inTransaction = false;\n      this.emit('rollbackTransaction');\n    });\n    tokenStreamParser.on('columnMetadata', token => {\n      const request = this.request;\n\n      if (request) {\n        if (!request.canceled) {\n          if (this.config.options.useColumnNames) {\n            const columns = {};\n\n            for (let j = 0, len = token.columns.length; j < len; j++) {\n              const col = token.columns[j];\n\n              if (columns[col.colName] == null) {\n                columns[col.colName] = col;\n              }\n            }\n\n            request.emit('columnMetadata', columns);\n          } else {\n            request.emit('columnMetadata', token.columns);\n          }\n        }\n      } else {\n        this.emit('error', new Error(\"Received 'columnMetadata' when no sqlRequest is in progress\"));\n        this.close();\n      }\n    });\n    tokenStreamParser.on('order', token => {\n      const request = this.request;\n\n      if (request) {\n        if (!request.canceled) {\n          request.emit('order', token.orderColumns);\n        }\n      } else {\n        this.emit('error', new Error(\"Received 'order' when no sqlRequest is in progress\"));\n        this.close();\n      }\n    });\n    tokenStreamParser.on('row', token => {\n      const request = this.request;\n\n      if (request) {\n        if (!request.canceled) {\n          if (this.config.options.rowCollectionOnRequestCompletion) {\n            request.rows.push(token.columns);\n          }\n\n          if (this.config.options.rowCollectionOnDone) {\n            request.rst.push(token.columns);\n          }\n\n          if (!(this.state === this.STATE.SENT_ATTENTION && request.paused)) {\n            request.emit('row', token.columns);\n          }\n        }\n      } else {\n        this.emit('error', new Error(\"Received 'row' when no sqlRequest is in progress\"));\n        this.close();\n      }\n    });\n    tokenStreamParser.on('returnStatus', token => {\n      const request = this.request;\n\n      if (request) {\n        if (!request.canceled) {\n          // Keep value for passing in 'doneProc' event.\n          this.procReturnStatusValue = token.value;\n        }\n      }\n    });\n    tokenStreamParser.on('returnValue', token => {\n      const request = this.request;\n\n      if (request) {\n        if (!request.canceled) {\n          request.emit('returnValue', token.paramName, token.value, token.metadata);\n        }\n      }\n    });\n    tokenStreamParser.on('doneProc', token => {\n      const request = this.request;\n\n      if (request) {\n        if (!request.canceled) {\n          request.emit('doneProc', token.rowCount, token.more, this.procReturnStatusValue, request.rst);\n          this.procReturnStatusValue = undefined;\n\n          if (token.rowCount !== undefined) {\n            request.rowCount += token.rowCount;\n          }\n\n          if (this.config.options.rowCollectionOnDone) {\n            request.rst = [];\n          }\n        }\n      }\n    });\n    tokenStreamParser.on('doneInProc', token => {\n      const request = this.request;\n\n      if (request) {\n        if (!request.canceled) {\n          request.emit('doneInProc', token.rowCount, token.more, request.rst);\n\n          if (token.rowCount !== undefined) {\n            request.rowCount += token.rowCount;\n          }\n\n          if (this.config.options.rowCollectionOnDone) {\n            request.rst = [];\n          }\n        }\n      }\n    });\n    tokenStreamParser.on('done', token => {\n      const request = this.request;\n\n      if (request) {\n        if (token.attention) {\n          this.dispatchEvent('attention');\n        }\n\n        if (request.canceled) {\n          // If we received a `DONE` token with `DONE_ERROR`, but no previous `ERROR` token,\n          // We assume this is the indication that an in-flight request was canceled.\n          if (token.sqlError && !request.error) {\n            this.clearCancelTimer();\n            request.error = (0, _errors.RequestError)('Canceled.', 'ECANCEL');\n          }\n        } else {\n          if (token.sqlError && !request.error) {\n            // check if the DONE_ERROR flags was set, but an ERROR token was not sent.\n            request.error = (0, _errors.RequestError)('An unknown error has occurred.', 'UNKNOWN');\n          }\n\n          request.emit('done', token.rowCount, token.more, request.rst);\n\n          if (token.rowCount !== undefined) {\n            request.rowCount += token.rowCount;\n          }\n\n          if (this.config.options.rowCollectionOnDone) {\n            request.rst = [];\n          }\n        }\n      }\n    });\n    tokenStreamParser.on('endOfMessage', () => {\n      // EOM pseudo token received\n      if (this.state === this.STATE.SENT_CLIENT_REQUEST) {\n        this.dispatchEvent('endOfMessageMarkerReceived');\n      }\n    });\n    tokenStreamParser.on('resetConnection', () => {\n      this.emit('resetConnection');\n    });\n    tokenStreamParser.on('drain', () => {\n      // Bridge the release of backpressure from the token stream parser\n      // transform to the packet stream transform.\n      this.messageIo.resume();\n    });\n    return tokenStreamParser;\n  }\n\n  connect() {\n    if (this.config.options.port) {\n      return this.connectOnPort(this.config.options.port, this.config.options.multiSubnetFailover);\n    } else {\n      return new _instanceLookup.InstanceLookup().instanceLookup({\n        server: this.config.server,\n        instanceName: this.config.options.instanceName,\n        timeout: this.config.options.connectTimeout\n      }, (message, port) => {\n        if (this.state === this.STATE.FINAL) {\n          return;\n        }\n\n        if (message) {\n          this.emit('connect', (0, _errors.ConnectionError)(message, 'EINSTLOOKUP'));\n        } else {\n          this.connectOnPort(port, this.config.options.multiSubnetFailover);\n        }\n      });\n    }\n  }\n\n  connectOnPort(port, multiSubnetFailover) {\n    const connectOpts = {\n      host: this.routingData ? this.routingData.server : this.config.server,\n      port: this.routingData ? this.routingData.port : port,\n      localAddress: this.config.options.localAddress\n    };\n    new _connector.Connector(connectOpts, multiSubnetFailover).execute((err, socket) => {\n      if (err) {\n        return this.socketError(err);\n      }\n\n      if (this.state === this.STATE.FINAL) {\n        socket.destroy();\n        return;\n      }\n\n      socket.on('error', error => {\n        this.socketError(error);\n      });\n      socket.on('close', () => {\n        this.socketClose();\n      });\n      socket.on('end', () => {\n        this.socketEnd();\n      });\n      socket.setKeepAlive(true, KEEP_ALIVE_INITIAL_DELAY);\n      this.messageIo = new _messageIo.default(socket, this.config.options.packetSize, this.debug);\n      this.messageIo.on('data', data => {\n        this.dispatchEvent('data', data);\n      });\n      this.messageIo.on('message', () => {\n        this.dispatchEvent('message');\n      });\n      this.messageIo.on('secure', cleartext => {\n        this.emit('secure', cleartext);\n      });\n      this.socket = socket;\n      this.socketConnect();\n    });\n  }\n\n  closeConnection() {\n    if (this.socket) {\n      this.socket.destroy();\n    }\n  }\n\n  createConnectTimer() {\n    this.connectTimer = setTimeout(() => {\n      this.connectTimeout();\n    }, this.config.options.connectTimeout);\n  }\n\n  createCancelTimer() {\n    this.clearCancelTimer();\n    const timeout = this.config.options.cancelTimeout;\n\n    if (timeout > 0) {\n      this.cancelTimer = setTimeout(() => {\n        this.cancelTimeout();\n      }, timeout);\n    }\n  }\n\n  createRequestTimer() {\n    this.clearRequestTimer(); // release old timer, just to be safe\n\n    const request = this.request;\n    const timeout = request.timeout !== undefined ? request.timeout : this.config.options.requestTimeout;\n\n    if (timeout) {\n      this.requestTimer = setTimeout(() => {\n        this.requestTimeout();\n      }, timeout);\n    }\n  }\n\n  createRetryTimer() {\n    this.clearRetryTimer();\n    this.retryTimer = setTimeout(() => {\n      this.retryTimeout();\n    }, this.config.options.connectionRetryInterval);\n  }\n\n  connectTimeout() {\n    const message = `Failed to connect to ${this.config.server}${this.config.options.port ? `:${this.config.options.port}` : `\\\\${this.config.options.instanceName}`} in ${this.config.options.connectTimeout}ms`;\n    this.debug.log(message);\n    this.emit('connect', (0, _errors.ConnectionError)(message, 'ETIMEOUT'));\n    this.connectTimer = undefined;\n    this.dispatchEvent('connectTimeout');\n  }\n\n  cancelTimeout() {\n    const message = `Failed to cancel request in ${this.config.options.cancelTimeout}ms`;\n    this.debug.log(message);\n    this.dispatchEvent('socketError', (0, _errors.ConnectionError)(message, 'ETIMEOUT'));\n  }\n\n  requestTimeout() {\n    this.requestTimer = undefined;\n    const request = this.request;\n    request.cancel();\n    const timeout = request.timeout !== undefined ? request.timeout : this.config.options.requestTimeout;\n    const message = 'Timeout: Request failed to complete in ' + timeout + 'ms';\n    request.error = (0, _errors.RequestError)(message, 'ETIMEOUT');\n  }\n\n  retryTimeout() {\n    this.retryTimer = undefined;\n    this.emit('retry');\n    this.transitionTo(this.STATE.CONNECTING);\n  }\n\n  clearConnectTimer() {\n    if (this.connectTimer) {\n      clearTimeout(this.connectTimer);\n    }\n  }\n\n  clearCancelTimer() {\n    if (this.cancelTimer) {\n      clearTimeout(this.cancelTimer);\n    }\n  }\n\n  clearRequestTimer() {\n    if (this.requestTimer) {\n      clearTimeout(this.requestTimer);\n      this.requestTimer = undefined;\n    }\n  }\n\n  clearRetryTimer() {\n    if (this.retryTimer) {\n      clearTimeout(this.retryTimer);\n      this.retryTimer = undefined;\n    }\n  }\n\n  transitionTo(newState) {\n    if (this.state === newState) {\n      this.debug.log('State is already ' + newState.name);\n      return;\n    }\n\n    if (this.state && this.state.exit) {\n      this.state.exit.call(this, newState);\n    }\n\n    this.debug.log('State change: ' + (this.state ? this.state.name : 'undefined') + ' -> ' + newState.name);\n    this.state = newState;\n\n    if (this.state.enter) {\n      this.state.enter.apply(this);\n    }\n  }\n\n  getEventHandler(eventName) {\n    const handler = this.state.events[eventName];\n\n    if (!handler) {\n      throw new Error(`No event '${eventName}' in state '${this.state.name}'`);\n    }\n\n    return handler;\n  }\n\n  dispatchEvent(eventName, ...args) {\n    const handler = this.state.events[eventName];\n\n    if (handler) {\n      handler.apply(this, args);\n    } else {\n      this.emit('error', new Error(`No event '${eventName}' in state '${this.state.name}'`));\n      this.close();\n    }\n  }\n\n  socketError(error) {\n    if (this.state === this.STATE.CONNECTING || this.state === this.STATE.SENT_TLSSSLNEGOTIATION) {\n      const message = `Failed to connect to ${this.config.server}:${this.config.options.port} - ${error.message}`;\n      this.debug.log(message);\n      this.emit('connect', (0, _errors.ConnectionError)(message, 'ESOCKET'));\n    } else {\n      const message = `Connection lost - ${error.message}`;\n      this.debug.log(message);\n      this.emit('error', (0, _errors.ConnectionError)(message, 'ESOCKET'));\n    }\n\n    this.dispatchEvent('socketError', error);\n  }\n\n  socketConnect() {\n    this.closed = false;\n    this.debug.log('connected to ' + this.config.server + ':' + this.config.options.port);\n    this.dispatchEvent('socketConnect');\n  }\n\n  socketEnd() {\n    this.debug.log('socket ended');\n\n    if (this.state !== this.STATE.FINAL) {\n      const error = new Error('socket hang up');\n      error.code = 'ECONNRESET';\n      this.socketError(error);\n    }\n  }\n\n  socketClose() {\n    this.debug.log('connection to ' + this.config.server + ':' + this.config.options.port + ' closed');\n\n    if (this.state === this.STATE.REROUTING) {\n      this.debug.log('Rerouting to ' + this.routingData.server + ':' + this.routingData.port);\n      this.dispatchEvent('reconnect');\n    } else if (this.state === this.STATE.TRANSIENT_FAILURE_RETRY) {\n      const server = this.routingData ? this.routingData.server : this.config.server;\n      const port = this.routingData ? this.routingData.port : this.config.options.port;\n      this.debug.log('Retry after transient failure connecting to ' + server + ':' + port);\n      this.dispatchEvent('retry');\n    } else {\n      this.transitionTo(this.STATE.FINAL);\n    }\n  }\n\n  sendPreLogin() {\n    const payload = new _preloginPayload.default({\n      encrypt: this.config.options.encrypt\n    });\n    this.messageIo.sendMessage(_packet.TYPE.PRELOGIN, payload.data);\n    this.debug.payload(function () {\n      return payload.toString('  ');\n    });\n  }\n\n  emptyMessageBuffer() {\n    this.messageBuffer = Buffer.alloc(0);\n  }\n\n  addToMessageBuffer(data) {\n    this.messageBuffer = Buffer.concat([this.messageBuffer, data]);\n  }\n\n  sendLogin7Packet() {\n    const payload = new _login7Payload.default({\n      tdsVersion: _tdsVersions.versions[this.config.options.tdsVersion],\n      packetSize: this.config.options.packetSize,\n      clientProgVer: 0,\n      clientPid: process.pid,\n      connectionId: 0,\n      clientTimeZone: new Date().getTimezoneOffset(),\n      clientLcid: 0x00000409\n    });\n    const authentication = this.config.authentication;\n\n    switch (authentication.type) {\n      case 'azure-active-directory-password':\n        payload.fedAuth = {\n          type: 'ADAL',\n          echo: this.fedAuthRequired,\n          workflow: 'default'\n        };\n        break;\n\n      case 'azure-active-directory-access-token':\n        payload.fedAuth = {\n          type: 'SECURITYTOKEN',\n          echo: this.fedAuthRequired,\n          fedAuthToken: authentication.options.token\n        };\n        break;\n\n      case 'azure-active-directory-msi-vm':\n      case 'azure-active-directory-msi-app-service':\n      case 'azure-active-directory-service-principal-secret':\n        payload.fedAuth = {\n          type: 'ADAL',\n          echo: this.fedAuthRequired,\n          workflow: 'integrated'\n        };\n        break;\n\n      case 'ntlm':\n        payload.sspi = (0, _ntlm.createNTLMRequest)({\n          domain: authentication.options.domain\n        });\n        break;\n\n      default:\n        payload.userName = authentication.options.userName;\n        payload.password = authentication.options.password;\n    }\n\n    payload.hostname = _os.default.hostname();\n    payload.serverName = this.routingData ? this.routingData.server : this.config.server;\n    payload.appName = this.config.options.appName || 'Tedious';\n    payload.libraryName = _library.name;\n    payload.language = this.config.options.language;\n    payload.database = this.config.options.database;\n    payload.clientId = Buffer.from([1, 2, 3, 4, 5, 6]);\n    payload.readOnlyIntent = this.config.options.readOnlyIntent;\n    payload.initDbFatal = !this.config.options.fallbackToDefaultDb;\n    this.routingData = undefined;\n    this.messageIo.sendMessage(_packet.TYPE.LOGIN7, payload.toBuffer());\n    this.debug.payload(function () {\n      return payload.toString('  ');\n    });\n  }\n\n  sendFedAuthTokenMessage(token) {\n    const accessTokenLen = Buffer.byteLength(token, 'ucs2');\n    const data = Buffer.alloc(8 + accessTokenLen);\n    let offset = 0;\n    offset = data.writeUInt32LE(accessTokenLen + 4, offset);\n    offset = data.writeUInt32LE(accessTokenLen, offset);\n    data.write(token, offset, 'ucs2');\n    this.messageIo.sendMessage(_packet.TYPE.FEDAUTH_TOKEN, data); // sent the fedAuth token message, the rest is similar to standard login 7\n\n    this.transitionTo(this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\n  } // Returns false to apply backpressure.\n\n\n  sendDataToTokenStreamParser(data) {\n    return this.tokenStreamParser.addBuffer(data);\n  } // This is an internal method that is called from Request.pause().\n  // It has to check whether the passed Request object represents the currently\n  // active request, because the application might have called Request.pause()\n  // on an old inactive Request object.\n\n\n  pauseRequest(request) {\n    if (this.isRequestActive(request)) {\n      this.tokenStreamParser.pause();\n    }\n  } // This is an internal method that is called from Request.resume().\n\n\n  resumeRequest(request) {\n    if (this.isRequestActive(request)) {\n      this.tokenStreamParser.resume();\n    }\n  } // Returns true if the passed request is the currently active request of the connection.\n\n\n  isRequestActive(request) {\n    return request === this.request && this.state === this.STATE.SENT_CLIENT_REQUEST;\n  }\n\n  sendInitialSql() {\n    const payload = new _sqlbatchPayload.default(this.getInitialSql(), this.currentTransactionDescriptor(), this.config.options);\n    payload.getData(data => {\n      return this.messageIo.sendMessage(_packet.TYPE.SQL_BATCH, data);\n    });\n  }\n\n  getInitialSql() {\n    const options = [];\n\n    if (this.config.options.enableAnsiNull === true) {\n      options.push('set ansi_nulls on');\n    } else if (this.config.options.enableAnsiNull === false) {\n      options.push('set ansi_nulls off');\n    }\n\n    if (this.config.options.enableAnsiNullDefault === true) {\n      options.push('set ansi_null_dflt_on on');\n    } else if (this.config.options.enableAnsiNullDefault === false) {\n      options.push('set ansi_null_dflt_on off');\n    }\n\n    if (this.config.options.enableAnsiPadding === true) {\n      options.push('set ansi_padding on');\n    } else if (this.config.options.enableAnsiPadding === false) {\n      options.push('set ansi_padding off');\n    }\n\n    if (this.config.options.enableAnsiWarnings === true) {\n      options.push('set ansi_warnings on');\n    } else if (this.config.options.enableAnsiWarnings === false) {\n      options.push('set ansi_warnings off');\n    }\n\n    if (this.config.options.enableArithAbort === true) {\n      options.push('set arithabort on');\n    } else if (this.config.options.enableArithAbort === false) {\n      options.push('set arithabort off');\n    }\n\n    if (this.config.options.enableConcatNullYieldsNull === true) {\n      options.push('set concat_null_yields_null on');\n    } else if (this.config.options.enableArithAbort === false) {\n      options.push('set concat_null_yields_null off');\n    }\n\n    if (this.config.options.enableCursorCloseOnCommit === true) {\n      options.push('set cursor_close_on_commit on');\n    } else if (this.config.options.enableCursorCloseOnCommit === false) {\n      options.push('set cursor_close_on_commit off');\n    }\n\n    if (this.config.options.datefirst !== null) {\n      options.push(`set datefirst ${this.config.options.datefirst}`);\n    }\n\n    if (this.config.options.dateFormat !== null) {\n      options.push(`set dateformat ${this.config.options.dateFormat}`);\n    }\n\n    if (this.config.options.enableImplicitTransactions === true) {\n      options.push('set implicit_transactions on');\n    } else if (this.config.options.enableImplicitTransactions === false) {\n      options.push('set implicit_transactions off');\n    }\n\n    if (this.config.options.language !== null) {\n      options.push(`set language ${this.config.options.language}`);\n    }\n\n    if (this.config.options.enableNumericRoundabort === true) {\n      options.push('set numeric_roundabort on');\n    } else if (this.config.options.enableNumericRoundabort === false) {\n      options.push('set numeric_roundabort off');\n    }\n\n    if (this.config.options.enableQuotedIdentifier === true) {\n      options.push('set quoted_identifier on');\n    } else if (this.config.options.enableQuotedIdentifier === false) {\n      options.push('set quoted_identifier off');\n    }\n\n    if (this.config.options.textsize !== null) {\n      options.push(`set textsize ${this.config.options.textsize}`);\n    }\n\n    if (this.config.options.connectionIsolationLevel !== null) {\n      options.push(`set transaction isolation level ${this.getIsolationLevelText(this.config.options.connectionIsolationLevel)}`);\n    }\n\n    if (this.config.options.abortTransactionOnError === true) {\n      options.push('set xact_abort on');\n    } else if (this.config.options.abortTransactionOnError === false) {\n      options.push('set xact_abort off');\n    }\n\n    return options.join('\\n');\n  }\n\n  processedInitialSql() {\n    this.clearConnectTimer();\n    this.emit('connect');\n  }\n\n  execSqlBatch(request) {\n    this.makeRequest(request, _packet.TYPE.SQL_BATCH, new _sqlbatchPayload.default(request.sqlTextOrProcedure, this.currentTransactionDescriptor(), this.config.options));\n  }\n\n  execSql(request) {\n    request.transformIntoExecuteSqlRpc();\n    const error = request.error;\n\n    if (error != null) {\n      process.nextTick(() => {\n        this.debug.log(error.message);\n        request.callback(error);\n      });\n      return;\n    }\n\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default(request, this.currentTransactionDescriptor(), this.config.options));\n  }\n  /**\n   @function newBulkLoad\n   @param {string} table - Table's name.\n   @param {Object} [options] - BulkLoad options.\n   @param {boolean} [options.checkConstraints=false] - Honors constraints during bulk load, it is disabled by default.\n   @param {boolean} [options.fireTriggers=false] - Honors insert triggers during bulk load, it is disabled by default.\n   @param {boolean} [options.keepNulls=false] - Honors null value passed, ignores the default values set on table.\n   @param {boolean} [options.tableLock=false] - Places a bulk update(BU) lock on table while performing bulk load. Uses row locks by default.\n   @param {callback} callback - Function to call after BulkLoad executes.\n   */\n\n\n  newBulkLoad(table, callbackOrOptions, callback) {\n    let options;\n\n    if (callback === undefined) {\n      callback = callbackOrOptions;\n      options = {};\n    } else {\n      options = callbackOrOptions;\n    }\n\n    if (typeof options !== 'object') {\n      throw new TypeError('\"options\" argument must be an object');\n    }\n\n    return new _bulkLoad.default(table, this.config.options, options, callback);\n  }\n\n  execBulkLoad(bulkLoad) {\n    bulkLoad.executionStarted = true;\n    const request = new _request.default(bulkLoad.getBulkInsertSql(), error => {\n      if (error) {\n        if (error.code === 'UNKNOWN') {\n          error.message += ' This is likely because the schema of the BulkLoad does not match the schema of the table you are attempting to insert into.';\n        }\n\n        bulkLoad.error = error;\n        bulkLoad.callback(error);\n        return;\n      }\n\n      this.makeRequest(bulkLoad, _packet.TYPE.BULK_LOAD);\n    });\n    bulkLoad.once('cancel', () => {\n      request.cancel();\n    });\n    this.execSqlBatch(request);\n  }\n\n  prepare(request) {\n    request.transformIntoPrepareRpc();\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default(request, this.currentTransactionDescriptor(), this.config.options));\n  }\n\n  unprepare(request) {\n    request.transformIntoUnprepareRpc();\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default(request, this.currentTransactionDescriptor(), this.config.options));\n  }\n\n  execute(request, parameters) {\n    request.transformIntoExecuteRpc(parameters);\n    const error = request.error;\n\n    if (error != null) {\n      process.nextTick(() => {\n        this.debug.log(error.message);\n        request.callback(error);\n      });\n      return;\n    }\n\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default(request, this.currentTransactionDescriptor(), this.config.options));\n  }\n\n  callProcedure(request) {\n    request.validateParameters();\n    const error = request.error;\n\n    if (error != null) {\n      process.nextTick(() => {\n        this.debug.log(error.message);\n        request.callback(error);\n      });\n      return;\n    }\n\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default(request, this.currentTransactionDescriptor(), this.config.options));\n  }\n\n  beginTransaction(callback, name = '', isolationLevel = this.config.options.isolationLevel) {\n    const transaction = new _transaction.Transaction(name, isolationLevel);\n\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new _request.default('SET TRANSACTION ISOLATION LEVEL ' + transaction.isolationLevelToTSQL() + ';BEGIN TRAN ' + transaction.name, err => {\n        this.transactionDepth++;\n\n        if (this.transactionDepth === 1) {\n          this.inTransaction = true;\n        }\n\n        callback(err);\n      }));\n    }\n\n    const request = new _request.default(undefined, err => {\n      return callback(err, this.currentTransactionDescriptor());\n    });\n    return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.beginPayload(this.currentTransactionDescriptor()));\n  }\n\n  commitTransaction(callback, name = '') {\n    const transaction = new _transaction.Transaction(name);\n\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new _request.default('COMMIT TRAN ' + transaction.name, err => {\n        this.transactionDepth--;\n\n        if (this.transactionDepth === 0) {\n          this.inTransaction = false;\n        }\n\n        callback(err);\n      }));\n    }\n\n    const request = new _request.default(undefined, callback);\n    return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.commitPayload(this.currentTransactionDescriptor()));\n  }\n\n  rollbackTransaction(callback, name = '') {\n    const transaction = new _transaction.Transaction(name);\n\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new _request.default('ROLLBACK TRAN ' + transaction.name, err => {\n        this.transactionDepth--;\n\n        if (this.transactionDepth === 0) {\n          this.inTransaction = false;\n        }\n\n        callback(err);\n      }));\n    }\n\n    const request = new _request.default(undefined, callback);\n    return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.rollbackPayload(this.currentTransactionDescriptor()));\n  }\n\n  saveTransaction(callback, name) {\n    const transaction = new _transaction.Transaction(name);\n\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new _request.default('SAVE TRAN ' + transaction.name, err => {\n        this.transactionDepth++;\n        callback(err);\n      }));\n    }\n\n    const request = new _request.default(undefined, callback);\n    return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.savePayload(this.currentTransactionDescriptor()));\n  }\n\n  transaction(cb, isolationLevel) {\n    if (typeof cb !== 'function') {\n      throw new TypeError('`cb` must be a function');\n    }\n\n    const useSavepoint = this.inTransaction;\n\n    const name = '_tedious_' + _crypto.default.randomBytes(10).toString('hex');\n\n    const txDone = (err, done, ...args) => {\n      if (err) {\n        if (this.inTransaction && this.state === this.STATE.LOGGED_IN) {\n          this.rollbackTransaction(txErr => {\n            done(txErr || err, ...args);\n          }, name);\n        } else {\n          done(err, ...args);\n        }\n      } else if (useSavepoint) {\n        if (this.config.options.tdsVersion < '7_2') {\n          this.transactionDepth--;\n        }\n\n        done(null, ...args);\n      } else {\n        this.commitTransaction(txErr => {\n          done(txErr, ...args);\n        }, name);\n      }\n    };\n\n    if (useSavepoint) {\n      return this.saveTransaction(err => {\n        if (err) {\n          return cb(err);\n        }\n\n        if (isolationLevel) {\n          return this.execSqlBatch(new _request.default('SET transaction isolation level ' + this.getIsolationLevelText(isolationLevel), err => {\n            return cb(err, txDone);\n          }));\n        } else {\n          return cb(null, txDone);\n        }\n      }, name);\n    } else {\n      return this.beginTransaction(err => {\n        if (err) {\n          return cb(err);\n        }\n\n        return cb(null, txDone);\n      }, name, isolationLevel);\n    }\n  }\n\n  makeRequest(request, packetType, payload) {\n    if (this.state !== this.STATE.LOGGED_IN) {\n      const message = 'Requests can only be made in the ' + this.STATE.LOGGED_IN.name + ' state, not the ' + this.state.name + ' state';\n      this.debug.log(message);\n      request.callback((0, _errors.RequestError)(message, 'EINVALIDSTATE'));\n    } else if (request.canceled) {\n      process.nextTick(() => {\n        request.callback((0, _errors.RequestError)('Canceled.', 'ECANCEL'));\n      });\n    } else {\n      if (packetType === _packet.TYPE.SQL_BATCH) {\n        this.isSqlBatch = true;\n      } else {\n        this.isSqlBatch = false;\n      }\n\n      this.request = request;\n      request.connection = this;\n      request.rowCount = 0;\n      request.rows = [];\n      request.rst = [];\n      let message;\n      request.once('cancel', () => {\n        if (!this.isRequestActive(request)) {\n          // Cancel was called on a request that is no longer active on this connection\n          return;\n        } // There's three ways to handle request cancelation:\n\n\n        if (this.state === this.STATE.BUILDING_CLIENT_REQUEST) {\n          // The request was cancelled before buffering finished\n          this.request = undefined;\n          request.callback((0, _errors.RequestError)('Canceled.', 'ECANCEL'));\n          this.transitionTo(this.STATE.LOGGED_IN);\n        } else if (message.writable) {\n          // - if the message is still writable, we'll set the ignore bit\n          //   and end the message.\n          message.ignore = true;\n          message.end();\n        } else {\n          // - but if the message has been ended (and thus has been fully sent off),\n          //   we need to send an `ATTENTION` message to the server\n          this.messageIo.sendMessage(_packet.TYPE.ATTENTION);\n          this.transitionTo(this.STATE.SENT_ATTENTION);\n        }\n\n        this.clearRequestTimer();\n        this.createCancelTimer();\n      });\n\n      if (request instanceof _bulkLoad.default) {\n        message = request.getMessageStream(); // If the bulkload was not put into streaming mode by the user,\n        // we end the rowToPacketTransform here for them.\n        //\n        // If it was put into streaming mode, it's the user's responsibility\n        // to end the stream.\n\n        if (!request.streamingMode) {\n          request.rowToPacketTransform.end();\n        }\n\n        this.messageIo.outgoingMessageStream.write(message);\n        this.transitionTo(this.STATE.SENT_CLIENT_REQUEST);\n\n        if (request.paused) {\n          // Request.pause() has been called before the request was started\n          this.pauseRequest(request);\n        }\n      } else {\n        this.createRequestTimer(); // Transition to an intermediate state to ensure that no new requests\n        // are made on the connection while the buffer is being populated.\n\n        this.transitionTo(this.STATE.BUILDING_CLIENT_REQUEST);\n        payload.getData(data => {\n          if (this.state !== this.STATE.BUILDING_CLIENT_REQUEST) {\n            // Something else has happened on the connection since starting to\n            // build the request. That state change should have invoked the\n            // request handler so there is nothing to do at this point.\n            return;\n          }\n\n          message = this.messageIo.sendMessage(packetType, data, this.resetConnectionOnNextRequest);\n          this.resetConnectionOnNextRequest = false;\n          this.debug.payload(function () {\n            return payload.toString('  ');\n          });\n          this.transitionTo(this.STATE.SENT_CLIENT_REQUEST);\n\n          if (request.paused) {\n            // Request.pause() has been called before the request was started\n            this.pauseRequest(request);\n          }\n        });\n      }\n    }\n  }\n\n  cancel() {\n    if (!this.request) {\n      return false;\n    }\n\n    if (this.request.canceled) {\n      return false;\n    }\n\n    this.request.cancel();\n    return true;\n  }\n\n  reset(callback) {\n    const request = new _request.default(this.getInitialSql(), err => {\n      if (this.config.options.tdsVersion < '7_2') {\n        this.inTransaction = false;\n      }\n\n      callback(err);\n    });\n    this.resetConnectionOnNextRequest = true;\n    this.execSqlBatch(request);\n  }\n\n  currentTransactionDescriptor() {\n    return this.transactionDescriptors[this.transactionDescriptors.length - 1];\n  }\n\n  getIsolationLevelText(isolationLevel) {\n    switch (isolationLevel) {\n      case _transaction.ISOLATION_LEVEL.READ_UNCOMMITTED:\n        return 'read uncommitted';\n\n      case _transaction.ISOLATION_LEVEL.REPEATABLE_READ:\n        return 'repeatable read';\n\n      case _transaction.ISOLATION_LEVEL.SERIALIZABLE:\n        return 'serializable';\n\n      case _transaction.ISOLATION_LEVEL.SNAPSHOT:\n        return 'snapshot';\n\n      default:\n        return 'read committed';\n    }\n  }\n\n}\n\nvar _default = Connection;\nexports.default = _default;\nmodule.exports = Connection;\nConnection.prototype.STATE = {\n  CONNECTING: {\n    name: 'Connecting',\n    enter: function enter() {\n      this.initialiseConnection();\n    },\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      socketConnect: function socketConnect() {\n        this.sendPreLogin();\n        this.transitionTo(this.STATE.SENT_PRELOGIN);\n      }\n    }\n  },\n  SENT_PRELOGIN: {\n    name: 'SentPrelogin',\n    enter: function enter() {\n      this.emptyMessageBuffer();\n    },\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      data: function (_data) {\n        function data(_x) {\n          return _data.apply(this, arguments);\n        }\n\n        data.toString = function () {\n          return _data.toString();\n        };\n\n        return data;\n      }(function (data) {\n        this.addToMessageBuffer(data);\n      }),\n      message: function message() {\n        const preloginPayload = new _preloginPayload.default(this.messageBuffer);\n        this.debug.payload(function () {\n          return preloginPayload.toString('  ');\n        });\n\n        if (preloginPayload.fedAuthRequired === 1) {\n          this.fedAuthRequired = true;\n        }\n\n        if (preloginPayload.encryptionString === 'ON' || preloginPayload.encryptionString === 'REQ') {\n          if (!this.config.options.encrypt) {\n            this.emit('connect', (0, _errors.ConnectionError)(\"Server requires encryption, set 'encrypt' config option to true.\", 'EENCRYPT'));\n            return this.close();\n          }\n\n          this.messageIo.startTls(this.secureContext, this.config.server, this.config.options.trustServerCertificate);\n          this.transitionTo(this.STATE.SENT_TLSSSLNEGOTIATION);\n        } else {\n          this.sendLogin7Packet();\n          const authentication = this.config.authentication;\n\n          if (authentication.type === 'ntlm') {\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_NTLM);\n          } else {\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\n          }\n        }\n      }\n    }\n  },\n  REROUTING: {\n    name: 'ReRouting',\n    enter: function enter() {\n      this.cleanupConnection(CLEANUP_TYPE.REDIRECT);\n    },\n    events: {\n      message: function message() {},\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      reconnect: function reconnect() {\n        this.transitionTo(this.STATE.CONNECTING);\n      }\n    }\n  },\n  TRANSIENT_FAILURE_RETRY: {\n    name: 'TRANSIENT_FAILURE_RETRY',\n    enter: function enter() {\n      this.curTransientRetryCount++;\n      this.cleanupConnection(CLEANUP_TYPE.RETRY);\n    },\n    events: {\n      message: function message() {},\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      retry: function retry() {\n        this.createRetryTimer();\n      }\n    }\n  },\n  SENT_TLSSSLNEGOTIATION: {\n    name: 'SentTLSSSLNegotiation',\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      data: function (_data2) {\n        function data(_x2) {\n          return _data2.apply(this, arguments);\n        }\n\n        data.toString = function () {\n          return _data2.toString();\n        };\n\n        return data;\n      }(function (data) {\n        this.messageIo.tlsHandshakeData(data);\n      }),\n      message: function message() {\n        if (this.messageIo.tlsNegotiationComplete) {\n          this.sendLogin7Packet();\n          const authentication = this.config.authentication;\n\n          if (authentication.type === 'azure-active-directory-password' || authentication.type === 'azure-active-directory-msi-vm' || authentication.type === 'azure-active-directory-msi-app-service' || authentication.type === 'azure-active-directory-service-principal-secret') {\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_FEDAUTH);\n          } else if (authentication.type === 'ntlm') {\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_NTLM);\n          } else {\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\n          }\n        }\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_STANDARD_LOGIN: {\n    name: 'SentLogin7WithStandardLogin',\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      data: function (_data3) {\n        function data(_x3) {\n          return _data3.apply(this, arguments);\n        }\n\n        data.toString = function () {\n          return _data3.toString();\n        };\n\n        return data;\n      }(function (data) {\n        this.sendDataToTokenStreamParser(data);\n      }),\n      routingChange: function routingChange() {\n        this.transitionTo(this.STATE.REROUTING);\n      },\n      featureExtAck: function featureExtAck(token) {\n        const authentication = this.config.authentication;\n\n        if (authentication.type === 'azure-active-directory-password' || authentication.type === 'azure-active-directory-access-token' || authentication.type === 'azure-active-directory-msi-vm' || authentication.type === 'azure-active-directory-msi-app-service' || authentication.type === 'azure-active-directory-service-principal-secret') {\n          if (token.fedAuth === undefined) {\n            this.loginError = (0, _errors.ConnectionError)('Did not receive Active Directory authentication acknowledgement');\n            this.loggedIn = false;\n          } else if (token.fedAuth.length !== 0) {\n            this.loginError = (0, _errors.ConnectionError)(`Active Directory authentication acknowledgment for ${authentication.type} authentication method includes extra data`);\n            this.loggedIn = false;\n          }\n        } else if (token.fedAuth === undefined) {\n          this.loginError = (0, _errors.ConnectionError)('Received acknowledgement for unknown feature');\n          this.loggedIn = false;\n        } else {\n          this.loginError = (0, _errors.ConnectionError)('Did not request Active Directory authentication, but received the acknowledgment');\n          this.loggedIn = false;\n        }\n      },\n      message: function message() {\n        if (this.loggedIn) {\n          this.transitionTo(this.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n        } else if (this.loginError) {\n          if (this.loginError.isTransient) {\n            this.debug.log('Initiating retry on transient error');\n            this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\n          } else {\n            this.emit('connect', this.loginError);\n            this.transitionTo(this.STATE.FINAL);\n          }\n        } else {\n          this.emit('connect', (0, _errors.ConnectionError)('Login failed.', 'ELOGIN'));\n          this.transitionTo(this.STATE.FINAL);\n        }\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_NTLM: {\n    name: 'SentLogin7WithNTLMLogin',\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      data: function (_data4) {\n        function data(_x4) {\n          return _data4.apply(this, arguments);\n        }\n\n        data.toString = function () {\n          return _data4.toString();\n        };\n\n        return data;\n      }(function (data) {\n        this.sendDataToTokenStreamParser(data);\n      }),\n      message: function message() {\n        if (this.ntlmpacket) {\n          const authentication = this.config.authentication;\n          const payload = new _ntlmPayload.default({\n            domain: authentication.options.domain,\n            userName: authentication.options.userName,\n            password: authentication.options.password,\n            ntlmpacket: this.ntlmpacket\n          });\n          this.messageIo.sendMessage(_packet.TYPE.NTLMAUTH_PKT, payload.data);\n          this.debug.payload(function () {\n            return payload.toString('  ');\n          });\n          this.ntlmpacket = undefined;\n        } else if (this.loggedIn) {\n          this.transitionTo(this.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n        } else if (this.loginError) {\n          if (this.loginError.isTransient) {\n            this.debug.log('Initiating retry on transient error');\n            this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\n          } else {\n            this.emit('connect', this.loginError);\n            this.transitionTo(this.STATE.FINAL);\n          }\n        } else {\n          this.emit('connect', (0, _errors.ConnectionError)('Login failed.', 'ELOGIN'));\n          this.transitionTo(this.STATE.FINAL);\n        }\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_FEDAUTH: {\n    name: 'SentLogin7Withfedauth',\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      data: function (_data5) {\n        function data(_x5) {\n          return _data5.apply(this, arguments);\n        }\n\n        data.toString = function () {\n          return _data5.toString();\n        };\n\n        return data;\n      }(function (data) {\n        this.sendDataToTokenStreamParser(data);\n      }),\n      routingChange: function routingChange() {\n        this.transitionTo(this.STATE.REROUTING);\n      },\n      fedAuthInfo: function fedAuthInfo(token) {\n        this.fedAuthInfoToken = token;\n      },\n      message: function message() {\n        const fedAuthInfoToken = this.fedAuthInfoToken;\n\n        if (fedAuthInfoToken && fedAuthInfoToken.stsurl && fedAuthInfoToken.spn) {\n          const authentication = this.config.authentication;\n\n          const getToken = callback => {\n            const getTokenFromCredentials = (err, credentials) => {\n              if (err) {\n                return callback(err);\n              }\n\n              credentials.getToken().then(tokenResponse => {\n                callback(null, tokenResponse.accessToken);\n              }, callback);\n            };\n\n            if (authentication.type === 'azure-active-directory-password') {\n              (0, _msRestNodeauth.loginWithUsernamePassword)(authentication.options.userName, authentication.options.password, {\n                clientId: '7f98cb04-cd1e-40df-9140-3bf7e2cea4db',\n                tokenAudience: fedAuthInfoToken.spn\n              }, getTokenFromCredentials);\n            } else if (authentication.type === 'azure-active-directory-msi-vm') {\n              (0, _msRestNodeauth.loginWithVmMSI)({\n                clientId: authentication.options.clientId,\n                msiEndpoint: authentication.options.msiEndpoint,\n                resource: fedAuthInfoToken.spn\n              }, getTokenFromCredentials);\n            } else if (authentication.type === 'azure-active-directory-msi-app-service') {\n              (0, _msRestNodeauth.loginWithAppServiceMSI)({\n                msiEndpoint: authentication.options.msiEndpoint,\n                msiSecret: authentication.options.msiSecret,\n                resource: fedAuthInfoToken.spn\n              }, getTokenFromCredentials);\n            } else if (authentication.type === 'azure-active-directory-service-principal-secret') {\n              (0, _msRestNodeauth.loginWithServicePrincipalSecret)(authentication.options.clientId, authentication.options.clientSecret, authentication.options.tenantId, {\n                tokenAudience: fedAuthInfoToken.spn\n              }, getTokenFromCredentials);\n            }\n          };\n\n          getToken((err, token) => {\n            if (err) {\n              this.loginError = (0, _errors.ConnectionError)('Security token could not be authenticated or authorized.', 'EFEDAUTH');\n              this.emit('connect', this.loginError);\n              this.transitionTo(this.STATE.FINAL);\n              return;\n            }\n\n            this.sendFedAuthTokenMessage(token);\n          });\n        } else if (this.loginError) {\n          if (this.loginError.isTransient) {\n            this.debug.log('Initiating retry on transient error');\n            this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\n          } else {\n            this.emit('connect', this.loginError);\n            this.transitionTo(this.STATE.FINAL);\n          }\n        } else {\n          this.emit('connect', (0, _errors.ConnectionError)('Login failed.', 'ELOGIN'));\n          this.transitionTo(this.STATE.FINAL);\n        }\n      }\n    }\n  },\n  LOGGED_IN_SENDING_INITIAL_SQL: {\n    name: 'LoggedInSendingInitialSql',\n    enter: function enter() {\n      this.sendInitialSql();\n    },\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function connectTimeout() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      data: function (_data6) {\n        function data(_x6) {\n          return _data6.apply(this, arguments);\n        }\n\n        data.toString = function () {\n          return _data6.toString();\n        };\n\n        return data;\n      }(function (data) {\n        this.sendDataToTokenStreamParser(data);\n      }),\n      message: function message() {\n        this.transitionTo(this.STATE.LOGGED_IN);\n        this.processedInitialSql();\n      }\n    }\n  },\n  LOGGED_IN: {\n    name: 'LoggedIn',\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  BUILDING_CLIENT_REQUEST: {\n    name: 'BuildingClientRequest',\n    events: {\n      socketError: function socketError(err) {\n        const sqlRequest = this.request;\n        this.request = undefined;\n        this.transitionTo(this.STATE.FINAL);\n        sqlRequest.callback(err);\n      }\n    }\n  },\n  SENT_CLIENT_REQUEST: {\n    name: 'SentClientRequest',\n    exit: function exit(nextState) {\n      this.clearRequestTimer();\n\n      if (nextState !== this.STATE.FINAL) {\n        this.tokenStreamParser.resume();\n      }\n    },\n    events: {\n      socketError: function socketError(err) {\n        const sqlRequest = this.request;\n        this.request = undefined;\n        this.transitionTo(this.STATE.FINAL);\n        sqlRequest.callback(err);\n      },\n      data: function (_data7) {\n        function data(_x7) {\n          return _data7.apply(this, arguments);\n        }\n\n        data.toString = function () {\n          return _data7.toString();\n        };\n\n        return data;\n      }(function (data) {\n        this.clearRequestTimer(); // request timer is stopped on first data package\n\n        const ret = this.sendDataToTokenStreamParser(data);\n\n        if (ret === false) {\n          // Bridge backpressure from the token stream parser transform to the\n          // packet stream transform.\n          this.messageIo.pause();\n        }\n      }),\n      message: function message() {\n        // We have to channel the 'message' (EOM) event through the token stream\n        // parser transform, to keep it in line with the flow of the tokens, when\n        // the incoming data flow is paused and resumed.\n        this.tokenStreamParser.addEndOfMessageMarker();\n      },\n      endOfMessageMarkerReceived: function endOfMessageMarkerReceived() {\n        this.transitionTo(this.STATE.LOGGED_IN);\n        const sqlRequest = this.request;\n        this.request = undefined;\n\n        if (this.config.options.tdsVersion < '7_2' && sqlRequest.error && this.isSqlBatch) {\n          this.inTransaction = false;\n        }\n\n        sqlRequest.callback(sqlRequest.error, sqlRequest.rowCount, sqlRequest.rows);\n      }\n    }\n  },\n  SENT_ATTENTION: {\n    name: 'SentAttention',\n    enter: function enter() {\n      this.attentionReceived = false;\n    },\n    events: {\n      socketError: function socketError(err) {\n        const sqlRequest = this.request;\n        this.request = undefined;\n        this.transitionTo(this.STATE.FINAL);\n        sqlRequest.callback(err);\n      },\n      data: function (_data8) {\n        function data(_x8) {\n          return _data8.apply(this, arguments);\n        }\n\n        data.toString = function () {\n          return _data8.toString();\n        };\n\n        return data;\n      }(function (data) {\n        this.sendDataToTokenStreamParser(data);\n      }),\n      attention: function attention() {\n        this.attentionReceived = true;\n      },\n      message: function message() {\n        // 3.2.5.7 Sent Attention State\n        // Discard any data contained in the response, until we receive the attention response\n        if (this.attentionReceived) {\n          this.clearCancelTimer();\n          const sqlRequest = this.request;\n          this.request = undefined;\n          this.transitionTo(this.STATE.LOGGED_IN);\n\n          if (sqlRequest.error && sqlRequest.error instanceof _errors.RequestError && sqlRequest.error.code === 'ETIMEOUT') {\n            sqlRequest.callback(sqlRequest.error);\n          } else {\n            sqlRequest.callback((0, _errors.RequestError)('Canceled.', 'ECANCEL'));\n          }\n        }\n      }\n    }\n  },\n  FINAL: {\n    name: 'Final',\n    enter: function enter() {\n      this.cleanupConnection(CLEANUP_TYPE.NORMAL);\n    },\n    events: {\n      loginFailed: function loginFailed() {// Do nothing. The connection was probably closed by the client code.\n      },\n      connectTimeout: function connectTimeout() {// Do nothing, as the timer should be cleaned up.\n      },\n      message: function message() {// Do nothing\n      },\n      socketError: function socketError() {// Do nothing\n      }\n    }\n  }\n};"]},"metadata":{},"sourceType":"script"}
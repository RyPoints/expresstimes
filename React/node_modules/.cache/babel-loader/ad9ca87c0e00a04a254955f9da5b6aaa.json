{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _datetimen = _interopRequireDefault(require(\"./datetimen\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst EPOCH_DATE = new Date(1900, 0, 1);\nconst UTC_EPOCH_DATE = new Date(Date.UTC(1900, 0, 1));\nconst DateTime = {\n  id: 0x3D,\n  type: 'DATETIME',\n  name: 'DateTime',\n  declaration: function declaration() {\n    return 'datetime';\n  },\n  writeTypeInfo: function writeTypeInfo(buffer) {\n    buffer.writeUInt8(_datetimen.default.id);\n    buffer.writeUInt8(8);\n  },\n  // ParameterData<any> is temporary solution. TODO: need to understand what type ParameterData<...> can be.\n  writeParameterData: function writeParameterData(buffer, parameter, options, cb) {\n    if (parameter.value != null) {\n      let days, dstDiff, milliseconds, seconds, threeHundredthsOfSecond;\n\n      if (options.useUTC) {\n        days = Math.floor((parameter.value.getTime() - UTC_EPOCH_DATE.getTime()) / (1000 * 60 * 60 * 24));\n        seconds = parameter.value.getUTCHours() * 60 * 60;\n        seconds += parameter.value.getUTCMinutes() * 60;\n        seconds += parameter.value.getUTCSeconds();\n        milliseconds = seconds * 1000 + parameter.value.getUTCMilliseconds();\n      } else {\n        dstDiff = -(parameter.value.getTimezoneOffset() - EPOCH_DATE.getTimezoneOffset()) * 60 * 1000;\n        days = Math.floor((parameter.value.getTime() - EPOCH_DATE.getTime() + dstDiff) / (1000 * 60 * 60 * 24));\n        seconds = parameter.value.getHours() * 60 * 60;\n        seconds += parameter.value.getMinutes() * 60;\n        seconds += parameter.value.getSeconds();\n        milliseconds = seconds * 1000 + parameter.value.getMilliseconds();\n      }\n\n      threeHundredthsOfSecond = milliseconds / (3 + 1 / 3);\n      threeHundredthsOfSecond = Math.round(threeHundredthsOfSecond); // 25920000 equals one day\n\n      if (threeHundredthsOfSecond === 25920000) {\n        days += 1;\n        threeHundredthsOfSecond = 0;\n      }\n\n      buffer.writeUInt8(8);\n      buffer.writeInt32LE(days);\n      buffer.writeUInt32LE(threeHundredthsOfSecond);\n    } else {\n      buffer.writeUInt8(0);\n    }\n\n    cb();\n  },\n  // TODO: type 'any' needs to be revisited.\n  validate: function validate(value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (!(value instanceof Date)) {\n      value = Date.parse(value);\n    }\n\n    if (isNaN(value)) {\n      return new TypeError('Invalid date.');\n    }\n\n    return value;\n  }\n};\nvar _default = DateTime;\nexports.default = _default;\nmodule.exports = DateTime;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/tedious/lib/data-types/datetime.js"],"names":["Object","defineProperty","exports","value","default","_datetimen","_interopRequireDefault","require","obj","__esModule","EPOCH_DATE","Date","UTC_EPOCH_DATE","UTC","DateTime","id","type","name","declaration","writeTypeInfo","buffer","writeUInt8","writeParameterData","parameter","options","cb","days","dstDiff","milliseconds","seconds","threeHundredthsOfSecond","useUTC","Math","floor","getTime","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","getTimezoneOffset","getHours","getMinutes","getSeconds","getMilliseconds","round","writeInt32LE","writeUInt32LE","validate","parse","isNaN","TypeError","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _datetimen = _interopRequireDefault(require(\"./datetimen\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst EPOCH_DATE = new Date(1900, 0, 1);\nconst UTC_EPOCH_DATE = new Date(Date.UTC(1900, 0, 1));\nconst DateTime = {\n  id: 0x3D,\n  type: 'DATETIME',\n  name: 'DateTime',\n  declaration: function declaration() {\n    return 'datetime';\n  },\n  writeTypeInfo: function writeTypeInfo(buffer) {\n    buffer.writeUInt8(_datetimen.default.id);\n    buffer.writeUInt8(8);\n  },\n  // ParameterData<any> is temporary solution. TODO: need to understand what type ParameterData<...> can be.\n  writeParameterData: function writeParameterData(buffer, parameter, options, cb) {\n    if (parameter.value != null) {\n      let days, dstDiff, milliseconds, seconds, threeHundredthsOfSecond;\n\n      if (options.useUTC) {\n        days = Math.floor((parameter.value.getTime() - UTC_EPOCH_DATE.getTime()) / (1000 * 60 * 60 * 24));\n        seconds = parameter.value.getUTCHours() * 60 * 60;\n        seconds += parameter.value.getUTCMinutes() * 60;\n        seconds += parameter.value.getUTCSeconds();\n        milliseconds = seconds * 1000 + parameter.value.getUTCMilliseconds();\n      } else {\n        dstDiff = -(parameter.value.getTimezoneOffset() - EPOCH_DATE.getTimezoneOffset()) * 60 * 1000;\n        days = Math.floor((parameter.value.getTime() - EPOCH_DATE.getTime() + dstDiff) / (1000 * 60 * 60 * 24));\n        seconds = parameter.value.getHours() * 60 * 60;\n        seconds += parameter.value.getMinutes() * 60;\n        seconds += parameter.value.getSeconds();\n        milliseconds = seconds * 1000 + parameter.value.getMilliseconds();\n      }\n\n      threeHundredthsOfSecond = milliseconds / (3 + 1 / 3);\n      threeHundredthsOfSecond = Math.round(threeHundredthsOfSecond); // 25920000 equals one day\n\n      if (threeHundredthsOfSecond === 25920000) {\n        days += 1;\n        threeHundredthsOfSecond = 0;\n      }\n\n      buffer.writeUInt8(8);\n      buffer.writeInt32LE(days);\n      buffer.writeUInt32LE(threeHundredthsOfSecond);\n    } else {\n      buffer.writeUInt8(0);\n    }\n\n    cb();\n  },\n  // TODO: type 'any' needs to be revisited.\n  validate: function validate(value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (!(value instanceof Date)) {\n      value = Date.parse(value);\n    }\n\n    if (isNaN(value)) {\n      return new TypeError('Invalid date.');\n    }\n\n    return value;\n  }\n};\nvar _default = DateTime;\nexports.default = _default;\nmodule.exports = DateTime;"]},"metadata":{},"sourceType":"script"}
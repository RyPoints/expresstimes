{"ast":null,"code":"'use strict';\n\nconst Duplex = require('stream').Duplex;\n\nconst kCallback = Symbol('Callback');\nconst kOtherSide = Symbol('Other');\n\nclass DuplexSocket extends Duplex {\n  constructor(options) {\n    super(options);\n    this[kCallback] = null;\n    this[kOtherSide] = null;\n  }\n\n  _read() {\n    const callback = this[kCallback];\n\n    if (callback) {\n      this[kCallback] = null;\n      callback();\n    }\n  }\n\n  _write(chunk, encoding, callback) {\n    this[kOtherSide][kCallback] = callback;\n    this[kOtherSide].push(chunk);\n  }\n\n  _final(callback) {\n    this[kOtherSide].on('end', callback);\n    this[kOtherSide].push(null);\n  }\n\n}\n\nclass DuplexPair {\n  constructor(options) {\n    this.socket1 = new DuplexSocket(options);\n    this.socket2 = new DuplexSocket(options);\n    this.socket1[kOtherSide] = this.socket2;\n    this.socket2[kOtherSide] = this.socket1;\n  }\n\n}\n\nmodule.exports = DuplexPair;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/native-duplexpair/index.js"],"names":["Duplex","require","kCallback","Symbol","kOtherSide","DuplexSocket","constructor","options","_read","callback","_write","chunk","encoding","push","_final","on","DuplexPair","socket1","socket2","module","exports"],"mappings":"AAAA;;AACA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBD,MAAjC;;AAEA,MAAME,SAAS,GAAGC,MAAM,CAAC,UAAD,CAAxB;AACA,MAAMC,UAAU,GAAGD,MAAM,CAAC,OAAD,CAAzB;;AAEA,MAAME,YAAN,SAA2BL,MAA3B,CAAkC;AAChCM,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,UAAMA,OAAN;AACA,SAAKL,SAAL,IAAkB,IAAlB;AACA,SAAKE,UAAL,IAAmB,IAAnB;AACD;;AAEDI,EAAAA,KAAK,GAAG;AACN,UAAMC,QAAQ,GAAG,KAAKP,SAAL,CAAjB;;AACA,QAAIO,QAAJ,EAAc;AACZ,WAAKP,SAAL,IAAkB,IAAlB;AACAO,MAAAA,QAAQ;AACT;AACF;;AAEDC,EAAAA,MAAM,CAACC,KAAD,EAAQC,QAAR,EAAkBH,QAAlB,EAA4B;AAChC,SAAKL,UAAL,EAAiBF,SAAjB,IAA8BO,QAA9B;AACA,SAAKL,UAAL,EAAiBS,IAAjB,CAAsBF,KAAtB;AACD;;AAEDG,EAAAA,MAAM,CAACL,QAAD,EAAW;AACf,SAAKL,UAAL,EAAiBW,EAAjB,CAAoB,KAApB,EAA2BN,QAA3B;AACA,SAAKL,UAAL,EAAiBS,IAAjB,CAAsB,IAAtB;AACD;;AAvB+B;;AA0BlC,MAAMG,UAAN,CAAiB;AACfV,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,SAAKU,OAAL,GAAe,IAAIZ,YAAJ,CAAiBE,OAAjB,CAAf;AACA,SAAKW,OAAL,GAAe,IAAIb,YAAJ,CAAiBE,OAAjB,CAAf;AACA,SAAKU,OAAL,CAAab,UAAb,IAA2B,KAAKc,OAAhC;AACA,SAAKA,OAAL,CAAad,UAAb,IAA2B,KAAKa,OAAhC;AACD;;AANc;;AASjBE,MAAM,CAACC,OAAP,GAAiBJ,UAAjB","sourcesContent":["'use strict';\nconst Duplex = require('stream').Duplex;\n\nconst kCallback = Symbol('Callback');\nconst kOtherSide = Symbol('Other');\n\nclass DuplexSocket extends Duplex {\n  constructor(options) {\n    super(options);\n    this[kCallback] = null;\n    this[kOtherSide] = null;\n  }\n\n  _read() {\n    const callback = this[kCallback];\n    if (callback) {\n      this[kCallback] = null;\n      callback();\n    }\n  }\n\n  _write(chunk, encoding, callback) {\n    this[kOtherSide][kCallback] = callback;\n    this[kOtherSide].push(chunk);\n  }\n\n  _final(callback) {\n    this[kOtherSide].on('end', callback);\n    this[kOtherSide].push(null);\n  }\n}\n\nclass DuplexPair {\n  constructor(options) {\n    this.socket1 = new DuplexSocket(options);\n    this.socket2 = new DuplexSocket(options);\n    this.socket1[kOtherSide] = this.socket2;\n    this.socket2[kOtherSide] = this.socket1;\n  }\n}\n\nmodule.exports = DuplexPair;\n"]},"metadata":{},"sourceType":"script"}
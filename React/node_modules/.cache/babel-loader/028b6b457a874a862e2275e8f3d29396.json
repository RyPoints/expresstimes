{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst msiTokenCredentials_1 = require(\"./msiTokenCredentials\");\n\nconst ms_rest_js_1 = require(\"@azure/ms-rest-js\");\n/**\n * @class MSIVmTokenCredentials\n */\n\n\nclass MSIVmTokenCredentials extends msiTokenCredentials_1.MSITokenCredentials {\n  constructor(options) {\n    if (!options) options = {};\n    super(options);\n\n    if (!options.msiEndpoint) {\n      options.msiEndpoint = \"http://169.254.169.254/metadata/identity/oauth2/token\";\n    } else if (typeof options.msiEndpoint !== \"string\") {\n      throw new Error(\"msiEndpoint must be a string.\");\n    }\n\n    const urlBuilder = ms_rest_js_1.URLBuilder.parse(options.msiEndpoint);\n\n    if (!urlBuilder.getScheme()) {\n      options.msiEndpoint = `http://${options.msiEndpoint}`;\n    }\n\n    if (!options.apiVersion) {\n      options.apiVersion = \"2018-02-01\";\n    } else if (typeof options.apiVersion !== \"string\") {\n      throw new Error(\"apiVersion must be a string.\");\n    }\n\n    if (!options.httpMethod) {\n      options.httpMethod = \"GET\";\n    }\n\n    this.apiVersion = options.apiVersion;\n    this.msiEndpoint = options.msiEndpoint;\n    this.httpMethod = options.httpMethod;\n    this.objectId = options.objectId;\n    this.clientId = options.clientId;\n    this.identityId = options.identityId;\n  }\n  /**\n   * Prepares and sends a POST request to a service endpoint hosted on the Azure VM, which responds with the access token.\n   * @return {Promise<MSITokenResponse>} Promise with the tokenResponse (tokenType and accessToken are the two important properties).\n   */\n\n\n  getToken() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const reqOptions = this.prepareRequestOptions();\n      let opRes;\n      let result;\n      opRes = yield this._httpClient.sendRequest(reqOptions);\n      result = this.parseTokenResponse(opRes.bodyAsText);\n\n      if (!result.tokenType) {\n        throw new Error(`Invalid token response, did not find tokenType. Response body is: ${opRes.bodyAsText}`);\n      } else if (!result.accessToken) {\n        throw new Error(`Invalid token response, did not find accessToken. Response body is: ${opRes.bodyAsText}`);\n      }\n\n      return result;\n    });\n  }\n\n  prepareRequestOptions() {\n    const reqOptions = {\n      url: this.msiEndpoint,\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\n        \"Metadata\": \"true\"\n      },\n      method: this.httpMethod,\n      queryParameters: {\n        \"api-version\": this.apiVersion,\n        \"resource\": this.resource,\n        \"object_id\": this.objectId,\n        \"client_id\": this.clientId,\n        \"mi_res_id\": this.identityId\n      }\n    };\n    const webResource = new ms_rest_js_1.WebResource();\n    return webResource.prepare(reqOptions);\n  }\n\n}\n\nexports.MSIVmTokenCredentials = MSIVmTokenCredentials;","map":{"version":3,"sources":["../../../lib/credentials/msiVmTokenCredentials.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst msiTokenCredentials_1 = require(\"./msiTokenCredentials\");\nconst ms_rest_js_1 = require(\"@azure/ms-rest-js\");\n/**\n * @class MSIVmTokenCredentials\n */\nclass MSIVmTokenCredentials extends msiTokenCredentials_1.MSITokenCredentials {\n    constructor(options) {\n        if (!options)\n            options = {};\n        super(options);\n        if (!options.msiEndpoint) {\n            options.msiEndpoint = \"http://169.254.169.254/metadata/identity/oauth2/token\";\n        }\n        else if (typeof options.msiEndpoint !== \"string\") {\n            throw new Error(\"msiEndpoint must be a string.\");\n        }\n        const urlBuilder = ms_rest_js_1.URLBuilder.parse(options.msiEndpoint);\n        if (!urlBuilder.getScheme()) {\n            options.msiEndpoint = `http://${options.msiEndpoint}`;\n        }\n        if (!options.apiVersion) {\n            options.apiVersion = \"2018-02-01\";\n        }\n        else if (typeof options.apiVersion !== \"string\") {\n            throw new Error(\"apiVersion must be a string.\");\n        }\n        if (!options.httpMethod) {\n            options.httpMethod = \"GET\";\n        }\n        this.apiVersion = options.apiVersion;\n        this.msiEndpoint = options.msiEndpoint;\n        this.httpMethod = options.httpMethod;\n        this.objectId = options.objectId;\n        this.clientId = options.clientId;\n        this.identityId = options.identityId;\n    }\n    /**\n     * Prepares and sends a POST request to a service endpoint hosted on the Azure VM, which responds with the access token.\n     * @return {Promise<MSITokenResponse>} Promise with the tokenResponse (tokenType and accessToken are the two important properties).\n     */\n    getToken() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const reqOptions = this.prepareRequestOptions();\n            let opRes;\n            let result;\n            opRes = yield this._httpClient.sendRequest(reqOptions);\n            result = this.parseTokenResponse(opRes.bodyAsText);\n            if (!result.tokenType) {\n                throw new Error(`Invalid token response, did not find tokenType. Response body is: ${opRes.bodyAsText}`);\n            }\n            else if (!result.accessToken) {\n                throw new Error(`Invalid token response, did not find accessToken. Response body is: ${opRes.bodyAsText}`);\n            }\n            return result;\n        });\n    }\n    prepareRequestOptions() {\n        const reqOptions = {\n            url: this.msiEndpoint,\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\n                \"Metadata\": \"true\"\n            },\n            method: this.httpMethod,\n            queryParameters: {\n                \"api-version\": this.apiVersion,\n                \"resource\": this.resource,\n                \"object_id\": this.objectId,\n                \"client_id\": this.clientId,\n                \"mi_res_id\": this.identityId\n            }\n        };\n        const webResource = new ms_rest_js_1.WebResource();\n        return webResource.prepare(reqOptions);\n    }\n}\nexports.MSIVmTokenCredentials = MSIVmTokenCredentials;\n//# sourceMappingURL=msiVmTokenCredentials.js.map"]},"metadata":{},"sourceType":"script"}
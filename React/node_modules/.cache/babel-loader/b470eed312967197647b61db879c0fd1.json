{"ast":null,"code":"'use strict';\n\nconst Connection = require('../index.js').Connection;\n\nclass PoolConnection extends Connection {\n  constructor(pool, options) {\n    super(options);\n    this._pool = pool; // When a fatal error occurs the connection's protocol ends, which will cause\n    // the connection to end as well, thus we only need to watch for the end event\n    // and we will be notified of disconnects.\n    // REVIEW: Moved to `once`\n\n    this.once('end', () => {\n      this._removeFromPool();\n    });\n    this.once('error', () => {\n      this._removeFromPool();\n    });\n  }\n\n  release() {\n    if (!this._pool || this._pool._closed) {\n      return;\n    }\n\n    this._pool.releaseConnection(this);\n  }\n\n  promise(promiseImpl) {\n    const PromisePoolConnection = require('../promise').PromisePoolConnection;\n\n    return new PromisePoolConnection(this, promiseImpl);\n  }\n\n  end() {\n    const err = new Error('Calling conn.end() to release a pooled connection is ' + 'deprecated. In next version calling conn.end() will be ' + 'restored to default conn.end() behavior. Use ' + 'conn.release() instead.');\n    this.emit('warn', err); // eslint-disable-next-line no-console\n\n    console.warn(err.message);\n    this.release();\n  }\n\n  destroy() {\n    this._removeFromPool();\n\n    super.destroy();\n  }\n\n  _removeFromPool() {\n    if (!this._pool || this._pool._closed) {\n      return;\n    }\n\n    const pool = this._pool;\n    this._pool = null;\n\n    pool._removeConnection(this);\n  }\n\n}\n\nPoolConnection.statementKey = Connection.statementKey;\nmodule.exports = PoolConnection; // TODO: Remove this when we are removing PoolConnection#end\n\nPoolConnection.prototype._realEnd = Connection.prototype.end;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/mysql2/lib/pool_connection.js"],"names":["Connection","require","PoolConnection","constructor","pool","options","_pool","once","_removeFromPool","release","_closed","releaseConnection","promise","promiseImpl","PromisePoolConnection","end","err","Error","emit","console","warn","message","destroy","_removeConnection","statementKey","module","exports","prototype","_realEnd"],"mappings":"AAAA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBD,UAA1C;;AAEA,MAAME,cAAN,SAA6BF,UAA7B,CAAwC;AACtCG,EAAAA,WAAW,CAACC,IAAD,EAAOC,OAAP,EAAgB;AACzB,UAAMA,OAAN;AACA,SAAKC,KAAL,GAAaF,IAAb,CAFyB,CAGzB;AACA;AACA;AACA;;AACA,SAAKG,IAAL,CAAU,KAAV,EAAiB,MAAM;AACrB,WAAKC,eAAL;AACD,KAFD;AAGA,SAAKD,IAAL,CAAU,OAAV,EAAmB,MAAM;AACvB,WAAKC,eAAL;AACD,KAFD;AAGD;;AAEDC,EAAAA,OAAO,GAAG;AACR,QAAI,CAAC,KAAKH,KAAN,IAAe,KAAKA,KAAL,CAAWI,OAA9B,EAAuC;AACrC;AACD;;AACD,SAAKJ,KAAL,CAAWK,iBAAX,CAA6B,IAA7B;AACD;;AAEDC,EAAAA,OAAO,CAACC,WAAD,EAAc;AACnB,UAAMC,qBAAqB,GAAGb,OAAO,CAAC,YAAD,CAAP,CAAsBa,qBAApD;;AACA,WAAO,IAAIA,qBAAJ,CAA0B,IAA1B,EAAgCD,WAAhC,CAAP;AACD;;AAEDE,EAAAA,GAAG,GAAG;AACJ,UAAMC,GAAG,GAAG,IAAIC,KAAJ,CACV,0DACE,yDADF,GAEE,+CAFF,GAGE,yBAJQ,CAAZ;AAMA,SAAKC,IAAL,CAAU,MAAV,EAAkBF,GAAlB,EAPI,CAQJ;;AACAG,IAAAA,OAAO,CAACC,IAAR,CAAaJ,GAAG,CAACK,OAAjB;AACA,SAAKZ,OAAL;AACD;;AAEDa,EAAAA,OAAO,GAAG;AACR,SAAKd,eAAL;;AACA,UAAMc,OAAN;AACD;;AAEDd,EAAAA,eAAe,GAAG;AAChB,QAAI,CAAC,KAAKF,KAAN,IAAe,KAAKA,KAAL,CAAWI,OAA9B,EAAuC;AACrC;AACD;;AACD,UAAMN,IAAI,GAAG,KAAKE,KAAlB;AACA,SAAKA,KAAL,GAAa,IAAb;;AACAF,IAAAA,IAAI,CAACmB,iBAAL,CAAuB,IAAvB;AACD;;AArDqC;;AAwDxCrB,cAAc,CAACsB,YAAf,GAA8BxB,UAAU,CAACwB,YAAzC;AACAC,MAAM,CAACC,OAAP,GAAiBxB,cAAjB,C,CAEA;;AACAA,cAAc,CAACyB,SAAf,CAAyBC,QAAzB,GAAoC5B,UAAU,CAAC2B,SAAX,CAAqBZ,GAAzD","sourcesContent":["'use strict';\n\nconst Connection = require('../index.js').Connection;\n\nclass PoolConnection extends Connection {\n  constructor(pool, options) {\n    super(options);\n    this._pool = pool;\n    // When a fatal error occurs the connection's protocol ends, which will cause\n    // the connection to end as well, thus we only need to watch for the end event\n    // and we will be notified of disconnects.\n    // REVIEW: Moved to `once`\n    this.once('end', () => {\n      this._removeFromPool();\n    });\n    this.once('error', () => {\n      this._removeFromPool();\n    });\n  }\n\n  release() {\n    if (!this._pool || this._pool._closed) {\n      return;\n    }\n    this._pool.releaseConnection(this);\n  }\n\n  promise(promiseImpl) {\n    const PromisePoolConnection = require('../promise').PromisePoolConnection;\n    return new PromisePoolConnection(this, promiseImpl);\n  }\n\n  end() {\n    const err = new Error(\n      'Calling conn.end() to release a pooled connection is ' +\n        'deprecated. In next version calling conn.end() will be ' +\n        'restored to default conn.end() behavior. Use ' +\n        'conn.release() instead.'\n    );\n    this.emit('warn', err);\n    // eslint-disable-next-line no-console\n    console.warn(err.message);\n    this.release();\n  }\n\n  destroy() {\n    this._removeFromPool();\n    super.destroy();\n  }\n\n  _removeFromPool() {\n    if (!this._pool || this._pool._closed) {\n      return;\n    }\n    const pool = this._pool;\n    this._pool = null;\n    pool._removeConnection(this);\n  }\n}\n\nPoolConnection.statementKey = Connection.statementKey;\nmodule.exports = PoolConnection;\n\n// TODO: Remove this when we are removing PoolConnection#end\nPoolConnection.prototype._realEnd = Connection.prototype.end;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nconst ClientConstants = require('../constants/client');\n\nconst Packet = require('../packets/packet');\n\nclass SSLRequest {\n  constructor(flags, charset) {\n    this.clientFlags = flags | ClientConstants.SSL;\n    this.charset = charset;\n  }\n\n  toPacket() {\n    const length = 36;\n    const buffer = Buffer.allocUnsafe(length);\n    const packet = new Packet(0, buffer, 0, length);\n    buffer.fill(0);\n    packet.offset = 4;\n    packet.writeInt32(this.clientFlags);\n    packet.writeInt32(0); // max packet size. todo: move to config\n\n    packet.writeInt8(this.charset);\n    return packet;\n  }\n\n}\n\nmodule.exports = SSLRequest;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/mysql2/lib/packets/ssl_request.js"],"names":["ClientConstants","require","Packet","SSLRequest","constructor","flags","charset","clientFlags","SSL","toPacket","length","buffer","Buffer","allocUnsafe","packet","fill","offset","writeInt32","writeInt8","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,eAAe,GAAGC,OAAO,CAAC,qBAAD,CAA/B;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,mBAAD,CAAtB;;AAEA,MAAME,UAAN,CAAiB;AACfC,EAAAA,WAAW,CAACC,KAAD,EAAQC,OAAR,EAAiB;AAC1B,SAAKC,WAAL,GAAmBF,KAAK,GAAGL,eAAe,CAACQ,GAA3C;AACA,SAAKF,OAAL,GAAeA,OAAf;AACD;;AAEDG,EAAAA,QAAQ,GAAG;AACT,UAAMC,MAAM,GAAG,EAAf;AACA,UAAMC,MAAM,GAAGC,MAAM,CAACC,WAAP,CAAmBH,MAAnB,CAAf;AACA,UAAMI,MAAM,GAAG,IAAIZ,MAAJ,CAAW,CAAX,EAAcS,MAAd,EAAsB,CAAtB,EAAyBD,MAAzB,CAAf;AACAC,IAAAA,MAAM,CAACI,IAAP,CAAY,CAAZ;AACAD,IAAAA,MAAM,CAACE,MAAP,GAAgB,CAAhB;AACAF,IAAAA,MAAM,CAACG,UAAP,CAAkB,KAAKV,WAAvB;AACAO,IAAAA,MAAM,CAACG,UAAP,CAAkB,CAAlB,EAPS,CAOa;;AACtBH,IAAAA,MAAM,CAACI,SAAP,CAAiB,KAAKZ,OAAtB;AACA,WAAOQ,MAAP;AACD;;AAhBc;;AAmBjBK,MAAM,CAACC,OAAP,GAAiBjB,UAAjB","sourcesContent":["'use strict';\n\nconst ClientConstants = require('../constants/client');\nconst Packet = require('../packets/packet');\n\nclass SSLRequest {\n  constructor(flags, charset) {\n    this.clientFlags = flags | ClientConstants.SSL;\n    this.charset = charset;\n  }\n\n  toPacket() {\n    const length = 36;\n    const buffer = Buffer.allocUnsafe(length);\n    const packet = new Packet(0, buffer, 0, length);\n    buffer.fill(0);\n    packet.offset = 4;\n    packet.writeInt32(this.clientFlags);\n    packet.writeInt32(0); // max packet size. todo: move to config\n    packet.writeInt8(this.charset);\n    return packet;\n  }\n}\n\nmodule.exports = SSLRequest;\n"]},"metadata":{},"sourceType":"script"}
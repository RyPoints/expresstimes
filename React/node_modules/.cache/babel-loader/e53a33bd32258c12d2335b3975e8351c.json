{"ast":null,"code":"'use strict';\n\nconst Utils = require('../../utils');\n\nconst debug = Utils.getLogger().debugContext('sql:mysql');\n\nconst AbstractQuery = require('../abstract/query');\n\nconst uuid = require('uuid');\n\nconst sequelizeErrors = require('../../errors.js');\n\nconst _ = require('lodash');\n\nclass Query extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super();\n    this.connection = connection;\n    this.instance = options.instance;\n    this.model = options.model;\n    this.sequelize = sequelize;\n    this.uuid = uuid.v4();\n    this.options = _.extend({\n      logging: console.log,\n      plain: false,\n      raw: false,\n      showWarnings: false\n    }, options || {});\n    this.checkLoggingOption();\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n\n    const replacementFunc = (match, key, values) => {\n      if (values[key] !== undefined) {\n        bindParam.push(values[key]);\n        return '?';\n      }\n\n      return undefined;\n    };\n\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : undefined];\n  }\n\n  run(sql, parameters) {\n    this.sql = sql; //do we need benchmark for this query execution\n\n    const benchmark = this.sequelize.options.benchmark || this.options.benchmark;\n    const showWarnings = this.sequelize.options.showWarnings || this.options.showWarnings;\n    let queryBegin;\n\n    if (benchmark) {\n      queryBegin = Date.now();\n    } else {\n      this.sequelize.log('Executing (' + (this.connection.uuid || 'default') + '): ' + this.sql, this.options);\n    }\n\n    debug(`executing(${this.connection.uuid || 'default'}) : ${this.sql}`);\n    return new Utils.Promise((resolve, reject) => {\n      const handler = (err, results) => {\n        debug(`executed(${this.connection.uuid || 'default'}) : ${this.sql}`);\n\n        if (benchmark) {\n          this.sequelize.log('Executed (' + (this.connection.uuid || 'default') + '): ' + this.sql, Date.now() - queryBegin, this.options);\n        }\n\n        if (err) {\n          err.sql = sql;\n          reject(this.formatError(err));\n        } else {\n          resolve(results);\n        }\n      };\n\n      if (parameters) {\n        debug('parameters(%j)', parameters);\n        this.connection.execute(sql, parameters, handler).setMaxListeners(100);\n      } else {\n        this.connection.query({\n          sql: this.sql\n        }, handler).setMaxListeners(100);\n      }\n    }) // Log warnings if we've got them.\n    .then(results => {\n      if (showWarnings && results && results.warningStatus > 0) {\n        return this.logWarnings(results);\n      }\n\n      return results;\n    }) // Return formatted results...\n    .then(results => this.formatResults(results));\n  }\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @private\n   */\n\n\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        // handle bulkCreate AI primiary key\n        if (data.constructor.name === 'ResultSetHeader' && this.model && this.model.autoIncrementAttribute && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute && this.model.rawAttributes[this.model.primaryKeyAttribute]) {\n          const startId = data[this.getInsertIdField()];\n          result = [];\n\n          for (let i = startId; i < startId + data.affectedRows; i++) {\n            result.push({\n              [this.model.rawAttributes[this.model.primaryKeyAttribute].field]: i\n            });\n          }\n        } else {\n          result = data[this.getInsertIdField()];\n        }\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      result = this.handleSelectQuery(data);\n    } else if (this.isShowTablesQuery()) {\n      result = this.handleShowTablesQuery(data);\n    } else if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        const enumRegex = /^enum/i;\n        result[_result.Field] = {\n          type: enumRegex.test(_result.Type) ? _result.Type.replace(enumRegex, 'ENUM') : _result.Type.toUpperCase(),\n          allowNull: _result.Null === 'YES',\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === 'PRI'\n        };\n      }\n    } else if (this.isShowIndexesQuery()) {\n      result = this.handleShowIndexesQuery(data);\n    } else if (this.isCallQuery()) {\n      result = data[0];\n    } else if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery() || this.isUpsertQuery()) {\n      result = data.affectedRows;\n    } else if (this.isVersionQuery()) {\n      result = data[0].version;\n    } else if (this.isForeignKeysQuery()) {\n      result = data;\n    } else if (this.isInsertQuery() || this.isUpdateQuery()) {\n      result = [result, data.affectedRows];\n    } else if (this.isShowConstraintsQuery()) {\n      result = data;\n    } else if (this.isRawQuery()) {\n      // MySQL returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta\n      result = [data, data];\n    }\n\n    return result;\n  }\n\n  logWarnings(results) {\n    return this.run('SHOW WARNINGS').then(warningResults => {\n      const warningMessage = 'MySQL Warnings (' + (this.connection.uuid || 'default') + '): ';\n      const messages = [];\n\n      for (const _warningRow of warningResults) {\n        for (const _warningResult of _warningRow) {\n          if (_warningResult.hasOwnProperty('Message')) {\n            messages.push(_warningResult.Message);\n          } else {\n            for (const _objectKey of _warningResult.keys()) {\n              messages.push([_objectKey, _warningResult[_objectKey]].join(': '));\n            }\n          }\n        }\n      }\n\n      this.sequelize.log(warningMessage + messages.join('; '), this.options);\n      return results;\n    });\n  }\n\n  formatError(err) {\n    const errCode = err.errno || err.code;\n\n    switch (errCode) {\n      case 1062:\n        {\n          const match = err.message.match(/Duplicate entry '(.*)' for key '?((.|\\s)*?)'?$/);\n          let fields = {};\n          let message = 'Validation error';\n          const values = match ? match[1].split('-') : undefined;\n          const uniqueKey = this.model && this.model.uniqueKeys[match[2]];\n\n          if (uniqueKey) {\n            if (uniqueKey.msg) message = uniqueKey.msg;\n            fields = _.zipObject(uniqueKey.fields, values);\n          } else {\n            fields[match[2]] = match[1];\n          }\n\n          const errors = [];\n\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), 'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field, value, this.instance, 'not_unique'));\n          });\n\n          return new sequelizeErrors.UniqueConstraintError({\n            message,\n            errors,\n            parent: err,\n            fields\n          });\n        }\n\n      case 1451:\n      case 1452:\n        {\n          // e.g. CONSTRAINT `example_constraint_name` FOREIGN KEY (`example_id`) REFERENCES `examples` (`id`)\n          const match = err.message.match(/CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/);\n          const quoteChar = match ? match[1] : '`';\n          const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : undefined;\n          return new sequelizeErrors.ForeignKeyConstraintError({\n            reltype: String(errCode) === '1451' ? 'parent' : 'child',\n            table: match ? match[4] : undefined,\n            fields,\n            value: fields && fields.length && this.instance && this.instance[fields[0]] || undefined,\n            index: match ? match[2] : undefined,\n            parent: err\n          });\n        }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err);\n    }\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    data = _.reduce(data, (acc, item) => {\n      if (!(item.Key_name in acc)) {\n        acc[item.Key_name] = item;\n        item.fields = [];\n      }\n\n      acc[item.Key_name].fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || undefined,\n        order: item.Collation === 'A' ? 'ASC' : undefined\n      };\n      delete item.column_name;\n      return acc;\n    }, {});\n    return _.map(data, item => ({\n      primary: item.Key_name === 'PRIMARY',\n      fields: item.fields,\n      name: item.Key_name,\n      tableName: item.Table,\n      unique: item.Non_unique !== 1,\n      type: item.Index_type\n    }));\n  }\n\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/sequelize/lib/dialects/mysql/query.js"],"names":["Utils","require","debug","getLogger","debugContext","AbstractQuery","uuid","sequelizeErrors","_","Query","constructor","connection","sequelize","options","instance","model","v4","extend","logging","console","log","plain","raw","showWarnings","checkLoggingOption","formatBindParameters","sql","values","dialect","bindParam","replacementFunc","match","key","undefined","push","length","run","parameters","benchmark","queryBegin","Date","now","Promise","resolve","reject","handler","err","results","formatError","execute","setMaxListeners","query","then","warningStatus","logWarnings","formatResults","data","result","isInsertQuery","handleInsertQuery","name","autoIncrementAttribute","primaryKeyAttribute","rawAttributes","startId","getInsertIdField","i","affectedRows","field","isSelectQuery","handleSelectQuery","isShowTablesQuery","handleShowTablesQuery","isDescribeQuery","_result","enumRegex","Field","type","test","Type","replace","toUpperCase","allowNull","Null","defaultValue","Default","primaryKey","Key","isShowIndexesQuery","handleShowIndexesQuery","isCallQuery","isBulkUpdateQuery","isBulkDeleteQuery","isUpsertQuery","isVersionQuery","version","isForeignKeysQuery","isUpdateQuery","isShowConstraintsQuery","isRawQuery","warningResults","warningMessage","messages","_warningRow","_warningResult","hasOwnProperty","Message","_objectKey","keys","join","errCode","errno","code","message","fields","split","uniqueKey","uniqueKeys","msg","zipObject","errors","forOwn","value","ValidationErrorItem","getUniqueConstraintErrorMessage","UniqueConstraintError","parent","quoteChar","RegExp","ForeignKeyConstraintError","reltype","String","table","index","DatabaseError","reduce","acc","item","Key_name","Seq_in_index","attribute","Column_name","Sub_part","order","Collation","column_name","map","primary","tableName","Table","unique","Non_unique","Index_type","module","exports","default"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Utils = require('../../utils');\nconst debug = Utils.getLogger().debugContext('sql:mysql');\nconst AbstractQuery = require('../abstract/query');\nconst uuid = require('uuid');\nconst sequelizeErrors = require('../../errors.js');\nconst _ = require('lodash');\n\nclass Query extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super();\n    this.connection = connection;\n    this.instance = options.instance;\n    this.model = options.model;\n    this.sequelize = sequelize;\n    this.uuid = uuid.v4();\n    this.options = _.extend({\n      logging: console.log,\n      plain: false,\n      raw: false,\n      showWarnings: false\n    }, options || {});\n\n    this.checkLoggingOption();\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n    const replacementFunc = (match, key, values) => {\n      if (values[key] !== undefined) {\n        bindParam.push(values[key]);\n        return '?';\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : undefined];\n  }\n\n  run(sql, parameters) {\n    this.sql = sql;\n\n    //do we need benchmark for this query execution\n    const benchmark = this.sequelize.options.benchmark || this.options.benchmark;\n    const showWarnings = this.sequelize.options.showWarnings || this.options.showWarnings;\n\n    let queryBegin;\n    if (benchmark) {\n      queryBegin = Date.now();\n    } else {\n      this.sequelize.log('Executing (' + (this.connection.uuid || 'default') + '): ' + this.sql, this.options);\n    }\n\n    debug(`executing(${this.connection.uuid || 'default'}) : ${this.sql}`);\n\n    return new Utils.Promise((resolve, reject) => {\n      const handler = (err, results) => {\n        debug(`executed(${this.connection.uuid || 'default'}) : ${this.sql}`);\n\n        if (benchmark) {\n          this.sequelize.log('Executed (' + (this.connection.uuid || 'default') + '): ' + this.sql, Date.now() - queryBegin, this.options);\n        }\n\n        if (err) {\n          err.sql = sql;\n\n          reject(this.formatError(err));\n        } else {\n          resolve(results);\n        }\n      };\n      if (parameters) {\n        debug('parameters(%j)', parameters);\n        this.connection.execute(sql, parameters, handler).setMaxListeners(100);\n      } else {\n        this.connection.query({ sql: this.sql }, handler).setMaxListeners(100);\n      }\n    })\n    // Log warnings if we've got them.\n      .then(results => {\n        if (showWarnings && results && results.warningStatus > 0) {\n          return this.logWarnings(results);\n        }\n        return results;\n      })\n    // Return formatted results...\n      .then(results => this.formatResults(results));\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @private\n   */\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        // handle bulkCreate AI primiary key\n        if (\n          data.constructor.name === 'ResultSetHeader'\n          && this.model\n          && this.model.autoIncrementAttribute\n          && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute\n          && this.model.rawAttributes[this.model.primaryKeyAttribute]\n        ) {\n          const startId = data[this.getInsertIdField()];\n          result = [];\n          for (let i = startId; i < startId + data.affectedRows; i++) {\n            result.push({ [this.model.rawAttributes[this.model.primaryKeyAttribute].field]: i });\n          }\n        } else {\n          result = data[this.getInsertIdField()];\n        }\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      result = this.handleSelectQuery(data);\n    } else if (this.isShowTablesQuery()) {\n      result = this.handleShowTablesQuery(data);\n    } else if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        const enumRegex = /^enum/i;\n        result[_result.Field] = {\n          type: enumRegex.test(_result.Type) ? _result.Type.replace(enumRegex, 'ENUM') : _result.Type.toUpperCase(),\n          allowNull: _result.Null === 'YES',\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === 'PRI'\n        };\n      }\n    } else if (this.isShowIndexesQuery()) {\n      result = this.handleShowIndexesQuery(data);\n\n    } else if (this.isCallQuery()) {\n      result = data[0];\n    } else if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery() || this.isUpsertQuery()) {\n      result = data.affectedRows;\n    } else if (this.isVersionQuery()) {\n      result = data[0].version;\n    } else if (this.isForeignKeysQuery()) {\n      result = data;\n    } else if (this.isInsertQuery() || this.isUpdateQuery()) {\n      result = [result, data.affectedRows];\n    } else if (this.isShowConstraintsQuery()) {\n      result = data;\n    } else if (this.isRawQuery()) {\n      // MySQL returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta\n      result = [data, data];\n    }\n\n    return result;\n  }\n\n  logWarnings(results) {\n    return this.run('SHOW WARNINGS').then(warningResults => {\n      const warningMessage = 'MySQL Warnings (' + (this.connection.uuid||'default') + '): ';\n      const messages = [];\n      for (const _warningRow of warningResults) {\n        for (const _warningResult of _warningRow) {\n          if (_warningResult.hasOwnProperty('Message')) {\n            messages.push(_warningResult.Message);\n          } else {\n            for (const _objectKey of _warningResult.keys()) {\n              messages.push([_objectKey, _warningResult[_objectKey]].join(': '));\n            }\n          }\n        }\n      }\n\n      this.sequelize.log(warningMessage + messages.join('; '), this.options);\n\n      return results;\n    });\n  }\n\n  formatError(err) {\n    const errCode = err.errno || err.code;\n\n    switch (errCode) {\n      case 1062: {\n        const match = err.message.match(/Duplicate entry '(.*)' for key '?((.|\\s)*?)'?$/);\n\n        let fields = {};\n        let message = 'Validation error';\n        const values = match ? match[1].split('-') : undefined;\n        const uniqueKey = this.model && this.model.uniqueKeys[match[2]];\n\n        if (uniqueKey) {\n          if (uniqueKey.msg) message = uniqueKey.msg;\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[match[2]] = match[1];\n        }\n\n        const errors = [];\n        _.forOwn(fields, (value, field) => {\n          errors.push(new sequelizeErrors.ValidationErrorItem(\n            this.getUniqueConstraintErrorMessage(field),\n            'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field,\n            value,\n            this.instance,\n            'not_unique'\n          ));\n        });\n\n        return new sequelizeErrors.UniqueConstraintError({message, errors, parent: err, fields});\n      }\n\n      case 1451:\n      case 1452: {\n        // e.g. CONSTRAINT `example_constraint_name` FOREIGN KEY (`example_id`) REFERENCES `examples` (`id`)\n        const match  = err.message.match(/CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/);\n        const quoteChar = match ? match[1] : '`';\n        const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : undefined;\n\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          reltype: String(errCode) === '1451' ? 'parent' : 'child',\n          table: match ? match[4] : undefined,\n          fields,\n          value: fields && fields.length && this.instance && this.instance[fields[0]] || undefined,\n          index: match ? match[2] : undefined,\n          parent: err\n        });\n      }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err);\n    }\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    data = _.reduce(data, (acc, item) => {\n      if (!(item.Key_name in acc)) {\n        acc[item.Key_name] = item;\n        item.fields = [];\n      }\n\n      acc[item.Key_name].fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || undefined,\n        order: item.Collation === 'A' ? 'ASC' : undefined\n      };\n      delete item.column_name;\n\n      return acc;\n    }, {});\n\n    return _.map(data, item => ({\n      primary: item.Key_name === 'PRIMARY',\n      fields: item.fields,\n      name: item.Key_name,\n      tableName: item.Table,\n      unique: item.Non_unique !== 1,\n      type: item.Index_type\n    }));\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"]},"metadata":{},"sourceType":"script"}
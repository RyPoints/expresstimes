{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport * as tslib_1 from \"tslib\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { Constants } from \"../util/constants\";\nimport { URLBuilder } from \"../url\";\n\nfunction loadEnvironmentProxyValue() {\n  if (!process) {\n    return undefined;\n  }\n\n  if (process.env[Constants.HTTPS_PROXY]) {\n    return process.env[Constants.HTTPS_PROXY];\n  } else if (process.env[Constants.HTTPS_PROXY.toLowerCase()]) {\n    return process.env[Constants.HTTPS_PROXY.toLowerCase()];\n  } else if (process.env[Constants.HTTP_PROXY]) {\n    return process.env[Constants.HTTP_PROXY];\n  } else if (process.env[Constants.HTTP_PROXY.toLowerCase()]) {\n    return process.env[Constants.HTTP_PROXY.toLowerCase()];\n  }\n\n  return undefined;\n}\n\nexport function getDefaultProxySettings(proxyUrl) {\n  if (!proxyUrl) {\n    proxyUrl = loadEnvironmentProxyValue();\n\n    if (!proxyUrl) {\n      return undefined;\n    }\n  }\n\n  var parsedUrl = URLBuilder.parse(proxyUrl);\n  return {\n    host: parsedUrl.getScheme() + \"://\" + parsedUrl.getHost(),\n    port: Number.parseInt(parsedUrl.getPort() || \"80\")\n  };\n}\nexport function proxyPolicy(proxySettings) {\n  return {\n    create: function (nextPolicy, options) {\n      return new ProxyPolicy(nextPolicy, options, proxySettings);\n    }\n  };\n}\n\nvar ProxyPolicy =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ProxyPolicy, _super);\n\n  function ProxyPolicy(nextPolicy, options, proxySettings) {\n    var _this = _super.call(this, nextPolicy, options) || this;\n\n    _this.proxySettings = proxySettings;\n    return _this;\n  }\n\n  ProxyPolicy.prototype.sendRequest = function (request) {\n    if (!request.proxySettings) {\n      request.proxySettings = this.proxySettings;\n    }\n\n    return this._nextPolicy.sendRequest(request);\n  };\n\n  return ProxyPolicy;\n}(BaseRequestPolicy);\n\nexport { ProxyPolicy };","map":{"version":3,"sources":["../../../lib/policies/proxyPolicy.ts"],"names":[],"mappings":"AAAA;AACA;;AAEA,SAAS,iBAAT,QAA6F,iBAA7F;AAIA,SAAS,SAAT,QAA0B,mBAA1B;AACA,SAAS,UAAT,QAA2B,QAA3B;;AAEA,SAAS,yBAAT,GAAkC;AAChC,MAAI,CAAC,OAAL,EAAc;AACZ,WAAO,SAAP;AACD;;AAED,MAAI,OAAO,CAAC,GAAR,CAAY,SAAS,CAAC,WAAtB,CAAJ,EAAwC;AACtC,WAAO,OAAO,CAAC,GAAR,CAAY,SAAS,CAAC,WAAtB,CAAP;AACD,GAFD,MAEO,IAAI,OAAO,CAAC,GAAR,CAAY,SAAS,CAAC,WAAV,CAAsB,WAAtB,EAAZ,CAAJ,EAAsD;AAC3D,WAAO,OAAO,CAAC,GAAR,CAAY,SAAS,CAAC,WAAV,CAAsB,WAAtB,EAAZ,CAAP;AACD,GAFM,MAEA,IAAI,OAAO,CAAC,GAAR,CAAY,SAAS,CAAC,UAAtB,CAAJ,EAAuC;AAC5C,WAAO,OAAO,CAAC,GAAR,CAAY,SAAS,CAAC,UAAtB,CAAP;AACD,GAFM,MAEA,IAAI,OAAO,CAAC,GAAR,CAAY,SAAS,CAAC,UAAV,CAAqB,WAArB,EAAZ,CAAJ,EAAqD;AAC1D,WAAO,OAAO,CAAC,GAAR,CAAY,SAAS,CAAC,UAAV,CAAqB,WAArB,EAAZ,CAAP;AACD;;AAED,SAAO,SAAP;AACD;;AAED,OAAM,SAAU,uBAAV,CAAkC,QAAlC,EAAmD;AACvD,MAAI,CAAC,QAAL,EAAe;AACb,IAAA,QAAQ,GAAG,yBAAyB,EAApC;;AACA,QAAI,CAAC,QAAL,EAAe;AACb,aAAO,SAAP;AACD;AACF;;AAED,MAAM,SAAS,GAAG,UAAU,CAAC,KAAX,CAAiB,QAAjB,CAAlB;AACA,SAAO;AACL,IAAA,IAAI,EAAE,SAAS,CAAC,SAAV,KAAwB,KAAxB,GAAgC,SAAS,CAAC,OAAV,EADjC;AAEL,IAAA,IAAI,EAAE,MAAM,CAAC,QAAP,CAAgB,SAAS,CAAC,OAAV,MAAuB,IAAvC;AAFD,GAAP;AAID;AAGD,OAAM,SAAU,WAAV,CAAsB,aAAtB,EAAmD;AACvD,SAAO;AACL,IAAA,MAAM,EAAE,UAAC,UAAD,EAA4B,OAA5B,EAAyD;AAC/D,aAAO,IAAI,WAAJ,CAAgB,UAAhB,EAA4B,OAA5B,EAAqC,aAArC,CAAP;AACD;AAHI,GAAP;AAKD;;AAED,IAAA,WAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAiC,EAAA,OAAA,CAAA,SAAA,CAAA,WAAA,EAAA,MAAA;;AAG/B,WAAA,WAAA,CAAY,UAAZ,EAAuC,OAAvC,EAAsE,aAAtE,EAAkG;AAAlG,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,UAAN,EAAkB,OAAlB,KAA0B,IAD5B;;AAEE,IAAA,KAAI,CAAC,aAAL,GAAqB,aAArB;;AACD;;AAEM,EAAA,WAAA,CAAA,SAAA,CAAA,WAAA,GAAP,UAAmB,OAAnB,EAAuC;AACrC,QAAI,CAAC,OAAO,CAAC,aAAb,EAA4B;AAC1B,MAAA,OAAO,CAAC,aAAR,GAAwB,KAAK,aAA7B;AACD;;AACD,WAAO,KAAK,WAAL,CAAiB,WAAjB,CAA6B,OAA7B,CAAP;AACD,GALM;;AAMT,SAAA,WAAA;AAAC,CAdD,CAAiC,iBAAjC,CAAA","sourceRoot":"","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport * as tslib_1 from \"tslib\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { Constants } from \"../util/constants\";\nimport { URLBuilder } from \"../url\";\nfunction loadEnvironmentProxyValue() {\n    if (!process) {\n        return undefined;\n    }\n    if (process.env[Constants.HTTPS_PROXY]) {\n        return process.env[Constants.HTTPS_PROXY];\n    }\n    else if (process.env[Constants.HTTPS_PROXY.toLowerCase()]) {\n        return process.env[Constants.HTTPS_PROXY.toLowerCase()];\n    }\n    else if (process.env[Constants.HTTP_PROXY]) {\n        return process.env[Constants.HTTP_PROXY];\n    }\n    else if (process.env[Constants.HTTP_PROXY.toLowerCase()]) {\n        return process.env[Constants.HTTP_PROXY.toLowerCase()];\n    }\n    return undefined;\n}\nexport function getDefaultProxySettings(proxyUrl) {\n    if (!proxyUrl) {\n        proxyUrl = loadEnvironmentProxyValue();\n        if (!proxyUrl) {\n            return undefined;\n        }\n    }\n    var parsedUrl = URLBuilder.parse(proxyUrl);\n    return {\n        host: parsedUrl.getScheme() + \"://\" + parsedUrl.getHost(),\n        port: Number.parseInt(parsedUrl.getPort() || \"80\")\n    };\n}\nexport function proxyPolicy(proxySettings) {\n    return {\n        create: function (nextPolicy, options) {\n            return new ProxyPolicy(nextPolicy, options, proxySettings);\n        }\n    };\n}\nvar ProxyPolicy = /** @class */ (function (_super) {\n    tslib_1.__extends(ProxyPolicy, _super);\n    function ProxyPolicy(nextPolicy, options, proxySettings) {\n        var _this = _super.call(this, nextPolicy, options) || this;\n        _this.proxySettings = proxySettings;\n        return _this;\n    }\n    ProxyPolicy.prototype.sendRequest = function (request) {\n        if (!request.proxySettings) {\n            request.proxySettings = this.proxySettings;\n        }\n        return this._nextPolicy.sendRequest(request);\n    };\n    return ProxyPolicy;\n}(BaseRequestPolicy));\nexport { ProxyPolicy };\n//# sourceMappingURL=proxyPolicy.js.map"]},"metadata":{},"sourceType":"module"}
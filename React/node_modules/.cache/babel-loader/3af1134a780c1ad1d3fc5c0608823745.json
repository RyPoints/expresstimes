{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _token = require(\"./token\");\n\nvar _valueParser = _interopRequireDefault(require(\"../value-parser\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // s2.2.7.13 (introduced in TDS 7.3.B)\n\n\nfunction nullHandler(_parser, _columnMetadata, _options, callback) {\n  callback(null);\n}\n\nfunction nbcRowParser(parser, columnsMetaData, options, callback) {\n  const length = Math.ceil(columnsMetaData.length / 8);\n  parser.readBuffer(length, bytes => {\n    const bitmap = [];\n\n    for (let i = 0, len = bytes.length; i < len; i++) {\n      const byte = bytes[i];\n\n      for (let j = 0; j <= 7; j++) {\n        bitmap.push(byte & 1 << j ? true : false);\n      }\n    }\n\n    const columns = [];\n    const len = columnsMetaData.length;\n    let i = 0;\n\n    function next(done) {\n      if (i === len) {\n        return done();\n      }\n\n      const columnMetaData = columnsMetaData[i];\n      (bitmap[i] ? nullHandler : _valueParser.default)(parser, columnMetaData, options, value => {\n        columns.push({\n          value: value,\n          metadata: columnMetaData\n        });\n        i++;\n        next(done);\n      });\n    }\n\n    next(() => {\n      if (options.useColumnNames) {\n        const columnsMap = {};\n        columns.forEach(column => {\n          const colName = column.metadata.colName;\n\n          if (columnsMap[colName] == null) {\n            columnsMap[colName] = column;\n          }\n        });\n        callback(new _token.NBCRowToken(columnsMap));\n      } else {\n        callback(new _token.NBCRowToken(columns));\n      }\n    });\n  });\n}\n\nvar _default = nbcRowParser;\nexports.default = _default;\nmodule.exports = nbcRowParser;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/tedious/lib/token/nbcrow-token-parser.js"],"names":["Object","defineProperty","exports","value","default","_token","require","_valueParser","_interopRequireDefault","obj","__esModule","nullHandler","_parser","_columnMetadata","_options","callback","nbcRowParser","parser","columnsMetaData","options","length","Math","ceil","readBuffer","bytes","bitmap","i","len","byte","j","push","columns","next","done","columnMetaData","metadata","useColumnNames","columnsMap","forEach","column","colName","NBCRowToken","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _token = require(\"./token\");\n\nvar _valueParser = _interopRequireDefault(require(\"../value-parser\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// s2.2.7.13 (introduced in TDS 7.3.B)\nfunction nullHandler(_parser, _columnMetadata, _options, callback) {\n  callback(null);\n}\n\nfunction nbcRowParser(parser, columnsMetaData, options, callback) {\n  const length = Math.ceil(columnsMetaData.length / 8);\n  parser.readBuffer(length, bytes => {\n    const bitmap = [];\n\n    for (let i = 0, len = bytes.length; i < len; i++) {\n      const byte = bytes[i];\n\n      for (let j = 0; j <= 7; j++) {\n        bitmap.push(byte & 1 << j ? true : false);\n      }\n    }\n\n    const columns = [];\n    const len = columnsMetaData.length;\n    let i = 0;\n\n    function next(done) {\n      if (i === len) {\n        return done();\n      }\n\n      const columnMetaData = columnsMetaData[i];\n      (bitmap[i] ? nullHandler : _valueParser.default)(parser, columnMetaData, options, value => {\n        columns.push({\n          value: value,\n          metadata: columnMetaData\n        });\n        i++;\n        next(done);\n      });\n    }\n\n    next(() => {\n      if (options.useColumnNames) {\n        const columnsMap = {};\n        columns.forEach(column => {\n          const colName = column.metadata.colName;\n\n          if (columnsMap[colName] == null) {\n            columnsMap[colName] = column;\n          }\n        });\n        callback(new _token.NBCRowToken(columnsMap));\n      } else {\n        callback(new _token.NBCRowToken(columns));\n      }\n    });\n  });\n}\n\nvar _default = nbcRowParser;\nexports.default = _default;\nmodule.exports = nbcRowParser;"]},"metadata":{},"sourceType":"script"}
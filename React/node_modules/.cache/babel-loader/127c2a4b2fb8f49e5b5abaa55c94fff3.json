{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ms_rest_js_1 = require(\"@azure/ms-rest-js\");\n\nconst authConstants_1 = require(\"../util/authConstants\");\n/**\n * @class MSITokenCredentials - Provides information about managed service identity token credentials.\n * This object can only be used to acquire token on a virtual machine provisioned in Azure with managed service identity.\n */\n\n\nclass MSITokenCredentials {\n  /**\n   * Creates an instance of MSITokenCredentials.\n   * @param {object} [options] - Optional parameters\n   * @param {string} [options.resource] - The resource uri or token audience for which the token is needed.\n   * For e.g. it can be:\n   * - resource management endpoint \"https://management.azure.com/\"(default)\n   * - management endpoint \"https://management.core.windows.net/\"\n   */\n  constructor(options) {\n    if (!options) options = {};\n\n    if (!options.resource) {\n      options.resource = authConstants_1.AuthConstants.RESOURCE_MANAGER_ENDPOINT;\n    } else if (typeof options.resource.valueOf() !== \"string\") {\n      throw new Error(\"resource must be a uri.\");\n    }\n\n    this.resource = options.resource;\n    this._httpClient = options.httpClient || new ms_rest_js_1.DefaultHttpClient();\n  }\n  /**\n   * Parses a tokenResponse json string into a object, and converts properties on the first level to camelCase.\n   * This method tries to standardize the tokenResponse\n   * @param  {string} body  A json string\n   * @return {object} [tokenResponse] The tokenResponse (tokenType and accessToken are the two important properties).\n   */\n\n\n  parseTokenResponse(body) {\n    // Docs show different examples of possible MSI responses for different services. https://docs.microsoft.com/en-us/azure/active-directory/managed-service-identity/overview\n    // expires_on - is a Date like string in this doc\n    //   - https://docs.microsoft.com/en-us/azure/app-service/app-service-managed-service-identity#rest-protocol-examples\n    // In other doc it is stringified number.\n    //   - https://docs.microsoft.com/en-us/azure/active-directory/managed-service-identity/tutorial-linux-vm-access-arm#get-an-access-token-using-the-vms-identity-and-use-it-to-call-resource-manager\n    const parsedBody = JSON.parse(body);\n    parsedBody.accessToken = parsedBody[\"access_token\"];\n    delete parsedBody[\"access_token\"];\n    parsedBody.tokenType = parsedBody[\"token_type\"];\n    delete parsedBody[\"token_type\"];\n\n    if (parsedBody[\"refresh_token\"]) {\n      parsedBody.refreshToken = parsedBody[\"refresh_token\"];\n      delete parsedBody[\"refresh_token\"];\n    }\n\n    if (parsedBody[\"expires_in\"]) {\n      parsedBody.expiresIn = parsedBody[\"expires_in\"];\n\n      if (typeof parsedBody[\"expires_in\"] === \"string\") {\n        // normal number as a string '1504130527'\n        parsedBody.expiresIn = parseInt(parsedBody[\"expires_in\"], 10);\n      }\n\n      delete parsedBody[\"expires_in\"];\n    }\n\n    if (parsedBody[\"not_before\"]) {\n      parsedBody.notBefore = parsedBody[\"not_before\"];\n\n      if (typeof parsedBody[\"not_before\"] === \"string\") {\n        // normal number as a string '1504130527'\n        parsedBody.notBefore = parseInt(parsedBody[\"not_before\"], 10);\n      }\n\n      delete parsedBody[\"not_before\"];\n    }\n\n    if (parsedBody[\"expires_on\"]) {\n      parsedBody.expiresOn = parsedBody[\"expires_on\"];\n\n      if (typeof parsedBody[\"expires_on\"] === \"string\") {\n        // possibly a Date string '09/14/2017 00:00:00 PM +00:00'\n        if (parsedBody[\"expires_on\"].includes(\":\") || parsedBody[\"expires_on\"].includes(\"/\")) {\n          parsedBody.expiresOn = new Date(parsedBody[\"expires_on\"], 10);\n        } else {\n          // normal number as a string '1504130527'\n          parsedBody.expiresOn = new Date(parseInt(parsedBody[\"expires_on\"], 10));\n        }\n      }\n\n      delete parsedBody[\"expires_on\"];\n    }\n\n    return parsedBody;\n  }\n  /**\n   * Signs a request with the Authentication header.\n   *\n   * @param {webResource} The WebResource to be signed.\n   * @return {Promise<WebResource>} Promise with signed WebResource.\n   */\n\n\n  signRequest(webResource) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const tokenResponse = yield this.getToken();\n      webResource.headers.set(ms_rest_js_1.Constants.HeaderConstants.AUTHORIZATION, `${tokenResponse.tokenType} ${tokenResponse.accessToken}`);\n      return Promise.resolve(webResource);\n    });\n  }\n\n}\n\nexports.MSITokenCredentials = MSITokenCredentials;","map":{"version":3,"sources":["../../../lib/credentials/msiTokenCredentials.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ms_rest_js_1 = require(\"@azure/ms-rest-js\");\nconst authConstants_1 = require(\"../util/authConstants\");\n/**\n * @class MSITokenCredentials - Provides information about managed service identity token credentials.\n * This object can only be used to acquire token on a virtual machine provisioned in Azure with managed service identity.\n */\nclass MSITokenCredentials {\n    /**\n     * Creates an instance of MSITokenCredentials.\n     * @param {object} [options] - Optional parameters\n     * @param {string} [options.resource] - The resource uri or token audience for which the token is needed.\n     * For e.g. it can be:\n     * - resource management endpoint \"https://management.azure.com/\"(default)\n     * - management endpoint \"https://management.core.windows.net/\"\n     */\n    constructor(options) {\n        if (!options)\n            options = {};\n        if (!options.resource) {\n            options.resource = authConstants_1.AuthConstants.RESOURCE_MANAGER_ENDPOINT;\n        }\n        else if (typeof options.resource.valueOf() !== \"string\") {\n            throw new Error(\"resource must be a uri.\");\n        }\n        this.resource = options.resource;\n        this._httpClient = options.httpClient || new ms_rest_js_1.DefaultHttpClient();\n    }\n    /**\n     * Parses a tokenResponse json string into a object, and converts properties on the first level to camelCase.\n     * This method tries to standardize the tokenResponse\n     * @param  {string} body  A json string\n     * @return {object} [tokenResponse] The tokenResponse (tokenType and accessToken are the two important properties).\n     */\n    parseTokenResponse(body) {\n        // Docs show different examples of possible MSI responses for different services. https://docs.microsoft.com/en-us/azure/active-directory/managed-service-identity/overview\n        // expires_on - is a Date like string in this doc\n        //   - https://docs.microsoft.com/en-us/azure/app-service/app-service-managed-service-identity#rest-protocol-examples\n        // In other doc it is stringified number.\n        //   - https://docs.microsoft.com/en-us/azure/active-directory/managed-service-identity/tutorial-linux-vm-access-arm#get-an-access-token-using-the-vms-identity-and-use-it-to-call-resource-manager\n        const parsedBody = JSON.parse(body);\n        parsedBody.accessToken = parsedBody[\"access_token\"];\n        delete parsedBody[\"access_token\"];\n        parsedBody.tokenType = parsedBody[\"token_type\"];\n        delete parsedBody[\"token_type\"];\n        if (parsedBody[\"refresh_token\"]) {\n            parsedBody.refreshToken = parsedBody[\"refresh_token\"];\n            delete parsedBody[\"refresh_token\"];\n        }\n        if (parsedBody[\"expires_in\"]) {\n            parsedBody.expiresIn = parsedBody[\"expires_in\"];\n            if (typeof parsedBody[\"expires_in\"] === \"string\") {\n                // normal number as a string '1504130527'\n                parsedBody.expiresIn = parseInt(parsedBody[\"expires_in\"], 10);\n            }\n            delete parsedBody[\"expires_in\"];\n        }\n        if (parsedBody[\"not_before\"]) {\n            parsedBody.notBefore = parsedBody[\"not_before\"];\n            if (typeof parsedBody[\"not_before\"] === \"string\") {\n                // normal number as a string '1504130527'\n                parsedBody.notBefore = parseInt(parsedBody[\"not_before\"], 10);\n            }\n            delete parsedBody[\"not_before\"];\n        }\n        if (parsedBody[\"expires_on\"]) {\n            parsedBody.expiresOn = parsedBody[\"expires_on\"];\n            if (typeof parsedBody[\"expires_on\"] === \"string\") {\n                // possibly a Date string '09/14/2017 00:00:00 PM +00:00'\n                if (parsedBody[\"expires_on\"].includes(\":\") || parsedBody[\"expires_on\"].includes(\"/\")) {\n                    parsedBody.expiresOn = new Date(parsedBody[\"expires_on\"], 10);\n                }\n                else {\n                    // normal number as a string '1504130527'\n                    parsedBody.expiresOn = new Date(parseInt(parsedBody[\"expires_on\"], 10));\n                }\n            }\n            delete parsedBody[\"expires_on\"];\n        }\n        return parsedBody;\n    }\n    /**\n     * Signs a request with the Authentication header.\n     *\n     * @param {webResource} The WebResource to be signed.\n     * @return {Promise<WebResource>} Promise with signed WebResource.\n     */\n    signRequest(webResource) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const tokenResponse = yield this.getToken();\n            webResource.headers.set(ms_rest_js_1.Constants.HeaderConstants.AUTHORIZATION, `${tokenResponse.tokenType} ${tokenResponse.accessToken}`);\n            return Promise.resolve(webResource);\n        });\n    }\n}\nexports.MSITokenCredentials = MSITokenCredentials;\n//# sourceMappingURL=msiTokenCredentials.js.map"]},"metadata":{},"sourceType":"script"}
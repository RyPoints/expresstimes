{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst NULL = (1 << 16) - 1;\nconst MAX = (1 << 16) - 1;\nconst VarBinary = {\n  id: 0xA5,\n  type: 'BIGVARBIN',\n  name: 'VarBinary',\n  maximumLength: 8000,\n  declaration: function declaration(parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    let length;\n\n    if (parameter.length) {\n      length = parameter.length;\n    } else if (value != null) {\n      length = value.length || 1;\n    } else if (value === null && !parameter.output) {\n      length = 1;\n    } else {\n      length = this.maximumLength;\n    }\n\n    if (length <= this.maximumLength) {\n      return 'varbinary(' + length + ')';\n    } else {\n      return 'varbinary(max)';\n    }\n  },\n  resolveLength: function resolveLength(parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    if (parameter.length != null) {\n      return parameter.length;\n    } else if (value != null) {\n      return value.length;\n    } else {\n      return this.maximumLength;\n    }\n  },\n  writeTypeInfo: function writeTypeInfo(buffer, parameter) {\n    buffer.writeUInt8(this.id);\n\n    if (parameter.length <= this.maximumLength) {\n      buffer.writeUInt16LE(this.maximumLength);\n    } else {\n      buffer.writeUInt16LE(MAX);\n    }\n  },\n  writeParameterData: function writeParameterData(buffer, parameter, options, cb) {\n    if (parameter.value != null) {\n      if (parameter.length <= this.maximumLength) {\n        buffer.writeUsVarbyte(parameter.value);\n      } else {\n        buffer.writePLPBody(parameter.value);\n      }\n    } else if (parameter.length <= this.maximumLength) {\n      buffer.writeUInt16LE(NULL);\n    } else {\n      buffer.writeUInt32LE(0xFFFFFFFF);\n      buffer.writeUInt32LE(0xFFFFFFFF);\n    }\n\n    cb();\n  },\n  validate: function validate(value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (!Buffer.isBuffer(value)) {\n      return new TypeError('Invalid buffer.');\n    }\n\n    return value;\n  }\n};\nvar _default = VarBinary;\nexports.default = _default;\nmodule.exports = VarBinary;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/tedious/lib/data-types/varbinary.js"],"names":["Object","defineProperty","exports","value","default","NULL","MAX","VarBinary","id","type","name","maximumLength","declaration","parameter","length","output","resolveLength","writeTypeInfo","buffer","writeUInt8","writeUInt16LE","writeParameterData","options","cb","writeUsVarbyte","writePLPBody","writeUInt32LE","validate","Buffer","isBuffer","TypeError","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst NULL = (1 << 16) - 1;\nconst MAX = (1 << 16) - 1;\nconst VarBinary = {\n  id: 0xA5,\n  type: 'BIGVARBIN',\n  name: 'VarBinary',\n  maximumLength: 8000,\n  declaration: function declaration(parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    let length;\n\n    if (parameter.length) {\n      length = parameter.length;\n    } else if (value != null) {\n      length = value.length || 1;\n    } else if (value === null && !parameter.output) {\n      length = 1;\n    } else {\n      length = this.maximumLength;\n    }\n\n    if (length <= this.maximumLength) {\n      return 'varbinary(' + length + ')';\n    } else {\n      return 'varbinary(max)';\n    }\n  },\n  resolveLength: function resolveLength(parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    if (parameter.length != null) {\n      return parameter.length;\n    } else if (value != null) {\n      return value.length;\n    } else {\n      return this.maximumLength;\n    }\n  },\n  writeTypeInfo: function writeTypeInfo(buffer, parameter) {\n    buffer.writeUInt8(this.id);\n\n    if (parameter.length <= this.maximumLength) {\n      buffer.writeUInt16LE(this.maximumLength);\n    } else {\n      buffer.writeUInt16LE(MAX);\n    }\n  },\n  writeParameterData: function writeParameterData(buffer, parameter, options, cb) {\n    if (parameter.value != null) {\n      if (parameter.length <= this.maximumLength) {\n        buffer.writeUsVarbyte(parameter.value);\n      } else {\n        buffer.writePLPBody(parameter.value);\n      }\n    } else if (parameter.length <= this.maximumLength) {\n      buffer.writeUInt16LE(NULL);\n    } else {\n      buffer.writeUInt32LE(0xFFFFFFFF);\n      buffer.writeUInt32LE(0xFFFFFFFF);\n    }\n\n    cb();\n  },\n  validate: function validate(value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (!Buffer.isBuffer(value)) {\n      return new TypeError('Invalid buffer.');\n    }\n\n    return value;\n  }\n};\nvar _default = VarBinary;\nexports.default = _default;\nmodule.exports = VarBinary;"]},"metadata":{},"sourceType":"script"}
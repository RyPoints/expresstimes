{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Generator = require(\"../Generator\");\n\nconst WebAssemblyParser = require(\"./WebAssemblyParser\");\n\nconst WebAssemblyGenerator = require(\"./WebAssemblyGenerator\");\n\nconst WebAssemblyJavascriptGenerator = require(\"./WebAssemblyJavascriptGenerator\");\n\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\n\nconst WebAssemblyExportImportedDependency = require(\"../dependencies/WebAssemblyExportImportedDependency\");\n\nconst WebAssemblyInInitialChunkError = require(\"./WebAssemblyInInitialChunkError\");\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n\nclass WebAssemblyModulesPlugin {\n  constructor(options) {\n    this.options = options;\n  }\n  /**\n   * @param {Compiler} compiler compiler\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"WebAssemblyModulesPlugin\", (compilation, {\n      normalModuleFactory\n    }) => {\n      compilation.dependencyFactories.set(WebAssemblyImportDependency, normalModuleFactory);\n      compilation.dependencyFactories.set(WebAssemblyExportImportedDependency, normalModuleFactory);\n      normalModuleFactory.hooks.createParser.for(\"webassembly/experimental\").tap(\"WebAssemblyModulesPlugin\", () => {\n        return new WebAssemblyParser();\n      });\n      normalModuleFactory.hooks.createGenerator.for(\"webassembly/experimental\").tap(\"WebAssemblyModulesPlugin\", () => {\n        return Generator.byType({\n          javascript: new WebAssemblyJavascriptGenerator(),\n          webassembly: new WebAssemblyGenerator(this.options)\n        });\n      });\n      compilation.chunkTemplate.hooks.renderManifest.tap(\"WebAssemblyModulesPlugin\", (result, options) => {\n        const chunk = options.chunk;\n        const outputOptions = options.outputOptions;\n        const moduleTemplates = options.moduleTemplates;\n        const dependencyTemplates = options.dependencyTemplates;\n\n        for (const module of chunk.modulesIterable) {\n          if (module.type && module.type.startsWith(\"webassembly\")) {\n            const filenameTemplate = outputOptions.webassemblyModuleFilename;\n            result.push({\n              render: () => this.renderWebAssembly(module, moduleTemplates.webassembly, dependencyTemplates),\n              filenameTemplate,\n              pathOptions: {\n                module\n              },\n              identifier: `webassemblyModule${module.id}`,\n              hash: module.hash\n            });\n          }\n        }\n\n        return result;\n      });\n      compilation.hooks.afterChunks.tap(\"WebAssemblyModulesPlugin\", () => {\n        const initialWasmModules = new Set();\n\n        for (const chunk of compilation.chunks) {\n          if (chunk.canBeInitial()) {\n            for (const module of chunk.modulesIterable) {\n              if (module.type.startsWith(\"webassembly\")) {\n                initialWasmModules.add(module);\n              }\n            }\n          }\n        }\n\n        for (const module of initialWasmModules) {\n          compilation.errors.push(new WebAssemblyInInitialChunkError(module, compilation.requestShortener));\n        }\n      });\n    });\n  }\n\n  renderWebAssembly(module, moduleTemplate, dependencyTemplates) {\n    return moduleTemplate.render(module, dependencyTemplates, {});\n  }\n\n}\n\nmodule.exports = WebAssemblyModulesPlugin;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/webpack/lib/wasm/WebAssemblyModulesPlugin.js"],"names":["Generator","require","WebAssemblyParser","WebAssemblyGenerator","WebAssemblyJavascriptGenerator","WebAssemblyImportDependency","WebAssemblyExportImportedDependency","WebAssemblyInInitialChunkError","WebAssemblyModulesPlugin","constructor","options","apply","compiler","hooks","compilation","tap","normalModuleFactory","dependencyFactories","set","createParser","for","createGenerator","byType","javascript","webassembly","chunkTemplate","renderManifest","result","chunk","outputOptions","moduleTemplates","dependencyTemplates","module","modulesIterable","type","startsWith","filenameTemplate","webassemblyModuleFilename","push","render","renderWebAssembly","pathOptions","identifier","id","hash","afterChunks","initialWasmModules","Set","chunks","canBeInitial","add","errors","requestShortener","moduleTemplate","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Generator = require(\"../Generator\");\nconst WebAssemblyParser = require(\"./WebAssemblyParser\");\nconst WebAssemblyGenerator = require(\"./WebAssemblyGenerator\");\nconst WebAssemblyJavascriptGenerator = require(\"./WebAssemblyJavascriptGenerator\");\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\nconst WebAssemblyExportImportedDependency = require(\"../dependencies/WebAssemblyExportImportedDependency\");\nconst WebAssemblyInInitialChunkError = require(\"./WebAssemblyInInitialChunkError\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass WebAssemblyModulesPlugin {\n\tconstructor(options) {\n\t\tthis.options = options;\n\t}\n\n\t/**\n\t * @param {Compiler} compiler compiler\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"WebAssemblyModulesPlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tWebAssemblyImportDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tWebAssemblyExportImportedDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\n\t\t\t\tnormalModuleFactory.hooks.createParser\n\t\t\t\t\t.for(\"webassembly/experimental\")\n\t\t\t\t\t.tap(\"WebAssemblyModulesPlugin\", () => {\n\t\t\t\t\t\treturn new WebAssemblyParser();\n\t\t\t\t\t});\n\n\t\t\t\tnormalModuleFactory.hooks.createGenerator\n\t\t\t\t\t.for(\"webassembly/experimental\")\n\t\t\t\t\t.tap(\"WebAssemblyModulesPlugin\", () => {\n\t\t\t\t\t\treturn Generator.byType({\n\t\t\t\t\t\t\tjavascript: new WebAssemblyJavascriptGenerator(),\n\t\t\t\t\t\t\twebassembly: new WebAssemblyGenerator(this.options)\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\tcompilation.chunkTemplate.hooks.renderManifest.tap(\n\t\t\t\t\t\"WebAssemblyModulesPlugin\",\n\t\t\t\t\t(result, options) => {\n\t\t\t\t\t\tconst chunk = options.chunk;\n\t\t\t\t\t\tconst outputOptions = options.outputOptions;\n\t\t\t\t\t\tconst moduleTemplates = options.moduleTemplates;\n\t\t\t\t\t\tconst dependencyTemplates = options.dependencyTemplates;\n\n\t\t\t\t\t\tfor (const module of chunk.modulesIterable) {\n\t\t\t\t\t\t\tif (module.type && module.type.startsWith(\"webassembly\")) {\n\t\t\t\t\t\t\t\tconst filenameTemplate =\n\t\t\t\t\t\t\t\t\toutputOptions.webassemblyModuleFilename;\n\n\t\t\t\t\t\t\t\tresult.push({\n\t\t\t\t\t\t\t\t\trender: () =>\n\t\t\t\t\t\t\t\t\t\tthis.renderWebAssembly(\n\t\t\t\t\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t\t\t\t\tmoduleTemplates.webassembly,\n\t\t\t\t\t\t\t\t\t\t\tdependencyTemplates\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\tfilenameTemplate,\n\t\t\t\t\t\t\t\t\tpathOptions: {\n\t\t\t\t\t\t\t\t\t\tmodule\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tidentifier: `webassemblyModule${module.id}`,\n\t\t\t\t\t\t\t\t\thash: module.hash\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tcompilation.hooks.afterChunks.tap(\"WebAssemblyModulesPlugin\", () => {\n\t\t\t\t\tconst initialWasmModules = new Set();\n\t\t\t\t\tfor (const chunk of compilation.chunks) {\n\t\t\t\t\t\tif (chunk.canBeInitial()) {\n\t\t\t\t\t\t\tfor (const module of chunk.modulesIterable) {\n\t\t\t\t\t\t\t\tif (module.type.startsWith(\"webassembly\")) {\n\t\t\t\t\t\t\t\t\tinitialWasmModules.add(module);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (const module of initialWasmModules) {\n\t\t\t\t\t\tcompilation.errors.push(\n\t\t\t\t\t\t\tnew WebAssemblyInInitialChunkError(\n\t\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t\tcompilation.requestShortener\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n\n\trenderWebAssembly(module, moduleTemplate, dependencyTemplates) {\n\t\treturn moduleTemplate.render(module, dependencyTemplates, {});\n\t}\n}\n\nmodule.exports = WebAssemblyModulesPlugin;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst Utils = require('../../utils');\n\nconst debug = Utils.getLogger().debugContext('sql:sqlite');\n\nconst Promise = require('../../promise');\n\nconst AbstractQuery = require('../abstract/query');\n\nconst QueryTypes = require('../../query-types');\n\nconst sequelizeErrors = require('../../errors.js');\n\nconst parserStore = require('../parserStore')('sqlite');\n\nclass Query extends AbstractQuery {\n  constructor(database, sequelize, options) {\n    super();\n    this.database = database;\n    this.sequelize = sequelize;\n    this.instance = options.instance;\n    this.model = options.model;\n    this.options = _.extend({\n      logging: console.log,\n      plain: false,\n      raw: false\n    }, options || {});\n    this.checkLoggingOption();\n  }\n\n  getInsertIdField() {\n    return 'lastID';\n  }\n  /**\n   * rewrite query with parameters\n   * @private\n   */\n\n\n  static formatBindParameters(sql, values, dialect) {\n    let bindParam;\n\n    if (Array.isArray(values)) {\n      bindParam = {};\n      values.forEach((v, i) => {\n        bindParam['$' + (i + 1)] = v;\n      });\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, {\n        skipValueReplace: true\n      })[0];\n    } else {\n      bindParam = {};\n\n      if (typeof values === 'object') {\n        for (const k of Object.keys(values)) {\n          bindParam['$' + k] = values[k];\n        }\n      }\n\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, {\n        skipValueReplace: true\n      })[0];\n    }\n\n    return [sql, bindParam];\n  }\n\n  _collectModels(include, prefix) {\n    const ret = {};\n\n    if (include) {\n      for (const _include of include) {\n        let key;\n\n        if (!prefix) {\n          key = _include.as;\n        } else {\n          key = prefix + '.' + _include.as;\n        }\n\n        ret[key] = _include.model;\n\n        if (_include.include) {\n          _.merge(ret, this._collectModels(_include.include, key));\n        }\n      }\n    }\n\n    return ret;\n  }\n\n  run(sql, parameters) {\n    this.sql = sql;\n    const method = this.getDatabaseMethod();\n\n    if (method === 'exec') {\n      // exec does not support bind parameter\n      sql = AbstractQuery.formatBindParameters(sql, this.options.bind, this.options.dialect, {\n        skipUnescape: true\n      })[0];\n      this.sql = sql;\n    } //do we need benchmark for this query execution\n\n\n    const benchmark = this.sequelize.options.benchmark || this.options.benchmark;\n    let queryBegin;\n\n    if (benchmark) {\n      queryBegin = Date.now();\n    } else {\n      this.sequelize.log('Executing (' + (this.database.uuid || 'default') + '): ' + this.sql, this.options);\n    }\n\n    debug(`executing(${this.database.uuid || 'default'}) : ${this.sql}`);\n    return new Promise(resolve => {\n      const columnTypes = {};\n      this.database.serialize(() => {\n        const executeSql = () => {\n          if (this.sql.indexOf('-- ') === 0) {\n            return resolve();\n          } else {\n            resolve(new Promise((resolve, reject) => {\n              const query = this; // cannot use arrow function here because the function is bound to the statement\n\n              function afterExecute(err, results) {\n                debug(`executed(${query.database.uuid || 'default'}) : ${query.sql}`);\n\n                if (benchmark) {\n                  query.sequelize.log('Executed (' + (query.database.uuid || 'default') + '): ' + query.sql, Date.now() - queryBegin, query.options);\n                }\n\n                if (err) {\n                  err.sql = query.sql;\n                  reject(query.formatError(err));\n                } else {\n                  const metaData = this;\n                  let result = query.instance; // add the inserted row id to the instance\n\n                  if (query.isInsertQuery(results, metaData)) {\n                    query.handleInsertQuery(results, metaData);\n\n                    if (!query.instance) {\n                      // handle bulkCreate AI primary key\n                      if (metaData.constructor.name === 'Statement' && query.model && query.model.autoIncrementAttribute && query.model.autoIncrementAttribute === query.model.primaryKeyAttribute && query.model.rawAttributes[query.model.primaryKeyAttribute]) {\n                        const startId = metaData[query.getInsertIdField()] - metaData.changes + 1;\n                        result = [];\n\n                        for (let i = startId; i < startId + metaData.changes; i++) {\n                          result.push({\n                            [query.model.rawAttributes[query.model.primaryKeyAttribute].field]: i\n                          });\n                        }\n                      } else {\n                        result = metaData[query.getInsertIdField()];\n                      }\n                    }\n                  }\n\n                  if (query.sql.indexOf('sqlite_master') !== -1) {\n                    if (query.sql.indexOf('SELECT sql FROM sqlite_master WHERE tbl_name') !== -1) {\n                      result = results;\n\n                      if (result && result[0] && result[0].sql.indexOf('CONSTRAINT') !== -1) {\n                        result = query.parseConstraintsFromSql(results[0].sql);\n                      }\n                    } else {\n                      result = results.map(resultSet => resultSet.name);\n                    }\n                  } else if (query.isSelectQuery()) {\n                    if (!query.options.raw) {\n                      // This is a map of prefix strings to models, e.g. user.projects -> Project model\n                      const prefixes = query._collectModels(query.options.include);\n\n                      results = results.map(result => {\n                        return _.mapValues(result, (value, name) => {\n                          let model;\n\n                          if (name.indexOf('.') !== -1) {\n                            const lastind = name.lastIndexOf('.');\n                            model = prefixes[name.substr(0, lastind)];\n                            name = name.substr(lastind + 1);\n                          } else {\n                            model = query.options.model;\n                          }\n\n                          const tableName = model.getTableName().toString().replace(/`/g, '');\n                          const tableTypes = columnTypes[tableName] || {};\n\n                          if (tableTypes && !(name in tableTypes)) {\n                            // The column is aliased\n                            _.forOwn(model.rawAttributes, (attribute, key) => {\n                              if (name === key && attribute.field) {\n                                name = attribute.field;\n                                return false;\n                              }\n                            });\n                          }\n\n                          return tableTypes.hasOwnProperty(name) ? query.applyParsers(tableTypes[name], value) : value;\n                        });\n                      });\n                    }\n\n                    result = query.handleSelectQuery(results);\n                  } else if (query.isShowOrDescribeQuery()) {\n                    result = results;\n                  } else if (query.sql.indexOf('PRAGMA INDEX_LIST') !== -1) {\n                    result = query.handleShowIndexesQuery(results);\n                  } else if (query.sql.indexOf('PRAGMA INDEX_INFO') !== -1) {\n                    result = results;\n                  } else if (query.sql.indexOf('PRAGMA TABLE_INFO') !== -1) {\n                    // this is the sqlite way of getting the metadata of a table\n                    result = {};\n                    let defaultValue;\n\n                    for (const _result of results) {\n                      if (_result.dflt_value === null) {\n                        // Column schema omits any \"DEFAULT ...\"\n                        defaultValue = undefined;\n                      } else if (_result.dflt_value === 'NULL') {\n                        // Column schema is a \"DEFAULT NULL\"\n                        defaultValue = null;\n                      } else {\n                        defaultValue = _result.dflt_value;\n                      }\n\n                      result[_result.name] = {\n                        type: _result.type,\n                        allowNull: _result.notnull === 0,\n                        defaultValue,\n                        primaryKey: _result.pk !== 0\n                      };\n\n                      if (result[_result.name].type === 'TINYINT(1)') {\n                        result[_result.name].defaultValue = {\n                          '0': false,\n                          '1': true\n                        }[result[_result.name].defaultValue];\n                      }\n\n                      if (typeof result[_result.name].defaultValue === 'string') {\n                        result[_result.name].defaultValue = result[_result.name].defaultValue.replace(/'/g, '');\n                      }\n                    }\n                  } else if (query.sql.indexOf('PRAGMA foreign_keys;') !== -1) {\n                    result = results[0];\n                  } else if (query.sql.indexOf('PRAGMA foreign_keys') !== -1) {\n                    result = results;\n                  } else if (query.sql.indexOf('PRAGMA foreign_key_list') !== -1) {\n                    result = results;\n                  } else if ([QueryTypes.BULKUPDATE, QueryTypes.BULKDELETE].indexOf(query.options.type) !== -1) {\n                    result = metaData.changes;\n                  } else if (query.options.type === QueryTypes.UPSERT) {\n                    result = undefined;\n                  } else if (query.options.type === QueryTypes.VERSION) {\n                    result = results[0].version;\n                  } else if (query.options.type === QueryTypes.RAW) {\n                    result = [results, metaData];\n                  } else if (query.isUpdateQuery() || query.isInsertQuery()) {\n                    result = [result, metaData.changes];\n                  }\n\n                  resolve(result);\n                }\n              }\n\n              if (method === 'exec') {\n                // exec does not support bind parameter\n                this.database[method](this.sql, afterExecute);\n              } else {\n                if (!parameters) parameters = [];\n                this.database[method](this.sql, parameters, afterExecute);\n              }\n            }));\n            return null;\n          }\n        };\n\n        if (this.getDatabaseMethod() === 'all') {\n          let tableNames = [];\n\n          if (this.options && this.options.tableNames) {\n            tableNames = this.options.tableNames;\n          } else if (/FROM `(.*?)`/i.exec(this.sql)) {\n            tableNames.push(/FROM `(.*?)`/i.exec(this.sql)[1]);\n          } // If we already have the metadata for the table, there's no need to ask for it again\n\n\n          tableNames = _.filter(tableNames, tableName => !(tableName in columnTypes) && tableName !== 'sqlite_master');\n\n          if (!tableNames.length) {\n            return executeSql();\n          } else {\n            return Promise.map(tableNames, tableName => new Promise(resolve => {\n              tableName = tableName.replace(/`/g, '');\n              columnTypes[tableName] = {};\n              this.database.all('PRAGMA table_info(`' + tableName + '`)', (err, results) => {\n                if (!err) {\n                  for (const result of results) {\n                    columnTypes[tableName][result.name] = result.type;\n                  }\n                }\n\n                resolve();\n              });\n            })).then(executeSql);\n          }\n        } else {\n          return executeSql();\n        }\n      });\n    });\n  }\n\n  parseConstraintsFromSql(sql) {\n    let constraints = sql.split('CONSTRAINT ');\n    let referenceTableName, referenceTableKeys, updateAction, deleteAction;\n    constraints.splice(0, 1);\n    constraints = constraints.map(constraintSql => {\n      //Parse foreign key snippets\n      if (constraintSql.indexOf('REFERENCES') !== -1) {\n        //Parse out the constraint condition form sql string\n        updateAction = constraintSql.match(/ON UPDATE (CASCADE|SET NULL|RESTRICT|NO ACTION|SET DEFAULT){1}/);\n        deleteAction = constraintSql.match(/ON DELETE (CASCADE|SET NULL|RESTRICT|NO ACTION|SET DEFAULT){1}/);\n\n        if (updateAction) {\n          updateAction = updateAction[1];\n        }\n\n        if (deleteAction) {\n          deleteAction = deleteAction[1];\n        }\n\n        const referencesRegex = /REFERENCES.+\\((?:[^)(]+|\\((?:[^)(]+|\\([^)(]*\\))*\\))*\\)/;\n        const referenceConditions = constraintSql.match(referencesRegex)[0].split(' ');\n        referenceTableName = Utils.removeTicks(referenceConditions[1]);\n        let columnNames = referenceConditions[2];\n        columnNames = columnNames.replace(/\\(|\\)/g, '').split(', ');\n        referenceTableKeys = columnNames.map(column => Utils.removeTicks(column));\n      }\n\n      const constraintCondition = constraintSql.match(/\\((?:[^)(]+|\\((?:[^)(]+|\\([^)(]*\\))*\\))*\\)/)[0];\n      constraintSql = constraintSql.replace(/\\(.+\\)/, '');\n      const constraint = constraintSql.split(' ');\n\n      if (constraint[1] === 'PRIMARY' || constraint[1] === 'FOREIGN') {\n        constraint[1] += ' KEY';\n      }\n\n      return {\n        constraintName: Utils.removeTicks(constraint[0]),\n        constraintType: constraint[1],\n        updateAction,\n        deleteAction,\n        sql: sql.replace(/\\\"/g, '\\`'),\n        //Sqlite returns double quotes for table name\n        constraintCondition,\n        referenceTableName,\n        referenceTableKeys\n      };\n    });\n    return constraints;\n  }\n\n  applyParsers(type, value) {\n    if (type.indexOf('(') !== -1) {\n      // Remove the length part\n      type = type.substr(0, type.indexOf('('));\n    }\n\n    type = type.replace('UNSIGNED', '').replace('ZEROFILL', '');\n    type = type.trim().toUpperCase();\n    const parse = parserStore.get(type);\n\n    if (value !== null && parse) {\n      return parse(value, {\n        timezone: this.sequelize.options.timezone\n      });\n    }\n\n    return value;\n  }\n\n  formatError(err) {\n    switch (err.code) {\n      case 'SQLITE_CONSTRAINT':\n        {\n          let match = err.message.match(/FOREIGN KEY constraint failed/);\n\n          if (match !== null) {\n            return new sequelizeErrors.ForeignKeyConstraintError({\n              parent: err\n            });\n          }\n\n          let fields = []; // Sqlite pre 2.2 behavior - Error: SQLITE_CONSTRAINT: columns x, y are not unique\n\n          match = err.message.match(/columns (.*?) are/);\n\n          if (match !== null && match.length >= 2) {\n            fields = match[1].split(', ');\n          } else {\n            // Sqlite post 2.2 behavior - Error: SQLITE_CONSTRAINT: UNIQUE constraint failed: table.x, table.y\n            match = err.message.match(/UNIQUE constraint failed: (.*)/);\n\n            if (match !== null && match.length >= 2) {\n              fields = match[1].split(', ').map(columnWithTable => columnWithTable.split('.')[1]);\n            }\n          }\n\n          const errors = [];\n          let message = 'Validation error';\n\n          for (const field of fields) {\n            errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), 'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field, this.instance && this.instance[field], this.instance, 'not_unique'));\n          }\n\n          if (this.model) {\n            _.forOwn(this.model.uniqueKeys, constraint => {\n              if (_.isEqual(constraint.fields, fields) && !!constraint.msg) {\n                message = constraint.msg;\n                return false;\n              }\n            });\n          }\n\n          return new sequelizeErrors.UniqueConstraintError({\n            message,\n            errors,\n            parent: err,\n            fields\n          });\n        }\n\n      case 'SQLITE_BUSY':\n        return new sequelizeErrors.TimeoutError(err);\n\n      default:\n        return new sequelizeErrors.DatabaseError(err);\n    }\n  }\n\n  handleShowIndexesQuery(data) {\n    // Sqlite returns indexes so the one that was defined last is returned first. Lets reverse that!\n    return this.sequelize.Promise.map(data.reverse(), item => {\n      item.fields = [];\n      item.primary = false;\n      item.unique = !!item.unique;\n      item.constraintName = item.name;\n      return this.run('PRAGMA INDEX_INFO(`' + item.name + '`)').then(columns => {\n        for (const column of columns) {\n          item.fields[column.seqno] = {\n            attribute: column.name,\n            length: undefined,\n            order: undefined\n          };\n        }\n\n        return item;\n      });\n    });\n  }\n\n  getDatabaseMethod() {\n    if (this.isUpsertQuery()) {\n      return 'exec'; // Needed to run multiple queries in one\n    } else if (this.isInsertQuery() || this.isUpdateQuery() || this.isBulkUpdateQuery() || this.sql.toLowerCase().indexOf('CREATE TEMPORARY TABLE'.toLowerCase()) !== -1 || this.options.type === QueryTypes.BULKDELETE) {\n      return 'run';\n    } else {\n      return 'all';\n    }\n  }\n\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/sequelize/lib/dialects/sqlite/query.js"],"names":["_","require","Utils","debug","getLogger","debugContext","Promise","AbstractQuery","QueryTypes","sequelizeErrors","parserStore","Query","constructor","database","sequelize","options","instance","model","extend","logging","console","log","plain","raw","checkLoggingOption","getInsertIdField","formatBindParameters","sql","values","dialect","bindParam","Array","isArray","forEach","v","i","skipValueReplace","k","Object","keys","_collectModels","include","prefix","ret","_include","key","as","merge","run","parameters","method","getDatabaseMethod","bind","skipUnescape","benchmark","queryBegin","Date","now","uuid","resolve","columnTypes","serialize","executeSql","indexOf","reject","query","afterExecute","err","results","formatError","metaData","result","isInsertQuery","handleInsertQuery","name","autoIncrementAttribute","primaryKeyAttribute","rawAttributes","startId","changes","push","field","parseConstraintsFromSql","map","resultSet","isSelectQuery","prefixes","mapValues","value","lastind","lastIndexOf","substr","tableName","getTableName","toString","replace","tableTypes","forOwn","attribute","hasOwnProperty","applyParsers","handleSelectQuery","isShowOrDescribeQuery","handleShowIndexesQuery","defaultValue","_result","dflt_value","undefined","type","allowNull","notnull","primaryKey","pk","BULKUPDATE","BULKDELETE","UPSERT","VERSION","version","RAW","isUpdateQuery","tableNames","exec","filter","length","all","then","constraints","split","referenceTableName","referenceTableKeys","updateAction","deleteAction","splice","constraintSql","match","referencesRegex","referenceConditions","removeTicks","columnNames","column","constraintCondition","constraint","constraintName","constraintType","trim","toUpperCase","parse","get","timezone","code","message","ForeignKeyConstraintError","parent","fields","columnWithTable","errors","ValidationErrorItem","getUniqueConstraintErrorMessage","uniqueKeys","isEqual","msg","UniqueConstraintError","TimeoutError","DatabaseError","data","reverse","item","primary","unique","columns","seqno","order","isUpsertQuery","isBulkUpdateQuery","toLowerCase","module","exports","default"],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst Utils = require('../../utils');\nconst debug = Utils.getLogger().debugContext('sql:sqlite');\nconst Promise = require('../../promise');\nconst AbstractQuery = require('../abstract/query');\nconst QueryTypes = require('../../query-types');\nconst sequelizeErrors = require('../../errors.js');\nconst parserStore = require('../parserStore')('sqlite');\n\nclass Query extends AbstractQuery {\n\n  constructor(database, sequelize, options) {\n    super();\n    this.database = database;\n    this.sequelize = sequelize;\n    this.instance = options.instance;\n    this.model = options.model;\n    this.options = _.extend({\n      logging: console.log,\n      plain: false,\n      raw: false\n    }, options || {});\n\n    this.checkLoggingOption();\n  }\n\n  getInsertIdField() {\n    return 'lastID';\n  }\n\n  /**\n   * rewrite query with parameters\n   * @private\n   */\n  static formatBindParameters(sql, values, dialect) {\n    let bindParam;\n    if (Array.isArray(values)) {\n      bindParam = {};\n      values.forEach((v, i) => {\n        bindParam['$'+(i+1)] = v;\n      });\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, { skipValueReplace: true })[0];\n    } else {\n      bindParam = {};\n      if (typeof values === 'object') {\n        for (const k of Object.keys(values)) {\n          bindParam['$'+k] = values[k];\n        }\n      }\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, { skipValueReplace: true })[0];\n    }\n    return [sql, bindParam];\n  }\n\n  _collectModels(include, prefix) {\n    const ret = {};\n\n    if (include) {\n      for (const _include of include) {\n        let key;\n        if (!prefix) {\n          key = _include.as;\n        } else {\n          key = prefix + '.' + _include.as;\n        }\n        ret[key] = _include.model;\n\n        if (_include.include) {\n          _.merge(ret, this._collectModels(_include.include, key));\n        }\n      }\n    }\n\n    return ret;\n  }\n\n  run(sql, parameters) {\n    this.sql = sql;\n    const method = this.getDatabaseMethod();\n    if (method === 'exec') {\n      // exec does not support bind parameter\n      sql = AbstractQuery.formatBindParameters(sql, this.options.bind, this.options.dialect, { skipUnescape: true })[0];\n      this.sql = sql;\n    }\n\n    //do we need benchmark for this query execution\n    const benchmark = this.sequelize.options.benchmark || this.options.benchmark;\n\n    let queryBegin;\n    if (benchmark) {\n      queryBegin = Date.now();\n    } else {\n      this.sequelize.log('Executing (' + (this.database.uuid || 'default') + '): ' + this.sql, this.options);\n    }\n\n    debug(`executing(${this.database.uuid || 'default'}) : ${this.sql}`);\n\n    return new Promise(resolve => {\n      const columnTypes = {};\n      this.database.serialize(() => {\n        const executeSql = () => {\n          if (this.sql.indexOf('-- ') === 0) {\n            return resolve();\n          } else {\n            resolve(new Promise((resolve, reject) => {\n              const query = this;\n              // cannot use arrow function here because the function is bound to the statement\n              function afterExecute(err, results) {\n                debug(`executed(${query.database.uuid || 'default'}) : ${query.sql}`);\n\n                if (benchmark) {\n                  query.sequelize.log('Executed (' + (query.database.uuid || 'default') + '): ' + query.sql, Date.now() - queryBegin, query.options);\n                }\n\n                if (err) {\n                  err.sql = query.sql;\n                  reject(query.formatError(err));\n                } else {\n                  const metaData = this;\n                  let result = query.instance;\n\n                  // add the inserted row id to the instance\n                  if (query.isInsertQuery(results, metaData)) {\n                    query.handleInsertQuery(results, metaData);\n                    if (!query.instance) {\n                      // handle bulkCreate AI primary key\n                      if (\n                        metaData.constructor.name === 'Statement'\n                        && query.model\n                        && query.model.autoIncrementAttribute\n                        && query.model.autoIncrementAttribute === query.model.primaryKeyAttribute\n                        && query.model.rawAttributes[query.model.primaryKeyAttribute]\n                      ) {\n                        const startId = metaData[query.getInsertIdField()] - metaData.changes + 1;\n                        result = [];\n                        for (let i = startId; i < startId + metaData.changes; i++) {\n                          result.push({ [query.model.rawAttributes[query.model.primaryKeyAttribute].field]: i });\n                        }\n                      } else {\n                        result = metaData[query.getInsertIdField()];\n                      }\n                    }\n                  }\n\n                  if (query.sql.indexOf('sqlite_master') !== -1) {\n                    if (query.sql.indexOf('SELECT sql FROM sqlite_master WHERE tbl_name') !== -1) {\n                      result = results;\n                      if (result && result[0] && result[0].sql.indexOf('CONSTRAINT') !== -1) {\n                        result = query.parseConstraintsFromSql(results[0].sql);\n                      }\n                    } else {\n                      result = results.map(resultSet => resultSet.name);\n                    }\n                  } else if (query.isSelectQuery()) {\n                    if (!query.options.raw) {\n                      // This is a map of prefix strings to models, e.g. user.projects -> Project model\n                      const prefixes = query._collectModels(query.options.include);\n\n                      results = results.map(result => {\n                        return _.mapValues(result, (value, name) => {\n                          let model;\n                          if (name.indexOf('.') !== -1) {\n                            const lastind = name.lastIndexOf('.');\n\n                            model = prefixes[name.substr(0, lastind)];\n\n                            name = name.substr(lastind + 1);\n                          } else {\n                            model = query.options.model;\n                          }\n\n                          const tableName = model.getTableName().toString().replace(/`/g, '');\n                          const tableTypes = columnTypes[tableName] || {};\n\n                          if (tableTypes && !(name in tableTypes)) {\n                            // The column is aliased\n                            _.forOwn(model.rawAttributes, (attribute, key) => {\n                              if (name === key && attribute.field) {\n                                name = attribute.field;\n                                return false;\n                              }\n                            });\n                          }\n\n                          return tableTypes.hasOwnProperty(name)\n                            ? query.applyParsers(tableTypes[name], value)\n                            : value;\n                        });\n                      });\n                    }\n\n                    result = query.handleSelectQuery(results);\n                  } else if (query.isShowOrDescribeQuery()) {\n                    result = results;\n                  } else if (query.sql.indexOf('PRAGMA INDEX_LIST') !== -1) {\n                    result = query.handleShowIndexesQuery(results);\n                  } else if (query.sql.indexOf('PRAGMA INDEX_INFO') !== -1) {\n                    result = results;\n                  } else if (query.sql.indexOf('PRAGMA TABLE_INFO') !== -1) {\n                    // this is the sqlite way of getting the metadata of a table\n                    result = {};\n\n                    let defaultValue;\n                    for (const _result of results) {\n                      if (_result.dflt_value === null) {\n                        // Column schema omits any \"DEFAULT ...\"\n                        defaultValue = undefined;\n                      } else if (_result.dflt_value === 'NULL') {\n                        // Column schema is a \"DEFAULT NULL\"\n                        defaultValue = null;\n                      } else {\n                        defaultValue = _result.dflt_value;\n                      }\n\n                      result[_result.name] = {\n                        type: _result.type,\n                        allowNull: _result.notnull === 0,\n                        defaultValue,\n                        primaryKey: _result.pk !== 0\n                      };\n\n                      if (result[_result.name].type === 'TINYINT(1)') {\n                        result[_result.name].defaultValue = { '0': false, '1': true }[result[_result.name].defaultValue];\n                      }\n\n                      if (typeof result[_result.name].defaultValue === 'string') {\n                        result[_result.name].defaultValue = result[_result.name].defaultValue.replace(/'/g, '');\n                      }\n                    }\n                  } else if (query.sql.indexOf('PRAGMA foreign_keys;') !== -1) {\n                    result = results[0];\n                  } else if (query.sql.indexOf('PRAGMA foreign_keys') !== -1) {\n                    result = results;\n                  } else if (query.sql.indexOf('PRAGMA foreign_key_list') !== -1) {\n                    result = results;\n                  } else if ([QueryTypes.BULKUPDATE, QueryTypes.BULKDELETE].indexOf(query.options.type) !== -1) {\n                    result = metaData.changes;\n                  } else if (query.options.type === QueryTypes.UPSERT) {\n                    result = undefined;\n                  } else if (query.options.type === QueryTypes.VERSION) {\n                    result = results[0].version;\n                  } else if (query.options.type === QueryTypes.RAW) {\n                    result = [results, metaData];\n                  } else if (query.isUpdateQuery() || query.isInsertQuery()) {\n                    result = [result, metaData.changes];\n                  }\n\n                  resolve(result);\n                }\n              }\n\n              if (method === 'exec') {\n                // exec does not support bind parameter\n                this.database[method](this.sql, afterExecute);\n              } else {\n                if (!parameters) parameters = [];\n                this.database[method](this.sql, parameters, afterExecute);\n              }\n            }));\n            return null;\n          }\n        };\n\n        if (this.getDatabaseMethod() === 'all') {\n          let tableNames = [];\n          if (this.options && this.options.tableNames) {\n            tableNames = this.options.tableNames;\n          } else if (/FROM `(.*?)`/i.exec(this.sql)) {\n            tableNames.push(/FROM `(.*?)`/i.exec(this.sql)[1]);\n          }\n\n          // If we already have the metadata for the table, there's no need to ask for it again\n          tableNames = _.filter(tableNames, tableName => !(tableName in columnTypes) && tableName !== 'sqlite_master');\n\n          if (!tableNames.length) {\n            return executeSql();\n          } else {\n            return Promise.map(tableNames, tableName =>\n              new Promise(resolve => {\n                tableName = tableName.replace(/`/g, '');\n                columnTypes[tableName] = {};\n\n                this.database.all('PRAGMA table_info(`' + tableName + '`)', (err, results) => {\n                  if (!err) {\n                    for (const result of results) {\n                      columnTypes[tableName][result.name] = result.type;\n                    }\n                  }\n                  resolve();\n                });\n              })\n            ).then(executeSql);\n          }\n        } else {\n          return executeSql();\n        }\n      });\n    });\n  }\n\n  parseConstraintsFromSql(sql) {\n    let constraints = sql.split('CONSTRAINT ');\n    let referenceTableName, referenceTableKeys, updateAction, deleteAction;\n    constraints.splice(0, 1);\n    constraints = constraints.map(constraintSql => {\n      //Parse foreign key snippets\n      if (constraintSql.indexOf('REFERENCES') !== -1) {\n        //Parse out the constraint condition form sql string\n        updateAction = constraintSql.match(/ON UPDATE (CASCADE|SET NULL|RESTRICT|NO ACTION|SET DEFAULT){1}/);\n        deleteAction = constraintSql.match(/ON DELETE (CASCADE|SET NULL|RESTRICT|NO ACTION|SET DEFAULT){1}/);\n\n        if (updateAction) {\n          updateAction = updateAction[1];\n        }\n\n        if (deleteAction) {\n          deleteAction = deleteAction[1];\n        }\n\n        const referencesRegex = /REFERENCES.+\\((?:[^)(]+|\\((?:[^)(]+|\\([^)(]*\\))*\\))*\\)/;\n        const referenceConditions = constraintSql.match(referencesRegex)[0].split(' ');\n        referenceTableName = Utils.removeTicks(referenceConditions[1]);\n        let columnNames = referenceConditions[2];\n        columnNames = columnNames.replace(/\\(|\\)/g, '').split(', ');\n        referenceTableKeys = columnNames.map(column => Utils.removeTicks(column));\n      }\n\n      const constraintCondition = constraintSql.match(/\\((?:[^)(]+|\\((?:[^)(]+|\\([^)(]*\\))*\\))*\\)/)[0];\n      constraintSql = constraintSql.replace(/\\(.+\\)/, '');\n      const constraint = constraintSql.split(' ');\n\n      if (constraint[1] === 'PRIMARY' || constraint[1] === 'FOREIGN') {\n        constraint[1]+= ' KEY';\n      }\n\n      return {\n        constraintName: Utils.removeTicks(constraint[0]),\n        constraintType: constraint[1],\n        updateAction,\n        deleteAction,\n        sql: sql.replace(/\\\"/g, '\\`'), //Sqlite returns double quotes for table name\n        constraintCondition,\n        referenceTableName,\n        referenceTableKeys\n      };\n    });\n\n    return constraints;\n  }\n\n  applyParsers(type, value) {\n    if (type.indexOf('(') !== -1) {\n      // Remove the length part\n      type = type.substr(0, type.indexOf('('));\n    }\n    type = type.replace('UNSIGNED', '').replace('ZEROFILL', '');\n    type = type.trim().toUpperCase();\n    const parse = parserStore.get(type);\n\n    if (value !== null && parse) {\n      return parse(value, { timezone: this.sequelize.options.timezone });\n    }\n    return value;\n  }\n\n  formatError(err) {\n\n    switch (err.code) {\n      case 'SQLITE_CONSTRAINT': {\n        let match = err.message.match(/FOREIGN KEY constraint failed/);\n        if (match !== null) {\n          return new sequelizeErrors.ForeignKeyConstraintError({\n            parent: err\n          });\n        }\n\n        let fields = [];\n\n        // Sqlite pre 2.2 behavior - Error: SQLITE_CONSTRAINT: columns x, y are not unique\n        match = err.message.match(/columns (.*?) are/);\n        if (match !== null && match.length >= 2) {\n          fields = match[1].split(', ');\n        } else {\n\n          // Sqlite post 2.2 behavior - Error: SQLITE_CONSTRAINT: UNIQUE constraint failed: table.x, table.y\n          match = err.message.match(/UNIQUE constraint failed: (.*)/);\n          if (match !== null && match.length >= 2) {\n            fields = match[1].split(', ').map(columnWithTable => columnWithTable.split('.')[1]);\n          }\n        }\n\n        const errors = [];\n        let message = 'Validation error';\n\n        for (const field of fields) {\n          errors.push(new sequelizeErrors.ValidationErrorItem(\n            this.getUniqueConstraintErrorMessage(field),\n            'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field,\n            this.instance && this.instance[field],\n            this.instance,\n            'not_unique'\n          ));\n        }\n\n        if (this.model) {\n          _.forOwn(this.model.uniqueKeys, constraint => {\n            if (_.isEqual(constraint.fields, fields) && !!constraint.msg) {\n              message = constraint.msg;\n              return false;\n            }\n          });\n        }\n\n        return new sequelizeErrors.UniqueConstraintError({message, errors, parent: err, fields});\n      }\n      case 'SQLITE_BUSY':\n        return new sequelizeErrors.TimeoutError(err);\n\n      default:\n        return new sequelizeErrors.DatabaseError(err);\n    }\n  }\n\n  handleShowIndexesQuery(data) {\n\n    // Sqlite returns indexes so the one that was defined last is returned first. Lets reverse that!\n    return this.sequelize.Promise.map(data.reverse(), item => {\n      item.fields = [];\n      item.primary = false;\n      item.unique = !!item.unique;\n      item.constraintName = item.name;\n      return this.run('PRAGMA INDEX_INFO(`' + item.name + '`)').then(columns => {\n        for (const column of columns) {\n          item.fields[column.seqno] = {\n            attribute: column.name,\n            length: undefined,\n            order: undefined\n          };\n        }\n\n        return item;\n      });\n    });\n  }\n\n  getDatabaseMethod() {\n    if (this.isUpsertQuery()) {\n      return 'exec'; // Needed to run multiple queries in one\n    } else if (this.isInsertQuery() || this.isUpdateQuery() || this.isBulkUpdateQuery() || this.sql.toLowerCase().indexOf('CREATE TEMPORARY TABLE'.toLowerCase()) !== -1 || this.options.type === QueryTypes.BULKDELETE) {\n      return 'run';\n    } else {\n      return 'all';\n    }\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"]},"metadata":{},"sourceType":"script"}
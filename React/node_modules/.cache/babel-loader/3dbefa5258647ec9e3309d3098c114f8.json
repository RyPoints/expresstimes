{"ast":null,"code":"'use strict';\n/**\n Returns an object that treats MySQL's inabilities to do certain queries.\n\n @class QueryInterface\n @static\n @private\n */\n\nconst _ = require('lodash');\n\nconst UnknownConstraintError = require('../../errors').UnknownConstraintError;\n/**\n  A wrapper that fixes MySQL's inability to cleanly remove columns from existing tables if they have a foreign key constraint.\n\n  @method removeColumn\n  @for    QueryInterface\n\n  @param  {String} tableName     The name of the table.\n  @param  {String} columnName    The name of the attribute that we want to remove.\n  @param  {Object} options\n @private\n */\n\n\nfunction removeColumn(tableName, columnName, options) {\n  options = options || {};\n  return this.sequelize.query(this.QueryGenerator.getForeignKeyQuery(tableName.tableName ? tableName : {\n    tableName,\n    schema: this.sequelize.config.database\n  }, columnName), _.assign({\n    raw: true\n  }, options)).spread(results => {\n    //Exclude primary key constraint\n    if (!results.length || results[0].constraint_name === 'PRIMARY') {\n      // No foreign key constraints found, so we can remove the column\n      return;\n    }\n\n    return this.sequelize.Promise.map(results, constraint => this.sequelize.query(this.QueryGenerator.dropForeignKeyQuery(tableName, constraint.constraint_name), _.assign({\n      raw: true\n    }, options)));\n  }).then(() => this.sequelize.query(this.QueryGenerator.removeColumnQuery(tableName, columnName), _.assign({\n    raw: true\n  }, options)));\n}\n\nfunction removeConstraint(tableName, constraintName, options) {\n  const sql = this.QueryGenerator.showConstraintsQuery(tableName.tableName ? tableName : {\n    tableName,\n    schema: this.sequelize.config.database\n  }, constraintName);\n  return this.sequelize.query(sql, Object.assign({}, options, {\n    type: this.sequelize.QueryTypes.SHOWCONSTRAINTS\n  })).then(constraints => {\n    const constraint = constraints[0];\n    let query;\n\n    if (constraint && constraint.constraintType) {\n      if (constraint.constraintType === 'FOREIGN KEY') {\n        query = this.QueryGenerator.dropForeignKeyQuery(tableName, constraintName);\n      } else {\n        query = this.QueryGenerator.removeIndexQuery(constraint.tableName, constraint.constraintName);\n      }\n    } else {\n      throw new UnknownConstraintError(`Constraint ${constraintName} on table ${tableName} does not exist`);\n    }\n\n    return this.sequelize.query(query, options);\n  });\n}\n\nexports.removeConstraint = removeConstraint;\nexports.removeColumn = removeColumn;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/sequelize/lib/dialects/mysql/query-interface.js"],"names":["_","require","UnknownConstraintError","removeColumn","tableName","columnName","options","sequelize","query","QueryGenerator","getForeignKeyQuery","schema","config","database","assign","raw","spread","results","length","constraint_name","Promise","map","constraint","dropForeignKeyQuery","then","removeColumnQuery","removeConstraint","constraintName","sql","showConstraintsQuery","Object","type","QueryTypes","SHOWCONSTRAINTS","constraints","constraintType","removeIndexQuery","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n Returns an object that treats MySQL's inabilities to do certain queries.\n\n @class QueryInterface\n @static\n @private\n */\n\nconst _ = require('lodash');\nconst UnknownConstraintError = require('../../errors').UnknownConstraintError;\n\n/**\n  A wrapper that fixes MySQL's inability to cleanly remove columns from existing tables if they have a foreign key constraint.\n\n  @method removeColumn\n  @for    QueryInterface\n\n  @param  {String} tableName     The name of the table.\n  @param  {String} columnName    The name of the attribute that we want to remove.\n  @param  {Object} options\n @private\n */\nfunction removeColumn(tableName, columnName, options) {\n  options = options || {};\n\n  return this.sequelize.query(\n    this.QueryGenerator.getForeignKeyQuery(tableName.tableName ? tableName : {\n      tableName,\n      schema: this.sequelize.config.database\n    }, columnName),\n    _.assign({ raw: true }, options)\n  )\n    .spread(results => {\n      //Exclude primary key constraint\n      if (!results.length || results[0].constraint_name === 'PRIMARY') {\n        // No foreign key constraints found, so we can remove the column\n        return;\n      }\n      return this.sequelize.Promise.map(results, constraint => this.sequelize.query(\n        this.QueryGenerator.dropForeignKeyQuery(tableName, constraint.constraint_name),\n        _.assign({ raw: true }, options)\n      ));\n    })\n    .then(() => this.sequelize.query(\n      this.QueryGenerator.removeColumnQuery(tableName, columnName),\n      _.assign({ raw: true }, options)\n    ));\n}\n\n\nfunction removeConstraint(tableName, constraintName, options) {\n  const sql = this.QueryGenerator.showConstraintsQuery(tableName.tableName ? tableName : {\n    tableName,\n    schema: this.sequelize.config.database\n  }, constraintName);\n\n  return this.sequelize.query(sql, Object.assign({}, options, { type: this.sequelize.QueryTypes.SHOWCONSTRAINTS }))\n    .then(constraints => {\n      const constraint = constraints[0];\n      let query;\n      if (constraint && constraint.constraintType) {\n        if (constraint.constraintType === 'FOREIGN KEY') {\n          query = this.QueryGenerator.dropForeignKeyQuery(tableName, constraintName);\n        } else {\n          query = this.QueryGenerator.removeIndexQuery(constraint.tableName, constraint.constraintName);\n        }\n      } else {\n        throw new UnknownConstraintError(`Constraint ${constraintName} on table ${tableName} does not exist`);\n      }\n\n      return this.sequelize.query(query, options);\n    });\n}\n\nexports.removeConstraint = removeConstraint;\nexports.removeColumn = removeColumn;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _events = require(\"events\");\n\nvar _dataType = require(\"./data-type\");\n\nvar _errors = require(\"./errors\");\n\nclass Request extends _events.EventEmitter {\n  constructor(sqlTextOrProcedure, callback) {\n    super();\n    this.sqlTextOrProcedure = sqlTextOrProcedure;\n    this.parameters = [];\n    this.parametersByName = {};\n    this.originalParameters = [];\n    this.preparing = false;\n    this.handle = undefined;\n    this.canceled = false;\n    this.paused = false;\n    this.error = undefined;\n    this.connection = undefined;\n    this.timeout = undefined;\n    this.userCallback = callback;\n\n    this.callback = function (err, rowCount, rows) {\n      if (this.preparing) {\n        this.preparing = false;\n\n        if (err) {\n          this.emit('error', err);\n        } else {\n          this.emit('prepared');\n        }\n      } else {\n        this.userCallback(err, rowCount, rows);\n        this.emit('requestCompleted');\n      }\n    };\n  } // TODO: `type` must be a valid TDS value type\n\n\n  addParameter(name, type, value, options) {\n    if (options == null) {\n      options = {};\n    }\n\n    const _options = options,\n          _options$output = _options.output,\n          output = _options$output === void 0 ? false : _options$output,\n          length = _options.length,\n          precision = _options.precision,\n          scale = _options.scale;\n    const parameter = {\n      type: type,\n      name: name,\n      value: value,\n      output: output,\n      length: length,\n      precision: precision,\n      scale: scale\n    };\n    this.parameters.push(parameter);\n    this.parametersByName[name] = parameter;\n  } // TODO: `type` must be a valid TDS value type\n\n\n  addOutputParameter(name, type, value, options) {\n    if (options == null) {\n      options = {};\n    }\n\n    options.output = true;\n    this.addParameter(name, type, value, options);\n  }\n\n  makeParamsParameter(parameters) {\n    let paramsParameter = '';\n\n    for (let i = 0, len = parameters.length; i < len; i++) {\n      const parameter = parameters[i];\n\n      if (paramsParameter.length > 0) {\n        paramsParameter += ', ';\n      }\n\n      paramsParameter += '@' + parameter.name + ' ';\n      paramsParameter += parameter.type.declaration(parameter);\n\n      if (parameter.output) {\n        paramsParameter += ' OUTPUT';\n      }\n    }\n\n    return paramsParameter;\n  }\n\n  transformIntoExecuteSqlRpc() {\n    if (this.validateParameters()) {\n      return;\n    }\n\n    this.originalParameters = this.parameters;\n    this.parameters = [];\n    this.addParameter('statement', _dataType.typeByName.NVarChar, this.sqlTextOrProcedure);\n\n    if (this.originalParameters.length) {\n      this.addParameter('params', _dataType.typeByName.NVarChar, this.makeParamsParameter(this.originalParameters));\n    }\n\n    for (let i = 0, len = this.originalParameters.length; i < len; i++) {\n      const parameter = this.originalParameters[i];\n      this.parameters.push(parameter);\n    }\n\n    this.sqlTextOrProcedure = 'sp_executesql';\n  }\n\n  transformIntoPrepareRpc() {\n    this.originalParameters = this.parameters;\n    this.parameters = [];\n    this.addOutputParameter('handle', _dataType.typeByName.Int, undefined);\n    this.addParameter('params', _dataType.typeByName.NVarChar, this.makeParamsParameter(this.originalParameters));\n    this.addParameter('stmt', _dataType.typeByName.NVarChar, this.sqlTextOrProcedure);\n    this.sqlTextOrProcedure = 'sp_prepare';\n    this.preparing = true;\n    this.on('returnValue', (name, value) => {\n      if (name === 'handle') {\n        this.handle = value;\n      } else {\n        this.error = (0, _errors.RequestError)(`Tedious > Unexpected output parameter ${name} from sp_prepare`);\n      }\n    });\n  }\n\n  transformIntoUnprepareRpc() {\n    this.parameters = [];\n    this.addParameter('handle', _dataType.typeByName.Int, this.handle);\n    this.sqlTextOrProcedure = 'sp_unprepare';\n  }\n\n  transformIntoExecuteRpc(parameters) {\n    this.parameters = [];\n    this.addParameter('handle', _dataType.typeByName.Int, this.handle);\n\n    for (let i = 0, len = this.originalParameters.length; i < len; i++) {\n      const parameter = this.originalParameters[i];\n      parameter.value = parameters[parameter.name];\n      this.parameters.push(parameter);\n    }\n\n    if (this.validateParameters()) {\n      return;\n    }\n\n    this.sqlTextOrProcedure = 'sp_execute';\n  }\n\n  validateParameters() {\n    for (let i = 0, len = this.parameters.length; i < len; i++) {\n      const parameter = this.parameters[i];\n      const value = parameter.type.validate(parameter.value);\n\n      if (value instanceof TypeError) {\n        return this.error = new _errors.RequestError('Validation failed for parameter \\'' + parameter.name + '\\'. ' + value.message, 'EPARAM');\n      }\n\n      parameter.value = value;\n    }\n\n    return null;\n  } // Temporarily suspends the flow of data from the database.\n  // No more 'row' events will be emitted until resume() is called.\n\n\n  pause() {\n    if (this.paused) {\n      return;\n    }\n\n    this.paused = true;\n\n    if (this.connection) {\n      this.connection.pauseRequest(this);\n    }\n  } // Resumes the flow of data from the database.\n\n\n  resume() {\n    if (!this.paused) {\n      return;\n    }\n\n    this.paused = false;\n\n    if (this.connection) {\n      this.connection.resumeRequest(this);\n    }\n  }\n\n  cancel() {\n    if (this.canceled) {\n      return;\n    }\n\n    this.canceled = true;\n    this.emit('cancel');\n  }\n\n  setTimeout(timeout) {\n    this.timeout = timeout;\n  }\n\n}\n\nvar _default = Request;\nexports.default = _default;\nmodule.exports = Request;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/tedious/lib/request.js"],"names":["Object","defineProperty","exports","value","default","_events","require","_dataType","_errors","Request","EventEmitter","constructor","sqlTextOrProcedure","callback","parameters","parametersByName","originalParameters","preparing","handle","undefined","canceled","paused","error","connection","timeout","userCallback","err","rowCount","rows","emit","addParameter","name","type","options","_options","_options$output","output","length","precision","scale","parameter","push","addOutputParameter","makeParamsParameter","paramsParameter","i","len","declaration","transformIntoExecuteSqlRpc","validateParameters","typeByName","NVarChar","transformIntoPrepareRpc","Int","on","RequestError","transformIntoUnprepareRpc","transformIntoExecuteRpc","validate","TypeError","message","pause","pauseRequest","resume","resumeRequest","cancel","setTimeout","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _events = require(\"events\");\n\nvar _dataType = require(\"./data-type\");\n\nvar _errors = require(\"./errors\");\n\nclass Request extends _events.EventEmitter {\n  constructor(sqlTextOrProcedure, callback) {\n    super();\n    this.sqlTextOrProcedure = sqlTextOrProcedure;\n    this.parameters = [];\n    this.parametersByName = {};\n    this.originalParameters = [];\n    this.preparing = false;\n    this.handle = undefined;\n    this.canceled = false;\n    this.paused = false;\n    this.error = undefined;\n    this.connection = undefined;\n    this.timeout = undefined;\n    this.userCallback = callback;\n\n    this.callback = function (err, rowCount, rows) {\n      if (this.preparing) {\n        this.preparing = false;\n\n        if (err) {\n          this.emit('error', err);\n        } else {\n          this.emit('prepared');\n        }\n      } else {\n        this.userCallback(err, rowCount, rows);\n        this.emit('requestCompleted');\n      }\n    };\n  } // TODO: `type` must be a valid TDS value type\n\n\n  addParameter(name, type, value, options) {\n    if (options == null) {\n      options = {};\n    }\n\n    const _options = options,\n          _options$output = _options.output,\n          output = _options$output === void 0 ? false : _options$output,\n          length = _options.length,\n          precision = _options.precision,\n          scale = _options.scale;\n    const parameter = {\n      type: type,\n      name: name,\n      value: value,\n      output: output,\n      length: length,\n      precision: precision,\n      scale: scale\n    };\n    this.parameters.push(parameter);\n    this.parametersByName[name] = parameter;\n  } // TODO: `type` must be a valid TDS value type\n\n\n  addOutputParameter(name, type, value, options) {\n    if (options == null) {\n      options = {};\n    }\n\n    options.output = true;\n    this.addParameter(name, type, value, options);\n  }\n\n  makeParamsParameter(parameters) {\n    let paramsParameter = '';\n\n    for (let i = 0, len = parameters.length; i < len; i++) {\n      const parameter = parameters[i];\n\n      if (paramsParameter.length > 0) {\n        paramsParameter += ', ';\n      }\n\n      paramsParameter += '@' + parameter.name + ' ';\n      paramsParameter += parameter.type.declaration(parameter);\n\n      if (parameter.output) {\n        paramsParameter += ' OUTPUT';\n      }\n    }\n\n    return paramsParameter;\n  }\n\n  transformIntoExecuteSqlRpc() {\n    if (this.validateParameters()) {\n      return;\n    }\n\n    this.originalParameters = this.parameters;\n    this.parameters = [];\n    this.addParameter('statement', _dataType.typeByName.NVarChar, this.sqlTextOrProcedure);\n\n    if (this.originalParameters.length) {\n      this.addParameter('params', _dataType.typeByName.NVarChar, this.makeParamsParameter(this.originalParameters));\n    }\n\n    for (let i = 0, len = this.originalParameters.length; i < len; i++) {\n      const parameter = this.originalParameters[i];\n      this.parameters.push(parameter);\n    }\n\n    this.sqlTextOrProcedure = 'sp_executesql';\n  }\n\n  transformIntoPrepareRpc() {\n    this.originalParameters = this.parameters;\n    this.parameters = [];\n    this.addOutputParameter('handle', _dataType.typeByName.Int, undefined);\n    this.addParameter('params', _dataType.typeByName.NVarChar, this.makeParamsParameter(this.originalParameters));\n    this.addParameter('stmt', _dataType.typeByName.NVarChar, this.sqlTextOrProcedure);\n    this.sqlTextOrProcedure = 'sp_prepare';\n    this.preparing = true;\n    this.on('returnValue', (name, value) => {\n      if (name === 'handle') {\n        this.handle = value;\n      } else {\n        this.error = (0, _errors.RequestError)(`Tedious > Unexpected output parameter ${name} from sp_prepare`);\n      }\n    });\n  }\n\n  transformIntoUnprepareRpc() {\n    this.parameters = [];\n    this.addParameter('handle', _dataType.typeByName.Int, this.handle);\n    this.sqlTextOrProcedure = 'sp_unprepare';\n  }\n\n  transformIntoExecuteRpc(parameters) {\n    this.parameters = [];\n    this.addParameter('handle', _dataType.typeByName.Int, this.handle);\n\n    for (let i = 0, len = this.originalParameters.length; i < len; i++) {\n      const parameter = this.originalParameters[i];\n      parameter.value = parameters[parameter.name];\n      this.parameters.push(parameter);\n    }\n\n    if (this.validateParameters()) {\n      return;\n    }\n\n    this.sqlTextOrProcedure = 'sp_execute';\n  }\n\n  validateParameters() {\n    for (let i = 0, len = this.parameters.length; i < len; i++) {\n      const parameter = this.parameters[i];\n      const value = parameter.type.validate(parameter.value);\n\n      if (value instanceof TypeError) {\n        return this.error = new _errors.RequestError('Validation failed for parameter \\'' + parameter.name + '\\'. ' + value.message, 'EPARAM');\n      }\n\n      parameter.value = value;\n    }\n\n    return null;\n  } // Temporarily suspends the flow of data from the database.\n  // No more 'row' events will be emitted until resume() is called.\n\n\n  pause() {\n    if (this.paused) {\n      return;\n    }\n\n    this.paused = true;\n\n    if (this.connection) {\n      this.connection.pauseRequest(this);\n    }\n  } // Resumes the flow of data from the database.\n\n\n  resume() {\n    if (!this.paused) {\n      return;\n    }\n\n    this.paused = false;\n\n    if (this.connection) {\n      this.connection.resumeRequest(this);\n    }\n  }\n\n  cancel() {\n    if (this.canceled) {\n      return;\n    }\n\n    this.canceled = true;\n    this.emit('cancel');\n  }\n\n  setTimeout(timeout) {\n    this.timeout = timeout;\n  }\n\n}\n\nvar _default = Request;\nexports.default = _default;\nmodule.exports = Request;"]},"metadata":{},"sourceType":"script"}
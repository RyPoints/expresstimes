{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst util = require('util');\n\nconst Utils = require('../utils');\n\nfunction validateDeprecation(value, expectation, options) {\n  if (!options.deprecated) {\n    return;\n  }\n\n  const valid = value instanceof options.deprecated || Object.prototype.toString.call(value) === Object.prototype.toString.call(options.deprecated.call());\n\n  if (valid) {\n    const message = `${util.inspect(value)} should not be of type \"${options.deprecated.name}\"`;\n    Utils.deprecate(options.deprecationWarning || message);\n  }\n\n  return valid;\n}\n\nfunction validate(value, expectation) {\n  // the second part of this check is a workaround to deal with an issue that occurs in node-webkit when\n  // using object literals.  https://github.com/sequelize/sequelize/issues/2685\n  if (value instanceof expectation || Object.prototype.toString.call(value) === Object.prototype.toString.call(expectation.call())) {\n    return true;\n  }\n\n  throw new Error(`The parameter (value: ${value}) is no ${expectation.name}`);\n}\n\nfunction check(value, expectation, options) {\n  options = _.extend({\n    deprecated: false,\n    index: null,\n    method: null,\n    optional: false\n  }, options || {});\n\n  if (!value && options.optional) {\n    return true;\n  }\n\n  if (value === undefined) {\n    throw new Error('No value has been passed.');\n  }\n\n  if (expectation === undefined) {\n    throw new Error('No expectation has been passed.');\n  }\n\n  return false || validateDeprecation(value, expectation, options) || validate(value, expectation, options);\n}\n\nmodule.exports = check;\nmodule.exports.check = check;\nmodule.exports.default = check;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/sequelize/lib/utils/parameter-validator.js"],"names":["_","require","util","Utils","validateDeprecation","value","expectation","options","deprecated","valid","Object","prototype","toString","call","message","inspect","name","deprecate","deprecationWarning","validate","Error","check","extend","index","method","optional","undefined","module","exports","default"],"mappings":"AAAA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,UAAD,CAArB;;AAEA,SAASG,mBAAT,CAA6BC,KAA7B,EAAoCC,WAApC,EAAiDC,OAAjD,EAA0D;AACxD,MAAI,CAACA,OAAO,CAACC,UAAb,EAAyB;AACvB;AACD;;AAED,QAAMC,KAAK,GAAGJ,KAAK,YAAYE,OAAO,CAACC,UAAzB,IAAuCE,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BR,KAA/B,MAA0CK,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BN,OAAO,CAACC,UAAR,CAAmBK,IAAnB,EAA/B,CAA/F;;AAEA,MAAIJ,KAAJ,EAAW;AACT,UAAMK,OAAO,GAAI,GAAEZ,IAAI,CAACa,OAAL,CAAaV,KAAb,CAAoB,2BAA0BE,OAAO,CAACC,UAAR,CAAmBQ,IAAK,GAAzF;AACAb,IAAAA,KAAK,CAACc,SAAN,CAAgBV,OAAO,CAACW,kBAAR,IAA8BJ,OAA9C;AACD;;AAED,SAAOL,KAAP;AACD;;AAED,SAASU,QAAT,CAAkBd,KAAlB,EAAyBC,WAAzB,EAAsC;AACpC;AACA;AACA,MAAID,KAAK,YAAYC,WAAjB,IAAgCI,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BR,KAA/B,MAA0CK,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BP,WAAW,CAACO,IAAZ,EAA/B,CAA9E,EAAkI;AAChI,WAAO,IAAP;AACD;;AAED,QAAM,IAAIO,KAAJ,CAAW,yBAAwBf,KAAM,WAAUC,WAAW,CAACU,IAAK,EAApE,CAAN;AACD;;AAED,SAASK,KAAT,CAAehB,KAAf,EAAsBC,WAAtB,EAAmCC,OAAnC,EAA4C;AAC1CA,EAAAA,OAAO,GAAGP,CAAC,CAACsB,MAAF,CAAS;AACjBd,IAAAA,UAAU,EAAE,KADK;AAEjBe,IAAAA,KAAK,EAAE,IAFU;AAGjBC,IAAAA,MAAM,EAAE,IAHS;AAIjBC,IAAAA,QAAQ,EAAE;AAJO,GAAT,EAKPlB,OAAO,IAAI,EALJ,CAAV;;AAOA,MAAI,CAACF,KAAD,IAAUE,OAAO,CAACkB,QAAtB,EAAgC;AAC9B,WAAO,IAAP;AACD;;AAED,MAAIpB,KAAK,KAAKqB,SAAd,EAAyB;AACvB,UAAM,IAAIN,KAAJ,CAAU,2BAAV,CAAN;AACD;;AAED,MAAId,WAAW,KAAKoB,SAApB,EAA+B;AAC7B,UAAM,IAAIN,KAAJ,CAAU,iCAAV,CAAN;AACD;;AAED,SAAO,SACFhB,mBAAmB,CAACC,KAAD,EAAQC,WAAR,EAAqBC,OAArB,CADjB,IAEFY,QAAQ,CAACd,KAAD,EAAQC,WAAR,EAAqBC,OAArB,CAFb;AAGD;;AAEDoB,MAAM,CAACC,OAAP,GAAiBP,KAAjB;AACAM,MAAM,CAACC,OAAP,CAAeP,KAAf,GAAuBA,KAAvB;AACAM,MAAM,CAACC,OAAP,CAAeC,OAAf,GAAyBR,KAAzB","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst util = require('util');\nconst Utils = require('../utils');\n\nfunction validateDeprecation(value, expectation, options) {\n  if (!options.deprecated) {\n    return;\n  }\n\n  const valid = value instanceof options.deprecated || Object.prototype.toString.call(value) === Object.prototype.toString.call(options.deprecated.call());\n\n  if (valid) {\n    const message = `${util.inspect(value)} should not be of type \"${options.deprecated.name}\"`;\n    Utils.deprecate(options.deprecationWarning || message);\n  }\n\n  return valid;\n}\n\nfunction validate(value, expectation) {\n  // the second part of this check is a workaround to deal with an issue that occurs in node-webkit when\n  // using object literals.  https://github.com/sequelize/sequelize/issues/2685\n  if (value instanceof expectation || Object.prototype.toString.call(value) === Object.prototype.toString.call(expectation.call())) {\n    return true;\n  }\n\n  throw new Error(`The parameter (value: ${value}) is no ${expectation.name}`);\n}\n\nfunction check(value, expectation, options) {\n  options = _.extend({\n    deprecated: false,\n    index: null,\n    method: null,\n    optional: false\n  }, options || {});\n\n  if (!value && options.optional) {\n    return true;\n  }\n\n  if (value === undefined) {\n    throw new Error('No value has been passed.');\n  }\n\n  if (expectation === undefined) {\n    throw new Error('No expectation has been passed.');\n  }\n\n  return false\n    || validateDeprecation(value, expectation, options)\n    || validate(value, expectation, options);\n}\n\nmodule.exports = check;\nmodule.exports.check = check;\nmodule.exports.default = check;\n"]},"metadata":{},"sourceType":"script"}
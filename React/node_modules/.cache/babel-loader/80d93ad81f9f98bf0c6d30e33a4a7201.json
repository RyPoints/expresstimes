{"ast":null,"code":"'use strict';\n\nconst CommandCode = require('../constants/commands.js');\n\nconst ClientConstants = require('../constants/client.js');\n\nconst Packet = require('../packets/packet.js');\n\nconst auth41 = require('../auth_41.js');\n\nconst CharsetToEncoding = require('../constants/charset_encodings.js'); // https://dev.mysql.com/doc/internals/en/com-change-user.html#packet-COM_CHANGE_USER\n\n\nclass ChangeUser {\n  constructor(opts) {\n    this.flags = opts.flags;\n    this.user = opts.user || '';\n    this.database = opts.database || '';\n    this.password = opts.password || '';\n    this.passwordSha1 = opts.passwordSha1;\n    this.authPluginData1 = opts.authPluginData1;\n    this.authPluginData2 = opts.authPluginData2;\n    this.connectAttributes = opts.connectAttrinutes || {};\n    let authToken;\n\n    if (this.passwordSha1) {\n      authToken = auth41.calculateTokenFromPasswordSha(this.passwordSha1, this.authPluginData1, this.authPluginData2);\n    } else {\n      authToken = auth41.calculateToken(this.password, this.authPluginData1, this.authPluginData2);\n    }\n\n    this.authToken = authToken;\n    this.charsetNumber = opts.charsetNumber;\n  } // TODO\n  // ChangeUser.fromPacket = function(packet)\n  // };\n\n\n  serializeToBuffer(buffer) {\n    const isSet = flag => this.flags & ClientConstants[flag];\n\n    const packet = new Packet(0, buffer, 0, buffer.length);\n    packet.offset = 4;\n    const encoding = CharsetToEncoding[this.charsetNumber];\n    packet.writeInt8(CommandCode.CHANGE_USER);\n    packet.writeNullTerminatedString(this.user, encoding);\n\n    if (isSet('SECURE_CONNECTION')) {\n      packet.writeInt8(this.authToken.length);\n      packet.writeBuffer(this.authToken);\n    } else {\n      packet.writeBuffer(this.authToken);\n      packet.writeInt8(0);\n    }\n\n    packet.writeNullTerminatedString(this.database, encoding);\n    packet.writeInt16(this.charsetNumber);\n\n    if (isSet('PLUGIN_AUTH')) {\n      // TODO: read this from parameters\n      packet.writeNullTerminatedString('mysql_native_password', 'latin1');\n    }\n\n    if (isSet('CONNECT_ATTRS')) {\n      const connectAttributes = this.connectAttributes;\n      const attrNames = Object.keys(connectAttributes);\n      let keysLength = 0;\n\n      for (let k = 0; k < attrNames.length; ++k) {\n        keysLength += Packet.lengthCodedStringLength(attrNames[k], encoding);\n        keysLength += Packet.lengthCodedStringLength(connectAttributes[attrNames[k]], encoding);\n      }\n\n      packet.writeLengthCodedNumber(keysLength);\n\n      for (let k = 0; k < attrNames.length; ++k) {\n        packet.writeLengthCodedString(attrNames[k], encoding);\n        packet.writeLengthCodedString(connectAttributes[attrNames[k]], encoding);\n      }\n    }\n\n    return packet;\n  }\n\n  toPacket() {\n    if (typeof this.user !== 'string') {\n      throw new Error('\"user\" connection config property must be a string');\n    }\n\n    if (typeof this.database !== 'string') {\n      throw new Error('\"database\" connection config property must be a string');\n    } // dry run: calculate resulting packet length\n\n\n    const p = this.serializeToBuffer(Packet.MockBuffer());\n    return this.serializeToBuffer(Buffer.allocUnsafe(p.offset));\n  }\n\n}\n\nmodule.exports = ChangeUser;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/mysql2/lib/packets/change_user.js"],"names":["CommandCode","require","ClientConstants","Packet","auth41","CharsetToEncoding","ChangeUser","constructor","opts","flags","user","database","password","passwordSha1","authPluginData1","authPluginData2","connectAttributes","connectAttrinutes","authToken","calculateTokenFromPasswordSha","calculateToken","charsetNumber","serializeToBuffer","buffer","isSet","flag","packet","length","offset","encoding","writeInt8","CHANGE_USER","writeNullTerminatedString","writeBuffer","writeInt16","attrNames","Object","keys","keysLength","k","lengthCodedStringLength","writeLengthCodedNumber","writeLengthCodedString","toPacket","Error","p","MockBuffer","Buffer","allocUnsafe","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst CommandCode = require('../constants/commands.js');\nconst ClientConstants = require('../constants/client.js');\nconst Packet = require('../packets/packet.js');\nconst auth41 = require('../auth_41.js');\nconst CharsetToEncoding = require('../constants/charset_encodings.js');\n\n// https://dev.mysql.com/doc/internals/en/com-change-user.html#packet-COM_CHANGE_USER\nclass ChangeUser {\n  constructor(opts) {\n    this.flags = opts.flags;\n    this.user = opts.user || '';\n    this.database = opts.database || '';\n    this.password = opts.password || '';\n    this.passwordSha1 = opts.passwordSha1;\n    this.authPluginData1 = opts.authPluginData1;\n    this.authPluginData2 = opts.authPluginData2;\n    this.connectAttributes = opts.connectAttrinutes || {};\n    let authToken;\n    if (this.passwordSha1) {\n      authToken = auth41.calculateTokenFromPasswordSha(\n        this.passwordSha1,\n        this.authPluginData1,\n        this.authPluginData2\n      );\n    } else {\n      authToken = auth41.calculateToken(\n        this.password,\n        this.authPluginData1,\n        this.authPluginData2\n      );\n    }\n    this.authToken = authToken;\n    this.charsetNumber = opts.charsetNumber;\n  }\n\n  // TODO\n  // ChangeUser.fromPacket = function(packet)\n  // };\n  serializeToBuffer(buffer) {\n    const isSet = flag => this.flags & ClientConstants[flag];\n    const packet = new Packet(0, buffer, 0, buffer.length);\n    packet.offset = 4;\n    const encoding = CharsetToEncoding[this.charsetNumber];\n    packet.writeInt8(CommandCode.CHANGE_USER);\n    packet.writeNullTerminatedString(this.user, encoding);\n    if (isSet('SECURE_CONNECTION')) {\n      packet.writeInt8(this.authToken.length);\n      packet.writeBuffer(this.authToken);\n    } else {\n      packet.writeBuffer(this.authToken);\n      packet.writeInt8(0);\n    }\n    packet.writeNullTerminatedString(this.database, encoding);\n    packet.writeInt16(this.charsetNumber);\n    if (isSet('PLUGIN_AUTH')) {\n      // TODO: read this from parameters\n      packet.writeNullTerminatedString('mysql_native_password', 'latin1');\n    }\n    if (isSet('CONNECT_ATTRS')) {\n      const connectAttributes = this.connectAttributes;\n      const attrNames = Object.keys(connectAttributes);\n      let keysLength = 0;\n      for (let k = 0; k < attrNames.length; ++k) {\n        keysLength += Packet.lengthCodedStringLength(attrNames[k], encoding);\n        keysLength += Packet.lengthCodedStringLength(\n          connectAttributes[attrNames[k]],\n          encoding\n        );\n      }\n      packet.writeLengthCodedNumber(keysLength);\n      for (let k = 0; k < attrNames.length; ++k) {\n        packet.writeLengthCodedString(attrNames[k], encoding);\n        packet.writeLengthCodedString(\n          connectAttributes[attrNames[k]],\n          encoding\n        );\n      }\n    }\n    return packet;\n  }\n\n  toPacket() {\n    if (typeof this.user !== 'string') {\n      throw new Error('\"user\" connection config property must be a string');\n    }\n    if (typeof this.database !== 'string') {\n      throw new Error('\"database\" connection config property must be a string');\n    }\n    // dry run: calculate resulting packet length\n    const p = this.serializeToBuffer(Packet.MockBuffer());\n    return this.serializeToBuffer(Buffer.allocUnsafe(p.offset));\n  }\n}\n\nmodule.exports = ChangeUser;\n"]},"metadata":{},"sourceType":"script"}
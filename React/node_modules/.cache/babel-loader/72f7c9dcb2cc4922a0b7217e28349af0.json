{"ast":null,"code":"'use strict';\n\nconst Packet = require('../packets/packet');\n\nconst ClientConstants = require('../constants/client.js'); // https://dev.mysql.com/doc/internals/en/connection-phase-packets.html#packet-Protocol::Handshake\n\n\nclass Handshake {\n  constructor(args) {\n    this.protocolVersion = args.protocolVersion;\n    this.serverVersion = args.serverVersion;\n    this.capabilityFlags = args.capabilityFlags;\n    this.connectionId = args.connectionId;\n    this.authPluginData1 = args.authPluginData1;\n    this.authPluginData2 = args.authPluginData2;\n    this.characterSet = args.characterSet;\n    this.statusFlags = args.statusFlags;\n    this.autPluginName = args.autPluginName;\n  }\n\n  setScrambleData(cb) {\n    require('crypto').randomBytes(20, (err, data) => {\n      if (err) {\n        cb(err);\n        return;\n      }\n\n      this.authPluginData1 = data.slice(0, 8);\n      this.authPluginData2 = data.slice(8, 20);\n      cb();\n    });\n  }\n\n  toPacket(sequenceId) {\n    const length = 68 + Buffer.byteLength(this.serverVersion, 'utf8');\n    const buffer = Buffer.alloc(length + 4, 0); // zero fill, 10 bytes filler later needs to contain zeros\n\n    const packet = new Packet(sequenceId, buffer, 0, length + 4);\n    packet.offset = 4;\n    packet.writeInt8(this.protocolVersion);\n    packet.writeString(this.serverVersion, 'cesu8');\n    packet.writeInt8(0);\n    packet.writeInt32(this.connectionId);\n    packet.writeBuffer(this.authPluginData1);\n    packet.writeInt8(0);\n    const capabilityFlagsBuffer = Buffer.allocUnsafe(4);\n    capabilityFlagsBuffer.writeUInt32LE(this.capabilityFlags, 0);\n    packet.writeBuffer(capabilityFlagsBuffer.slice(0, 2));\n    packet.writeInt8(this.characterSet);\n    packet.writeInt16(this.statusFlags);\n    packet.writeBuffer(capabilityFlagsBuffer.slice(2, 4));\n    packet.writeInt8(21); // authPluginDataLength\n\n    packet.skip(10);\n    packet.writeBuffer(this.authPluginData2);\n    packet.writeInt8(0);\n    packet.writeString('mysql_native_password', 'latin1');\n    packet.writeInt8(0);\n    return packet;\n  }\n\n  static fromPacket(packet) {\n    const args = {};\n    args.protocolVersion = packet.readInt8();\n    args.serverVersion = packet.readNullTerminatedString('cesu8');\n    args.connectionId = packet.readInt32();\n    args.authPluginData1 = packet.readBuffer(8);\n    packet.skip(1);\n    const capabilityFlagsBuffer = Buffer.allocUnsafe(4);\n    capabilityFlagsBuffer[0] = packet.readInt8();\n    capabilityFlagsBuffer[1] = packet.readInt8();\n\n    if (packet.haveMoreData()) {\n      args.characterSet = packet.readInt8();\n      args.statusFlags = packet.readInt16(); // upper 2 bytes\n\n      capabilityFlagsBuffer[2] = packet.readInt8();\n      capabilityFlagsBuffer[3] = packet.readInt8();\n      args.capabilityFlags = capabilityFlagsBuffer.readUInt32LE(0);\n\n      if (args.capabilityFlags & ClientConstants.PLUGIN_AUTH) {\n        args.authPluginDataLength = packet.readInt8();\n      } else {\n        args.authPluginDataLength = 0;\n        packet.skip(1);\n      }\n\n      packet.skip(10);\n    } else {\n      args.capabilityFlags = capabilityFlagsBuffer.readUInt16LE(0);\n    }\n\n    const isSecureConnection = args.capabilityFlags & ClientConstants.SECURE_CONNECTION;\n\n    if (isSecureConnection) {\n      const authPluginDataLength = args.authPluginDataLength;\n\n      if (authPluginDataLength === 0) {\n        // for Secure Password Authentication\n        args.authPluginDataLength = 20;\n        args.authPluginData2 = packet.readBuffer(12);\n        packet.skip(1);\n      } else {\n        // length > 0\n        // for Custom Auth Plugin (PLUGIN_AUTH)\n        const len = Math.max(13, authPluginDataLength - 8);\n        args.authPluginData2 = packet.readBuffer(len);\n      }\n    }\n\n    if (args.capabilityFlags & ClientConstants.PLUGIN_AUTH) {\n      args.autPluginName = packet.readNullTerminatedString('ascii');\n    }\n\n    return new Handshake(args);\n  }\n\n}\n\nmodule.exports = Handshake;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/mysql2/lib/packets/handshake.js"],"names":["Packet","require","ClientConstants","Handshake","constructor","args","protocolVersion","serverVersion","capabilityFlags","connectionId","authPluginData1","authPluginData2","characterSet","statusFlags","autPluginName","setScrambleData","cb","randomBytes","err","data","slice","toPacket","sequenceId","length","Buffer","byteLength","buffer","alloc","packet","offset","writeInt8","writeString","writeInt32","writeBuffer","capabilityFlagsBuffer","allocUnsafe","writeUInt32LE","writeInt16","skip","fromPacket","readInt8","readNullTerminatedString","readInt32","readBuffer","haveMoreData","readInt16","readUInt32LE","PLUGIN_AUTH","authPluginDataLength","readUInt16LE","isSecureConnection","SECURE_CONNECTION","len","Math","max","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Packet = require('../packets/packet');\nconst ClientConstants = require('../constants/client.js');\n\n// https://dev.mysql.com/doc/internals/en/connection-phase-packets.html#packet-Protocol::Handshake\n\nclass Handshake {\n  constructor(args) {\n    this.protocolVersion = args.protocolVersion;\n    this.serverVersion = args.serverVersion;\n    this.capabilityFlags = args.capabilityFlags;\n    this.connectionId = args.connectionId;\n    this.authPluginData1 = args.authPluginData1;\n    this.authPluginData2 = args.authPluginData2;\n    this.characterSet = args.characterSet;\n    this.statusFlags = args.statusFlags;\n    this.autPluginName = args.autPluginName;\n  }\n\n  setScrambleData(cb) {\n    require('crypto').randomBytes(20, (err, data) => {\n      if (err) {\n        cb(err);\n        return;\n      }\n      this.authPluginData1 = data.slice(0, 8);\n      this.authPluginData2 = data.slice(8, 20);\n      cb();\n    });\n  }\n\n  toPacket(sequenceId) {\n    const length = 68 + Buffer.byteLength(this.serverVersion, 'utf8');\n    const buffer = Buffer.alloc(length + 4, 0); // zero fill, 10 bytes filler later needs to contain zeros\n    const packet = new Packet(sequenceId, buffer, 0, length + 4);\n    packet.offset = 4;\n    packet.writeInt8(this.protocolVersion);\n    packet.writeString(this.serverVersion, 'cesu8');\n    packet.writeInt8(0);\n    packet.writeInt32(this.connectionId);\n    packet.writeBuffer(this.authPluginData1);\n    packet.writeInt8(0);\n    const capabilityFlagsBuffer = Buffer.allocUnsafe(4);\n    capabilityFlagsBuffer.writeUInt32LE(this.capabilityFlags, 0);\n    packet.writeBuffer(capabilityFlagsBuffer.slice(0, 2));\n    packet.writeInt8(this.characterSet);\n    packet.writeInt16(this.statusFlags);\n    packet.writeBuffer(capabilityFlagsBuffer.slice(2, 4));\n    packet.writeInt8(21); // authPluginDataLength\n    packet.skip(10);\n    packet.writeBuffer(this.authPluginData2);\n    packet.writeInt8(0);\n    packet.writeString('mysql_native_password', 'latin1');\n    packet.writeInt8(0);\n    return packet;\n  }\n\n  static fromPacket(packet) {\n    const args = {};\n    args.protocolVersion = packet.readInt8();\n    args.serverVersion = packet.readNullTerminatedString('cesu8');\n    args.connectionId = packet.readInt32();\n    args.authPluginData1 = packet.readBuffer(8);\n    packet.skip(1);\n    const capabilityFlagsBuffer = Buffer.allocUnsafe(4);\n    capabilityFlagsBuffer[0] = packet.readInt8();\n    capabilityFlagsBuffer[1] = packet.readInt8();\n    if (packet.haveMoreData()) {\n      args.characterSet = packet.readInt8();\n      args.statusFlags = packet.readInt16();\n      // upper 2 bytes\n      capabilityFlagsBuffer[2] = packet.readInt8();\n      capabilityFlagsBuffer[3] = packet.readInt8();\n      args.capabilityFlags = capabilityFlagsBuffer.readUInt32LE(0);\n      if (args.capabilityFlags & ClientConstants.PLUGIN_AUTH) {\n        args.authPluginDataLength = packet.readInt8();\n      } else {\n        args.authPluginDataLength = 0;\n        packet.skip(1);\n      }\n      packet.skip(10);\n    } else {\n      args.capabilityFlags = capabilityFlagsBuffer.readUInt16LE(0);\n    }\n\n    const isSecureConnection =\n      args.capabilityFlags & ClientConstants.SECURE_CONNECTION;\n    if (isSecureConnection) {\n      const authPluginDataLength = args.authPluginDataLength;\n      if (authPluginDataLength === 0) {\n        // for Secure Password Authentication\n        args.authPluginDataLength = 20;\n        args.authPluginData2 = packet.readBuffer(12);\n        packet.skip(1);\n      } else {\n        // length > 0\n        // for Custom Auth Plugin (PLUGIN_AUTH)\n        const len = Math.max(13, authPluginDataLength - 8);\n        args.authPluginData2 = packet.readBuffer(len);\n      }\n    }\n\n    if (args.capabilityFlags & ClientConstants.PLUGIN_AUTH) {\n      args.autPluginName = packet.readNullTerminatedString('ascii');\n    }\n\n    return new Handshake(args);\n  }\n}\n\nmodule.exports = Handshake;\n"]},"metadata":{},"sourceType":"script"}
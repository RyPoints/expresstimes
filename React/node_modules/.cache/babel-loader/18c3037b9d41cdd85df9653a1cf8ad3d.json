{"ast":null,"code":"/*\r\n * @copyright\r\n * Copyright Â© Microsoft Open Technologies, Inc.\r\n *\r\n * All Rights Reserved\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http: *www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS\r\n * OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION\r\n * ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A\r\n * PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.\r\n *\r\n * See the Apache License, Version 2.0 for the specific language\r\n * governing permissions and limitations under the License.\r\n */\n'use strict';\n\nvar argument = require('./argument');\n\nvar Authority = require('./authority').Authority;\n\nvar TokenRequest = require('./token-request');\n\nvar CodeRequest = require('./code-request');\n\nvar createLogContext = require('./log').createLogContext;\n\nvar MemoryCache = require('./memory-cache');\n\nvar util = require('./util');\n\nvar constants = require('./constants');\n\nvar globalADALOptions = {};\nvar globalCache = new MemoryCache();\n/**\r\n * This function is used to add or remove entries from a TokenCache\r\n * @typedef {function} ModifyCacheFunction\r\n * @param {Array} entries  An array of entries to either add or remove from the TokenCache\r\n * @param {function} callback A callback function to call when the add or remove operation is complete.\r\n *                            This function can take a single error argument.\r\n */\n\n/**\r\n * This function is called by a TokenCache when a find operation completes.\r\n * @callback TokenCacheFindCallback\r\n * @param {Error} [err] If an error occurred during the find operation then it should be passed here.\r\n * @param {Array} [entries] If the find operation was succesful then the matched entries should be returned here.\r\n */\n\n/**\r\n * This function is called by ADAL to query a TokenCache.  The query parameter is\r\n * a flat object which must be compared against entries in the cache. An entry\r\n * matches if it has all of the fields in the query and the values of those fields match\r\n * the values in the query. A matched object may have more fields than the query object.\r\n * @typedef {function} FindCacheFunction\r\n * @param {object}  query This object should be compared to cache entries and matches should be returned.\r\n * @param {TokenCacheFindCallback} callback This callback should be called when the find operation is complete.\r\n */\n\n/**\r\n * This is an interface that can be implemented to provide custom token cache persistence.\r\n * @public\r\n * @class TokenCache\r\n * @property {ModifyCacheFunction}  add Called by ADAL when entries should be added to the cache.\r\n * @property {ModifyCacheFunction}  remove Called by ADAL when entries should be removed from the cache.\r\n * @property {FindCacheFunction}    find Called when ADAL needs to find entries in the cache.\r\n */\n\n/**\r\n * Creates a new AuthenticationContext object.  By default the authority will be checked against\r\n * a list of known Azure Active Directory authorities.  If the authority is not recognized as\r\n * one of these well known authorities then token acquisition will fail.  This behavior can be\r\n * turned off via the validateAuthority parameter below.\r\n * @constructor\r\n * @param {string}  authority            A URL that identifies a token authority.\r\n * @param {bool}   [validateAuthority]   Turns authority validation on or off.  This parameter default to true.\r\n * @param {TokenCache}   [cache]         Sets the token cache used by this AuthenticationContext instance.  If this parameter is not set\r\n *                                       then a default, in memory cache is used.  The default in memory cache is global to the process and is\r\n *                                       shared by all AuthenticationContexts that are created with an empty cache parameter.  To control the\r\n *                                       scope and lifetime of a cache you can either create a {@link MemoryCache} instance and pass it when\r\n *                                       constructing an AuthenticationContext or implement a custom {@link TokenCache} and pass that.  Cache\r\n *                                       instances passed at AuthenticationContext construction time are only used by that instance of\r\n *                                       the AuthenticationContext and are not shared unless it has been manually passed during the\r\n *                                       construction of other AuthenticationContexts.\r\n *\r\n */\n\nfunction AuthenticationContext(authority, validateAuthority, cache) {\n  var validate = validateAuthority === undefined || validateAuthority === null || validateAuthority;\n  this._authority = new Authority(authority, validate);\n  this._oauth2client = null;\n  this._correlationId = null;\n  this._callContext = {\n    options: globalADALOptions\n  };\n  this._cache = cache || globalCache;\n  this._tokenRequestWithUserCode = {};\n}\n/**\r\n * Gets the authority url this AuthenticationContext was constructed with.\r\n * @instance\r\n * @memberOf AuthenticationContext\r\n * @type {string}\r\n * @name authority\r\n */\n\n\nObject.defineProperty(AuthenticationContext.prototype, 'authority', {\n  get: function () {\n    return this._authority.url;\n  }\n});\n/**\r\n * Gets/Sets the correlation id that will be used for the next acquireToken request.\r\n * @instance\r\n * @memberOf AuthenticationContext\r\n * @type {string}\r\n * @name correlationId\r\n */\n\nObject.defineProperty(AuthenticationContext.prototype, 'correlationId', {\n  get: function () {\n    return this._correlationId;\n  },\n  set: function (id) {\n    this._correlationId = id;\n  }\n});\n/**\r\n * Get/Sets options that are applied to requests generated by this AuthenticationContext instance.\r\n * @instance\r\n * @memberOf AuthenticationContext\r\n * @type {object}\r\n * @name options\r\n */\n\nObject.defineProperty(AuthenticationContext.prototype, 'options', {\n  get: function () {\n    return this._callContext.options;\n  },\n  set: function (value) {\n    this._callContext.options = value;\n  }\n});\n/**\r\n * Get the token cache used by this AuthenticationContext instance.\r\n * @instance\r\n * @memberOf AuthenticationContext\r\n * @type {object}\r\n * @name cache\r\n */\n\nObject.defineProperty(AuthenticationContext.prototype, 'cache', {\n  get: function () {\n    return this._cache;\n  }\n});\n/**\r\n * This will be returned in case the OAuth 2 service returns an error.\r\n * @typedef ErrorResponse\r\n * @property {string} [error] A server error.\r\n * @property {string} [errorDescription] A description of the error returned.\r\n */\n\n/**\r\n * Contains tokens and metadata upon successful completion of an acquireToken call.\r\n * @typedef TokenResponse\r\n * @property {string} tokenType The type of token returned.\r\n * @property {string} accessToken The returned access token.\r\n * @property {string} [refreshToken] A refresh token.\r\n * @property {Date} [createdOn] The date on which the access token was created.\r\n * @property {Date} expiresOn The Date on which the access token expires.\r\n * @property {int} expiresIn The amount of time, in seconds, for which the token is valid.\r\n * @property {string} [userId] An id for the user.  May be a displayable value if is_user_id_displayable is true.\r\n * @property {bool}   [isUserIdDisplayable] Indicates whether the user_id property will be meaningful if displayed to a user.\r\n * @property {string} [tenantId] The identifier of the tenant under which the access token was issued.\r\n * @property {string} [givenName] The given name of the principal represented by the access token.\r\n * @property {string} [familyName] The family name of the principal represented by the access token.\r\n * @property {string} [identityProvider] Identifies the identity provider that issued the access token.\r\n */\n\n/**\r\n * This is the callback that is passed to all acquireToken variants below.\r\n * @callback AcquireTokenCallback\r\n * @param {Error}  [error]           If the request fails this parameter will contain an Error object.\r\n * @param {TokenResponse|ErrorResponse} [response]   On a succesful request returns a {@link TokenResposne}.\r\n */\n\n/**\r\n * This function implements code that is common to all acquireToken flows.\r\n * @private\r\n * @param {AcquireTokenCallback} callback\r\n * @param {Function} tokenFunction This is the function to call to actually acquire the token after common flow has completed.\r\n */\n\nAuthenticationContext.prototype._acquireToken = function (callback, tokenFunction) {\n  var self = this;\n  this._callContext._logContext = createLogContext(this.correlationId);\n\n  this._authority.validate(this._callContext, function (err) {\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    tokenFunction.call(self);\n  });\n};\n\nAuthenticationContext.prototype._acquireUserCode = function (callback, codeFunction) {\n  var self = this;\n  this._callContext._logContext = createLogContext(this.correlationId);\n\n  this._authority.validate(this._callContext, function (err) {\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    codeFunction.call(self);\n  });\n};\n/**\r\n * Gets a token for a given resource.\r\n * @param {string}   resource                            A URI that identifies the resource for which the token is valid.\r\n * @param {string}   [userId]                            The username of the user on behalf this application is authenticating.\r\n * @param {string}   [clientId]                          The OAuth client id of the calling application.\r\n * @param {AcquireTokenCallback}   callback              The callback function.\r\n */\n\n\nAuthenticationContext.prototype.acquireToken = function (resource, userId, clientId, callback) {\n  argument.validateCallbackType(callback);\n\n  try {\n    argument.validateStringParameter(resource, 'resource');\n    argument.validateStringParameter(clientId, 'clientId');\n  } catch (err) {\n    callback(err);\n    return;\n  }\n\n  this._acquireToken(callback, function () {\n    var tokenRequest = new TokenRequest(this._callContext, this, clientId, resource);\n    tokenRequest.getTokenFromCacheWithRefresh(userId, callback);\n  });\n};\n/**\r\n * Gets a token for a given resource.\r\n * @param {string}   resource                            A URI that identifies the resource for which the token is valid.\r\n * @param {string}   username                            The username of the user on behalf this application is authenticating.\r\n * @param {string}   password                            The password of the user named in the username parameter.\r\n * @param {string}   clientId                            The OAuth client id of the calling application.\r\n * @param {AcquireTokenCallback}   callback              The callback function.\r\n */\n\n\nAuthenticationContext.prototype.acquireTokenWithUsernamePassword = function (resource, username, password, clientId, callback) {\n  argument.validateCallbackType(callback);\n\n  try {\n    argument.validateStringParameter(resource, 'resource');\n    argument.validateStringParameter(username, 'username');\n    argument.validateStringParameter(password, 'password');\n    argument.validateStringParameter(clientId, 'clientId');\n  } catch (err) {\n    callback(err);\n    return;\n  }\n\n  this._acquireToken(callback, function () {\n    var tokenRequest = new TokenRequest(this._callContext, this, clientId, resource);\n    tokenRequest.getTokenWithUsernamePassword(username, password, callback);\n  });\n};\n/**\r\n * Gets a token for a given resource.\r\n * @param {string}   resource                            A URI that identifies the resource for which the token is valid.\r\n * @param {string}   clientId                            The OAuth client id of the calling application.\r\n * @param {string}   clientSecret                        The OAuth client secret of the calling application.\r\n * @param {AcquireTokenCallback}   callback              The callback function.\r\n */\n\n\nAuthenticationContext.prototype.acquireTokenWithClientCredentials = function (resource, clientId, clientSecret, callback) {\n  argument.validateCallbackType(callback);\n\n  try {\n    argument.validateStringParameter(resource, 'resource');\n    argument.validateStringParameter(clientId, 'clientId');\n    argument.validateStringParameter(clientSecret, 'clientSecret');\n  } catch (err) {\n    callback(err);\n    return;\n  }\n\n  this._acquireToken(callback, function () {\n    var tokenRequest = new TokenRequest(this._callContext, this, clientId, resource);\n    tokenRequest.getTokenWithClientCredentials(clientSecret, callback);\n  });\n};\n/**\r\n * Gets a token for a given resource.\r\n * @param {string}   authorizationCode                   An authorization code returned from a client.\r\n * @param {string}   redirectUri                         The redirect uri that was used in the authorize call.\r\n * @param {string}   resource                            A URI that identifies the resource for which the token is valid.\r\n * @param {string}   clientId                            The OAuth client id of the calling application.\r\n * @param {string}   clientSecret                        The OAuth client secret of the calling application.\r\n * @param {AcquireTokenCallback}   callback              The callback function.\r\n */\n\n\nAuthenticationContext.prototype.acquireTokenWithAuthorizationCode = function (authorizationCode, redirectUri, resource, clientId, clientSecret, callback) {\n  argument.validateCallbackType(callback);\n\n  try {\n    argument.validateStringParameter(resource, 'resource');\n    argument.validateStringParameter(authorizationCode, 'authorizationCode');\n    argument.validateStringParameter(redirectUri, 'redirectUri');\n    argument.validateStringParameter(clientId, 'clientId');\n  } catch (err) {\n    callback(err);\n    return;\n  }\n\n  this._acquireToken(callback, function () {\n    var tokenRequest = new TokenRequest(this._callContext, this, clientId, resource, redirectUri);\n    tokenRequest.getTokenWithAuthorizationCode(authorizationCode, clientSecret, callback);\n  });\n};\n/**\r\n * Gets a new access token via a previously issued refresh token.\r\n * @param  {string}   refreshToken                        A refresh token returned in a tokne response from a previous invocation of acquireToken.\r\n * @param  {string}   clientId                            The OAuth client id of the calling application.\r\n * @param  {string}   [clientSecret]                      The OAuth client secret of the calling application.  (Note: this parameter is a late addition.\r\n *                                                        This parameter may be ommitted entirely so that applications built before this change will continue\r\n *                                                        to work unchanged.)\r\n * @param  {string}   resource                            The OAuth resource for which a token is being request.  This parameter is optional and can be set to null.\r\n * @param  {AcquireTokenCallback}   callback              The callback function.\r\n */\n\n\nAuthenticationContext.prototype.acquireTokenWithRefreshToken = function (refreshToken, clientId, clientSecret, resource, callback) {\n  // Fix up the arguments.  Older clients may pass fewer arguments as the clientSecret paramter did not always exist.\n  // The code needs to make adjustments for those clients.\n  var clientSecretPresent = 5 === arguments.length;\n  var actualClientSecret = clientSecretPresent ? clientSecret : null;\n  var actualCallback = clientSecretPresent ? arguments[4] : arguments[3];\n  var actualResource = clientSecretPresent ? arguments[3] : arguments[2];\n  argument.validateCallbackType(actualCallback);\n\n  try {\n    argument.validateStringParameter(refreshToken, 'refreshToken');\n    argument.validateStringParameter(clientId, 'clientId');\n  } catch (err) {\n    callback(err);\n    return;\n  }\n\n  this._acquireToken(callback, function () {\n    var tokenRequest = new TokenRequest(this._callContext, this, clientId, actualResource);\n    tokenRequest.getTokenWithRefreshToken(refreshToken, actualClientSecret, actualCallback);\n  });\n};\n/**\r\n * Gets a new access token using via a certificate credential.\r\n * @param  {string}   resource                            A URI that identifies the resource for which the token is valid.\r\n * @param  {string}   clientId                            The OAuth client id of the calling application.\r\n * @param  {string}   certificate                         A PEM encoded certificate private key.\r\n * @param  {string}   thumbprint                          A hex encoded thumbprint of the certificate.\r\n * @param  {AcquireTokenCallback}   callback              The callback function.\r\n */\n\n\nAuthenticationContext.prototype.acquireTokenWithClientCertificate = function (resource, clientId, certificate, thumbprint, callback) {\n  argument.validateCallbackType(callback);\n\n  try {\n    argument.validateStringParameter(resource, 'resource');\n    argument.validateStringParameter(certificate, 'certificate');\n    argument.validateStringParameter(thumbprint, 'thumbprint');\n  } catch (err) {\n    callback(err);\n    return;\n  }\n\n  this._acquireToken(callback, function () {\n    var tokenRequest = new TokenRequest(this._callContext, this, clientId, resource);\n    tokenRequest.getTokenWithCertificate(certificate, thumbprint, callback);\n  });\n};\n/**\r\n * Gets the userCodeInfo which contains user_code, device_code for authenticating user on device. \r\n * @param  {string}   resource                            A URI that identifies the resource for which the device_code and user_code is valid for.\r\n * @param  {string}   clientId                            The OAuth client id of the calling application.\r\n * @param  {string}   language                            The language code specifying how the message should be localized to. \r\n * @param  {AcquireTokenCallback}   callback              The callback function.\r\n */\n\n\nAuthenticationContext.prototype.acquireUserCode = function (resource, clientId, language, callback) {\n  argument.validateCallbackType(callback);\n\n  try {\n    argument.validateStringParameter(resource, 'resource');\n    argument.validateStringParameter(clientId, 'clientId');\n  } catch (err) {\n    callback(err);\n    return;\n  }\n\n  this._acquireUserCode(callback, function () {\n    var codeRequest = new CodeRequest(this._callContext, this, clientId, resource);\n    codeRequest.getUserCodeInfo(language, callback);\n  });\n};\n/**\r\n * Gets a new access token using via a device code.\r\n * @note This method doesn't look up the cache, it only stores the returned token into cache. To look up cache before making a new request, \r\n *       please use acquireToken.  \r\n * @param  {string}   clientId                            The OAuth client id of the calling application.\r\n * @param  {object}   userCodeInfo                        Contains device_code, retry interval, and expire time for the request for get the token. \r\n * @param  {AcquireTokenCallback}   callback              The callback function.\r\n */\n\n\nAuthenticationContext.prototype.acquireTokenWithDeviceCode = function (resource, clientId, userCodeInfo, callback) {\n  argument.validateCallbackType(callback);\n\n  try {\n    argument.validateUserCodeInfo(userCodeInfo);\n  } catch (err) {\n    callback(err);\n    return;\n  }\n\n  var self = this;\n\n  this._acquireToken(callback, function () {\n    var tokenRequest = new TokenRequest(this._callContext, this, clientId, resource, null);\n    self._tokenRequestWithUserCode[userCodeInfo[constants.UserCodeResponseFields.DEVICE_CODE]] = tokenRequest;\n    tokenRequest.getTokenWithDeviceCode(userCodeInfo, callback);\n  });\n};\n/**\r\n * Cancels the polling request to get token with device code. \r\n * @param  {object}   userCodeInfo                        Contains device_code, retry interval, and expire time for the request for get the token. \r\n * @param  {AcquireTokenCallback}   callback              The callback function.\r\n */\n\n\nAuthenticationContext.prototype.cancelRequestToGetTokenWithDeviceCode = function (userCodeInfo, callback) {\n  argument.validateCallbackType(callback);\n\n  try {\n    argument.validateUserCodeInfo(userCodeInfo);\n  } catch (err) {\n    callback(err);\n    return;\n  }\n\n  if (!this._tokenRequestWithUserCode || !this._tokenRequestWithUserCode[userCodeInfo[constants.UserCodeResponseFields.DEVICE_CODE]]) {\n    callback(new Error('No acquireTokenWithDeviceCodeRequest existed to be cancelled'));\n    return;\n  }\n\n  var tokenRequestToBeCancelled = this._tokenRequestWithUserCode[userCodeInfo[constants.UserCodeResponseFields.DEVICE_CODE]];\n  tokenRequestToBeCancelled.cancelTokenRequestWithDeviceCode();\n  delete this._tokenRequestWithUserCode[constants.UserCodeResponseFields.DEVICE_CODE];\n};\n\nvar exports = {\n  AuthenticationContext: AuthenticationContext,\n  setGlobalADALOptions: function (options) {\n    globalADALOptions = options;\n  },\n  getGlobalADALOptions: function () {\n    return globalADALOptions;\n  }\n};\nutil.adalInit();\nmodule.exports = exports;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/adal-node/lib/authentication-context.js"],"names":["argument","require","Authority","TokenRequest","CodeRequest","createLogContext","MemoryCache","util","constants","globalADALOptions","globalCache","AuthenticationContext","authority","validateAuthority","cache","validate","undefined","_authority","_oauth2client","_correlationId","_callContext","options","_cache","_tokenRequestWithUserCode","Object","defineProperty","prototype","get","url","set","id","value","_acquireToken","callback","tokenFunction","self","_logContext","correlationId","err","call","_acquireUserCode","codeFunction","acquireToken","resource","userId","clientId","validateCallbackType","validateStringParameter","tokenRequest","getTokenFromCacheWithRefresh","acquireTokenWithUsernamePassword","username","password","getTokenWithUsernamePassword","acquireTokenWithClientCredentials","clientSecret","getTokenWithClientCredentials","acquireTokenWithAuthorizationCode","authorizationCode","redirectUri","getTokenWithAuthorizationCode","acquireTokenWithRefreshToken","refreshToken","clientSecretPresent","arguments","length","actualClientSecret","actualCallback","actualResource","getTokenWithRefreshToken","acquireTokenWithClientCertificate","certificate","thumbprint","getTokenWithCertificate","acquireUserCode","language","codeRequest","getUserCodeInfo","acquireTokenWithDeviceCode","userCodeInfo","validateUserCodeInfo","UserCodeResponseFields","DEVICE_CODE","getTokenWithDeviceCode","cancelRequestToGetTokenWithDeviceCode","Error","tokenRequestToBeCancelled","cancelTokenRequestWithDeviceCode","exports","setGlobalADALOptions","getGlobalADALOptions","adalInit","module"],"mappings":"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","sourcesContent":["/*\r\n * @copyright\r\n * Copyright Â© Microsoft Open Technologies, Inc.\r\n *\r\n * All Rights Reserved\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http: *www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS\r\n * OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION\r\n * ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A\r\n * PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.\r\n *\r\n * See the Apache License, Version 2.0 for the specific language\r\n * governing permissions and limitations under the License.\r\n */\r\n'use strict';\r\n\r\nvar argument = require('./argument');\r\nvar Authority = require('./authority').Authority;\r\nvar TokenRequest = require('./token-request');\r\nvar CodeRequest = require('./code-request');\r\nvar createLogContext = require('./log').createLogContext;\r\nvar MemoryCache = require('./memory-cache');\r\nvar util = require('./util');\r\nvar constants = require('./constants');\r\n\r\nvar globalADALOptions = {};\r\nvar globalCache = new MemoryCache();\r\n\r\n\r\n/**\r\n * This function is used to add or remove entries from a TokenCache\r\n * @typedef {function} ModifyCacheFunction\r\n * @param {Array} entries  An array of entries to either add or remove from the TokenCache\r\n * @param {function} callback A callback function to call when the add or remove operation is complete.\r\n *                            This function can take a single error argument.\r\n */\r\n\r\n/**\r\n * This function is called by a TokenCache when a find operation completes.\r\n * @callback TokenCacheFindCallback\r\n * @param {Error} [err] If an error occurred during the find operation then it should be passed here.\r\n * @param {Array} [entries] If the find operation was succesful then the matched entries should be returned here.\r\n */\r\n\r\n/**\r\n * This function is called by ADAL to query a TokenCache.  The query parameter is\r\n * a flat object which must be compared against entries in the cache. An entry\r\n * matches if it has all of the fields in the query and the values of those fields match\r\n * the values in the query. A matched object may have more fields than the query object.\r\n * @typedef {function} FindCacheFunction\r\n * @param {object}  query This object should be compared to cache entries and matches should be returned.\r\n * @param {TokenCacheFindCallback} callback This callback should be called when the find operation is complete.\r\n */\r\n\r\n/**\r\n * This is an interface that can be implemented to provide custom token cache persistence.\r\n * @public\r\n * @class TokenCache\r\n * @property {ModifyCacheFunction}  add Called by ADAL when entries should be added to the cache.\r\n * @property {ModifyCacheFunction}  remove Called by ADAL when entries should be removed from the cache.\r\n * @property {FindCacheFunction}    find Called when ADAL needs to find entries in the cache.\r\n */\r\n\r\n\r\n/**\r\n * Creates a new AuthenticationContext object.  By default the authority will be checked against\r\n * a list of known Azure Active Directory authorities.  If the authority is not recognized as\r\n * one of these well known authorities then token acquisition will fail.  This behavior can be\r\n * turned off via the validateAuthority parameter below.\r\n * @constructor\r\n * @param {string}  authority            A URL that identifies a token authority.\r\n * @param {bool}   [validateAuthority]   Turns authority validation on or off.  This parameter default to true.\r\n * @param {TokenCache}   [cache]         Sets the token cache used by this AuthenticationContext instance.  If this parameter is not set\r\n *                                       then a default, in memory cache is used.  The default in memory cache is global to the process and is\r\n *                                       shared by all AuthenticationContexts that are created with an empty cache parameter.  To control the\r\n *                                       scope and lifetime of a cache you can either create a {@link MemoryCache} instance and pass it when\r\n *                                       constructing an AuthenticationContext or implement a custom {@link TokenCache} and pass that.  Cache\r\n *                                       instances passed at AuthenticationContext construction time are only used by that instance of\r\n *                                       the AuthenticationContext and are not shared unless it has been manually passed during the\r\n *                                       construction of other AuthenticationContexts.\r\n *\r\n */\r\nfunction AuthenticationContext(authority, validateAuthority, cache) {\r\n  var validate = (validateAuthority === undefined || validateAuthority === null || validateAuthority);\r\n\r\n  this._authority = new Authority(authority, validate);\r\n  this._oauth2client = null;\r\n  this._correlationId = null;\r\n  this._callContext = { options : globalADALOptions };\r\n  this._cache = cache || globalCache;\r\n  this._tokenRequestWithUserCode = {};\r\n}\r\n\r\n/**\r\n * Gets the authority url this AuthenticationContext was constructed with.\r\n * @instance\r\n * @memberOf AuthenticationContext\r\n * @type {string}\r\n * @name authority\r\n */\r\nObject.defineProperty(AuthenticationContext.prototype, 'authority', {\r\n  get: function () {\r\n    return this._authority.url;\r\n  }\r\n});\r\n\r\n/**\r\n * Gets/Sets the correlation id that will be used for the next acquireToken request.\r\n * @instance\r\n * @memberOf AuthenticationContext\r\n * @type {string}\r\n * @name correlationId\r\n */\r\nObject.defineProperty(AuthenticationContext.prototype, 'correlationId', {\r\n  get: function () {\r\n    return this._correlationId;\r\n  },\r\n  set: function (id) {\r\n    this._correlationId = id;\r\n  }\r\n});\r\n\r\n/**\r\n * Get/Sets options that are applied to requests generated by this AuthenticationContext instance.\r\n * @instance\r\n * @memberOf AuthenticationContext\r\n * @type {object}\r\n * @name options\r\n */\r\nObject.defineProperty(AuthenticationContext.prototype, 'options', {\r\n  get: function() {\r\n    return this._callContext.options;\r\n  },\r\n  set: function (value) {\r\n    this._callContext.options = value;\r\n  }\r\n});\r\n\r\n/**\r\n * Get the token cache used by this AuthenticationContext instance.\r\n * @instance\r\n * @memberOf AuthenticationContext\r\n * @type {object}\r\n * @name cache\r\n */\r\nObject.defineProperty(AuthenticationContext.prototype, 'cache', {\r\n  get: function() {\r\n    return this._cache;\r\n  },\r\n});\r\n\r\n/**\r\n * This will be returned in case the OAuth 2 service returns an error.\r\n * @typedef ErrorResponse\r\n * @property {string} [error] A server error.\r\n * @property {string} [errorDescription] A description of the error returned.\r\n */\r\n\r\n/**\r\n * Contains tokens and metadata upon successful completion of an acquireToken call.\r\n * @typedef TokenResponse\r\n * @property {string} tokenType The type of token returned.\r\n * @property {string} accessToken The returned access token.\r\n * @property {string} [refreshToken] A refresh token.\r\n * @property {Date} [createdOn] The date on which the access token was created.\r\n * @property {Date} expiresOn The Date on which the access token expires.\r\n * @property {int} expiresIn The amount of time, in seconds, for which the token is valid.\r\n * @property {string} [userId] An id for the user.  May be a displayable value if is_user_id_displayable is true.\r\n * @property {bool}   [isUserIdDisplayable] Indicates whether the user_id property will be meaningful if displayed to a user.\r\n * @property {string} [tenantId] The identifier of the tenant under which the access token was issued.\r\n * @property {string} [givenName] The given name of the principal represented by the access token.\r\n * @property {string} [familyName] The family name of the principal represented by the access token.\r\n * @property {string} [identityProvider] Identifies the identity provider that issued the access token.\r\n */\r\n\r\n/**\r\n * This is the callback that is passed to all acquireToken variants below.\r\n * @callback AcquireTokenCallback\r\n * @param {Error}  [error]           If the request fails this parameter will contain an Error object.\r\n * @param {TokenResponse|ErrorResponse} [response]   On a succesful request returns a {@link TokenResposne}.\r\n */\r\n\r\n/**\r\n * This function implements code that is common to all acquireToken flows.\r\n * @private\r\n * @param {AcquireTokenCallback} callback\r\n * @param {Function} tokenFunction This is the function to call to actually acquire the token after common flow has completed.\r\n */\r\nAuthenticationContext.prototype._acquireToken = function(callback, tokenFunction) {\r\n  var self = this;\r\n  this._callContext._logContext = createLogContext(this.correlationId);\r\n  this._authority.validate(this._callContext, function(err) {\r\n    if (err) {\r\n      callback(err);\r\n      return;\r\n    }\r\n    tokenFunction.call(self);\r\n  });\r\n};\r\n\r\nAuthenticationContext.prototype._acquireUserCode = function (callback, codeFunction) { \r\n    var self = this;\r\n    this._callContext._logContext = createLogContext(this.correlationId);\r\n    this._authority.validate(this._callContext, function (err) { \r\n        if (err) { \r\n            callback(err);\r\n            return;\r\n        } \r\n\r\n        codeFunction.call(self);\r\n    });\r\n};\r\n\r\n/**\r\n * Gets a token for a given resource.\r\n * @param {string}   resource                            A URI that identifies the resource for which the token is valid.\r\n * @param {string}   [userId]                            The username of the user on behalf this application is authenticating.\r\n * @param {string}   [clientId]                          The OAuth client id of the calling application.\r\n * @param {AcquireTokenCallback}   callback              The callback function.\r\n */\r\nAuthenticationContext.prototype.acquireToken = function(resource, userId, clientId, callback) {\r\n  argument.validateCallbackType(callback);\r\n  try {\r\n    argument.validateStringParameter(resource, 'resource');\r\n    argument.validateStringParameter(clientId, 'clientId');\r\n  } catch(err) {\r\n    callback(err);\r\n    return;\r\n  }\r\n\r\n  this._acquireToken(callback, function() {\r\n    var tokenRequest = new TokenRequest(this._callContext, this, clientId, resource);\r\n    tokenRequest.getTokenFromCacheWithRefresh(userId, callback);\r\n  });\r\n};\r\n\r\n/**\r\n * Gets a token for a given resource.\r\n * @param {string}   resource                            A URI that identifies the resource for which the token is valid.\r\n * @param {string}   username                            The username of the user on behalf this application is authenticating.\r\n * @param {string}   password                            The password of the user named in the username parameter.\r\n * @param {string}   clientId                            The OAuth client id of the calling application.\r\n * @param {AcquireTokenCallback}   callback              The callback function.\r\n */\r\nAuthenticationContext.prototype.acquireTokenWithUsernamePassword = function(resource, username, password, clientId, callback)  {\r\n  argument.validateCallbackType(callback);\r\n  try {\r\n    argument.validateStringParameter(resource, 'resource');\r\n    argument.validateStringParameter(username, 'username');\r\n    argument.validateStringParameter(password, 'password');\r\n    argument.validateStringParameter(clientId, 'clientId');\r\n  } catch(err) {\r\n    callback(err);\r\n    return;\r\n  }\r\n\r\n  this._acquireToken(callback, function() {\r\n    var tokenRequest = new TokenRequest(this._callContext, this, clientId, resource);\r\n    tokenRequest.getTokenWithUsernamePassword(username, password, callback);\r\n  });\r\n};\r\n\r\n/**\r\n * Gets a token for a given resource.\r\n * @param {string}   resource                            A URI that identifies the resource for which the token is valid.\r\n * @param {string}   clientId                            The OAuth client id of the calling application.\r\n * @param {string}   clientSecret                        The OAuth client secret of the calling application.\r\n * @param {AcquireTokenCallback}   callback              The callback function.\r\n */\r\nAuthenticationContext.prototype.acquireTokenWithClientCredentials = function(resource, clientId, clientSecret, callback) {\r\n  argument.validateCallbackType(callback);\r\n  try {\r\n    argument.validateStringParameter(resource, 'resource');\r\n    argument.validateStringParameter(clientId, 'clientId');\r\n    argument.validateStringParameter(clientSecret, 'clientSecret');\r\n  } catch (err) {\r\n    callback(err);\r\n    return;\r\n  }\r\n\r\n  this._acquireToken(callback, function() {\r\n    var tokenRequest = new TokenRequest(this._callContext, this, clientId, resource);\r\n    tokenRequest.getTokenWithClientCredentials(clientSecret, callback);\r\n  });\r\n};\r\n\r\n/**\r\n * Gets a token for a given resource.\r\n * @param {string}   authorizationCode                   An authorization code returned from a client.\r\n * @param {string}   redirectUri                         The redirect uri that was used in the authorize call.\r\n * @param {string}   resource                            A URI that identifies the resource for which the token is valid.\r\n * @param {string}   clientId                            The OAuth client id of the calling application.\r\n * @param {string}   clientSecret                        The OAuth client secret of the calling application.\r\n * @param {AcquireTokenCallback}   callback              The callback function.\r\n */\r\nAuthenticationContext.prototype.acquireTokenWithAuthorizationCode = function(authorizationCode, redirectUri, resource, clientId, clientSecret, callback) {\r\n  argument.validateCallbackType(callback);\r\n  try {\r\n    argument.validateStringParameter(resource, 'resource');\r\n    argument.validateStringParameter(authorizationCode, 'authorizationCode');\r\n    argument.validateStringParameter(redirectUri, 'redirectUri');\r\n    argument.validateStringParameter(clientId, 'clientId');\r\n  } catch(err) {\r\n    callback(err);\r\n    return;\r\n  }\r\n\r\n  this._acquireToken(callback, function() {\r\n    var tokenRequest = new TokenRequest(this._callContext, this, clientId, resource, redirectUri);\r\n    tokenRequest.getTokenWithAuthorizationCode(authorizationCode, clientSecret, callback);\r\n  });\r\n};\r\n\r\n/**\r\n * Gets a new access token via a previously issued refresh token.\r\n * @param  {string}   refreshToken                        A refresh token returned in a tokne response from a previous invocation of acquireToken.\r\n * @param  {string}   clientId                            The OAuth client id of the calling application.\r\n * @param  {string}   [clientSecret]                      The OAuth client secret of the calling application.  (Note: this parameter is a late addition.\r\n *                                                        This parameter may be ommitted entirely so that applications built before this change will continue\r\n *                                                        to work unchanged.)\r\n * @param  {string}   resource                            The OAuth resource for which a token is being request.  This parameter is optional and can be set to null.\r\n * @param  {AcquireTokenCallback}   callback              The callback function.\r\n */\r\nAuthenticationContext.prototype.acquireTokenWithRefreshToken = function(refreshToken, clientId, clientSecret, resource, callback) {\r\n  // Fix up the arguments.  Older clients may pass fewer arguments as the clientSecret paramter did not always exist.\r\n  // The code needs to make adjustments for those clients.\r\n  var clientSecretPresent = (5 === arguments.length);\r\n  var actualClientSecret = clientSecretPresent ? clientSecret : null;\r\n  var actualCallback = clientSecretPresent ? arguments[4] : arguments[3];\r\n  var actualResource = clientSecretPresent ? arguments[3] : arguments[2];\r\n\r\n  argument.validateCallbackType(actualCallback);\r\n  try {\r\n    argument.validateStringParameter(refreshToken, 'refreshToken');\r\n    argument.validateStringParameter(clientId, 'clientId');\r\n  } catch(err) {\r\n    callback(err);\r\n    return;\r\n  }\r\n\r\n  this._acquireToken(callback, function() {\r\n    var tokenRequest = new TokenRequest(this._callContext, this, clientId, actualResource);\r\n    tokenRequest.getTokenWithRefreshToken(refreshToken, actualClientSecret, actualCallback);\r\n  });\r\n};\r\n\r\n/**\r\n * Gets a new access token using via a certificate credential.\r\n * @param  {string}   resource                            A URI that identifies the resource for which the token is valid.\r\n * @param  {string}   clientId                            The OAuth client id of the calling application.\r\n * @param  {string}   certificate                         A PEM encoded certificate private key.\r\n * @param  {string}   thumbprint                          A hex encoded thumbprint of the certificate.\r\n * @param  {AcquireTokenCallback}   callback              The callback function.\r\n */\r\nAuthenticationContext.prototype.acquireTokenWithClientCertificate = function(resource, clientId, certificate, thumbprint, callback) {\r\n  argument.validateCallbackType(callback);\r\n  try {\r\n    argument.validateStringParameter(resource, 'resource');\r\n    argument.validateStringParameter(certificate, 'certificate');\r\n    argument.validateStringParameter(thumbprint, 'thumbprint');\r\n  } catch(err) {\r\n    callback(err);\r\n    return;\r\n  }\r\n\r\n  this._acquireToken(callback, function() {\r\n    var tokenRequest = new TokenRequest(this._callContext, this, clientId, resource);\r\n    tokenRequest.getTokenWithCertificate(certificate, thumbprint, callback);\r\n  });\r\n};\r\n\r\n/**\r\n * Gets the userCodeInfo which contains user_code, device_code for authenticating user on device. \r\n * @param  {string}   resource                            A URI that identifies the resource for which the device_code and user_code is valid for.\r\n * @param  {string}   clientId                            The OAuth client id of the calling application.\r\n * @param  {string}   language                            The language code specifying how the message should be localized to. \r\n * @param  {AcquireTokenCallback}   callback              The callback function.\r\n */\r\nAuthenticationContext.prototype.acquireUserCode = function(resource, clientId, language, callback) { \r\n    argument.validateCallbackType(callback);\r\n    \r\n    try { \r\n        argument.validateStringParameter(resource, 'resource');\r\n        argument.validateStringParameter(clientId, 'clientId');\r\n    } catch (err) { \r\n        callback(err);\r\n        return;\r\n    }    \r\n\r\n    this._acquireUserCode(callback, function () { \r\n        var codeRequest = new CodeRequest(this._callContext, this, clientId, resource);\r\n        codeRequest.getUserCodeInfo(language, callback);   \r\n    });\r\n};\r\n\r\n/**\r\n * Gets a new access token using via a device code.\r\n * @note This method doesn't look up the cache, it only stores the returned token into cache. To look up cache before making a new request, \r\n *       please use acquireToken.  \r\n * @param  {string}   clientId                            The OAuth client id of the calling application.\r\n * @param  {object}   userCodeInfo                        Contains device_code, retry interval, and expire time for the request for get the token. \r\n * @param  {AcquireTokenCallback}   callback              The callback function.\r\n */\r\nAuthenticationContext.prototype.acquireTokenWithDeviceCode = function(resource, clientId, userCodeInfo, callback){\r\n    argument.validateCallbackType(callback);\r\n\r\n    try{\r\n       argument.validateUserCodeInfo(userCodeInfo);\r\n    } catch (err) {\r\n       callback(err);\r\n       return;\r\n    }\r\n\r\n    var self = this;\r\n    this._acquireToken(callback, function() {\r\n        var tokenRequest = new TokenRequest(this._callContext, this, clientId, resource, null);\r\n        self._tokenRequestWithUserCode[userCodeInfo[constants.UserCodeResponseFields.DEVICE_CODE]] = tokenRequest;\r\n        tokenRequest.getTokenWithDeviceCode(userCodeInfo, callback); \r\n    })\r\n};\r\n\r\n/**\r\n * Cancels the polling request to get token with device code. \r\n * @param  {object}   userCodeInfo                        Contains device_code, retry interval, and expire time for the request for get the token. \r\n * @param  {AcquireTokenCallback}   callback              The callback function.\r\n */\r\nAuthenticationContext.prototype.cancelRequestToGetTokenWithDeviceCode = function (userCodeInfo, callback) {\r\n    argument.validateCallbackType(callback);\r\n\r\n    try {\r\n       argument.validateUserCodeInfo(userCodeInfo);\r\n    } catch (err) {\r\n       callback(err);\r\n       return;\r\n    }\r\n\r\n    if (!this._tokenRequestWithUserCode || !this._tokenRequestWithUserCode[userCodeInfo[constants.UserCodeResponseFields.DEVICE_CODE]]) {\r\n       callback(new Error('No acquireTokenWithDeviceCodeRequest existed to be cancelled')); \r\n       return;\r\n    }\r\n\r\n    var tokenRequestToBeCancelled = this._tokenRequestWithUserCode[userCodeInfo[constants.UserCodeResponseFields.DEVICE_CODE]];\r\n    tokenRequestToBeCancelled.cancelTokenRequestWithDeviceCode();\r\n\r\n    delete this._tokenRequestWithUserCode[constants.UserCodeResponseFields.DEVICE_CODE];\r\n};\r\n\r\nvar exports = {\r\n  AuthenticationContext : AuthenticationContext,\r\n  setGlobalADALOptions : function(options) {\r\n    globalADALOptions = options;\r\n  },\r\n  getGlobalADALOptions : function() {\r\n    return globalADALOptions;\r\n  }\r\n};\r\n\r\nutil.adalInit();\r\nmodule.exports = exports;\r\n"]},"metadata":{},"sourceType":"script"}
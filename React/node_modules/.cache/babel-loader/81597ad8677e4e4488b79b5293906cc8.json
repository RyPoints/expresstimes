{"ast":null,"code":"'use strict';\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\nvar dns = require('dns');\n\nvar defaults = require('./defaults');\n\nvar parse = require('pg-connection-string').parse; // parses a connection string\n\n\nvar val = function (key, config, envVar) {\n  if (envVar === undefined) {\n    envVar = process.env['PG' + key.toUpperCase()];\n  } else if (envVar === false) {// do nothing ... use false\n  } else {\n    envVar = process.env[envVar];\n  }\n\n  return config[key] || envVar || defaults[key];\n};\n\nvar useSsl = function () {\n  switch (process.env.PGSSLMODE) {\n    case 'disable':\n      return false;\n\n    case 'prefer':\n    case 'require':\n    case 'verify-ca':\n    case 'verify-full':\n      return true;\n  }\n\n  return defaults.ssl;\n};\n\nvar ConnectionParameters = function (config) {\n  // if a string is passed, it is a raw connection string so we parse it into a config\n  config = typeof config === 'string' ? parse(config) : config || {}; // if the config has a connectionString defined, parse IT into the config we use\n  // this will override other default values with what is stored in connectionString\n\n  if (config.connectionString) {\n    config = Object.assign({}, config, parse(config.connectionString));\n  }\n\n  this.user = val('user', config);\n  this.database = val('database', config);\n  this.port = parseInt(val('port', config), 10);\n  this.host = val('host', config);\n  this.password = val('password', config);\n  this.binary = val('binary', config);\n  this.ssl = typeof config.ssl === 'undefined' ? useSsl() : config.ssl;\n  this.client_encoding = val('client_encoding', config);\n  this.replication = val('replication', config); // a domain socket begins with '/'\n\n  this.isDomainSocket = !(this.host || '').indexOf('/');\n  this.application_name = val('application_name', config, 'PGAPPNAME');\n  this.fallback_application_name = val('fallback_application_name', config, false);\n  this.statement_timeout = val('statement_timeout', config, false);\n  this.query_timeout = val('query_timeout', config, false);\n\n  if (config.connectionTimeoutMillis === undefined) {\n    this.connect_timeout = process.env.PGCONNECT_TIMEOUT || 0;\n  } else {\n    this.connect_timeout = Math.floor(config.connectionTimeoutMillis / 1000);\n  }\n\n  if (config.keepAlive === false) {\n    this.keepalives = 0;\n  } else if (config.keepAlive === true) {\n    this.keepalives = 1;\n  }\n\n  if (typeof config.keepAliveInitialDelayMillis === 'number') {\n    this.keepalives_idle = Math.floor(config.keepAliveInitialDelayMillis / 1000);\n  }\n}; // Convert arg to a string, surround in single quotes, and escape single quotes and backslashes\n\n\nvar quoteParamValue = function (value) {\n  return \"'\" + ('' + value).replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"\\\\'\") + \"'\";\n};\n\nvar add = function (params, config, paramName) {\n  var value = config[paramName];\n\n  if (value !== undefined && value !== null) {\n    params.push(paramName + '=' + quoteParamValue(value));\n  }\n};\n\nConnectionParameters.prototype.getLibpqConnectionString = function (cb) {\n  var params = [];\n  add(params, this, 'user');\n  add(params, this, 'password');\n  add(params, this, 'port');\n  add(params, this, 'application_name');\n  add(params, this, 'fallback_application_name');\n  add(params, this, 'connect_timeout');\n  var ssl = typeof this.ssl === 'object' ? this.ssl : this.ssl ? {\n    sslmode: this.ssl\n  } : {};\n  add(params, ssl, 'sslmode');\n  add(params, ssl, 'sslca');\n  add(params, ssl, 'sslkey');\n  add(params, ssl, 'sslcert');\n  add(params, ssl, 'sslrootcert');\n\n  if (this.database) {\n    params.push('dbname=' + quoteParamValue(this.database));\n  }\n\n  if (this.replication) {\n    params.push('replication=' + quoteParamValue(this.replication));\n  }\n\n  if (this.host) {\n    params.push('host=' + quoteParamValue(this.host));\n  }\n\n  if (this.isDomainSocket) {\n    return cb(null, params.join(' '));\n  }\n\n  if (this.client_encoding) {\n    params.push('client_encoding=' + quoteParamValue(this.client_encoding));\n  }\n\n  dns.lookup(this.host, function (err, address) {\n    if (err) return cb(err, null);\n    params.push('hostaddr=' + quoteParamValue(address));\n    return cb(null, params.join(' '));\n  });\n};\n\nmodule.exports = ConnectionParameters;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/pg/lib/connection-parameters.js"],"names":["dns","require","defaults","parse","val","key","config","envVar","undefined","process","env","toUpperCase","useSsl","PGSSLMODE","ssl","ConnectionParameters","connectionString","Object","assign","user","database","port","parseInt","host","password","binary","client_encoding","replication","isDomainSocket","indexOf","application_name","fallback_application_name","statement_timeout","query_timeout","connectionTimeoutMillis","connect_timeout","PGCONNECT_TIMEOUT","Math","floor","keepAlive","keepalives","keepAliveInitialDelayMillis","keepalives_idle","quoteParamValue","value","replace","add","params","paramName","push","prototype","getLibpqConnectionString","cb","sslmode","join","lookup","err","address","module","exports"],"mappings":"AAAA;AACA;;;;;;;;AAQA,IAAIA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAjB;;AAEA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,YAAD,CAAtB;;AAEA,IAAIE,KAAK,GAAGF,OAAO,CAAC,sBAAD,CAAP,CAAgCE,KAA5C,C,CAAkD;;;AAElD,IAAIC,GAAG,GAAG,UAAUC,GAAV,EAAeC,MAAf,EAAuBC,MAAvB,EAA+B;AACvC,MAAIA,MAAM,KAAKC,SAAf,EAA0B;AACxBD,IAAAA,MAAM,GAAGE,OAAO,CAACC,GAAR,CAAY,OAAOL,GAAG,CAACM,WAAJ,EAAnB,CAAT;AACD,GAFD,MAEO,IAAIJ,MAAM,KAAK,KAAf,EAAsB,CAC3B;AACD,GAFM,MAEA;AACLA,IAAAA,MAAM,GAAGE,OAAO,CAACC,GAAR,CAAYH,MAAZ,CAAT;AACD;;AAED,SAAOD,MAAM,CAACD,GAAD,CAAN,IACLE,MADK,IAELL,QAAQ,CAACG,GAAD,CAFV;AAGD,CAZD;;AAcA,IAAIO,MAAM,GAAG,YAAY;AACvB,UAAQH,OAAO,CAACC,GAAR,CAAYG,SAApB;AACE,SAAK,SAAL;AACE,aAAO,KAAP;;AACF,SAAK,QAAL;AACA,SAAK,SAAL;AACA,SAAK,WAAL;AACA,SAAK,aAAL;AACE,aAAO,IAAP;AAPJ;;AASA,SAAOX,QAAQ,CAACY,GAAhB;AACD,CAXD;;AAaA,IAAIC,oBAAoB,GAAG,UAAUT,MAAV,EAAkB;AAC3C;AACAA,EAAAA,MAAM,GAAG,OAAOA,MAAP,KAAkB,QAAlB,GAA6BH,KAAK,CAACG,MAAD,CAAlC,GAA6CA,MAAM,IAAI,EAAhE,CAF2C,CAI3C;AACA;;AACA,MAAIA,MAAM,CAACU,gBAAX,EAA6B;AAC3BV,IAAAA,MAAM,GAAGW,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBZ,MAAlB,EAA0BH,KAAK,CAACG,MAAM,CAACU,gBAAR,CAA/B,CAAT;AACD;;AAED,OAAKG,IAAL,GAAYf,GAAG,CAAC,MAAD,EAASE,MAAT,CAAf;AACA,OAAKc,QAAL,GAAgBhB,GAAG,CAAC,UAAD,EAAaE,MAAb,CAAnB;AACA,OAAKe,IAAL,GAAYC,QAAQ,CAAClB,GAAG,CAAC,MAAD,EAASE,MAAT,CAAJ,EAAsB,EAAtB,CAApB;AACA,OAAKiB,IAAL,GAAYnB,GAAG,CAAC,MAAD,EAASE,MAAT,CAAf;AACA,OAAKkB,QAAL,GAAgBpB,GAAG,CAAC,UAAD,EAAaE,MAAb,CAAnB;AACA,OAAKmB,MAAL,GAAcrB,GAAG,CAAC,QAAD,EAAWE,MAAX,CAAjB;AACA,OAAKQ,GAAL,GAAW,OAAOR,MAAM,CAACQ,GAAd,KAAsB,WAAtB,GAAoCF,MAAM,EAA1C,GAA+CN,MAAM,CAACQ,GAAjE;AACA,OAAKY,eAAL,GAAuBtB,GAAG,CAAC,iBAAD,EAAoBE,MAApB,CAA1B;AACA,OAAKqB,WAAL,GAAmBvB,GAAG,CAAC,aAAD,EAAgBE,MAAhB,CAAtB,CAlB2C,CAmB3C;;AACA,OAAKsB,cAAL,GAAuB,CAAC,CAAC,KAAKL,IAAL,IAAa,EAAd,EAAkBM,OAAlB,CAA0B,GAA1B,CAAxB;AAEA,OAAKC,gBAAL,GAAwB1B,GAAG,CAAC,kBAAD,EAAqBE,MAArB,EAA6B,WAA7B,CAA3B;AACA,OAAKyB,yBAAL,GAAiC3B,GAAG,CAAC,2BAAD,EAA8BE,MAA9B,EAAsC,KAAtC,CAApC;AACA,OAAK0B,iBAAL,GAAyB5B,GAAG,CAAC,mBAAD,EAAsBE,MAAtB,EAA8B,KAA9B,CAA5B;AACA,OAAK2B,aAAL,GAAqB7B,GAAG,CAAC,eAAD,EAAkBE,MAAlB,EAA0B,KAA1B,CAAxB;;AAEA,MAAIA,MAAM,CAAC4B,uBAAP,KAAmC1B,SAAvC,EAAkD;AAChD,SAAK2B,eAAL,GAAuB1B,OAAO,CAACC,GAAR,CAAY0B,iBAAZ,IAAiC,CAAxD;AACD,GAFD,MAEO;AACL,SAAKD,eAAL,GAAuBE,IAAI,CAACC,KAAL,CAAWhC,MAAM,CAAC4B,uBAAP,GAAiC,IAA5C,CAAvB;AACD;;AAED,MAAI5B,MAAM,CAACiC,SAAP,KAAqB,KAAzB,EAAgC;AAC9B,SAAKC,UAAL,GAAkB,CAAlB;AACD,GAFD,MAEO,IAAIlC,MAAM,CAACiC,SAAP,KAAqB,IAAzB,EAA+B;AACpC,SAAKC,UAAL,GAAkB,CAAlB;AACD;;AAED,MAAI,OAAOlC,MAAM,CAACmC,2BAAd,KAA8C,QAAlD,EAA4D;AAC1D,SAAKC,eAAL,GAAuBL,IAAI,CAACC,KAAL,CAAWhC,MAAM,CAACmC,2BAAP,GAAqC,IAAhD,CAAvB;AACD;AACF,CA1CD,C,CA4CA;;;AACA,IAAIE,eAAe,GAAG,UAAUC,KAAV,EAAiB;AACrC,SAAO,MAAM,CAAC,KAAKA,KAAN,EAAaC,OAAb,CAAqB,KAArB,EAA4B,MAA5B,EAAoCA,OAApC,CAA4C,IAA5C,EAAkD,KAAlD,CAAN,GAAiE,GAAxE;AACD,CAFD;;AAIA,IAAIC,GAAG,GAAG,UAAUC,MAAV,EAAkBzC,MAAlB,EAA0B0C,SAA1B,EAAqC;AAC7C,MAAIJ,KAAK,GAAGtC,MAAM,CAAC0C,SAAD,CAAlB;;AACA,MAAIJ,KAAK,KAAKpC,SAAV,IAAuBoC,KAAK,KAAK,IAArC,EAA2C;AACzCG,IAAAA,MAAM,CAACE,IAAP,CAAYD,SAAS,GAAG,GAAZ,GAAkBL,eAAe,CAACC,KAAD,CAA7C;AACD;AACF,CALD;;AAOA7B,oBAAoB,CAACmC,SAArB,CAA+BC,wBAA/B,GAA0D,UAAUC,EAAV,EAAc;AACtE,MAAIL,MAAM,GAAG,EAAb;AACAD,EAAAA,GAAG,CAACC,MAAD,EAAS,IAAT,EAAe,MAAf,CAAH;AACAD,EAAAA,GAAG,CAACC,MAAD,EAAS,IAAT,EAAe,UAAf,CAAH;AACAD,EAAAA,GAAG,CAACC,MAAD,EAAS,IAAT,EAAe,MAAf,CAAH;AACAD,EAAAA,GAAG,CAACC,MAAD,EAAS,IAAT,EAAe,kBAAf,CAAH;AACAD,EAAAA,GAAG,CAACC,MAAD,EAAS,IAAT,EAAe,2BAAf,CAAH;AACAD,EAAAA,GAAG,CAACC,MAAD,EAAS,IAAT,EAAe,iBAAf,CAAH;AAEA,MAAIjC,GAAG,GAAG,OAAO,KAAKA,GAAZ,KAAoB,QAApB,GAA+B,KAAKA,GAApC,GAA0C,KAAKA,GAAL,GAAW;AAAEuC,IAAAA,OAAO,EAAE,KAAKvC;AAAhB,GAAX,GAAmC,EAAvF;AACAgC,EAAAA,GAAG,CAACC,MAAD,EAASjC,GAAT,EAAc,SAAd,CAAH;AACAgC,EAAAA,GAAG,CAACC,MAAD,EAASjC,GAAT,EAAc,OAAd,CAAH;AACAgC,EAAAA,GAAG,CAACC,MAAD,EAASjC,GAAT,EAAc,QAAd,CAAH;AACAgC,EAAAA,GAAG,CAACC,MAAD,EAASjC,GAAT,EAAc,SAAd,CAAH;AACAgC,EAAAA,GAAG,CAACC,MAAD,EAASjC,GAAT,EAAc,aAAd,CAAH;;AAEA,MAAI,KAAKM,QAAT,EAAmB;AACjB2B,IAAAA,MAAM,CAACE,IAAP,CAAY,YAAYN,eAAe,CAAC,KAAKvB,QAAN,CAAvC;AACD;;AACD,MAAI,KAAKO,WAAT,EAAsB;AACpBoB,IAAAA,MAAM,CAACE,IAAP,CAAY,iBAAiBN,eAAe,CAAC,KAAKhB,WAAN,CAA5C;AACD;;AACD,MAAI,KAAKJ,IAAT,EAAe;AACbwB,IAAAA,MAAM,CAACE,IAAP,CAAY,UAAUN,eAAe,CAAC,KAAKpB,IAAN,CAArC;AACD;;AACD,MAAI,KAAKK,cAAT,EAAyB;AACvB,WAAOwB,EAAE,CAAC,IAAD,EAAOL,MAAM,CAACO,IAAP,CAAY,GAAZ,CAAP,CAAT;AACD;;AACD,MAAI,KAAK5B,eAAT,EAA0B;AACxBqB,IAAAA,MAAM,CAACE,IAAP,CAAY,qBAAqBN,eAAe,CAAC,KAAKjB,eAAN,CAAhD;AACD;;AACD1B,EAAAA,GAAG,CAACuD,MAAJ,CAAW,KAAKhC,IAAhB,EAAsB,UAAUiC,GAAV,EAAeC,OAAf,EAAwB;AAC5C,QAAID,GAAJ,EAAS,OAAOJ,EAAE,CAACI,GAAD,EAAM,IAAN,CAAT;AACTT,IAAAA,MAAM,CAACE,IAAP,CAAY,cAAcN,eAAe,CAACc,OAAD,CAAzC;AACA,WAAOL,EAAE,CAAC,IAAD,EAAOL,MAAM,CAACO,IAAP,CAAY,GAAZ,CAAP,CAAT;AACD,GAJD;AAKD,CApCD;;AAsCAI,MAAM,CAACC,OAAP,GAAiB5C,oBAAjB","sourcesContent":["'use strict'\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\nvar dns = require('dns')\n\nvar defaults = require('./defaults')\n\nvar parse = require('pg-connection-string').parse // parses a connection string\n\nvar val = function (key, config, envVar) {\n  if (envVar === undefined) {\n    envVar = process.env['PG' + key.toUpperCase()]\n  } else if (envVar === false) {\n    // do nothing ... use false\n  } else {\n    envVar = process.env[envVar]\n  }\n\n  return config[key] ||\n    envVar ||\n    defaults[key]\n}\n\nvar useSsl = function () {\n  switch (process.env.PGSSLMODE) {\n    case 'disable':\n      return false\n    case 'prefer':\n    case 'require':\n    case 'verify-ca':\n    case 'verify-full':\n      return true\n  }\n  return defaults.ssl\n}\n\nvar ConnectionParameters = function (config) {\n  // if a string is passed, it is a raw connection string so we parse it into a config\n  config = typeof config === 'string' ? parse(config) : config || {}\n\n  // if the config has a connectionString defined, parse IT into the config we use\n  // this will override other default values with what is stored in connectionString\n  if (config.connectionString) {\n    config = Object.assign({}, config, parse(config.connectionString))\n  }\n\n  this.user = val('user', config)\n  this.database = val('database', config)\n  this.port = parseInt(val('port', config), 10)\n  this.host = val('host', config)\n  this.password = val('password', config)\n  this.binary = val('binary', config)\n  this.ssl = typeof config.ssl === 'undefined' ? useSsl() : config.ssl\n  this.client_encoding = val('client_encoding', config)\n  this.replication = val('replication', config)\n  // a domain socket begins with '/'\n  this.isDomainSocket = (!(this.host || '').indexOf('/'))\n\n  this.application_name = val('application_name', config, 'PGAPPNAME')\n  this.fallback_application_name = val('fallback_application_name', config, false)\n  this.statement_timeout = val('statement_timeout', config, false)\n  this.query_timeout = val('query_timeout', config, false)\n\n  if (config.connectionTimeoutMillis === undefined) {\n    this.connect_timeout = process.env.PGCONNECT_TIMEOUT || 0\n  } else {\n    this.connect_timeout = Math.floor(config.connectionTimeoutMillis / 1000)\n  }\n\n  if (config.keepAlive === false) {\n    this.keepalives = 0\n  } else if (config.keepAlive === true) {\n    this.keepalives = 1\n  }\n\n  if (typeof config.keepAliveInitialDelayMillis === 'number') {\n    this.keepalives_idle = Math.floor(config.keepAliveInitialDelayMillis / 1000)\n  }\n}\n\n// Convert arg to a string, surround in single quotes, and escape single quotes and backslashes\nvar quoteParamValue = function (value) {\n  return \"'\" + ('' + value).replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"\\\\'\") + \"'\"\n}\n\nvar add = function (params, config, paramName) {\n  var value = config[paramName]\n  if (value !== undefined && value !== null) {\n    params.push(paramName + '=' + quoteParamValue(value))\n  }\n}\n\nConnectionParameters.prototype.getLibpqConnectionString = function (cb) {\n  var params = []\n  add(params, this, 'user')\n  add(params, this, 'password')\n  add(params, this, 'port')\n  add(params, this, 'application_name')\n  add(params, this, 'fallback_application_name')\n  add(params, this, 'connect_timeout')\n\n  var ssl = typeof this.ssl === 'object' ? this.ssl : this.ssl ? { sslmode: this.ssl } : {}\n  add(params, ssl, 'sslmode')\n  add(params, ssl, 'sslca')\n  add(params, ssl, 'sslkey')\n  add(params, ssl, 'sslcert')\n  add(params, ssl, 'sslrootcert')\n\n  if (this.database) {\n    params.push('dbname=' + quoteParamValue(this.database))\n  }\n  if (this.replication) {\n    params.push('replication=' + quoteParamValue(this.replication))\n  }\n  if (this.host) {\n    params.push('host=' + quoteParamValue(this.host))\n  }\n  if (this.isDomainSocket) {\n    return cb(null, params.join(' '))\n  }\n  if (this.client_encoding) {\n    params.push('client_encoding=' + quoteParamValue(this.client_encoding))\n  }\n  dns.lookup(this.host, function (err, address) {\n    if (err) return cb(err, null)\n    params.push('hostaddr=' + quoteParamValue(address))\n    return cb(null, params.join(' '))\n  })\n}\n\nmodule.exports = ConnectionParameters\n"]},"metadata":{},"sourceType":"script"}
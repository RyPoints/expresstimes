{"ast":null,"code":"'use strict';\n\nconst Promise = require('../../promise');\n\nconst AbstractQuery = require('../abstract/query');\n\nconst sequelizeErrors = require('../../errors');\n\nconst parserStore = require('../parserStore')('mssql');\n\nconst _ = require('lodash');\n\nconst _require = require('../../utils/logger'),\n      logger = _require.logger;\n\nconst debug = logger.debugContext('sql:mssql');\n\nclass Query extends AbstractQuery {\n  getInsertIdField() {\n    return 'id';\n  }\n\n  getSQLTypeFromJsType(value, TYPES) {\n    const paramType = {\n      type: TYPES.VarChar,\n      typeOptions: {}\n    };\n    paramType.type = TYPES.NVarChar;\n\n    if (typeof value === 'number') {\n      if (Number.isInteger(value)) {\n        if (value >= -2147483648 && value <= 2147483647) {\n          paramType.type = TYPES.Int;\n        } else {\n          paramType.type = TYPES.BigInt;\n        }\n      } else {\n        paramType.type = TYPES.Numeric; //Default to a reasonable numeric precision/scale pending more sophisticated logic\n\n        paramType.typeOptions = {\n          precision: 30,\n          scale: 15\n        };\n      }\n    }\n\n    if (Buffer.isBuffer(value)) {\n      paramType.type = TYPES.VarBinary;\n    }\n\n    return paramType;\n  }\n\n  _run(connection, sql, parameters) {\n    this.sql = sql;\n    const options = this.options;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    return new Promise((resolve, reject) => {\n      const handleTransaction = err => {\n        if (err) {\n          reject(this.formatError(err));\n          return;\n        }\n\n        resolve(this.formatResults());\n      }; // TRANSACTION SUPPORT\n\n\n      if (sql.startsWith('BEGIN TRANSACTION')) {\n        return connection.beginTransaction(handleTransaction, options.transaction.name, connection.lib.ISOLATION_LEVEL[options.isolationLevel]);\n      }\n\n      if (sql.startsWith('COMMIT TRANSACTION')) {\n        return connection.commitTransaction(handleTransaction);\n      }\n\n      if (sql.startsWith('ROLLBACK TRANSACTION')) {\n        return connection.rollbackTransaction(handleTransaction, options.transaction.name);\n      }\n\n      if (sql.startsWith('SAVE TRANSACTION')) {\n        return connection.saveTransaction(handleTransaction, options.transaction.name);\n      }\n\n      const results = [];\n      const request = new connection.lib.Request(sql, (err, rowCount) => {\n        complete();\n\n        if (err) {\n          err.sql = sql;\n          err.parameters = parameters;\n          reject(this.formatError(err));\n        } else {\n          resolve(this.formatResults(results, rowCount));\n        }\n      });\n\n      if (parameters) {\n        _.forOwn(parameters, (value, key) => {\n          const paramType = this.getSQLTypeFromJsType(value, connection.lib.TYPES);\n          request.addParameter(key, paramType.type, value, paramType.typeOptions);\n        });\n      }\n\n      request.on('row', columns => {\n        const row = {};\n\n        for (const column of columns) {\n          const typeid = column.metadata.type.id;\n          const parse = parserStore.get(typeid);\n          let value = column.value;\n\n          if (value !== null & !!parse) {\n            value = parse(value);\n          }\n\n          row[column.metadata.colName] = value;\n        }\n\n        results.push(row);\n      });\n      connection.execSql(request);\n    });\n  }\n\n  run(sql, parameters) {\n    return Promise.using(this.connection.lock(), connection => this._run(connection, sql, parameters));\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = {};\n\n    const replacementFunc = (match, key, values) => {\n      if (values[key] !== undefined) {\n        bindParam[key] = values[key];\n        return `@${key}`;\n      }\n\n      return undefined;\n    };\n\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam];\n  }\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   * @param {Array} data - The result of the query execution.\n   * @param {number} rowCount\n   * @private\n   * @example\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   */\n\n\n  formatResults(data, rowCount) {\n    let result = this.instance;\n\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        if (this.options.plain) {\n          // NOTE: super contrived. This just passes the newly added query-interface\n          //       test returning only the PK. There isn't a way in MSSQL to identify\n          //       that a given return value is the PK, and we have no schema information\n          //       because there was no calling Model.\n          const record = data[0];\n          result = record[Object.keys(record)[0]];\n        } else {\n          result = data;\n        }\n      }\n    }\n\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n\n    if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", '').replace(\"')\", '').replace(/'/g, '');\n        }\n\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === 'YES' ? true : false,\n          defaultValue: _result.Default,\n          primaryKey: _result.Constraint === 'PRIMARY KEY',\n          autoIncrement: _result.IsIdentity === 1,\n          comment: _result.Comment\n        };\n\n        if (result[_result.Name].type.includes('CHAR') && _result.Length) {\n          if (_result.Length === -1) {\n            result[_result.Name].type += '(MAX)';\n          } else {\n            result[_result.Name].type += `(${_result.Length})`;\n          }\n        }\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      return this.handleSelectQuery(data);\n    }\n\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n\n    if (this.isUpsertQuery()) {\n      return data[0];\n    }\n\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n\n    if (this.isBulkUpdateQuery()) {\n      return data.length;\n    }\n\n    if (this.isBulkDeleteQuery()) {\n      return data[0] && data[0].AFFECTEDROWS;\n    }\n\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, rowCount];\n    }\n\n    if (this.isShowConstraintsQuery()) {\n      return this.handleShowConstraintsQuery(data);\n    }\n\n    if (this.isRawQuery()) {\n      // MSSQL returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta\n      return [data, data];\n    }\n\n    return result;\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA\n      };\n    });\n  }\n\n  handleShowConstraintsQuery(data) {\n    //Convert snake_case keys to camelCase as it's generated by stored procedure\n    return data.slice(1).map(result => {\n      const constraint = {};\n\n      for (const key in result) {\n        constraint[_.camelCase(key)] = result[key];\n      }\n\n      return constraint;\n    });\n  }\n\n  formatError(err) {\n    let match;\n    match = err.message.match(/Violation of (?:UNIQUE|PRIMARY) KEY constraint '((.|\\s)*)'. Cannot insert duplicate key in object '.*'.(:? The duplicate key value is \\((.*)\\).)?/);\n    match = match || err.message.match(/Cannot insert duplicate key row in object .* with unique index '(.*)'/);\n\n    if (match && match.length > 1) {\n      let fields = {};\n      const uniqueKey = this.model && this.model.uniqueKeys[match[1]];\n      let message = 'Validation error';\n\n      if (uniqueKey && !!uniqueKey.msg) {\n        message = uniqueKey.msg;\n      }\n\n      if (match[4]) {\n        const values = match[4].split(',').map(part => part.trim());\n\n        if (uniqueKey) {\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[match[1]] = match[4];\n        }\n      }\n\n      const errors = [];\n\n      _.forOwn(fields, (value, field) => {\n        errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), 'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n        field, value, this.instance, 'not_unique'));\n      });\n\n      return new sequelizeErrors.UniqueConstraintError({\n        message,\n        errors,\n        parent: err,\n        fields\n      });\n    }\n\n    match = err.message.match(/Failed on step '(.*)'.Could not create constraint. See previous errors./) || err.message.match(/The DELETE statement conflicted with the REFERENCE constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./) || err.message.match(/The (?:INSERT|MERGE|UPDATE) statement conflicted with the FOREIGN KEY constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./);\n\n    if (match && match.length > 0) {\n      return new sequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        parent: err\n      });\n    }\n\n    match = err.message.match(/Could not drop constraint. See previous errors./);\n\n    if (match && match.length > 0) {\n      let constraint = err.sql.match(/(?:constraint|index) \\[(.+?)\\]/i);\n      constraint = constraint ? constraint[1] : undefined;\n      let table = err.sql.match(/table \\[(.+?)\\]/i);\n      table = table ? table[1] : undefined;\n      return new sequelizeErrors.UnknownConstraintError({\n        message: match[1],\n        constraint,\n        table,\n        parent: err\n      });\n    }\n\n    return new sequelizeErrors.DatabaseError(err);\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n    result = result || this.sql.toLowerCase().startsWith(\"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\");\n    result = result || this.sql.toLowerCase().startsWith('select tablename = t.name, name = ind.name,');\n    result = result || this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n    return result;\n  }\n\n  isShowIndexesQuery() {\n    return this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    data = data.reduce((acc, item) => {\n      if (!(item.index_name in acc)) {\n        acc[item.index_name] = item;\n        item.fields = [];\n      }\n\n      item.index_keys.split(',').forEach(column => {\n        let columnName = column.trim();\n\n        if (columnName.includes('(-)')) {\n          columnName = columnName.replace('(-)', '');\n        }\n\n        acc[item.index_name].fields.push({\n          attribute: columnName,\n          length: undefined,\n          order: column.includes('(-)') ? 'DESC' : 'ASC',\n          collate: undefined\n        });\n      });\n      delete item.index_keys;\n      return acc;\n    }, {});\n    return _.map(data, item => ({\n      primary: item.index_name.toLowerCase().startsWith('pk'),\n      fields: item.fields,\n      name: item.index_name,\n      tableName: undefined,\n      unique: item.index_description.toLowerCase().includes('unique'),\n      type: undefined\n    }));\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      let autoIncrementAttributeAlias = null;\n      if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute) && this.model.rawAttributes[autoIncrementAttribute].field !== undefined) autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\n      id = id || results && results[0][this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      id = id || results && results[0][autoIncrementAttribute];\n      id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\n      this.instance[autoIncrementAttribute] = id;\n    }\n  }\n\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/sequelize/lib/dialects/mssql/query.js"],"names":["Promise","require","AbstractQuery","sequelizeErrors","parserStore","_","logger","debug","debugContext","Query","getInsertIdField","getSQLTypeFromJsType","value","TYPES","paramType","type","VarChar","typeOptions","NVarChar","Number","isInteger","Int","BigInt","Numeric","precision","scale","Buffer","isBuffer","VarBinary","_run","connection","sql","parameters","options","complete","_logQuery","resolve","reject","handleTransaction","err","formatError","formatResults","startsWith","beginTransaction","transaction","name","lib","ISOLATION_LEVEL","isolationLevel","commitTransaction","rollbackTransaction","saveTransaction","results","request","Request","rowCount","forOwn","key","addParameter","on","columns","row","column","typeid","metadata","id","parse","get","colName","push","execSql","run","using","lock","formatBindParameters","values","dialect","bindParam","replacementFunc","match","undefined","data","result","instance","isInsertQuery","handleInsertQuery","plain","record","Object","keys","isShowTablesQuery","handleShowTablesQuery","isDescribeQuery","_result","Default","replace","Name","Type","toUpperCase","allowNull","IsNull","defaultValue","primaryKey","Constraint","autoIncrement","IsIdentity","comment","Comment","includes","Length","isSelectQuery","handleSelectQuery","isShowIndexesQuery","handleShowIndexesQuery","isUpsertQuery","isCallQuery","isBulkUpdateQuery","length","isBulkDeleteQuery","AFFECTEDROWS","isVersionQuery","version","isForeignKeysQuery","isUpdateQuery","isShowConstraintsQuery","handleShowConstraintsQuery","isRawQuery","map","resultSet","tableName","TABLE_NAME","schema","TABLE_SCHEMA","slice","constraint","camelCase","message","fields","uniqueKey","model","uniqueKeys","msg","split","part","trim","zipObject","errors","field","ValidationErrorItem","getUniqueConstraintErrorMessage","UniqueConstraintError","parent","ForeignKeyConstraintError","index","table","UnknownConstraintError","DatabaseError","isShowOrDescribeQuery","toLowerCase","reduce","acc","item","index_name","index_keys","forEach","columnName","attribute","order","collate","primary","unique","index_description","metaData","autoIncrementAttribute","autoIncrementAttributeAlias","prototype","hasOwnProperty","call","rawAttributes","module","exports","default"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Promise = require('../../promise');\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst parserStore = require('../parserStore')('mssql');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\n\nconst debug = logger.debugContext('sql:mssql');\n\nclass Query extends AbstractQuery {\n  getInsertIdField() {\n    return 'id';\n  }\n\n  getSQLTypeFromJsType(value, TYPES) {\n    const paramType = { type: TYPES.VarChar, typeOptions: {} };\n    paramType.type = TYPES.NVarChar;\n    if (typeof value === 'number') {\n      if (Number.isInteger(value)) {\n        if (value >= -2147483648 && value <= 2147483647) {\n          paramType.type = TYPES.Int;\n        } else {\n          paramType.type = TYPES.BigInt;\n        }\n      } else {\n        paramType.type = TYPES.Numeric;\n        //Default to a reasonable numeric precision/scale pending more sophisticated logic\n        paramType.typeOptions = { precision: 30, scale: 15 };\n      }\n    }\n    if (Buffer.isBuffer(value)) {\n      paramType.type = TYPES.VarBinary;\n    }\n    return paramType;\n  }\n\n  _run(connection, sql, parameters) {\n    this.sql = sql;\n    const { options } = this;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    return new Promise((resolve, reject) => {\n      const handleTransaction = err => {\n        if (err) {\n          reject(this.formatError(err));\n          return;\n        }\n        resolve(this.formatResults());\n      };\n      // TRANSACTION SUPPORT\n      if (sql.startsWith('BEGIN TRANSACTION')) {\n        return connection.beginTransaction(handleTransaction, options.transaction.name, connection.lib.ISOLATION_LEVEL[options.isolationLevel]);\n      }\n      if (sql.startsWith('COMMIT TRANSACTION')) {\n        return connection.commitTransaction(handleTransaction);\n      }\n      if (sql.startsWith('ROLLBACK TRANSACTION')) {\n        return connection.rollbackTransaction(handleTransaction, options.transaction.name);\n      }\n      if (sql.startsWith('SAVE TRANSACTION')) {\n        return connection.saveTransaction(handleTransaction, options.transaction.name);\n      }\n      const results = [];\n      const request = new connection.lib.Request(sql, (err, rowCount) => {\n\n        complete();\n\n        if (err) {\n          err.sql = sql;\n          err.parameters = parameters;\n          reject(this.formatError(err));\n        } else {\n          resolve(this.formatResults(results, rowCount));\n        }\n      });\n\n      if (parameters) {\n        _.forOwn(parameters, (value, key) => {\n          const paramType = this.getSQLTypeFromJsType(value, connection.lib.TYPES);\n          request.addParameter(key, paramType.type, value, paramType.typeOptions);\n        });\n      }\n\n      request.on('row', columns => {\n        const row = {};\n        for (const column of columns) {\n          const typeid = column.metadata.type.id;\n          const parse = parserStore.get(typeid);\n          let value = column.value;\n\n          if (value !== null & !!parse) {\n            value = parse(value);\n          }\n          row[column.metadata.colName] = value;\n        }\n\n        results.push(row);\n      });\n\n      connection.execSql(request);\n    });\n  }\n\n  run(sql, parameters) {\n    return Promise.using(this.connection.lock(), connection => this._run(connection, sql, parameters));\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = {};\n    const replacementFunc = (match, key, values) => {\n      if (values[key] !== undefined) {\n        bindParam[key] = values[key];\n        return `@${key}`;\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n\n    return [sql, bindParam];\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   * @param {Array} data - The result of the query execution.\n   * @param {number} rowCount\n   * @private\n   * @example\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   */\n  formatResults(data, rowCount) {\n    let result = this.instance;\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        if (this.options.plain) {\n          // NOTE: super contrived. This just passes the newly added query-interface\n          //       test returning only the PK. There isn't a way in MSSQL to identify\n          //       that a given return value is the PK, and we have no schema information\n          //       because there was no calling Model.\n          const record = data[0];\n          result = record[Object.keys(record)[0]];\n        } else {\n          result = data;\n        }\n      }\n    }\n\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n    if (this.isDescribeQuery()) {\n      result = {};\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", '').replace(\"')\", '').replace(/'/g, '');\n        }\n\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === 'YES' ? true : false,\n          defaultValue: _result.Default,\n          primaryKey: _result.Constraint === 'PRIMARY KEY',\n          autoIncrement: _result.IsIdentity === 1,\n          comment: _result.Comment\n        };\n\n        if (\n          result[_result.Name].type.includes('CHAR')\n          && _result.Length\n        ) {\n          if (_result.Length === -1) {\n            result[_result.Name].type += '(MAX)';\n          } else {\n            result[_result.Name].type += `(${_result.Length})`;\n          }\n        }\n\n      }\n    }\n    if (this.isSelectQuery()) {\n      return this.handleSelectQuery(data);\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isUpsertQuery()) {\n      return data[0];\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isBulkUpdateQuery()) {\n      return data.length;\n    }\n    if (this.isBulkDeleteQuery()) {\n      return data[0] && data[0].AFFECTEDROWS;\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, rowCount];\n    }\n    if (this.isShowConstraintsQuery()) {\n      return this.handleShowConstraintsQuery(data);\n    }\n    if (this.isRawQuery()) {\n      // MSSQL returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta\n      return [data, data];\n    }\n\n    return result;\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA\n      };\n    });\n  }\n\n  handleShowConstraintsQuery(data) {\n    //Convert snake_case keys to camelCase as it's generated by stored procedure\n    return data.slice(1).map(result => {\n      const constraint = {};\n      for (const key in result) {\n        constraint[_.camelCase(key)] = result[key];\n      }\n      return constraint;\n    });\n  }\n\n  formatError(err) {\n    let match;\n\n    match = err.message.match(/Violation of (?:UNIQUE|PRIMARY) KEY constraint '((.|\\s)*)'. Cannot insert duplicate key in object '.*'.(:? The duplicate key value is \\((.*)\\).)?/);\n    match = match || err.message.match(/Cannot insert duplicate key row in object .* with unique index '(.*)'/);\n    if (match && match.length > 1) {\n      let fields = {};\n      const uniqueKey = this.model && this.model.uniqueKeys[match[1]];\n      let message = 'Validation error';\n\n      if (uniqueKey && !!uniqueKey.msg) {\n        message = uniqueKey.msg;\n      }\n      if (match[4]) {\n        const values = match[4].split(',').map(part => part.trim());\n        if (uniqueKey) {\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[match[1]] = match[4];\n        }\n      }\n\n      const errors = [];\n      _.forOwn(fields, (value, field) => {\n        errors.push(new sequelizeErrors.ValidationErrorItem(\n          this.getUniqueConstraintErrorMessage(field),\n          'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n          field,\n          value,\n          this.instance,\n          'not_unique'\n        ));\n      });\n\n      return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields });\n    }\n\n    match = err.message.match(/Failed on step '(.*)'.Could not create constraint. See previous errors./) ||\n      err.message.match(/The DELETE statement conflicted with the REFERENCE constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./) ||\n      err.message.match(/The (?:INSERT|MERGE|UPDATE) statement conflicted with the FOREIGN KEY constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./);\n    if (match && match.length > 0) {\n      return new sequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        parent: err\n      });\n    }\n\n    match = err.message.match(/Could not drop constraint. See previous errors./);\n    if (match && match.length > 0) {\n      let constraint = err.sql.match(/(?:constraint|index) \\[(.+?)\\]/i);\n      constraint = constraint ? constraint[1] : undefined;\n      let table = err.sql.match(/table \\[(.+?)\\]/i);\n      table = table ? table[1] : undefined;\n\n      return new sequelizeErrors.UnknownConstraintError({\n        message: match[1],\n        constraint,\n        table,\n        parent: err\n      });\n    }\n\n    return new sequelizeErrors.DatabaseError(err);\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith(\"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\");\n    result = result || this.sql.toLowerCase().startsWith('select tablename = t.name, name = ind.name,');\n    result = result || this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n\n    return result;\n  }\n\n  isShowIndexesQuery() {\n    return this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    data = data.reduce((acc, item) => {\n      if (!(item.index_name in acc)) {\n        acc[item.index_name] = item;\n        item.fields = [];\n      }\n\n      item.index_keys.split(',').forEach(column => {\n        let columnName = column.trim();\n        if (columnName.includes('(-)')) {\n          columnName = columnName.replace('(-)', '');\n        }\n\n        acc[item.index_name].fields.push({\n          attribute: columnName,\n          length: undefined,\n          order: column.includes('(-)') ? 'DESC' : 'ASC',\n          collate: undefined\n        });\n      });\n      delete item.index_keys;\n      return acc;\n    }, {});\n\n    return _.map(data, item => ({\n      primary: item.index_name.toLowerCase().startsWith('pk'),\n      fields: item.fields,\n      name: item.index_name,\n      tableName: undefined,\n      unique: item.index_description.toLowerCase().includes('unique'),\n      type: undefined\n    }));\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      let autoIncrementAttributeAlias = null;\n\n      if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute) &&\n        this.model.rawAttributes[autoIncrementAttribute].field !== undefined)\n        autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\n\n      id = id || results && results[0][this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      id = id || results && results[0][autoIncrementAttribute];\n      id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\n\n      this.instance[autoIncrementAttribute] = id;\n    }\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"]},"metadata":{},"sourceType":"script"}
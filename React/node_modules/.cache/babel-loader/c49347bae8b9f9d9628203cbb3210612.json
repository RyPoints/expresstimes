{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst AbstractConnectionManager = require('../abstract/connection-manager');\n\nconst Utils = require('../../utils');\n\nconst debug = Utils.getLogger().debugContext('connection:pg');\n\nconst Promise = require('../../promise');\n\nconst sequelizeErrors = require('../../errors');\n\nconst semver = require('semver');\n\nconst dataTypes = require('../../data-types');\n\nconst moment = require('moment-timezone');\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    super(dialect, sequelize);\n    this.sequelize = sequelize;\n    this.sequelize.config.port = this.sequelize.config.port || 5432;\n\n    try {\n      let pgLib;\n\n      if (sequelize.config.dialectModulePath) {\n        pgLib = require(sequelize.config.dialectModulePath);\n      } else {\n        pgLib = require('pg');\n      }\n\n      this.lib = sequelize.config.native ? pgLib.native : pgLib;\n    } catch (err) {\n      if (err.code === 'MODULE_NOT_FOUND') {\n        throw new Error('Please install \\'' + (sequelize.config.dialectModulePath || 'pg') + '\\' module manually');\n      }\n\n      throw err;\n    }\n\n    this._clearTypeParser();\n\n    this.refreshTypeParser(dataTypes.postgres);\n  } // Expose this as a method so that the parsing may be updated when the user has added additional, custom types\n\n\n  _refreshTypeParser(dataType) {\n    if (dataType.types.postgres.oids) {\n      for (const oid of dataType.types.postgres.oids) {\n        this.oidMap[oid] = value => dataType.parse(value, oid, this.lib.types.getTypeParser);\n      }\n    }\n\n    if (dataType.types.postgres.array_oids) {\n      for (const oid of dataType.types.postgres.array_oids) {\n        this.arrayOidMap[oid] = value => {\n          return this.lib.types.arrayParser.create(value, v => dataType.parse(v, oid, this.lib.types.getTypeParser)).parse();\n        };\n      }\n    }\n  }\n\n  _clearTypeParser() {\n    this.oidMap = {};\n    this.arrayOidMap = {};\n  }\n\n  getTypeParser(oid) {\n    if (this.oidMap[oid]) {\n      return this.oidMap[oid];\n    } else if (this.arrayOidMap[oid]) {\n      return this.arrayOidMap[oid];\n    }\n\n    return this.lib.types.getTypeParser.apply(undefined, arguments);\n  }\n\n  connect(config) {\n    config.user = config.username;\n\n    const connectionConfig = _.pick(config, ['user', 'password', 'host', 'database', 'port']);\n\n    connectionConfig.types = {\n      getTypeParser: ConnectionManager.prototype.getTypeParser.bind(this)\n    };\n\n    if (config.dialectOptions) {\n      _.merge(connectionConfig, _.pick(config.dialectOptions, [// see [http://www.postgresql.org/docs/9.3/static/runtime-config-logging.html#GUC-APPLICATION-NAME]\n      'application_name', // choose the SSL mode with the PGSSLMODE environment variable\n      // object format: [https://github.com/brianc/node-postgres/blob/master/lib/connection.js#L79]\n      // see also [http://www.postgresql.org/docs/9.3/static/libpq-ssl.html]\n      'ssl', // In addition to the values accepted by the corresponding server,\n      // you can use \"auto\" to determine the right encoding from the\n      // current locale in the client (LC_CTYPE environment variable on Unix systems)\n      'client_encoding', // !! DONT SET THIS TO TRUE !!\n      // (unless you know what you're doing)\n      // see [http://www.postgresql.org/message-id/flat/bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com#bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com]\n      'binary', // This should help with backends incorrectly considering idle clients to be dead and prematurely disconnecting them.\n      // this feature has been added in pg module v6.0.0, check pg/CHANGELOG.md\n      'keepAlive', // Times out queries after a set time in milliseconds. Added in pg v7.3\n      'statement_timeout']));\n    }\n\n    return new Promise((resolve, reject) => {\n      const connection = new this.lib.Client(connectionConfig);\n      let responded = false;\n      connection.connect(err => {\n        if (err) {\n          if (err.code) {\n            switch (err.code) {\n              case 'ECONNREFUSED':\n                reject(new sequelizeErrors.ConnectionRefusedError(err));\n                break;\n\n              case 'ENOTFOUND':\n                reject(new sequelizeErrors.HostNotFoundError(err));\n                break;\n\n              case 'EHOSTUNREACH':\n                reject(new sequelizeErrors.HostNotReachableError(err));\n                break;\n\n              case 'EINVAL':\n                reject(new sequelizeErrors.InvalidConnectionError(err));\n                break;\n\n              default:\n                reject(new sequelizeErrors.ConnectionError(err));\n                break;\n            }\n          } else {\n            reject(new sequelizeErrors.ConnectionError(err));\n          }\n\n          return;\n        }\n\n        responded = true;\n        debug('connection acquired');\n        resolve(connection);\n      }); // If we didn't ever hear from the client.connect() callback the connection timeout, node-postgres does not treat this as an error since no active query was ever emitted\n\n      connection.on('end', () => {\n        debug('connection timeout');\n\n        if (!responded) {\n          reject(new sequelizeErrors.ConnectionTimedOutError(new Error('Connection timed out')));\n        }\n      }); // Don't let a Postgres restart (or error) to take down the whole app\n\n      connection.on('error', err => {\n        debug(`connection error ${err.code}`);\n        connection._invalid = true;\n      });\n    }).tap(connection => {\n      // Disable escape characters in strings, see https://github.com/sequelize/sequelize/issues/3545\n      let query = '';\n\n      if (this.sequelize.options.databaseVersion !== 0 && semver.gte(this.sequelize.options.databaseVersion, '8.2.0')) {\n        query += 'SET standard_conforming_strings=on;';\n      }\n\n      if (!this.sequelize.config.keepDefaultTimezone) {\n        const isZone = !!moment.tz.zone(this.sequelize.options.timezone);\n\n        if (isZone) {\n          query += 'SET client_min_messages TO warning; SET TIME ZONE \\'' + this.sequelize.options.timezone + '\\';';\n        } else {\n          query += 'SET client_min_messages TO warning; SET TIME ZONE INTERVAL \\'' + this.sequelize.options.timezone + '\\' HOUR TO MINUTE;';\n        }\n      }\n\n      if (query) {\n        return connection.query(query);\n      }\n    }).tap(connection => {\n      if (dataTypes.GEOGRAPHY.types.postgres.oids.length === 0 && dataTypes.GEOMETRY.types.postgres.oids.length === 0 && dataTypes.HSTORE.types.postgres.oids.length === 0 && dataTypes.ENUM.types.postgres.oids.length === 0) {\n        return this._refreshDynamicOIDs(connection);\n      }\n    });\n  }\n\n  disconnect(connection) {\n    return new Promise(resolve => {\n      connection.end();\n      resolve();\n    });\n  }\n\n  validate(connection) {\n    return connection._invalid === undefined;\n  }\n\n  _refreshDynamicOIDs(connection) {\n    const databaseVersion = this.sequelize.options.databaseVersion;\n    const supportedVersion = '8.3.0'; // Check for supported version\n\n    if ((databaseVersion && semver.gte(databaseVersion, supportedVersion)) === false) {\n      return Promise.resolve();\n    } // Refresh dynamic OIDs for some types\n    // These include, Geometry / HStore / Enum\n\n\n    return (connection || this.sequelize).query(\"SELECT typname, typtype, oid, typarray FROM pg_type WHERE (typtype = 'b' AND typname IN ('hstore', 'geometry', 'geography')) OR (typtype = 'e')\").then(results => {\n      let result = Array.isArray(results) ? results.pop() : results; // When searchPath is prepended then two statements are executed and the result is\n      // an array of those two statements. First one is the SET search_path and second is\n      // the SELECT query result.\n\n      if (Array.isArray(result)) {\n        if (result[0].command === 'SET') {\n          result = result.pop();\n        }\n      } // Reset OID mapping for dynamic type\n\n\n      [dataTypes.postgres.GEOMETRY, dataTypes.postgres.HSTORE, dataTypes.postgres.GEOGRAPHY, dataTypes.postgres.ENUM].forEach(type => {\n        type.types.postgres.oids = [];\n        type.types.postgres.array_oids = [];\n      });\n\n      for (const row of result.rows) {\n        let type;\n\n        if (row.typname === 'geometry') {\n          type = dataTypes.postgres.GEOMETRY;\n        } else if (row.typname === 'hstore') {\n          type = dataTypes.postgres.HSTORE;\n        } else if (row.typname === 'geography') {\n          type = dataTypes.postgres.GEOGRAPHY;\n        } else if (row.typtype === 'e') {\n          type = dataTypes.postgres.ENUM;\n        }\n\n        type.types.postgres.oids.push(row.oid);\n        type.types.postgres.array_oids.push(row.typarray);\n      }\n\n      this.refreshTypeParser(dataTypes.postgres);\n    });\n  }\n\n}\n\n_.extend(ConnectionManager.prototype, AbstractConnectionManager.prototype);\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/sequelize/lib/dialects/postgres/connection-manager.js"],"names":["_","require","AbstractConnectionManager","Utils","debug","getLogger","debugContext","Promise","sequelizeErrors","semver","dataTypes","moment","ConnectionManager","constructor","dialect","sequelize","config","port","pgLib","dialectModulePath","lib","native","err","code","Error","_clearTypeParser","refreshTypeParser","postgres","_refreshTypeParser","dataType","types","oids","oid","oidMap","value","parse","getTypeParser","array_oids","arrayOidMap","arrayParser","create","v","apply","undefined","arguments","connect","user","username","connectionConfig","pick","prototype","bind","dialectOptions","merge","resolve","reject","connection","Client","responded","ConnectionRefusedError","HostNotFoundError","HostNotReachableError","InvalidConnectionError","ConnectionError","on","ConnectionTimedOutError","_invalid","tap","query","options","databaseVersion","gte","keepDefaultTimezone","isZone","tz","zone","timezone","GEOGRAPHY","length","GEOMETRY","HSTORE","ENUM","_refreshDynamicOIDs","disconnect","end","validate","supportedVersion","then","results","result","Array","isArray","pop","command","forEach","type","row","rows","typname","typtype","push","typarray","extend","module","exports","default"],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst Utils = require('../../utils');\nconst debug = Utils.getLogger().debugContext('connection:pg');\nconst Promise = require('../../promise');\nconst sequelizeErrors = require('../../errors');\nconst semver = require('semver');\nconst dataTypes = require('../../data-types');\nconst moment = require('moment-timezone');\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    super(dialect, sequelize);\n\n    this.sequelize = sequelize;\n    this.sequelize.config.port = this.sequelize.config.port || 5432;\n    try {\n      let pgLib;\n      if (sequelize.config.dialectModulePath) {\n        pgLib = require(sequelize.config.dialectModulePath);\n      } else {\n        pgLib = require('pg');\n      }\n      this.lib = sequelize.config.native ? pgLib.native : pgLib;\n    } catch (err) {\n      if (err.code === 'MODULE_NOT_FOUND') {\n        throw new Error('Please install \\'' + (sequelize.config.dialectModulePath || 'pg') + '\\' module manually');\n      }\n      throw err;\n    }\n\n    this._clearTypeParser();\n    this.refreshTypeParser(dataTypes.postgres);\n  }\n\n  // Expose this as a method so that the parsing may be updated when the user has added additional, custom types\n  _refreshTypeParser(dataType) {\n    if (dataType.types.postgres.oids) {\n      for (const oid of dataType.types.postgres.oids) {\n        this.oidMap[oid] = value => dataType.parse(value, oid, this.lib.types.getTypeParser);\n      }\n    }\n\n    if (dataType.types.postgres.array_oids) {\n      for (const oid of dataType.types.postgres.array_oids) {\n        this.arrayOidMap[oid] = value => {\n          return this.lib.types.arrayParser.create(value, v =>\n            dataType.parse(v, oid, this.lib.types.getTypeParser)\n          ).parse();\n        };\n      }\n    }\n  }\n\n  _clearTypeParser() {\n    this.oidMap = {};\n    this.arrayOidMap = {};\n  }\n\n  getTypeParser(oid) {\n    if (this.oidMap[oid]) {\n      return this.oidMap[oid];\n    } else if (this.arrayOidMap[oid]) {\n      return this.arrayOidMap[oid];\n    }\n\n    return this.lib.types.getTypeParser.apply(undefined, arguments);\n  }\n\n  connect(config) {\n    config.user = config.username;\n    const connectionConfig = _.pick(config, [\n      'user', 'password', 'host', 'database', 'port'\n    ]);\n\n    connectionConfig.types = {\n      getTypeParser: ConnectionManager.prototype.getTypeParser.bind(this)\n    };\n\n    if (config.dialectOptions) {\n      _.merge(connectionConfig,\n        _.pick(config.dialectOptions, [\n        // see [http://www.postgresql.org/docs/9.3/static/runtime-config-logging.html#GUC-APPLICATION-NAME]\n          'application_name',\n          // choose the SSL mode with the PGSSLMODE environment variable\n          // object format: [https://github.com/brianc/node-postgres/blob/master/lib/connection.js#L79]\n          // see also [http://www.postgresql.org/docs/9.3/static/libpq-ssl.html]\n          'ssl',\n          // In addition to the values accepted by the corresponding server,\n          // you can use \"auto\" to determine the right encoding from the\n          // current locale in the client (LC_CTYPE environment variable on Unix systems)\n          'client_encoding',\n          // !! DONT SET THIS TO TRUE !!\n          // (unless you know what you're doing)\n          // see [http://www.postgresql.org/message-id/flat/bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com#bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com]\n          'binary',\n          // This should help with backends incorrectly considering idle clients to be dead and prematurely disconnecting them.\n          // this feature has been added in pg module v6.0.0, check pg/CHANGELOG.md\n          'keepAlive',\n          // Times out queries after a set time in milliseconds. Added in pg v7.3\n          'statement_timeout'\n        ]));\n    }\n\n    return new Promise((resolve, reject) => {\n      const connection = new this.lib.Client(connectionConfig);\n      let responded = false;\n\n      connection.connect(err => {\n        if (err) {\n          if (err.code) {\n            switch (err.code) {\n              case 'ECONNREFUSED':\n                reject(new sequelizeErrors.ConnectionRefusedError(err));\n                break;\n              case 'ENOTFOUND':\n                reject(new sequelizeErrors.HostNotFoundError(err));\n                break;\n              case 'EHOSTUNREACH':\n                reject(new sequelizeErrors.HostNotReachableError(err));\n                break;\n              case 'EINVAL':\n                reject(new sequelizeErrors.InvalidConnectionError(err));\n                break;\n              default:\n                reject(new sequelizeErrors.ConnectionError(err));\n                break;\n            }\n          } else {\n            reject(new sequelizeErrors.ConnectionError(err));\n          }\n          return;\n        }\n        responded = true;\n        debug('connection acquired');\n        resolve(connection);\n      });\n\n      // If we didn't ever hear from the client.connect() callback the connection timeout, node-postgres does not treat this as an error since no active query was ever emitted\n      connection.on('end', () => {\n        debug('connection timeout');\n        if (!responded) {\n          reject(new sequelizeErrors.ConnectionTimedOutError(new Error('Connection timed out')));\n        }\n      });\n\n      // Don't let a Postgres restart (or error) to take down the whole app\n      connection.on('error', err => {\n        debug(`connection error ${err.code}`);\n        connection._invalid = true;\n      });\n    }).tap(connection => {\n      // Disable escape characters in strings, see https://github.com/sequelize/sequelize/issues/3545\n      let query = '';\n\n      if (this.sequelize.options.databaseVersion !== 0 && semver.gte(this.sequelize.options.databaseVersion, '8.2.0')) {\n        query += 'SET standard_conforming_strings=on;';\n      }\n\n      if (!this.sequelize.config.keepDefaultTimezone) {\n        const isZone = !!moment.tz.zone(this.sequelize.options.timezone);\n        if (isZone) {\n          query += 'SET client_min_messages TO warning; SET TIME ZONE \\'' + this.sequelize.options.timezone + '\\';';\n        } else {\n          query += 'SET client_min_messages TO warning; SET TIME ZONE INTERVAL \\'' + this.sequelize.options.timezone + '\\' HOUR TO MINUTE;';\n        }\n      }\n\n      if (query) {\n        return connection.query(query);\n      }\n    }).tap(connection => {\n      if (\n        dataTypes.GEOGRAPHY.types.postgres.oids.length === 0 &&\n        dataTypes.GEOMETRY.types.postgres.oids.length === 0 &&\n        dataTypes.HSTORE.types.postgres.oids.length === 0 &&\n        dataTypes.ENUM.types.postgres.oids.length === 0\n      ) {\n        return this._refreshDynamicOIDs(connection);\n      }\n    });\n  }\n\n  disconnect(connection) {\n    return new Promise(resolve => {\n      connection.end();\n      resolve();\n    });\n  }\n\n  validate(connection) {\n    return connection._invalid === undefined;\n  }\n\n  _refreshDynamicOIDs(connection) {\n    const databaseVersion = this.sequelize.options.databaseVersion;\n    const supportedVersion = '8.3.0';\n\n    // Check for supported version\n    if ( (databaseVersion && semver.gte(databaseVersion, supportedVersion)) === false) {\n      return Promise.resolve();\n    }\n\n    // Refresh dynamic OIDs for some types\n    // These include, Geometry / HStore / Enum\n    return (connection || this.sequelize).query(\n      \"SELECT typname, typtype, oid, typarray FROM pg_type WHERE (typtype = 'b' AND typname IN ('hstore', 'geometry', 'geography')) OR (typtype = 'e')\"\n    ).then(results => {\n      let result = Array.isArray(results) ? results.pop() : results;\n\n      // When searchPath is prepended then two statements are executed and the result is\n      // an array of those two statements. First one is the SET search_path and second is\n      // the SELECT query result.\n      if (Array.isArray(result)) {\n        if (result[0].command === 'SET') {\n          result = result.pop();\n        }\n      }\n\n      // Reset OID mapping for dynamic type\n      [\n        dataTypes.postgres.GEOMETRY,\n        dataTypes.postgres.HSTORE,\n        dataTypes.postgres.GEOGRAPHY,\n        dataTypes.postgres.ENUM\n      ].forEach(type => {\n        type.types.postgres.oids = [];\n        type.types.postgres.array_oids = [];\n      });\n\n      for (const row of result.rows) {\n        let type;\n\n        if (row.typname === 'geometry') {\n          type = dataTypes.postgres.GEOMETRY;\n        } else if (row.typname === 'hstore') {\n          type = dataTypes.postgres.HSTORE;\n        } else if (row.typname === 'geography') {\n          type = dataTypes.postgres.GEOGRAPHY;\n        } else if (row.typtype === 'e') {\n          type = dataTypes.postgres.ENUM;\n        }\n\n        type.types.postgres.oids.push(row.oid);\n        type.types.postgres.array_oids.push(row.typarray);\n      }\n\n      this.refreshTypeParser(dataTypes.postgres);\n    });\n  }\n}\n\n_.extend(ConnectionManager.prototype, AbstractConnectionManager.prototype);\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"]},"metadata":{},"sourceType":"script"}
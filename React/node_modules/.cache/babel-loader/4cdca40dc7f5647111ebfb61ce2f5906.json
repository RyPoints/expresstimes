{"ast":null,"code":"\"use strict\";\n\nconst PoolDefaults = require(\"./PoolDefaults\");\n\nclass PoolOptions {\n  /**\n   * @param {Object} opts\n   *   configuration for the pool\n   * @param {Number} [opts.max=null]\n   *   Maximum number of items that can exist at the same time.  Default: 1.\n   *   Any further acquire requests will be pushed to the waiting list.\n   * @param {Number} [opts.min=null]\n   *   Minimum number of items in pool (including in-use). Default: 0.\n   *   When the pool is created, or a resource destroyed, this minimum will\n   *   be checked. If the pool resource count is below the minimum, a new\n   *   resource will be created and added to the pool.\n   * @param {Number} [opts.maxWaitingClients=null]\n   *   maximum number of queued requests allowed after which acquire calls will be rejected\n   * @param {Boolean} [opts.testOnBorrow=false]\n   *   should the pool validate resources before giving them to clients. Requires that\n   *   `factory.validate` is specified.\n   * @param {Boolean} [opts.testOnReturn=false]\n   *   should the pool validate resources before returning them to the pool.\n   * @param {Number} [opts.acquireTimeoutMillis=null]\n   *   Delay in milliseconds after which the an `acquire` call will fail. optional.\n   *   Default: undefined. Should be positive and non-zero\n   * @param {Number} [opts.priorityRange=1]\n   *   The range from 1 to be treated as a valid priority\n   * @param {Boolean} [opts.fifo=true]\n   *   Sets whether the pool has LIFO (last in, first out) behaviour with respect to idle objects.\n   *   if false then pool has FIFO behaviour\n   * @param {Boolean} [opts.autostart=true]\n   *   Should the pool start creating resources etc once the constructor is called\n   * @param {Number} [opts.evictionRunIntervalMillis=0]\n   *   How often to run eviction checks.  Default: 0 (does not run).\n   * @param {Number} [opts.numTestsPerEvictionRun=3]\n   *   Number of resources to check each eviction run.  Default: 3.\n   * @param {Number} [opts.softIdleTimeoutMillis=-1]\n   *   amount of time an object may sit idle in the pool before it is eligible\n   *   for eviction by the idle object evictor (if any), with the extra condition\n   *   that at least \"min idle\" object instances remain in the pool. Default -1 (nothing can get evicted)\n   * @param {Number} [opts.idleTimeoutMillis=30000]\n   *   the minimum amount of time that an object may sit idle in the pool before it is eligible for eviction\n   *   due to idle time. Supercedes \"softIdleTimeoutMillis\" Default: 30000\n   * @param {typeof Promise} [opts.Promise=Promise]\n   *   What promise implementation should the pool use, defaults to native promises.\n   */\n  constructor(opts) {\n    const poolDefaults = new PoolDefaults();\n    opts = opts || {};\n    this.fifo = typeof opts.fifo === \"boolean\" ? opts.fifo : poolDefaults.fifo;\n    this.priorityRange = opts.priorityRange || poolDefaults.priorityRange;\n    this.testOnBorrow = typeof opts.testOnBorrow === \"boolean\" ? opts.testOnBorrow : poolDefaults.testOnBorrow;\n    this.testOnReturn = typeof opts.testOnReturn === \"boolean\" ? opts.testOnReturn : poolDefaults.testOnReturn;\n    this.autostart = typeof opts.autostart === \"boolean\" ? opts.autostart : poolDefaults.autostart;\n\n    if (opts.acquireTimeoutMillis) {\n      // @ts-ignore\n      this.acquireTimeoutMillis = parseInt(opts.acquireTimeoutMillis, 10);\n    }\n\n    if (opts.maxWaitingClients !== undefined) {\n      // @ts-ignore\n      this.maxWaitingClients = parseInt(opts.maxWaitingClients, 10);\n    } // @ts-ignore\n\n\n    this.max = parseInt(opts.max, 10); // @ts-ignore\n\n    this.min = parseInt(opts.min, 10);\n    this.max = Math.max(isNaN(this.max) ? 1 : this.max, 1);\n    this.min = Math.min(isNaN(this.min) ? 0 : this.min, this.max);\n    this.evictionRunIntervalMillis = opts.evictionRunIntervalMillis || poolDefaults.evictionRunIntervalMillis;\n    this.numTestsPerEvictionRun = opts.numTestsPerEvictionRun || poolDefaults.numTestsPerEvictionRun;\n    this.softIdleTimeoutMillis = opts.softIdleTimeoutMillis || poolDefaults.softIdleTimeoutMillis;\n    this.idleTimeoutMillis = opts.idleTimeoutMillis || poolDefaults.idleTimeoutMillis;\n    this.Promise = opts.Promise != null ? opts.Promise : poolDefaults.Promise;\n  }\n\n}\n\nmodule.exports = PoolOptions;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/generic-pool/lib/PoolOptions.js"],"names":["PoolDefaults","require","PoolOptions","constructor","opts","poolDefaults","fifo","priorityRange","testOnBorrow","testOnReturn","autostart","acquireTimeoutMillis","parseInt","maxWaitingClients","undefined","max","min","Math","isNaN","evictionRunIntervalMillis","numTestsPerEvictionRun","softIdleTimeoutMillis","idleTimeoutMillis","Promise","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAA5B;;AAEA,MAAMC,WAAN,CAAkB;AAChB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CAC,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChB,UAAMC,YAAY,GAAG,IAAIL,YAAJ,EAArB;AAEAI,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AAEA,SAAKE,IAAL,GAAY,OAAOF,IAAI,CAACE,IAAZ,KAAqB,SAArB,GAAiCF,IAAI,CAACE,IAAtC,GAA6CD,YAAY,CAACC,IAAtE;AACA,SAAKC,aAAL,GAAqBH,IAAI,CAACG,aAAL,IAAsBF,YAAY,CAACE,aAAxD;AAEA,SAAKC,YAAL,GACE,OAAOJ,IAAI,CAACI,YAAZ,KAA6B,SAA7B,GACIJ,IAAI,CAACI,YADT,GAEIH,YAAY,CAACG,YAHnB;AAIA,SAAKC,YAAL,GACE,OAAOL,IAAI,CAACK,YAAZ,KAA6B,SAA7B,GACIL,IAAI,CAACK,YADT,GAEIJ,YAAY,CAACI,YAHnB;AAKA,SAAKC,SAAL,GACE,OAAON,IAAI,CAACM,SAAZ,KAA0B,SAA1B,GACIN,IAAI,CAACM,SADT,GAEIL,YAAY,CAACK,SAHnB;;AAKA,QAAIN,IAAI,CAACO,oBAAT,EAA+B;AAC7B;AACA,WAAKA,oBAAL,GAA4BC,QAAQ,CAACR,IAAI,CAACO,oBAAN,EAA4B,EAA5B,CAApC;AACD;;AAED,QAAIP,IAAI,CAACS,iBAAL,KAA2BC,SAA/B,EAA0C;AACxC;AACA,WAAKD,iBAAL,GAAyBD,QAAQ,CAACR,IAAI,CAACS,iBAAN,EAAyB,EAAzB,CAAjC;AACD,KA9Be,CAgChB;;;AACA,SAAKE,GAAL,GAAWH,QAAQ,CAACR,IAAI,CAACW,GAAN,EAAW,EAAX,CAAnB,CAjCgB,CAkChB;;AACA,SAAKC,GAAL,GAAWJ,QAAQ,CAACR,IAAI,CAACY,GAAN,EAAW,EAAX,CAAnB;AAEA,SAAKD,GAAL,GAAWE,IAAI,CAACF,GAAL,CAASG,KAAK,CAAC,KAAKH,GAAN,CAAL,GAAkB,CAAlB,GAAsB,KAAKA,GAApC,EAAyC,CAAzC,CAAX;AACA,SAAKC,GAAL,GAAWC,IAAI,CAACD,GAAL,CAASE,KAAK,CAAC,KAAKF,GAAN,CAAL,GAAkB,CAAlB,GAAsB,KAAKA,GAApC,EAAyC,KAAKD,GAA9C,CAAX;AAEA,SAAKI,yBAAL,GACEf,IAAI,CAACe,yBAAL,IAAkCd,YAAY,CAACc,yBADjD;AAEA,SAAKC,sBAAL,GACEhB,IAAI,CAACgB,sBAAL,IAA+Bf,YAAY,CAACe,sBAD9C;AAEA,SAAKC,qBAAL,GACEjB,IAAI,CAACiB,qBAAL,IAA8BhB,YAAY,CAACgB,qBAD7C;AAEA,SAAKC,iBAAL,GACElB,IAAI,CAACkB,iBAAL,IAA0BjB,YAAY,CAACiB,iBADzC;AAGA,SAAKC,OAAL,GAAenB,IAAI,CAACmB,OAAL,IAAgB,IAAhB,GAAuBnB,IAAI,CAACmB,OAA5B,GAAsClB,YAAY,CAACkB,OAAlE;AACD;;AA7Fe;;AAgGlBC,MAAM,CAACC,OAAP,GAAiBvB,WAAjB","sourcesContent":["\"use strict\";\n\nconst PoolDefaults = require(\"./PoolDefaults\");\n\nclass PoolOptions {\n  /**\n   * @param {Object} opts\n   *   configuration for the pool\n   * @param {Number} [opts.max=null]\n   *   Maximum number of items that can exist at the same time.  Default: 1.\n   *   Any further acquire requests will be pushed to the waiting list.\n   * @param {Number} [opts.min=null]\n   *   Minimum number of items in pool (including in-use). Default: 0.\n   *   When the pool is created, or a resource destroyed, this minimum will\n   *   be checked. If the pool resource count is below the minimum, a new\n   *   resource will be created and added to the pool.\n   * @param {Number} [opts.maxWaitingClients=null]\n   *   maximum number of queued requests allowed after which acquire calls will be rejected\n   * @param {Boolean} [opts.testOnBorrow=false]\n   *   should the pool validate resources before giving them to clients. Requires that\n   *   `factory.validate` is specified.\n   * @param {Boolean} [opts.testOnReturn=false]\n   *   should the pool validate resources before returning them to the pool.\n   * @param {Number} [opts.acquireTimeoutMillis=null]\n   *   Delay in milliseconds after which the an `acquire` call will fail. optional.\n   *   Default: undefined. Should be positive and non-zero\n   * @param {Number} [opts.priorityRange=1]\n   *   The range from 1 to be treated as a valid priority\n   * @param {Boolean} [opts.fifo=true]\n   *   Sets whether the pool has LIFO (last in, first out) behaviour with respect to idle objects.\n   *   if false then pool has FIFO behaviour\n   * @param {Boolean} [opts.autostart=true]\n   *   Should the pool start creating resources etc once the constructor is called\n   * @param {Number} [opts.evictionRunIntervalMillis=0]\n   *   How often to run eviction checks.  Default: 0 (does not run).\n   * @param {Number} [opts.numTestsPerEvictionRun=3]\n   *   Number of resources to check each eviction run.  Default: 3.\n   * @param {Number} [opts.softIdleTimeoutMillis=-1]\n   *   amount of time an object may sit idle in the pool before it is eligible\n   *   for eviction by the idle object evictor (if any), with the extra condition\n   *   that at least \"min idle\" object instances remain in the pool. Default -1 (nothing can get evicted)\n   * @param {Number} [opts.idleTimeoutMillis=30000]\n   *   the minimum amount of time that an object may sit idle in the pool before it is eligible for eviction\n   *   due to idle time. Supercedes \"softIdleTimeoutMillis\" Default: 30000\n   * @param {typeof Promise} [opts.Promise=Promise]\n   *   What promise implementation should the pool use, defaults to native promises.\n   */\n  constructor(opts) {\n    const poolDefaults = new PoolDefaults();\n\n    opts = opts || {};\n\n    this.fifo = typeof opts.fifo === \"boolean\" ? opts.fifo : poolDefaults.fifo;\n    this.priorityRange = opts.priorityRange || poolDefaults.priorityRange;\n\n    this.testOnBorrow =\n      typeof opts.testOnBorrow === \"boolean\"\n        ? opts.testOnBorrow\n        : poolDefaults.testOnBorrow;\n    this.testOnReturn =\n      typeof opts.testOnReturn === \"boolean\"\n        ? opts.testOnReturn\n        : poolDefaults.testOnReturn;\n\n    this.autostart =\n      typeof opts.autostart === \"boolean\"\n        ? opts.autostart\n        : poolDefaults.autostart;\n\n    if (opts.acquireTimeoutMillis) {\n      // @ts-ignore\n      this.acquireTimeoutMillis = parseInt(opts.acquireTimeoutMillis, 10);\n    }\n\n    if (opts.maxWaitingClients !== undefined) {\n      // @ts-ignore\n      this.maxWaitingClients = parseInt(opts.maxWaitingClients, 10);\n    }\n\n    // @ts-ignore\n    this.max = parseInt(opts.max, 10);\n    // @ts-ignore\n    this.min = parseInt(opts.min, 10);\n\n    this.max = Math.max(isNaN(this.max) ? 1 : this.max, 1);\n    this.min = Math.min(isNaN(this.min) ? 0 : this.min, this.max);\n\n    this.evictionRunIntervalMillis =\n      opts.evictionRunIntervalMillis || poolDefaults.evictionRunIntervalMillis;\n    this.numTestsPerEvictionRun =\n      opts.numTestsPerEvictionRun || poolDefaults.numTestsPerEvictionRun;\n    this.softIdleTimeoutMillis =\n      opts.softIdleTimeoutMillis || poolDefaults.softIdleTimeoutMillis;\n    this.idleTimeoutMillis =\n      opts.idleTimeoutMillis || poolDefaults.idleTimeoutMillis;\n\n    this.Promise = opts.Promise != null ? opts.Promise : poolDefaults.Promise;\n  }\n}\n\nmodule.exports = PoolOptions;\n"]},"metadata":{},"sourceType":"script"}
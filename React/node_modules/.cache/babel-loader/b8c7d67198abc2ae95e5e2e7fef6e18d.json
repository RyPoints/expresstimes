{"ast":null,"code":"'use strict';\n\nconst Utils = require('../../utils');\n\nconst AbstractQuery = require('../abstract/query');\n\nconst sequelizeErrors = require('../../errors');\n\nconst _ = require('lodash');\n\nconst _require = require('../../utils/logger'),\n      logger = _require.logger;\n\nconst debug = logger.debugContext('sql:mysql');\n\nclass Query extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super(connection, sequelize, Object.assign({\n      showWarnings: false\n    }, options));\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n\n    const replacementFunc = (match, key, values) => {\n      if (values[key] !== undefined) {\n        bindParam.push(values[key]);\n        return '?';\n      }\n\n      return undefined;\n    };\n\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : undefined];\n  }\n\n  run(sql, parameters) {\n    this.sql = sql;\n    const connection = this.connection,\n          options = this.options; //do we need benchmark for this query execution\n\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    return new Utils.Promise((resolve, reject) => {\n      const handler = (err, results) => {\n        complete();\n\n        if (err) {\n          // MySQL automatically rolls-back transactions in the event of a deadlock\n          if (options.transaction && err.errno === 1213) {\n            options.transaction.finished = 'rollback';\n          }\n\n          err.sql = sql;\n          err.parameters = parameters;\n          reject(this.formatError(err));\n        } else {\n          resolve(results);\n        }\n      };\n\n      if (parameters) {\n        debug('parameters(%j)', parameters);\n        connection.execute(sql, parameters, handler).setMaxListeners(100);\n      } else {\n        connection.query({\n          sql\n        }, handler).setMaxListeners(100);\n      }\n    }) // Log warnings if we've got them.\n    .then(results => {\n      if (showWarnings && results && results.warningStatus > 0) {\n        return this.logWarnings(results);\n      }\n\n      return results;\n    }) // Return formatted results...\n    .then(results => this.formatResults(results));\n  }\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @private\n   */\n\n\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        // handle bulkCreate AI primiary key\n        if (data.constructor.name === 'ResultSetHeader' && this.model && this.model.autoIncrementAttribute && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute && this.model.rawAttributes[this.model.primaryKeyAttribute]) {\n          const startId = data[this.getInsertIdField()];\n          result = [];\n\n          for (let i = startId; i < startId + data.affectedRows; i++) {\n            result.push({\n              [this.model.rawAttributes[this.model.primaryKeyAttribute].field]: i\n            });\n          }\n        } else {\n          result = data[this.getInsertIdField()];\n        }\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      return this.handleSelectQuery(data);\n    }\n\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n\n    if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        const enumRegex = /^enum/i;\n        result[_result.Field] = {\n          type: enumRegex.test(_result.Type) ? _result.Type.replace(enumRegex, 'ENUM') : _result.Type.toUpperCase(),\n          allowNull: _result.Null === 'YES',\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === 'PRI',\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, 'Extra') && _result.Extra.toLowerCase() === 'auto_increment',\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n\n      return result;\n    }\n\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery() || this.isUpsertQuery()) {\n      return data.affectedRows;\n    }\n\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n\n    if (this.isShowConstraintsQuery()) {\n      return data;\n    }\n\n    if (this.isRawQuery()) {\n      // MySQL returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta\n      return [data, data];\n    }\n\n    return result;\n  }\n\n  logWarnings(results) {\n    return this.run('SHOW WARNINGS').then(warningResults => {\n      const warningMessage = `MySQL Warnings (${this.connection.uuid || 'default'}): `;\n      const messages = [];\n\n      for (const _warningRow of warningResults) {\n        if (_warningRow === undefined || typeof _warningRow[Symbol.iterator] !== 'function') continue;\n\n        for (const _warningResult of _warningRow) {\n          if (Object.prototype.hasOwnProperty.call(_warningResult, 'Message')) {\n            messages.push(_warningResult.Message);\n          } else {\n            for (const _objectKey of _warningResult.keys()) {\n              messages.push([_objectKey, _warningResult[_objectKey]].join(': '));\n            }\n          }\n        }\n      }\n\n      this.sequelize.log(warningMessage + messages.join('; '), this.options);\n      return results;\n    });\n  }\n\n  formatError(err) {\n    const errCode = err.errno || err.code;\n\n    switch (errCode) {\n      case 1062:\n        {\n          const match = err.message.match(/Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?$/);\n          let fields = {};\n          let message = 'Validation error';\n          const values = match ? match[1].split('-') : undefined;\n          const fieldKey = match ? match[2] : undefined;\n          const fieldVal = match ? match[1] : undefined;\n          const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n\n          if (uniqueKey) {\n            if (uniqueKey.msg) message = uniqueKey.msg;\n            fields = _.zipObject(uniqueKey.fields, values);\n          } else {\n            fields[fieldKey] = fieldVal;\n          }\n\n          const errors = [];\n\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), 'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field, value, this.instance, 'not_unique'));\n          });\n\n          return new sequelizeErrors.UniqueConstraintError({\n            message,\n            errors,\n            parent: err,\n            fields\n          });\n        }\n\n      case 1451:\n      case 1452:\n        {\n          // e.g. CONSTRAINT `example_constraint_name` FOREIGN KEY (`example_id`) REFERENCES `examples` (`id`)\n          const match = err.message.match(/CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/);\n          const quoteChar = match ? match[1] : '`';\n          const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : undefined;\n          return new sequelizeErrors.ForeignKeyConstraintError({\n            reltype: String(errCode) === '1451' ? 'parent' : 'child',\n            table: match ? match[4] : undefined,\n            fields,\n            value: fields && fields.length && this.instance && this.instance[fields[0]] || undefined,\n            index: match ? match[2] : undefined,\n            parent: err\n          });\n        }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err);\n    }\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    data = data.reduce((acc, item) => {\n      if (!(item.Key_name in acc)) {\n        acc[item.Key_name] = item;\n        item.fields = [];\n      }\n\n      acc[item.Key_name].fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || undefined,\n        order: item.Collation === 'A' ? 'ASC' : undefined\n      };\n      delete item.column_name;\n      return acc;\n    }, {});\n    return _.map(data, item => ({\n      primary: item.Key_name === 'PRIMARY',\n      fields: item.fields,\n      name: item.Key_name,\n      tableName: item.Table,\n      unique: item.Non_unique !== 1,\n      type: item.Index_type\n    }));\n  }\n\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/sequelize/lib/dialects/mysql/query.js"],"names":["Utils","require","AbstractQuery","sequelizeErrors","_","logger","debug","debugContext","Query","constructor","connection","sequelize","options","Object","assign","showWarnings","formatBindParameters","sql","values","dialect","bindParam","replacementFunc","match","key","undefined","push","length","run","parameters","complete","_logQuery","Promise","resolve","reject","handler","err","results","transaction","errno","finished","formatError","execute","setMaxListeners","query","then","warningStatus","logWarnings","formatResults","data","result","instance","isInsertQuery","handleInsertQuery","name","model","autoIncrementAttribute","primaryKeyAttribute","rawAttributes","startId","getInsertIdField","i","affectedRows","field","isSelectQuery","handleSelectQuery","isShowTablesQuery","handleShowTablesQuery","isDescribeQuery","_result","enumRegex","Field","type","test","Type","replace","toUpperCase","allowNull","Null","defaultValue","Default","primaryKey","Key","autoIncrement","prototype","hasOwnProperty","call","Extra","toLowerCase","comment","Comment","isShowIndexesQuery","handleShowIndexesQuery","isCallQuery","isBulkUpdateQuery","isBulkDeleteQuery","isUpsertQuery","isVersionQuery","version","isForeignKeysQuery","isUpdateQuery","isShowConstraintsQuery","isRawQuery","warningResults","warningMessage","uuid","messages","_warningRow","Symbol","iterator","_warningResult","Message","_objectKey","keys","join","log","errCode","code","message","fields","split","fieldKey","fieldVal","uniqueKey","uniqueKeys","msg","zipObject","errors","forOwn","value","ValidationErrorItem","getUniqueConstraintErrorMessage","UniqueConstraintError","parent","quoteChar","RegExp","ForeignKeyConstraintError","reltype","String","table","index","DatabaseError","reduce","acc","item","Key_name","Seq_in_index","attribute","Column_name","Sub_part","order","Collation","column_name","map","primary","tableName","Table","unique","Non_unique","Index_type","module","exports","default"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Utils = require('../../utils');\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\n\nconst debug = logger.debugContext('sql:mysql');\n\n\nclass Query extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super(connection, sequelize, Object.assign({ showWarnings: false }, options));\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n    const replacementFunc = (match, key, values) => {\n      if (values[key] !== undefined) {\n        bindParam.push(values[key]);\n        return '?';\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : undefined];\n  }\n\n  run(sql, parameters) {\n    this.sql = sql;\n    const { connection, options } = this;\n\n    //do we need benchmark for this query execution\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    return new Utils.Promise((resolve, reject) => {\n      const handler = (err, results) => {\n        complete();\n\n        if (err) {\n          // MySQL automatically rolls-back transactions in the event of a deadlock\n          if (options.transaction && err.errno === 1213) {\n            options.transaction.finished = 'rollback';\n          }\n          err.sql = sql;\n          err.parameters = parameters;\n\n          reject(this.formatError(err));\n        } else {\n          resolve(results);\n        }\n      };\n      if (parameters) {\n        debug('parameters(%j)', parameters);\n        connection.execute(sql, parameters, handler).setMaxListeners(100);\n      } else {\n        connection.query({ sql }, handler).setMaxListeners(100);\n      }\n    })\n    // Log warnings if we've got them.\n      .then(results => {\n        if (showWarnings && results && results.warningStatus > 0) {\n          return this.logWarnings(results);\n        }\n        return results;\n      })\n    // Return formatted results...\n      .then(results => this.formatResults(results));\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @private\n   */\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        // handle bulkCreate AI primiary key\n        if (\n          data.constructor.name === 'ResultSetHeader'\n          && this.model\n          && this.model.autoIncrementAttribute\n          && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute\n          && this.model.rawAttributes[this.model.primaryKeyAttribute]\n        ) {\n          const startId = data[this.getInsertIdField()];\n          result = [];\n          for (let i = startId; i < startId + data.affectedRows; i++) {\n            result.push({ [this.model.rawAttributes[this.model.primaryKeyAttribute].field]: i });\n          }\n        } else {\n          result = data[this.getInsertIdField()];\n        }\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      return this.handleSelectQuery(data);\n    }\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n    if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        const enumRegex = /^enum/i;\n        result[_result.Field] = {\n          type: enumRegex.test(_result.Type) ? _result.Type.replace(enumRegex, 'ENUM') : _result.Type.toUpperCase(),\n          allowNull: _result.Null === 'YES',\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === 'PRI',\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, 'Extra') && _result.Extra.toLowerCase() === 'auto_increment',\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n      return result;\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery() || this.isUpsertQuery()) {\n      return data.affectedRows;\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n    if (this.isShowConstraintsQuery()) {\n      return data;\n    }\n    if (this.isRawQuery()) {\n      // MySQL returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta\n      return [data, data];\n    }\n\n    return result;\n  }\n\n  logWarnings(results) {\n    return this.run('SHOW WARNINGS').then(warningResults => {\n      const warningMessage = `MySQL Warnings (${this.connection.uuid || 'default'}): `;\n      const messages = [];\n      for (const _warningRow of warningResults) {\n        if (_warningRow === undefined || typeof _warningRow[Symbol.iterator] !== 'function') continue;\n        for (const _warningResult of _warningRow) {\n          if (Object.prototype.hasOwnProperty.call(_warningResult, 'Message')) {\n            messages.push(_warningResult.Message);\n          } else {\n            for (const _objectKey of _warningResult.keys()) {\n              messages.push([_objectKey, _warningResult[_objectKey]].join(': '));\n            }\n          }\n        }\n      }\n\n      this.sequelize.log(warningMessage + messages.join('; '), this.options);\n\n      return results;\n    });\n  }\n\n  formatError(err) {\n    const errCode = err.errno || err.code;\n\n    switch (errCode) {\n      case 1062: {\n        const match = err.message.match(/Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?$/);\n        let fields = {};\n        let message = 'Validation error';\n        const values = match ? match[1].split('-') : undefined;\n        const fieldKey = match ? match[2] : undefined;\n        const fieldVal = match ? match[1] : undefined;\n        const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n\n        if (uniqueKey) {\n          if (uniqueKey.msg) message = uniqueKey.msg;\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[fieldKey] = fieldVal;\n        }\n\n        const errors = [];\n        _.forOwn(fields, (value, field) => {\n          errors.push(new sequelizeErrors.ValidationErrorItem(\n            this.getUniqueConstraintErrorMessage(field),\n            'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field,\n            value,\n            this.instance,\n            'not_unique'\n          ));\n        });\n\n        return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields });\n      }\n\n      case 1451:\n      case 1452: {\n        // e.g. CONSTRAINT `example_constraint_name` FOREIGN KEY (`example_id`) REFERENCES `examples` (`id`)\n        const match = err.message.match(/CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/);\n        const quoteChar = match ? match[1] : '`';\n        const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : undefined;\n\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          reltype: String(errCode) === '1451' ? 'parent' : 'child',\n          table: match ? match[4] : undefined,\n          fields,\n          value: fields && fields.length && this.instance && this.instance[fields[0]] || undefined,\n          index: match ? match[2] : undefined,\n          parent: err\n        });\n      }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err);\n    }\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    data = data.reduce((acc, item) => {\n      if (!(item.Key_name in acc)) {\n        acc[item.Key_name] = item;\n        item.fields = [];\n      }\n\n      acc[item.Key_name].fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || undefined,\n        order: item.Collation === 'A' ? 'ASC' : undefined\n      };\n      delete item.column_name;\n\n      return acc;\n    }, {});\n\n    return _.map(data, item => ({\n      primary: item.Key_name === 'PRIMARY',\n      fields: item.fields,\n      name: item.Key_name,\n      tableName: item.Table,\n      unique: item.Non_unique !== 1,\n      type: item.Index_type\n    }));\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"]},"metadata":{},"sourceType":"script"}
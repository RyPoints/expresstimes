{"ast":null,"code":"\"use strict\";\n/**\n * A Doubly Linked List, because there aren't enough in the world...\n * this is pretty much a direct JS port of the one wikipedia\n * https://en.wikipedia.org/wiki/Doubly_linked_list\n *\n * For most usage 'insertBeginning' and 'insertEnd' should be enough\n *\n * nodes are expected to something like a POJSO like\n * {\n *   prev: null,\n *   next: null,\n *   something: 'whatever you like'\n * }\n */\n\nclass DoublyLinkedList {\n  constructor() {\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  insertBeginning(node) {\n    if (this.head === null) {\n      this.head = node;\n      this.tail = node;\n      node.prev = null;\n      node.next = null;\n      this.length++;\n    } else {\n      this.insertBefore(this.head, node);\n    }\n  }\n\n  insertEnd(node) {\n    if (this.tail === null) {\n      this.insertBeginning(node);\n    } else {\n      this.insertAfter(this.tail, node);\n    }\n  }\n\n  insertAfter(node, newNode) {\n    newNode.prev = node;\n    newNode.next = node.next;\n\n    if (node.next === null) {\n      this.tail = newNode;\n    } else {\n      node.next.prev = newNode;\n    }\n\n    node.next = newNode;\n    this.length++;\n  }\n\n  insertBefore(node, newNode) {\n    newNode.prev = node.prev;\n    newNode.next = node;\n\n    if (node.prev === null) {\n      this.head = newNode;\n    } else {\n      node.prev.next = newNode;\n    }\n\n    node.prev = newNode;\n    this.length++;\n  }\n\n  remove(node) {\n    if (node.prev === null) {\n      this.head = node.next;\n    } else {\n      node.prev.next = node.next;\n    }\n\n    if (node.next === null) {\n      this.tail = node.prev;\n    } else {\n      node.next.prev = node.prev;\n    }\n\n    node.prev = null;\n    node.next = null;\n    this.length--;\n  } // FIXME: this should not live here and has become a dumping ground...\n\n\n  static createNode(data) {\n    return {\n      prev: null,\n      next: null,\n      data: data\n    };\n  }\n\n}\n\nmodule.exports = DoublyLinkedList;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/generic-pool/lib/DoublyLinkedList.js"],"names":["DoublyLinkedList","constructor","head","tail","length","insertBeginning","node","prev","next","insertBefore","insertEnd","insertAfter","newNode","remove","createNode","data","module","exports"],"mappings":"AAAA;AAEA;;;;;;;;;;;;;;;AAcA,MAAMA,gBAAN,CAAuB;AACrBC,EAAAA,WAAW,GAAG;AACZ,SAAKC,IAAL,GAAY,IAAZ;AACA,SAAKC,IAAL,GAAY,IAAZ;AACA,SAAKC,MAAL,GAAc,CAAd;AACD;;AAEDC,EAAAA,eAAe,CAACC,IAAD,EAAO;AACpB,QAAI,KAAKJ,IAAL,KAAc,IAAlB,EAAwB;AACtB,WAAKA,IAAL,GAAYI,IAAZ;AACA,WAAKH,IAAL,GAAYG,IAAZ;AACAA,MAAAA,IAAI,CAACC,IAAL,GAAY,IAAZ;AACAD,MAAAA,IAAI,CAACE,IAAL,GAAY,IAAZ;AACA,WAAKJ,MAAL;AACD,KAND,MAMO;AACL,WAAKK,YAAL,CAAkB,KAAKP,IAAvB,EAA6BI,IAA7B;AACD;AACF;;AAEDI,EAAAA,SAAS,CAACJ,IAAD,EAAO;AACd,QAAI,KAAKH,IAAL,KAAc,IAAlB,EAAwB;AACtB,WAAKE,eAAL,CAAqBC,IAArB;AACD,KAFD,MAEO;AACL,WAAKK,WAAL,CAAiB,KAAKR,IAAtB,EAA4BG,IAA5B;AACD;AACF;;AAEDK,EAAAA,WAAW,CAACL,IAAD,EAAOM,OAAP,EAAgB;AACzBA,IAAAA,OAAO,CAACL,IAAR,GAAeD,IAAf;AACAM,IAAAA,OAAO,CAACJ,IAAR,GAAeF,IAAI,CAACE,IAApB;;AACA,QAAIF,IAAI,CAACE,IAAL,KAAc,IAAlB,EAAwB;AACtB,WAAKL,IAAL,GAAYS,OAAZ;AACD,KAFD,MAEO;AACLN,MAAAA,IAAI,CAACE,IAAL,CAAUD,IAAV,GAAiBK,OAAjB;AACD;;AACDN,IAAAA,IAAI,CAACE,IAAL,GAAYI,OAAZ;AACA,SAAKR,MAAL;AACD;;AAEDK,EAAAA,YAAY,CAACH,IAAD,EAAOM,OAAP,EAAgB;AAC1BA,IAAAA,OAAO,CAACL,IAAR,GAAeD,IAAI,CAACC,IAApB;AACAK,IAAAA,OAAO,CAACJ,IAAR,GAAeF,IAAf;;AACA,QAAIA,IAAI,CAACC,IAAL,KAAc,IAAlB,EAAwB;AACtB,WAAKL,IAAL,GAAYU,OAAZ;AACD,KAFD,MAEO;AACLN,MAAAA,IAAI,CAACC,IAAL,CAAUC,IAAV,GAAiBI,OAAjB;AACD;;AACDN,IAAAA,IAAI,CAACC,IAAL,GAAYK,OAAZ;AACA,SAAKR,MAAL;AACD;;AAEDS,EAAAA,MAAM,CAACP,IAAD,EAAO;AACX,QAAIA,IAAI,CAACC,IAAL,KAAc,IAAlB,EAAwB;AACtB,WAAKL,IAAL,GAAYI,IAAI,CAACE,IAAjB;AACD,KAFD,MAEO;AACLF,MAAAA,IAAI,CAACC,IAAL,CAAUC,IAAV,GAAiBF,IAAI,CAACE,IAAtB;AACD;;AACD,QAAIF,IAAI,CAACE,IAAL,KAAc,IAAlB,EAAwB;AACtB,WAAKL,IAAL,GAAYG,IAAI,CAACC,IAAjB;AACD,KAFD,MAEO;AACLD,MAAAA,IAAI,CAACE,IAAL,CAAUD,IAAV,GAAiBD,IAAI,CAACC,IAAtB;AACD;;AACDD,IAAAA,IAAI,CAACC,IAAL,GAAY,IAAZ;AACAD,IAAAA,IAAI,CAACE,IAAL,GAAY,IAAZ;AACA,SAAKJ,MAAL;AACD,GAjEoB,CAmErB;;;AACA,SAAOU,UAAP,CAAkBC,IAAlB,EAAwB;AACtB,WAAO;AACLR,MAAAA,IAAI,EAAE,IADD;AAELC,MAAAA,IAAI,EAAE,IAFD;AAGLO,MAAAA,IAAI,EAAEA;AAHD,KAAP;AAKD;;AA1EoB;;AA6EvBC,MAAM,CAACC,OAAP,GAAiBjB,gBAAjB","sourcesContent":["\"use strict\";\n\n/**\n * A Doubly Linked List, because there aren't enough in the world...\n * this is pretty much a direct JS port of the one wikipedia\n * https://en.wikipedia.org/wiki/Doubly_linked_list\n *\n * For most usage 'insertBeginning' and 'insertEnd' should be enough\n *\n * nodes are expected to something like a POJSO like\n * {\n *   prev: null,\n *   next: null,\n *   something: 'whatever you like'\n * }\n */\nclass DoublyLinkedList {\n  constructor() {\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  insertBeginning(node) {\n    if (this.head === null) {\n      this.head = node;\n      this.tail = node;\n      node.prev = null;\n      node.next = null;\n      this.length++;\n    } else {\n      this.insertBefore(this.head, node);\n    }\n  }\n\n  insertEnd(node) {\n    if (this.tail === null) {\n      this.insertBeginning(node);\n    } else {\n      this.insertAfter(this.tail, node);\n    }\n  }\n\n  insertAfter(node, newNode) {\n    newNode.prev = node;\n    newNode.next = node.next;\n    if (node.next === null) {\n      this.tail = newNode;\n    } else {\n      node.next.prev = newNode;\n    }\n    node.next = newNode;\n    this.length++;\n  }\n\n  insertBefore(node, newNode) {\n    newNode.prev = node.prev;\n    newNode.next = node;\n    if (node.prev === null) {\n      this.head = newNode;\n    } else {\n      node.prev.next = newNode;\n    }\n    node.prev = newNode;\n    this.length++;\n  }\n\n  remove(node) {\n    if (node.prev === null) {\n      this.head = node.next;\n    } else {\n      node.prev.next = node.next;\n    }\n    if (node.next === null) {\n      this.tail = node.prev;\n    } else {\n      node.next.prev = node.prev;\n    }\n    node.prev = null;\n    node.next = null;\n    this.length--;\n  }\n\n  // FIXME: this should not live here and has become a dumping ground...\n  static createNode(data) {\n    return {\n      prev: null,\n      next: null,\n      data: data\n    };\n  }\n}\n\nmodule.exports = DoublyLinkedList;\n"]},"metadata":{},"sourceType":"script"}
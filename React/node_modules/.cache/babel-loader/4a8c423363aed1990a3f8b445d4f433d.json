{"ast":null,"code":"'use strict';\n\nconst AbstractConnectionManager = require('../abstract/connection-manager');\n\nconst SequelizeErrors = require('../../errors');\n\nconst Promise = require('../../promise');\n\nconst _require = require('../../utils/logger'),\n      logger = _require.logger;\n\nconst DataTypes = require('../../data-types').mysql;\n\nconst momentTz = require('moment-timezone');\n\nconst debug = logger.debugContext('connection:mysql');\n\nconst parserStore = require('../parserStore')('mysql');\n/**\n * MySQL Connection Manager\n *\n * Get connections, validate and disconnect them.\n * AbstractConnectionManager pooling use it to handle MySQL specific connections\n * Use https://github.com/sidorares/node-mysql2 to connect with MySQL server\n *\n * @extends AbstractConnectionManager\n * @returns Class<ConnectionManager>\n * @private\n */\n\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 3306;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule('mysql2');\n    this.refreshTypeParser(DataTypes);\n  }\n\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  static _typecast(field, next) {\n    if (parserStore.get(field.type)) {\n      return parserStore.get(field.type)(field, this.sequelize.options, next);\n    }\n\n    return next();\n  }\n  /**\n   * Connect with MySQL database based on config, Handle any errors in connection\n   * Set the pool handlers on connection.error\n   * Also set proper timezone once connection is connected.\n   *\n   * @param {Object} config\n   * @returns {Promise<Connection>}\n   * @private\n   */\n\n\n  connect(config) {\n    const connectionConfig = Object.assign({\n      host: config.host,\n      port: config.port,\n      user: config.username,\n      flags: '-FOUND_ROWS',\n      password: config.password,\n      database: config.database,\n      timezone: this.sequelize.options.timezone,\n      typeCast: ConnectionManager._typecast.bind(this),\n      bigNumberStrings: false,\n      supportBigNumbers: true\n    }, config.dialectOptions);\n    return new Promise((resolve, reject) => {\n      const connection = this.lib.createConnection(connectionConfig);\n\n      const errorHandler = e => {\n        // clean up connect & error event if there is error\n        connection.removeListener('connect', connectHandler);\n        connection.removeListener('error', connectHandler);\n        reject(e);\n      };\n\n      const connectHandler = () => {\n        // clean up error event if connected\n        connection.removeListener('error', errorHandler);\n        resolve(connection);\n      }; // don't use connection.once for error event handling here\n      // mysql2 emit error two times in case handshake was failed\n      // first error is protocol_lost and second is timeout\n      // if we will use `once.error` node process will crash on 2nd error emit\n\n\n      connection.on('error', errorHandler);\n      connection.once('connect', connectHandler);\n    }).tap(() => {\n      debug('connection acquired');\n    }).then(connection => {\n      connection.on('error', error => {\n        switch (error.code) {\n          case 'ESOCKET':\n          case 'ECONNRESET':\n          case 'EPIPE':\n          case 'PROTOCOL_CONNECTION_LOST':\n            this.pool.destroy(connection);\n        }\n      });\n      return new Promise((resolve, reject) => {\n        if (!this.sequelize.config.keepDefaultTimezone) {\n          // set timezone for this connection\n          // but named timezone are not directly supported in mysql, so get its offset first\n          let tzOffset = this.sequelize.options.timezone;\n          tzOffset = /\\//.test(tzOffset) ? momentTz.tz(tzOffset).format('Z') : tzOffset;\n          return connection.query(`SET time_zone = '${tzOffset}'`, err => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(connection);\n            }\n          });\n        } // return connection without executing SET time_zone query\n\n\n        resolve(connection);\n      });\n    }).catch(err => {\n      switch (err.code) {\n        case 'ECONNREFUSED':\n          throw new SequelizeErrors.ConnectionRefusedError(err);\n\n        case 'ER_ACCESS_DENIED_ERROR':\n          throw new SequelizeErrors.AccessDeniedError(err);\n\n        case 'ENOTFOUND':\n          throw new SequelizeErrors.HostNotFoundError(err);\n\n        case 'EHOSTUNREACH':\n          throw new SequelizeErrors.HostNotReachableError(err);\n\n        case 'EINVAL':\n          throw new SequelizeErrors.InvalidConnectionError(err);\n\n        default:\n          throw new SequelizeErrors.ConnectionError(err);\n      }\n    });\n  }\n\n  disconnect(connection) {\n    // Don't disconnect connections with CLOSED state\n    if (connection._closing) {\n      debug('connection tried to disconnect but was already at CLOSED state');\n      return Promise.resolve();\n    }\n\n    return Promise.fromCallback(callback => connection.end(callback));\n  }\n\n  validate(connection) {\n    return connection && !connection._fatalError && !connection._protocolError && !connection._closing && !connection.stream.destroyed;\n  }\n\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/sequelize/lib/dialects/mysql/connection-manager.js"],"names":["AbstractConnectionManager","require","SequelizeErrors","Promise","logger","DataTypes","mysql","momentTz","debug","debugContext","parserStore","ConnectionManager","constructor","dialect","sequelize","config","port","lib","_loadDialectModule","refreshTypeParser","_refreshTypeParser","dataType","refresh","_clearTypeParser","clear","_typecast","field","next","get","type","options","connect","connectionConfig","Object","assign","host","user","username","flags","password","database","timezone","typeCast","bind","bigNumberStrings","supportBigNumbers","dialectOptions","resolve","reject","connection","createConnection","errorHandler","e","removeListener","connectHandler","on","once","tap","then","error","code","pool","destroy","keepDefaultTimezone","tzOffset","test","tz","format","query","err","catch","ConnectionRefusedError","AccessDeniedError","HostNotFoundError","HostNotReachableError","InvalidConnectionError","ConnectionError","disconnect","_closing","fromCallback","callback","end","validate","_fatalError","_protocolError","stream","destroyed","module","exports","default"],"mappings":"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","sourcesContent":["'use strict';\n\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst SequelizeErrors = require('../../errors');\nconst Promise = require('../../promise');\nconst { logger } = require('../../utils/logger');\nconst DataTypes = require('../../data-types').mysql;\nconst momentTz = require('moment-timezone');\nconst debug = logger.debugContext('connection:mysql');\nconst parserStore = require('../parserStore')('mysql');\n\n/**\n * MySQL Connection Manager\n *\n * Get connections, validate and disconnect them.\n * AbstractConnectionManager pooling use it to handle MySQL specific connections\n * Use https://github.com/sidorares/node-mysql2 to connect with MySQL server\n *\n * @extends AbstractConnectionManager\n * @returns Class<ConnectionManager>\n * @private\n */\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 3306;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule('mysql2');\n    this.refreshTypeParser(DataTypes);\n  }\n\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  static _typecast(field, next) {\n    if (parserStore.get(field.type)) {\n      return parserStore.get(field.type)(field, this.sequelize.options, next);\n    }\n    return next();\n  }\n\n  /**\n   * Connect with MySQL database based on config, Handle any errors in connection\n   * Set the pool handlers on connection.error\n   * Also set proper timezone once connection is connected.\n   *\n   * @param {Object} config\n   * @returns {Promise<Connection>}\n   * @private\n   */\n  connect(config) {\n    const connectionConfig = Object.assign({\n      host: config.host,\n      port: config.port,\n      user: config.username,\n      flags: '-FOUND_ROWS',\n      password: config.password,\n      database: config.database,\n      timezone: this.sequelize.options.timezone,\n      typeCast: ConnectionManager._typecast.bind(this),\n      bigNumberStrings: false,\n      supportBigNumbers: true\n    }, config.dialectOptions);\n\n    return new Promise((resolve, reject) => {\n      const connection = this.lib.createConnection(connectionConfig);\n\n      const errorHandler = e => {\n        // clean up connect & error event if there is error\n        connection.removeListener('connect', connectHandler);\n        connection.removeListener('error', connectHandler);\n        reject(e);\n      };\n\n      const connectHandler = () => {\n        // clean up error event if connected\n        connection.removeListener('error', errorHandler);\n        resolve(connection);\n      };\n\n      // don't use connection.once for error event handling here\n      // mysql2 emit error two times in case handshake was failed\n      // first error is protocol_lost and second is timeout\n      // if we will use `once.error` node process will crash on 2nd error emit\n      connection.on('error', errorHandler);\n      connection.once('connect', connectHandler);\n    })\n      .tap(() => { debug('connection acquired'); })\n      .then(connection => {\n        connection.on('error', error => {\n          switch (error.code) {\n            case 'ESOCKET':\n            case 'ECONNRESET':\n            case 'EPIPE':\n            case 'PROTOCOL_CONNECTION_LOST':\n              this.pool.destroy(connection);\n          }\n        });\n\n        return new Promise((resolve, reject) => {\n          if (!this.sequelize.config.keepDefaultTimezone) {\n            // set timezone for this connection\n            // but named timezone are not directly supported in mysql, so get its offset first\n            let tzOffset = this.sequelize.options.timezone;\n            tzOffset = /\\//.test(tzOffset) ? momentTz.tz(tzOffset).format('Z') : tzOffset;\n            return connection.query(`SET time_zone = '${tzOffset}'`, err => {\n              if (err) { reject(err); } else { resolve(connection); }\n            });\n          }\n\n          // return connection without executing SET time_zone query\n          resolve(connection);\n        });\n      })\n      .catch(err => {\n        switch (err.code) {\n          case 'ECONNREFUSED':\n            throw new SequelizeErrors.ConnectionRefusedError(err);\n          case 'ER_ACCESS_DENIED_ERROR':\n            throw new SequelizeErrors.AccessDeniedError(err);\n          case 'ENOTFOUND':\n            throw new SequelizeErrors.HostNotFoundError(err);\n          case 'EHOSTUNREACH':\n            throw new SequelizeErrors.HostNotReachableError(err);\n          case 'EINVAL':\n            throw new SequelizeErrors.InvalidConnectionError(err);\n          default:\n            throw new SequelizeErrors.ConnectionError(err);\n        }\n      });\n  }\n\n  disconnect(connection) {\n    // Don't disconnect connections with CLOSED state\n    if (connection._closing) {\n      debug('connection tried to disconnect but was already at CLOSED state');\n      return Promise.resolve();\n    }\n\n    return Promise.fromCallback(callback => connection.end(callback));\n  }\n\n  validate(connection) {\n    return connection\n      && !connection._fatalError\n      && !connection._protocolError\n      && !connection._closing\n      && !connection.stream.destroyed;\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"]},"metadata":{},"sourceType":"script"}
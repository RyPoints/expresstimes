{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readCollation = readCollation;\nexports.default = void 0;\n\nvar _collation = require(\"./collation\");\n\nvar _dataType = require(\"./data-type\");\n\nvar _sprintfJs = require(\"sprintf-js\");\n\nfunction readCollation(parser, callback) {\n  // s2.2.5.1.2\n  parser.readBuffer(5, collationData => {\n    let lcid = (collationData[2] & 0x0F) << 16;\n    lcid |= collationData[1] << 8;\n    lcid |= collationData[0]; // This may not be extracting the correct nibbles in the correct order.\n\n    let flags = collationData[3] >> 4;\n    flags |= collationData[2] & 0xF0; // This may not be extracting the correct nibble.\n\n    const version = collationData[3] & 0x0F;\n    const sortId = collationData[4];\n    const codepage = _collation.codepageBySortId[sortId] || _collation.codepageByLcid[lcid] || 'CP1252';\n    callback({\n      lcid,\n      flags,\n      version,\n      sortId,\n      codepage\n    });\n  });\n}\n\nfunction readSchema(parser, callback) {\n  // s2.2.5.5.3\n  parser.readUInt8(schemaPresent => {\n    if (schemaPresent === 0x01) {\n      parser.readBVarChar(dbname => {\n        parser.readBVarChar(owningSchema => {\n          parser.readUsVarChar(xmlSchemaCollection => {\n            callback({\n              dbname: dbname,\n              owningSchema: owningSchema,\n              xmlSchemaCollection: xmlSchemaCollection\n            });\n          });\n        });\n      });\n    } else {\n      callback(undefined);\n    }\n  });\n}\n\nfunction readUDTInfo(parser, callback) {\n  parser.readUInt16LE(maxByteSize => {\n    parser.readBVarChar(dbname => {\n      parser.readBVarChar(owningSchema => {\n        parser.readBVarChar(typeName => {\n          parser.readUsVarChar(assemblyName => {\n            callback({\n              maxByteSize: maxByteSize,\n              dbname: dbname,\n              owningSchema: owningSchema,\n              typeName: typeName,\n              assemblyName: assemblyName\n            });\n          });\n        });\n      });\n    });\n  });\n}\n\nfunction metadataParse(parser, options, callback) {\n  (options.tdsVersion < '7_2' ? parser.readUInt16LE : parser.readUInt32LE).call(parser, userType => {\n    parser.readUInt16LE(flags => {\n      parser.readUInt8(typeNumber => {\n        const type = _dataType.TYPE[typeNumber];\n\n        if (!type) {\n          return parser.emit('error', new Error((0, _sprintfJs.sprintf)('Unrecognised data type 0x%02X', typeNumber)));\n        }\n\n        switch (type.name) {\n          case 'Null':\n          case 'TinyInt':\n          case 'SmallInt':\n          case 'Int':\n          case 'BigInt':\n          case 'Real':\n          case 'Float':\n          case 'SmallMoney':\n          case 'Money':\n          case 'Bit':\n          case 'SmallDateTime':\n          case 'DateTime':\n          case 'Date':\n            return callback({\n              userType: userType,\n              flags: flags,\n              type: type,\n              collation: undefined,\n              precision: undefined,\n              scale: undefined,\n              dataLength: undefined,\n              schema: undefined,\n              udtInfo: undefined\n            });\n\n          case 'IntN':\n          case 'FloatN':\n          case 'MoneyN':\n          case 'BitN':\n          case 'UniqueIdentifier':\n          case 'DateTimeN':\n            return parser.readUInt8(dataLength => {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: undefined,\n                dataLength: dataLength,\n                schema: undefined,\n                udtInfo: undefined\n              });\n            });\n\n          case 'Variant':\n            return parser.readUInt32LE(dataLength => {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: undefined,\n                dataLength: dataLength,\n                schema: undefined,\n                udtInfo: undefined\n              });\n            });\n\n          case 'VarChar':\n          case 'Char':\n          case 'NVarChar':\n          case 'NChar':\n            return parser.readUInt16LE(dataLength => {\n              readCollation(parser, collation => {\n                callback({\n                  userType: userType,\n                  flags: flags,\n                  type: type,\n                  collation: collation,\n                  precision: undefined,\n                  scale: undefined,\n                  dataLength: dataLength,\n                  schema: undefined,\n                  udtInfo: undefined\n                });\n              });\n            });\n\n          case 'Text':\n          case 'NText':\n            return parser.readUInt32LE(dataLength => {\n              readCollation(parser, collation => {\n                callback({\n                  userType: userType,\n                  flags: flags,\n                  type: type,\n                  collation: collation,\n                  precision: undefined,\n                  scale: undefined,\n                  dataLength: dataLength,\n                  schema: undefined,\n                  udtInfo: undefined\n                });\n              });\n            });\n\n          case 'VarBinary':\n          case 'Binary':\n            return parser.readUInt16LE(dataLength => {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: undefined,\n                dataLength: dataLength,\n                schema: undefined,\n                udtInfo: undefined\n              });\n            });\n\n          case 'Image':\n            return parser.readUInt32LE(dataLength => {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: undefined,\n                dataLength: dataLength,\n                schema: undefined,\n                udtInfo: undefined\n              });\n            });\n\n          case 'Xml':\n            return readSchema(parser, schema => {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: undefined,\n                dataLength: undefined,\n                schema: schema,\n                udtInfo: undefined\n              });\n            });\n\n          case 'Time':\n          case 'DateTime2':\n          case 'DateTimeOffset':\n            return parser.readUInt8(scale => {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: scale,\n                dataLength: undefined,\n                schema: undefined,\n                udtInfo: undefined\n              });\n            });\n\n          case 'NumericN':\n          case 'DecimalN':\n            return parser.readUInt8(dataLength => {\n              parser.readUInt8(precision => {\n                parser.readUInt8(scale => {\n                  callback({\n                    userType: userType,\n                    flags: flags,\n                    type: type,\n                    collation: undefined,\n                    precision: precision,\n                    scale: scale,\n                    dataLength: dataLength,\n                    schema: undefined,\n                    udtInfo: undefined\n                  });\n                });\n              });\n            });\n\n          case 'UDT':\n            return readUDTInfo(parser, udtInfo => {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: undefined,\n                dataLength: undefined,\n                schema: undefined,\n                udtInfo: udtInfo\n              });\n            });\n\n          default:\n            return parser.emit('error', new Error((0, _sprintfJs.sprintf)('Unrecognised type %s', type.name)));\n        }\n      });\n    });\n  });\n}\n\nvar _default = metadataParse;\nexports.default = _default;\nmodule.exports = metadataParse;\nmodule.exports.readCollation = readCollation;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/tedious/lib/metadata-parser.js"],"names":["Object","defineProperty","exports","value","readCollation","default","_collation","require","_dataType","_sprintfJs","parser","callback","readBuffer","collationData","lcid","flags","version","sortId","codepage","codepageBySortId","codepageByLcid","readSchema","readUInt8","schemaPresent","readBVarChar","dbname","owningSchema","readUsVarChar","xmlSchemaCollection","undefined","readUDTInfo","readUInt16LE","maxByteSize","typeName","assemblyName","metadataParse","options","tdsVersion","readUInt32LE","call","userType","typeNumber","type","TYPE","emit","Error","sprintf","name","collation","precision","scale","dataLength","schema","udtInfo","_default","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,aAAR,GAAwBA,aAAxB;AACAF,OAAO,CAACG,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,aAAD,CAAxB;;AAEA,IAAIC,SAAS,GAAGD,OAAO,CAAC,aAAD,CAAvB;;AAEA,IAAIE,UAAU,GAAGF,OAAO,CAAC,YAAD,CAAxB;;AAEA,SAASH,aAAT,CAAuBM,MAAvB,EAA+BC,QAA/B,EAAyC;AACvC;AACAD,EAAAA,MAAM,CAACE,UAAP,CAAkB,CAAlB,EAAqBC,aAAa,IAAI;AACpC,QAAIC,IAAI,GAAG,CAACD,aAAa,CAAC,CAAD,CAAb,GAAmB,IAApB,KAA6B,EAAxC;AACAC,IAAAA,IAAI,IAAID,aAAa,CAAC,CAAD,CAAb,IAAoB,CAA5B;AACAC,IAAAA,IAAI,IAAID,aAAa,CAAC,CAAD,CAArB,CAHoC,CAGV;;AAE1B,QAAIE,KAAK,GAAGF,aAAa,CAAC,CAAD,CAAb,IAAoB,CAAhC;AACAE,IAAAA,KAAK,IAAIF,aAAa,CAAC,CAAD,CAAb,GAAmB,IAA5B,CANoC,CAMF;;AAElC,UAAMG,OAAO,GAAGH,aAAa,CAAC,CAAD,CAAb,GAAmB,IAAnC;AACA,UAAMI,MAAM,GAAGJ,aAAa,CAAC,CAAD,CAA5B;AACA,UAAMK,QAAQ,GAAGZ,UAAU,CAACa,gBAAX,CAA4BF,MAA5B,KAAuCX,UAAU,CAACc,cAAX,CAA0BN,IAA1B,CAAvC,IAA0E,QAA3F;AACAH,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IADO;AAEPC,MAAAA,KAFO;AAGPC,MAAAA,OAHO;AAIPC,MAAAA,MAJO;AAKPC,MAAAA;AALO,KAAD,CAAR;AAOD,GAlBD;AAmBD;;AAED,SAASG,UAAT,CAAoBX,MAApB,EAA4BC,QAA5B,EAAsC;AACpC;AACAD,EAAAA,MAAM,CAACY,SAAP,CAAiBC,aAAa,IAAI;AAChC,QAAIA,aAAa,KAAK,IAAtB,EAA4B;AAC1Bb,MAAAA,MAAM,CAACc,YAAP,CAAoBC,MAAM,IAAI;AAC5Bf,QAAAA,MAAM,CAACc,YAAP,CAAoBE,YAAY,IAAI;AAClChB,UAAAA,MAAM,CAACiB,aAAP,CAAqBC,mBAAmB,IAAI;AAC1CjB,YAAAA,QAAQ,CAAC;AACPc,cAAAA,MAAM,EAAEA,MADD;AAEPC,cAAAA,YAAY,EAAEA,YAFP;AAGPE,cAAAA,mBAAmB,EAAEA;AAHd,aAAD,CAAR;AAKD,WAND;AAOD,SARD;AASD,OAVD;AAWD,KAZD,MAYO;AACLjB,MAAAA,QAAQ,CAACkB,SAAD,CAAR;AACD;AACF,GAhBD;AAiBD;;AAED,SAASC,WAAT,CAAqBpB,MAArB,EAA6BC,QAA7B,EAAuC;AACrCD,EAAAA,MAAM,CAACqB,YAAP,CAAoBC,WAAW,IAAI;AACjCtB,IAAAA,MAAM,CAACc,YAAP,CAAoBC,MAAM,IAAI;AAC5Bf,MAAAA,MAAM,CAACc,YAAP,CAAoBE,YAAY,IAAI;AAClChB,QAAAA,MAAM,CAACc,YAAP,CAAoBS,QAAQ,IAAI;AAC9BvB,UAAAA,MAAM,CAACiB,aAAP,CAAqBO,YAAY,IAAI;AACnCvB,YAAAA,QAAQ,CAAC;AACPqB,cAAAA,WAAW,EAAEA,WADN;AAEPP,cAAAA,MAAM,EAAEA,MAFD;AAGPC,cAAAA,YAAY,EAAEA,YAHP;AAIPO,cAAAA,QAAQ,EAAEA,QAJH;AAKPC,cAAAA,YAAY,EAAEA;AALP,aAAD,CAAR;AAOD,WARD;AASD,SAVD;AAWD,OAZD;AAaD,KAdD;AAeD,GAhBD;AAiBD;;AAED,SAASC,aAAT,CAAuBzB,MAAvB,EAA+B0B,OAA/B,EAAwCzB,QAAxC,EAAkD;AAChD,GAACyB,OAAO,CAACC,UAAR,GAAqB,KAArB,GAA6B3B,MAAM,CAACqB,YAApC,GAAmDrB,MAAM,CAAC4B,YAA3D,EAAyEC,IAAzE,CAA8E7B,MAA9E,EAAsF8B,QAAQ,IAAI;AAChG9B,IAAAA,MAAM,CAACqB,YAAP,CAAoBhB,KAAK,IAAI;AAC3BL,MAAAA,MAAM,CAACY,SAAP,CAAiBmB,UAAU,IAAI;AAC7B,cAAMC,IAAI,GAAGlC,SAAS,CAACmC,IAAV,CAAeF,UAAf,CAAb;;AAEA,YAAI,CAACC,IAAL,EAAW;AACT,iBAAOhC,MAAM,CAACkC,IAAP,CAAY,OAAZ,EAAqB,IAAIC,KAAJ,CAAU,CAAC,GAAGpC,UAAU,CAACqC,OAAf,EAAwB,+BAAxB,EAAyDL,UAAzD,CAAV,CAArB,CAAP;AACD;;AAED,gBAAQC,IAAI,CAACK,IAAb;AACE,eAAK,MAAL;AACA,eAAK,SAAL;AACA,eAAK,UAAL;AACA,eAAK,KAAL;AACA,eAAK,QAAL;AACA,eAAK,MAAL;AACA,eAAK,OAAL;AACA,eAAK,YAAL;AACA,eAAK,OAAL;AACA,eAAK,KAAL;AACA,eAAK,eAAL;AACA,eAAK,UAAL;AACA,eAAK,MAAL;AACE,mBAAOpC,QAAQ,CAAC;AACd6B,cAAAA,QAAQ,EAAEA,QADI;AAEdzB,cAAAA,KAAK,EAAEA,KAFO;AAGd2B,cAAAA,IAAI,EAAEA,IAHQ;AAIdM,cAAAA,SAAS,EAAEnB,SAJG;AAKdoB,cAAAA,SAAS,EAAEpB,SALG;AAMdqB,cAAAA,KAAK,EAAErB,SANO;AAOdsB,cAAAA,UAAU,EAAEtB,SAPE;AAQduB,cAAAA,MAAM,EAAEvB,SARM;AASdwB,cAAAA,OAAO,EAAExB;AATK,aAAD,CAAf;;AAYF,eAAK,MAAL;AACA,eAAK,QAAL;AACA,eAAK,QAAL;AACA,eAAK,MAAL;AACA,eAAK,kBAAL;AACA,eAAK,WAAL;AACE,mBAAOnB,MAAM,CAACY,SAAP,CAAiB6B,UAAU,IAAI;AACpCxC,cAAAA,QAAQ,CAAC;AACP6B,gBAAAA,QAAQ,EAAEA,QADH;AAEPzB,gBAAAA,KAAK,EAAEA,KAFA;AAGP2B,gBAAAA,IAAI,EAAEA,IAHC;AAIPM,gBAAAA,SAAS,EAAEnB,SAJJ;AAKPoB,gBAAAA,SAAS,EAAEpB,SALJ;AAMPqB,gBAAAA,KAAK,EAAErB,SANA;AAOPsB,gBAAAA,UAAU,EAAEA,UAPL;AAQPC,gBAAAA,MAAM,EAAEvB,SARD;AASPwB,gBAAAA,OAAO,EAAExB;AATF,eAAD,CAAR;AAWD,aAZM,CAAP;;AAcF,eAAK,SAAL;AACE,mBAAOnB,MAAM,CAAC4B,YAAP,CAAoBa,UAAU,IAAI;AACvCxC,cAAAA,QAAQ,CAAC;AACP6B,gBAAAA,QAAQ,EAAEA,QADH;AAEPzB,gBAAAA,KAAK,EAAEA,KAFA;AAGP2B,gBAAAA,IAAI,EAAEA,IAHC;AAIPM,gBAAAA,SAAS,EAAEnB,SAJJ;AAKPoB,gBAAAA,SAAS,EAAEpB,SALJ;AAMPqB,gBAAAA,KAAK,EAAErB,SANA;AAOPsB,gBAAAA,UAAU,EAAEA,UAPL;AAQPC,gBAAAA,MAAM,EAAEvB,SARD;AASPwB,gBAAAA,OAAO,EAAExB;AATF,eAAD,CAAR;AAWD,aAZM,CAAP;;AAcF,eAAK,SAAL;AACA,eAAK,MAAL;AACA,eAAK,UAAL;AACA,eAAK,OAAL;AACE,mBAAOnB,MAAM,CAACqB,YAAP,CAAoBoB,UAAU,IAAI;AACvC/C,cAAAA,aAAa,CAACM,MAAD,EAASsC,SAAS,IAAI;AACjCrC,gBAAAA,QAAQ,CAAC;AACP6B,kBAAAA,QAAQ,EAAEA,QADH;AAEPzB,kBAAAA,KAAK,EAAEA,KAFA;AAGP2B,kBAAAA,IAAI,EAAEA,IAHC;AAIPM,kBAAAA,SAAS,EAAEA,SAJJ;AAKPC,kBAAAA,SAAS,EAAEpB,SALJ;AAMPqB,kBAAAA,KAAK,EAAErB,SANA;AAOPsB,kBAAAA,UAAU,EAAEA,UAPL;AAQPC,kBAAAA,MAAM,EAAEvB,SARD;AASPwB,kBAAAA,OAAO,EAAExB;AATF,iBAAD,CAAR;AAWD,eAZY,CAAb;AAaD,aAdM,CAAP;;AAgBF,eAAK,MAAL;AACA,eAAK,OAAL;AACE,mBAAOnB,MAAM,CAAC4B,YAAP,CAAoBa,UAAU,IAAI;AACvC/C,cAAAA,aAAa,CAACM,MAAD,EAASsC,SAAS,IAAI;AACjCrC,gBAAAA,QAAQ,CAAC;AACP6B,kBAAAA,QAAQ,EAAEA,QADH;AAEPzB,kBAAAA,KAAK,EAAEA,KAFA;AAGP2B,kBAAAA,IAAI,EAAEA,IAHC;AAIPM,kBAAAA,SAAS,EAAEA,SAJJ;AAKPC,kBAAAA,SAAS,EAAEpB,SALJ;AAMPqB,kBAAAA,KAAK,EAAErB,SANA;AAOPsB,kBAAAA,UAAU,EAAEA,UAPL;AAQPC,kBAAAA,MAAM,EAAEvB,SARD;AASPwB,kBAAAA,OAAO,EAAExB;AATF,iBAAD,CAAR;AAWD,eAZY,CAAb;AAaD,aAdM,CAAP;;AAgBF,eAAK,WAAL;AACA,eAAK,QAAL;AACE,mBAAOnB,MAAM,CAACqB,YAAP,CAAoBoB,UAAU,IAAI;AACvCxC,cAAAA,QAAQ,CAAC;AACP6B,gBAAAA,QAAQ,EAAEA,QADH;AAEPzB,gBAAAA,KAAK,EAAEA,KAFA;AAGP2B,gBAAAA,IAAI,EAAEA,IAHC;AAIPM,gBAAAA,SAAS,EAAEnB,SAJJ;AAKPoB,gBAAAA,SAAS,EAAEpB,SALJ;AAMPqB,gBAAAA,KAAK,EAAErB,SANA;AAOPsB,gBAAAA,UAAU,EAAEA,UAPL;AAQPC,gBAAAA,MAAM,EAAEvB,SARD;AASPwB,gBAAAA,OAAO,EAAExB;AATF,eAAD,CAAR;AAWD,aAZM,CAAP;;AAcF,eAAK,OAAL;AACE,mBAAOnB,MAAM,CAAC4B,YAAP,CAAoBa,UAAU,IAAI;AACvCxC,cAAAA,QAAQ,CAAC;AACP6B,gBAAAA,QAAQ,EAAEA,QADH;AAEPzB,gBAAAA,KAAK,EAAEA,KAFA;AAGP2B,gBAAAA,IAAI,EAAEA,IAHC;AAIPM,gBAAAA,SAAS,EAAEnB,SAJJ;AAKPoB,gBAAAA,SAAS,EAAEpB,SALJ;AAMPqB,gBAAAA,KAAK,EAAErB,SANA;AAOPsB,gBAAAA,UAAU,EAAEA,UAPL;AAQPC,gBAAAA,MAAM,EAAEvB,SARD;AASPwB,gBAAAA,OAAO,EAAExB;AATF,eAAD,CAAR;AAWD,aAZM,CAAP;;AAcF,eAAK,KAAL;AACE,mBAAOR,UAAU,CAACX,MAAD,EAAS0C,MAAM,IAAI;AAClCzC,cAAAA,QAAQ,CAAC;AACP6B,gBAAAA,QAAQ,EAAEA,QADH;AAEPzB,gBAAAA,KAAK,EAAEA,KAFA;AAGP2B,gBAAAA,IAAI,EAAEA,IAHC;AAIPM,gBAAAA,SAAS,EAAEnB,SAJJ;AAKPoB,gBAAAA,SAAS,EAAEpB,SALJ;AAMPqB,gBAAAA,KAAK,EAAErB,SANA;AAOPsB,gBAAAA,UAAU,EAAEtB,SAPL;AAQPuB,gBAAAA,MAAM,EAAEA,MARD;AASPC,gBAAAA,OAAO,EAAExB;AATF,eAAD,CAAR;AAWD,aAZgB,CAAjB;;AAcF,eAAK,MAAL;AACA,eAAK,WAAL;AACA,eAAK,gBAAL;AACE,mBAAOnB,MAAM,CAACY,SAAP,CAAiB4B,KAAK,IAAI;AAC/BvC,cAAAA,QAAQ,CAAC;AACP6B,gBAAAA,QAAQ,EAAEA,QADH;AAEPzB,gBAAAA,KAAK,EAAEA,KAFA;AAGP2B,gBAAAA,IAAI,EAAEA,IAHC;AAIPM,gBAAAA,SAAS,EAAEnB,SAJJ;AAKPoB,gBAAAA,SAAS,EAAEpB,SALJ;AAMPqB,gBAAAA,KAAK,EAAEA,KANA;AAOPC,gBAAAA,UAAU,EAAEtB,SAPL;AAQPuB,gBAAAA,MAAM,EAAEvB,SARD;AASPwB,gBAAAA,OAAO,EAAExB;AATF,eAAD,CAAR;AAWD,aAZM,CAAP;;AAcF,eAAK,UAAL;AACA,eAAK,UAAL;AACE,mBAAOnB,MAAM,CAACY,SAAP,CAAiB6B,UAAU,IAAI;AACpCzC,cAAAA,MAAM,CAACY,SAAP,CAAiB2B,SAAS,IAAI;AAC5BvC,gBAAAA,MAAM,CAACY,SAAP,CAAiB4B,KAAK,IAAI;AACxBvC,kBAAAA,QAAQ,CAAC;AACP6B,oBAAAA,QAAQ,EAAEA,QADH;AAEPzB,oBAAAA,KAAK,EAAEA,KAFA;AAGP2B,oBAAAA,IAAI,EAAEA,IAHC;AAIPM,oBAAAA,SAAS,EAAEnB,SAJJ;AAKPoB,oBAAAA,SAAS,EAAEA,SALJ;AAMPC,oBAAAA,KAAK,EAAEA,KANA;AAOPC,oBAAAA,UAAU,EAAEA,UAPL;AAQPC,oBAAAA,MAAM,EAAEvB,SARD;AASPwB,oBAAAA,OAAO,EAAExB;AATF,mBAAD,CAAR;AAWD,iBAZD;AAaD,eAdD;AAeD,aAhBM,CAAP;;AAkBF,eAAK,KAAL;AACE,mBAAOC,WAAW,CAACpB,MAAD,EAAS2C,OAAO,IAAI;AACpC1C,cAAAA,QAAQ,CAAC;AACP6B,gBAAAA,QAAQ,EAAEA,QADH;AAEPzB,gBAAAA,KAAK,EAAEA,KAFA;AAGP2B,gBAAAA,IAAI,EAAEA,IAHC;AAIPM,gBAAAA,SAAS,EAAEnB,SAJJ;AAKPoB,gBAAAA,SAAS,EAAEpB,SALJ;AAMPqB,gBAAAA,KAAK,EAAErB,SANA;AAOPsB,gBAAAA,UAAU,EAAEtB,SAPL;AAQPuB,gBAAAA,MAAM,EAAEvB,SARD;AASPwB,gBAAAA,OAAO,EAAEA;AATF,eAAD,CAAR;AAWD,aAZiB,CAAlB;;AAcF;AACE,mBAAO3C,MAAM,CAACkC,IAAP,CAAY,OAAZ,EAAqB,IAAIC,KAAJ,CAAU,CAAC,GAAGpC,UAAU,CAACqC,OAAf,EAAwB,sBAAxB,EAAgDJ,IAAI,CAACK,IAArD,CAAV,CAArB,CAAP;AAtMJ;AAwMD,OA/MD;AAgND,KAjND;AAkND,GAnND;AAoND;;AAED,IAAIO,QAAQ,GAAGnB,aAAf;AACAjC,OAAO,CAACG,OAAR,GAAkBiD,QAAlB;AACAC,MAAM,CAACrD,OAAP,GAAiBiC,aAAjB;AACAoB,MAAM,CAACrD,OAAP,CAAeE,aAAf,GAA+BA,aAA/B","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readCollation = readCollation;\nexports.default = void 0;\n\nvar _collation = require(\"./collation\");\n\nvar _dataType = require(\"./data-type\");\n\nvar _sprintfJs = require(\"sprintf-js\");\n\nfunction readCollation(parser, callback) {\n  // s2.2.5.1.2\n  parser.readBuffer(5, collationData => {\n    let lcid = (collationData[2] & 0x0F) << 16;\n    lcid |= collationData[1] << 8;\n    lcid |= collationData[0]; // This may not be extracting the correct nibbles in the correct order.\n\n    let flags = collationData[3] >> 4;\n    flags |= collationData[2] & 0xF0; // This may not be extracting the correct nibble.\n\n    const version = collationData[3] & 0x0F;\n    const sortId = collationData[4];\n    const codepage = _collation.codepageBySortId[sortId] || _collation.codepageByLcid[lcid] || 'CP1252';\n    callback({\n      lcid,\n      flags,\n      version,\n      sortId,\n      codepage\n    });\n  });\n}\n\nfunction readSchema(parser, callback) {\n  // s2.2.5.5.3\n  parser.readUInt8(schemaPresent => {\n    if (schemaPresent === 0x01) {\n      parser.readBVarChar(dbname => {\n        parser.readBVarChar(owningSchema => {\n          parser.readUsVarChar(xmlSchemaCollection => {\n            callback({\n              dbname: dbname,\n              owningSchema: owningSchema,\n              xmlSchemaCollection: xmlSchemaCollection\n            });\n          });\n        });\n      });\n    } else {\n      callback(undefined);\n    }\n  });\n}\n\nfunction readUDTInfo(parser, callback) {\n  parser.readUInt16LE(maxByteSize => {\n    parser.readBVarChar(dbname => {\n      parser.readBVarChar(owningSchema => {\n        parser.readBVarChar(typeName => {\n          parser.readUsVarChar(assemblyName => {\n            callback({\n              maxByteSize: maxByteSize,\n              dbname: dbname,\n              owningSchema: owningSchema,\n              typeName: typeName,\n              assemblyName: assemblyName\n            });\n          });\n        });\n      });\n    });\n  });\n}\n\nfunction metadataParse(parser, options, callback) {\n  (options.tdsVersion < '7_2' ? parser.readUInt16LE : parser.readUInt32LE).call(parser, userType => {\n    parser.readUInt16LE(flags => {\n      parser.readUInt8(typeNumber => {\n        const type = _dataType.TYPE[typeNumber];\n\n        if (!type) {\n          return parser.emit('error', new Error((0, _sprintfJs.sprintf)('Unrecognised data type 0x%02X', typeNumber)));\n        }\n\n        switch (type.name) {\n          case 'Null':\n          case 'TinyInt':\n          case 'SmallInt':\n          case 'Int':\n          case 'BigInt':\n          case 'Real':\n          case 'Float':\n          case 'SmallMoney':\n          case 'Money':\n          case 'Bit':\n          case 'SmallDateTime':\n          case 'DateTime':\n          case 'Date':\n            return callback({\n              userType: userType,\n              flags: flags,\n              type: type,\n              collation: undefined,\n              precision: undefined,\n              scale: undefined,\n              dataLength: undefined,\n              schema: undefined,\n              udtInfo: undefined\n            });\n\n          case 'IntN':\n          case 'FloatN':\n          case 'MoneyN':\n          case 'BitN':\n          case 'UniqueIdentifier':\n          case 'DateTimeN':\n            return parser.readUInt8(dataLength => {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: undefined,\n                dataLength: dataLength,\n                schema: undefined,\n                udtInfo: undefined\n              });\n            });\n\n          case 'Variant':\n            return parser.readUInt32LE(dataLength => {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: undefined,\n                dataLength: dataLength,\n                schema: undefined,\n                udtInfo: undefined\n              });\n            });\n\n          case 'VarChar':\n          case 'Char':\n          case 'NVarChar':\n          case 'NChar':\n            return parser.readUInt16LE(dataLength => {\n              readCollation(parser, collation => {\n                callback({\n                  userType: userType,\n                  flags: flags,\n                  type: type,\n                  collation: collation,\n                  precision: undefined,\n                  scale: undefined,\n                  dataLength: dataLength,\n                  schema: undefined,\n                  udtInfo: undefined\n                });\n              });\n            });\n\n          case 'Text':\n          case 'NText':\n            return parser.readUInt32LE(dataLength => {\n              readCollation(parser, collation => {\n                callback({\n                  userType: userType,\n                  flags: flags,\n                  type: type,\n                  collation: collation,\n                  precision: undefined,\n                  scale: undefined,\n                  dataLength: dataLength,\n                  schema: undefined,\n                  udtInfo: undefined\n                });\n              });\n            });\n\n          case 'VarBinary':\n          case 'Binary':\n            return parser.readUInt16LE(dataLength => {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: undefined,\n                dataLength: dataLength,\n                schema: undefined,\n                udtInfo: undefined\n              });\n            });\n\n          case 'Image':\n            return parser.readUInt32LE(dataLength => {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: undefined,\n                dataLength: dataLength,\n                schema: undefined,\n                udtInfo: undefined\n              });\n            });\n\n          case 'Xml':\n            return readSchema(parser, schema => {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: undefined,\n                dataLength: undefined,\n                schema: schema,\n                udtInfo: undefined\n              });\n            });\n\n          case 'Time':\n          case 'DateTime2':\n          case 'DateTimeOffset':\n            return parser.readUInt8(scale => {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: scale,\n                dataLength: undefined,\n                schema: undefined,\n                udtInfo: undefined\n              });\n            });\n\n          case 'NumericN':\n          case 'DecimalN':\n            return parser.readUInt8(dataLength => {\n              parser.readUInt8(precision => {\n                parser.readUInt8(scale => {\n                  callback({\n                    userType: userType,\n                    flags: flags,\n                    type: type,\n                    collation: undefined,\n                    precision: precision,\n                    scale: scale,\n                    dataLength: dataLength,\n                    schema: undefined,\n                    udtInfo: undefined\n                  });\n                });\n              });\n            });\n\n          case 'UDT':\n            return readUDTInfo(parser, udtInfo => {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: undefined,\n                dataLength: undefined,\n                schema: undefined,\n                udtInfo: udtInfo\n              });\n            });\n\n          default:\n            return parser.emit('error', new Error((0, _sprintfJs.sprintf)('Unrecognised type %s', type.name)));\n        }\n      });\n    });\n  });\n}\n\nvar _default = metadataParse;\nexports.default = _default;\nmodule.exports = metadataParse;\nmodule.exports.readCollation = readCollation;"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _events = require(\"events\");\n\nvar _writableTrackingBuffer = _interopRequireDefault(require(\"./tracking-buffer/writable-tracking-buffer\"));\n\nvar _readableStream = require(\"readable-stream\");\n\nvar _token = require(\"./token/token\");\n\nvar _message = _interopRequireDefault(require(\"./message\"));\n\nvar _packet = require(\"./packet\");\n\nvar _errors = require(\"./errors\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst FLAGS = {\n  nullable: 1 << 0,\n  caseSen: 1 << 1,\n  updateableReadWrite: 1 << 2,\n  updateableUnknown: 1 << 3,\n  identity: 1 << 4,\n  computed: 1 << 5,\n  // introduced in TDS 7.2\n  fixedLenCLRType: 1 << 8,\n  // introduced in TDS 7.2\n  sparseColumnSet: 1 << 10,\n  // introduced in TDS 7.3.B\n  hidden: 1 << 13,\n  // introduced in TDS 7.2\n  key: 1 << 14,\n  // introduced in TDS 7.2\n  nullableUnknown: 1 << 15 // introduced in TDS 7.2\n\n};\nconst DONE_STATUS = {\n  FINAL: 0x00,\n  MORE: 0x1,\n  ERROR: 0x2,\n  INXACT: 0x4,\n  COUNT: 0x10,\n  ATTN: 0x20,\n  SRVERROR: 0x100\n};\n\nclass BulkLoad extends _events.EventEmitter {\n  constructor(table, connectionOptions, {\n    checkConstraints = false,\n    fireTriggers = false,\n    keepNulls = false,\n    lockTable = false\n  }, callback) {\n    if (typeof checkConstraints !== 'boolean') {\n      throw new TypeError('The \"options.checkConstraints\" property must be of type boolean.');\n    }\n\n    if (typeof fireTriggers !== 'boolean') {\n      throw new TypeError('The \"options.fireTriggers\" property must be of type boolean.');\n    }\n\n    if (typeof keepNulls !== 'boolean') {\n      throw new TypeError('The \"options.keepNulls\" property must be of type boolean.');\n    }\n\n    if (typeof lockTable !== 'boolean') {\n      throw new TypeError('The \"options.lockTable\" property must be of type boolean.');\n    }\n\n    super();\n    this.error = undefined;\n    this.canceled = false;\n    this.executionStarted = false;\n    this.table = table;\n    this.options = connectionOptions;\n    this.callback = callback;\n    this.columns = [];\n    this.columnsByName = {};\n    this.firstRowWritten = false;\n    this.streamingMode = false;\n    this.rowToPacketTransform = new RowTransform(this); // eslint-disable-line no-use-before-define\n\n    this.bulkOptions = {\n      checkConstraints,\n      fireTriggers,\n      keepNulls,\n      lockTable\n    };\n  }\n\n  addColumn(name, type, {\n    output = false,\n    length,\n    precision,\n    scale,\n    objName = name,\n    nullable = true\n  }) {\n    if (this.firstRowWritten) {\n      throw new Error('Columns cannot be added to bulk insert after the first row has been written.');\n    }\n\n    if (this.executionStarted) {\n      throw new Error('Columns cannot be added to bulk insert after execution has started.');\n    }\n\n    const column = {\n      type: type,\n      name: name,\n      value: null,\n      output: output,\n      length: length,\n      precision: precision,\n      scale: scale,\n      objName: objName,\n      nullable: nullable\n    };\n\n    if ((type.id & 0x30) === 0x20) {\n      if (column.length == null && type.resolveLength) {\n        column.length = type.resolveLength(column);\n      }\n    }\n\n    if (type.resolvePrecision && column.precision == null) {\n      column.precision = type.resolvePrecision(column);\n    }\n\n    if (type.resolveScale && column.scale == null) {\n      column.scale = type.resolveScale(column);\n    }\n\n    this.columns.push(column);\n    this.columnsByName[name] = column;\n  }\n\n  addRow(...input) {\n    this.firstRowWritten = true;\n    let row;\n\n    if (input.length > 1 || !input[0] || typeof input[0] !== 'object') {\n      row = input;\n    } else {\n      row = input[0];\n    } // write each column\n\n\n    if (Array.isArray(row)) {\n      this.rowToPacketTransform.write(row);\n    } else {\n      const object = row;\n      this.rowToPacketTransform.write(this.columns.map(column => {\n        return object[column.objName];\n      }));\n    }\n  }\n\n  getOptionsSql() {\n    const addOptions = [];\n\n    if (this.bulkOptions.checkConstraints) {\n      addOptions.push('CHECK_CONSTRAINTS');\n    }\n\n    if (this.bulkOptions.fireTriggers) {\n      addOptions.push('FIRE_TRIGGERS');\n    }\n\n    if (this.bulkOptions.keepNulls) {\n      addOptions.push('KEEP_NULLS');\n    }\n\n    if (this.bulkOptions.lockTable) {\n      addOptions.push('TABLOCK');\n    }\n\n    if (addOptions.length > 0) {\n      return ` WITH (${addOptions.join(',')})`;\n    } else {\n      return '';\n    }\n  }\n\n  getBulkInsertSql() {\n    let sql = 'insert bulk ' + this.table + '(';\n\n    for (let i = 0, len = this.columns.length; i < len; i++) {\n      const c = this.columns[i];\n\n      if (i !== 0) {\n        sql += ', ';\n      }\n\n      sql += '[' + c.name + '] ' + c.type.declaration(c);\n    }\n\n    sql += ')';\n    sql += this.getOptionsSql();\n    return sql;\n  }\n\n  getTableCreationSql() {\n    let sql = 'CREATE TABLE ' + this.table + '(\\n';\n\n    for (let i = 0, len = this.columns.length; i < len; i++) {\n      const c = this.columns[i];\n\n      if (i !== 0) {\n        sql += ',\\n';\n      }\n\n      sql += '[' + c.name + '] ' + c.type.declaration(c);\n\n      if (c.nullable !== undefined) {\n        sql += ' ' + (c.nullable ? 'NULL' : 'NOT NULL');\n      }\n    }\n\n    sql += '\\n)';\n    return sql;\n  }\n\n  getColMetaData() {\n    const tBuf = new _writableTrackingBuffer.default(100, null, true); // TokenType\n\n    tBuf.writeUInt8(_token.TYPE.COLMETADATA); // Count\n\n    tBuf.writeUInt16LE(this.columns.length);\n\n    for (let j = 0, len = this.columns.length; j < len; j++) {\n      const c = this.columns[j]; // UserType\n\n      if (this.options.tdsVersion < '7_2') {\n        tBuf.writeUInt16LE(0);\n      } else {\n        tBuf.writeUInt32LE(0);\n      } // Flags\n\n\n      let flags = FLAGS.updateableReadWrite;\n\n      if (c.nullable) {\n        flags |= FLAGS.nullable;\n      } else if (c.nullable === undefined && this.options.tdsVersion >= '7_2') {\n        flags |= FLAGS.nullableUnknown;\n      }\n\n      tBuf.writeUInt16LE(flags); // TYPE_INFO\n\n      c.type.writeTypeInfo(tBuf, c, this.options); // ColName\n\n      tBuf.writeBVarchar(c.name, 'ucs2');\n    }\n\n    return tBuf.data;\n  }\n\n  setTimeout(timeout) {\n    this.timeout = timeout;\n  }\n\n  createDoneToken() {\n    // It might be nice to make DoneToken a class if anything needs to create them, but for now, just do it here\n    const tBuf = new _writableTrackingBuffer.default(this.options.tdsVersion < '7_2' ? 9 : 13);\n    tBuf.writeUInt8(_token.TYPE.DONE);\n    const status = DONE_STATUS.FINAL;\n    tBuf.writeUInt16LE(status);\n    tBuf.writeUInt16LE(0); // CurCmd (TDS ignores this)\n\n    tBuf.writeUInt32LE(0); // row count - doesn't really matter\n\n    if (this.options.tdsVersion >= '7_2') {\n      tBuf.writeUInt32LE(0); // row count is 64 bits in >= TDS 7.2\n    }\n\n    return tBuf.data;\n  } // This method switches the BulkLoad object into streaming mode and returns\n  // a stream.Writable for streaming rows to the server.\n\n\n  getRowStream() {\n    if (this.firstRowWritten) {\n      throw new Error('BulkLoad cannot be switched to streaming mode after first row has been written using addRow().');\n    }\n\n    if (this.executionStarted) {\n      throw new Error('BulkLoad cannot be switched to streaming mode after execution has started.');\n    }\n\n    this.streamingMode = true;\n    return this.rowToPacketTransform;\n  }\n\n  getMessageStream() {\n    const message = new _message.default({\n      type: _packet.TYPE.BULK_LOAD\n    });\n    this.rowToPacketTransform.pipe(message);\n    this.rowToPacketTransform.once('finish', () => {\n      this.removeListener('cancel', onCancel);\n    });\n\n    const onCancel = () => {\n      this.rowToPacketTransform.emit('error', (0, _errors.RequestError)('Canceled.', 'ECANCEL'));\n      this.rowToPacketTransform.destroy();\n    };\n\n    this.once('cancel', onCancel);\n    return message;\n  }\n\n  cancel() {\n    if (this.canceled) {\n      return;\n    }\n\n    this.canceled = true;\n    this.emit('cancel');\n  }\n\n}\n\nvar _default = BulkLoad;\nexports.default = _default;\nmodule.exports = BulkLoad; // A transform that converts rows to packets.\n\nclass RowTransform extends _readableStream.Transform {\n  constructor(bulkLoad) {\n    super({\n      writableObjectMode: true\n    });\n    this.bulkLoad = bulkLoad;\n    this.mainOptions = bulkLoad.options;\n    this.columns = bulkLoad.columns;\n    this.columnMetadataWritten = false;\n  }\n\n  _transform(row, _encoding, callback) {\n    if (!this.columnMetadataWritten) {\n      this.push(this.bulkLoad.getColMetaData());\n      this.columnMetadataWritten = true;\n    }\n\n    const buf = new _writableTrackingBuffer.default(64, 'ucs2', true);\n    buf.writeUInt8(_token.TYPE.ROW);\n\n    for (let i = 0; i < this.columns.length; i++) {\n      const c = this.columns[i];\n      c.type.writeParameterData(buf, {\n        length: c.length,\n        scale: c.scale,\n        precision: c.precision,\n        value: row[i]\n      }, this.mainOptions, () => {});\n    }\n\n    this.push(buf.data);\n    process.nextTick(callback);\n  }\n\n  _flush(callback) {\n    this.push(this.bulkLoad.createDoneToken());\n    process.nextTick(callback);\n  }\n\n}","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/tedious/lib/bulk-load.js"],"names":["Object","defineProperty","exports","value","default","_events","require","_writableTrackingBuffer","_interopRequireDefault","_readableStream","_token","_message","_packet","_errors","obj","__esModule","FLAGS","nullable","caseSen","updateableReadWrite","updateableUnknown","identity","computed","fixedLenCLRType","sparseColumnSet","hidden","key","nullableUnknown","DONE_STATUS","FINAL","MORE","ERROR","INXACT","COUNT","ATTN","SRVERROR","BulkLoad","EventEmitter","constructor","table","connectionOptions","checkConstraints","fireTriggers","keepNulls","lockTable","callback","TypeError","error","undefined","canceled","executionStarted","options","columns","columnsByName","firstRowWritten","streamingMode","rowToPacketTransform","RowTransform","bulkOptions","addColumn","name","type","output","length","precision","scale","objName","Error","column","id","resolveLength","resolvePrecision","resolveScale","push","addRow","input","row","Array","isArray","write","object","map","getOptionsSql","addOptions","join","getBulkInsertSql","sql","i","len","c","declaration","getTableCreationSql","getColMetaData","tBuf","writeUInt8","TYPE","COLMETADATA","writeUInt16LE","j","tdsVersion","writeUInt32LE","flags","writeTypeInfo","writeBVarchar","data","setTimeout","timeout","createDoneToken","DONE","status","getRowStream","getMessageStream","message","BULK_LOAD","pipe","once","removeListener","onCancel","emit","RequestError","destroy","cancel","_default","module","Transform","bulkLoad","writableObjectMode","mainOptions","columnMetadataWritten","_transform","_encoding","buf","ROW","writeParameterData","process","nextTick","_flush"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _events = require(\"events\");\n\nvar _writableTrackingBuffer = _interopRequireDefault(require(\"./tracking-buffer/writable-tracking-buffer\"));\n\nvar _readableStream = require(\"readable-stream\");\n\nvar _token = require(\"./token/token\");\n\nvar _message = _interopRequireDefault(require(\"./message\"));\n\nvar _packet = require(\"./packet\");\n\nvar _errors = require(\"./errors\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst FLAGS = {\n  nullable: 1 << 0,\n  caseSen: 1 << 1,\n  updateableReadWrite: 1 << 2,\n  updateableUnknown: 1 << 3,\n  identity: 1 << 4,\n  computed: 1 << 5,\n  // introduced in TDS 7.2\n  fixedLenCLRType: 1 << 8,\n  // introduced in TDS 7.2\n  sparseColumnSet: 1 << 10,\n  // introduced in TDS 7.3.B\n  hidden: 1 << 13,\n  // introduced in TDS 7.2\n  key: 1 << 14,\n  // introduced in TDS 7.2\n  nullableUnknown: 1 << 15 // introduced in TDS 7.2\n\n};\nconst DONE_STATUS = {\n  FINAL: 0x00,\n  MORE: 0x1,\n  ERROR: 0x2,\n  INXACT: 0x4,\n  COUNT: 0x10,\n  ATTN: 0x20,\n  SRVERROR: 0x100\n};\n\nclass BulkLoad extends _events.EventEmitter {\n  constructor(table, connectionOptions, {\n    checkConstraints = false,\n    fireTriggers = false,\n    keepNulls = false,\n    lockTable = false\n  }, callback) {\n    if (typeof checkConstraints !== 'boolean') {\n      throw new TypeError('The \"options.checkConstraints\" property must be of type boolean.');\n    }\n\n    if (typeof fireTriggers !== 'boolean') {\n      throw new TypeError('The \"options.fireTriggers\" property must be of type boolean.');\n    }\n\n    if (typeof keepNulls !== 'boolean') {\n      throw new TypeError('The \"options.keepNulls\" property must be of type boolean.');\n    }\n\n    if (typeof lockTable !== 'boolean') {\n      throw new TypeError('The \"options.lockTable\" property must be of type boolean.');\n    }\n\n    super();\n    this.error = undefined;\n    this.canceled = false;\n    this.executionStarted = false;\n    this.table = table;\n    this.options = connectionOptions;\n    this.callback = callback;\n    this.columns = [];\n    this.columnsByName = {};\n    this.firstRowWritten = false;\n    this.streamingMode = false;\n    this.rowToPacketTransform = new RowTransform(this); // eslint-disable-line no-use-before-define\n\n    this.bulkOptions = {\n      checkConstraints,\n      fireTriggers,\n      keepNulls,\n      lockTable\n    };\n  }\n\n  addColumn(name, type, {\n    output = false,\n    length,\n    precision,\n    scale,\n    objName = name,\n    nullable = true\n  }) {\n    if (this.firstRowWritten) {\n      throw new Error('Columns cannot be added to bulk insert after the first row has been written.');\n    }\n\n    if (this.executionStarted) {\n      throw new Error('Columns cannot be added to bulk insert after execution has started.');\n    }\n\n    const column = {\n      type: type,\n      name: name,\n      value: null,\n      output: output,\n      length: length,\n      precision: precision,\n      scale: scale,\n      objName: objName,\n      nullable: nullable\n    };\n\n    if ((type.id & 0x30) === 0x20) {\n      if (column.length == null && type.resolveLength) {\n        column.length = type.resolveLength(column);\n      }\n    }\n\n    if (type.resolvePrecision && column.precision == null) {\n      column.precision = type.resolvePrecision(column);\n    }\n\n    if (type.resolveScale && column.scale == null) {\n      column.scale = type.resolveScale(column);\n    }\n\n    this.columns.push(column);\n    this.columnsByName[name] = column;\n  }\n\n  addRow(...input) {\n    this.firstRowWritten = true;\n    let row;\n\n    if (input.length > 1 || !input[0] || typeof input[0] !== 'object') {\n      row = input;\n    } else {\n      row = input[0];\n    } // write each column\n\n\n    if (Array.isArray(row)) {\n      this.rowToPacketTransform.write(row);\n    } else {\n      const object = row;\n      this.rowToPacketTransform.write(this.columns.map(column => {\n        return object[column.objName];\n      }));\n    }\n  }\n\n  getOptionsSql() {\n    const addOptions = [];\n\n    if (this.bulkOptions.checkConstraints) {\n      addOptions.push('CHECK_CONSTRAINTS');\n    }\n\n    if (this.bulkOptions.fireTriggers) {\n      addOptions.push('FIRE_TRIGGERS');\n    }\n\n    if (this.bulkOptions.keepNulls) {\n      addOptions.push('KEEP_NULLS');\n    }\n\n    if (this.bulkOptions.lockTable) {\n      addOptions.push('TABLOCK');\n    }\n\n    if (addOptions.length > 0) {\n      return ` WITH (${addOptions.join(',')})`;\n    } else {\n      return '';\n    }\n  }\n\n  getBulkInsertSql() {\n    let sql = 'insert bulk ' + this.table + '(';\n\n    for (let i = 0, len = this.columns.length; i < len; i++) {\n      const c = this.columns[i];\n\n      if (i !== 0) {\n        sql += ', ';\n      }\n\n      sql += '[' + c.name + '] ' + c.type.declaration(c);\n    }\n\n    sql += ')';\n    sql += this.getOptionsSql();\n    return sql;\n  }\n\n  getTableCreationSql() {\n    let sql = 'CREATE TABLE ' + this.table + '(\\n';\n\n    for (let i = 0, len = this.columns.length; i < len; i++) {\n      const c = this.columns[i];\n\n      if (i !== 0) {\n        sql += ',\\n';\n      }\n\n      sql += '[' + c.name + '] ' + c.type.declaration(c);\n\n      if (c.nullable !== undefined) {\n        sql += ' ' + (c.nullable ? 'NULL' : 'NOT NULL');\n      }\n    }\n\n    sql += '\\n)';\n    return sql;\n  }\n\n  getColMetaData() {\n    const tBuf = new _writableTrackingBuffer.default(100, null, true); // TokenType\n\n    tBuf.writeUInt8(_token.TYPE.COLMETADATA); // Count\n\n    tBuf.writeUInt16LE(this.columns.length);\n\n    for (let j = 0, len = this.columns.length; j < len; j++) {\n      const c = this.columns[j]; // UserType\n\n      if (this.options.tdsVersion < '7_2') {\n        tBuf.writeUInt16LE(0);\n      } else {\n        tBuf.writeUInt32LE(0);\n      } // Flags\n\n\n      let flags = FLAGS.updateableReadWrite;\n\n      if (c.nullable) {\n        flags |= FLAGS.nullable;\n      } else if (c.nullable === undefined && this.options.tdsVersion >= '7_2') {\n        flags |= FLAGS.nullableUnknown;\n      }\n\n      tBuf.writeUInt16LE(flags); // TYPE_INFO\n\n      c.type.writeTypeInfo(tBuf, c, this.options); // ColName\n\n      tBuf.writeBVarchar(c.name, 'ucs2');\n    }\n\n    return tBuf.data;\n  }\n\n  setTimeout(timeout) {\n    this.timeout = timeout;\n  }\n\n  createDoneToken() {\n    // It might be nice to make DoneToken a class if anything needs to create them, but for now, just do it here\n    const tBuf = new _writableTrackingBuffer.default(this.options.tdsVersion < '7_2' ? 9 : 13);\n    tBuf.writeUInt8(_token.TYPE.DONE);\n    const status = DONE_STATUS.FINAL;\n    tBuf.writeUInt16LE(status);\n    tBuf.writeUInt16LE(0); // CurCmd (TDS ignores this)\n\n    tBuf.writeUInt32LE(0); // row count - doesn't really matter\n\n    if (this.options.tdsVersion >= '7_2') {\n      tBuf.writeUInt32LE(0); // row count is 64 bits in >= TDS 7.2\n    }\n\n    return tBuf.data;\n  } // This method switches the BulkLoad object into streaming mode and returns\n  // a stream.Writable for streaming rows to the server.\n\n\n  getRowStream() {\n    if (this.firstRowWritten) {\n      throw new Error('BulkLoad cannot be switched to streaming mode after first row has been written using addRow().');\n    }\n\n    if (this.executionStarted) {\n      throw new Error('BulkLoad cannot be switched to streaming mode after execution has started.');\n    }\n\n    this.streamingMode = true;\n    return this.rowToPacketTransform;\n  }\n\n  getMessageStream() {\n    const message = new _message.default({\n      type: _packet.TYPE.BULK_LOAD\n    });\n    this.rowToPacketTransform.pipe(message);\n    this.rowToPacketTransform.once('finish', () => {\n      this.removeListener('cancel', onCancel);\n    });\n\n    const onCancel = () => {\n      this.rowToPacketTransform.emit('error', (0, _errors.RequestError)('Canceled.', 'ECANCEL'));\n      this.rowToPacketTransform.destroy();\n    };\n\n    this.once('cancel', onCancel);\n    return message;\n  }\n\n  cancel() {\n    if (this.canceled) {\n      return;\n    }\n\n    this.canceled = true;\n    this.emit('cancel');\n  }\n\n}\n\nvar _default = BulkLoad;\nexports.default = _default;\nmodule.exports = BulkLoad; // A transform that converts rows to packets.\n\nclass RowTransform extends _readableStream.Transform {\n  constructor(bulkLoad) {\n    super({\n      writableObjectMode: true\n    });\n    this.bulkLoad = bulkLoad;\n    this.mainOptions = bulkLoad.options;\n    this.columns = bulkLoad.columns;\n    this.columnMetadataWritten = false;\n  }\n\n  _transform(row, _encoding, callback) {\n    if (!this.columnMetadataWritten) {\n      this.push(this.bulkLoad.getColMetaData());\n      this.columnMetadataWritten = true;\n    }\n\n    const buf = new _writableTrackingBuffer.default(64, 'ucs2', true);\n    buf.writeUInt8(_token.TYPE.ROW);\n\n    for (let i = 0; i < this.columns.length; i++) {\n      const c = this.columns[i];\n      c.type.writeParameterData(buf, {\n        length: c.length,\n        scale: c.scale,\n        precision: c.precision,\n        value: row[i]\n      }, this.mainOptions, () => {});\n    }\n\n    this.push(buf.data);\n    process.nextTick(callback);\n  }\n\n  _flush(callback) {\n    this.push(this.bulkLoad.createDoneToken());\n    process.nextTick(callback);\n  }\n\n}"]},"metadata":{},"sourceType":"script"}
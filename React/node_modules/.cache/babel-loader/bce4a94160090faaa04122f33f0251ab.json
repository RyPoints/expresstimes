{"ast":null,"code":"'use strict';\n\nconst types = require('./types.js');\n\nconst MiniPass = require('minipass');\n\nconst SLURP = Symbol('slurp');\nmodule.exports = class ReadEntry extends MiniPass {\n  constructor(header, ex, gex) {\n    super();\n    this.extended = ex;\n    this.globalExtended = gex;\n    this.header = header;\n    this.startBlockSize = 512 * Math.ceil(header.size / 512);\n    this.blockRemain = this.startBlockSize;\n    this.remain = header.size;\n    this.type = header.type;\n    this.meta = false;\n    this.ignore = false;\n\n    switch (this.type) {\n      case 'File':\n      case 'OldFile':\n      case 'Link':\n      case 'SymbolicLink':\n      case 'CharacterDevice':\n      case 'BlockDevice':\n      case 'Directory':\n      case 'FIFO':\n      case 'ContiguousFile':\n      case 'GNUDumpDir':\n        break;\n\n      case 'NextFileHasLongLinkpath':\n      case 'NextFileHasLongPath':\n      case 'OldGnuLongPath':\n      case 'GlobalExtendedHeader':\n      case 'ExtendedHeader':\n      case 'OldExtendedHeader':\n        this.meta = true;\n        break;\n      // NOTE: gnutar and bsdtar treat unrecognized types as 'File'\n      // it may be worth doing the same, but with a warning.\n\n      default:\n        this.ignore = true;\n    }\n\n    this.path = header.path;\n    this.mode = header.mode;\n    if (this.mode) this.mode = this.mode & 0o7777;\n    this.uid = header.uid;\n    this.gid = header.gid;\n    this.uname = header.uname;\n    this.gname = header.gname;\n    this.size = header.size;\n    this.mtime = header.mtime;\n    this.atime = header.atime;\n    this.ctime = header.ctime;\n    this.linkpath = header.linkpath;\n    this.uname = header.uname;\n    this.gname = header.gname;\n    if (ex) this[SLURP](ex);\n    if (gex) this[SLURP](gex, true);\n  }\n\n  write(data) {\n    const writeLen = data.length;\n    if (writeLen > this.blockRemain) throw new Error('writing more to entry than is appropriate');\n    const r = this.remain;\n    const br = this.blockRemain;\n    this.remain = Math.max(0, r - writeLen);\n    this.blockRemain = Math.max(0, br - writeLen);\n    if (this.ignore) return true;\n    if (r >= writeLen) return super.write(data); // r < writeLen\n\n    return super.write(data.slice(0, r));\n  }\n\n  [SLURP](ex, global) {\n    for (let k in ex) {\n      // we slurp in everything except for the path attribute in\n      // a global extended header, because that's weird.\n      if (ex[k] !== null && ex[k] !== undefined && !(global && k === 'path')) this[k] = ex[k];\n    }\n  }\n\n};","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/chokidar/node_modules/fsevents/node_modules/tar/lib/read-entry.js"],"names":["types","require","MiniPass","SLURP","Symbol","module","exports","ReadEntry","constructor","header","ex","gex","extended","globalExtended","startBlockSize","Math","ceil","size","blockRemain","remain","type","meta","ignore","path","mode","uid","gid","uname","gname","mtime","atime","ctime","linkpath","write","data","writeLen","length","Error","r","br","max","slice","global","k","undefined"],"mappings":"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","sourcesContent":["'use strict'\nconst types = require('./types.js')\nconst MiniPass = require('minipass')\n\nconst SLURP = Symbol('slurp')\nmodule.exports = class ReadEntry extends MiniPass {\n  constructor (header, ex, gex) {\n    super()\n    this.extended = ex\n    this.globalExtended = gex\n    this.header = header\n    this.startBlockSize = 512 * Math.ceil(header.size / 512)\n    this.blockRemain = this.startBlockSize\n    this.remain = header.size\n    this.type = header.type\n    this.meta = false\n    this.ignore = false\n    switch (this.type) {\n      case 'File':\n      case 'OldFile':\n      case 'Link':\n      case 'SymbolicLink':\n      case 'CharacterDevice':\n      case 'BlockDevice':\n      case 'Directory':\n      case 'FIFO':\n      case 'ContiguousFile':\n      case 'GNUDumpDir':\n        break\n\n      case 'NextFileHasLongLinkpath':\n      case 'NextFileHasLongPath':\n      case 'OldGnuLongPath':\n      case 'GlobalExtendedHeader':\n      case 'ExtendedHeader':\n      case 'OldExtendedHeader':\n        this.meta = true\n        break\n\n      // NOTE: gnutar and bsdtar treat unrecognized types as 'File'\n      // it may be worth doing the same, but with a warning.\n      default:\n        this.ignore = true\n    }\n\n    this.path = header.path\n    this.mode = header.mode\n    if (this.mode)\n      this.mode = this.mode & 0o7777\n    this.uid = header.uid\n    this.gid = header.gid\n    this.uname = header.uname\n    this.gname = header.gname\n    this.size = header.size\n    this.mtime = header.mtime\n    this.atime = header.atime\n    this.ctime = header.ctime\n    this.linkpath = header.linkpath\n    this.uname = header.uname\n    this.gname = header.gname\n\n    if (ex) this[SLURP](ex)\n    if (gex) this[SLURP](gex, true)\n  }\n\n  write (data) {\n    const writeLen = data.length\n    if (writeLen > this.blockRemain)\n      throw new Error('writing more to entry than is appropriate')\n\n    const r = this.remain\n    const br = this.blockRemain\n    this.remain = Math.max(0, r - writeLen)\n    this.blockRemain = Math.max(0, br - writeLen)\n    if (this.ignore)\n      return true\n\n    if (r >= writeLen)\n      return super.write(data)\n\n    // r < writeLen\n    return super.write(data.slice(0, r))\n  }\n\n  [SLURP] (ex, global) {\n    for (let k in ex) {\n      // we slurp in everything except for the path attribute in\n      // a global extended header, because that's weird.\n      if (ex[k] !== null && ex[k] !== undefined &&\n          !(global && k === 'path'))\n        this[k] = ex[k]\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst Promise = require('../../promise');\n\nconst sequelizeErrors = require('../../errors');\n\nconst QueryTypes = require('../../query-types');\n/**\n Returns an object that treats SQLite's inabilities to do certain queries.\n\n @class QueryInterface\n @static\n @private\n */\n\n/**\n  A wrapper that fixes SQLite's inability to remove columns from existing tables.\n  It will create a backup of the table, drop the table afterwards and create a\n  new table with the same name but without the obsolete column.\n\n  @param  {QueryInterface} qi\n  @param  {string} tableName     The name of the table.\n  @param  {string} attributeName The name of the attribute that we want to remove.\n  @param  {Object} options\n  @param  {boolean|Function} [options.logging] A function that logs the sql queries, or false for explicitly not logging these queries\n\n  @since 1.6.0\n  @private\n */\n\n\nfunction removeColumn(qi, tableName, attributeName, options) {\n  options = options || {};\n  return qi.describeTable(tableName, options).then(fields => {\n    delete fields[attributeName];\n    const sql = qi.QueryGenerator.removeColumnQuery(tableName, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n    return Promise.each(subQueries, subQuery => qi.sequelize.query(`${subQuery};`, Object.assign({\n      raw: true\n    }, options)));\n  });\n}\n\nexports.removeColumn = removeColumn;\n/**\n  A wrapper that fixes SQLite's inability to change columns from existing tables.\n  It will create a backup of the table, drop the table afterwards and create a\n  new table with the same name but with a modified version of the respective column.\n\n  @param  {QueryInterface} qi\n  @param  {string} tableName The name of the table.\n  @param  {Object} attributes An object with the attribute's name as key and its options as value object.\n  @param  {Object} options\n  @param  {boolean|Function} [options.logging] A function that logs the sql queries, or false for explicitly not logging these queries\n\n  @since 1.6.0\n  @private\n */\n\nfunction changeColumn(qi, tableName, attributes, options) {\n  const attributeName = Object.keys(attributes)[0];\n  options = options || {};\n  return qi.describeTable(tableName, options).then(fields => {\n    fields[attributeName] = attributes[attributeName];\n    const sql = qi.QueryGenerator.removeColumnQuery(tableName, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n    return Promise.each(subQueries, subQuery => qi.sequelize.query(`${subQuery};`, Object.assign({\n      raw: true\n    }, options)));\n  });\n}\n\nexports.changeColumn = changeColumn;\n/**\n  A wrapper that fixes SQLite's inability to rename columns from existing tables.\n  It will create a backup of the table, drop the table afterwards and create a\n  new table with the same name but with a renamed version of the respective column.\n\n  @param  {QueryInterface} qi\n  @param  {string} tableName The name of the table.\n  @param  {string} attrNameBefore The name of the attribute before it was renamed.\n  @param  {string} attrNameAfter The name of the attribute after it was renamed.\n  @param  {Object} options\n  @param  {boolean|Function} [options.logging] A function that logs the sql queries, or false for explicitly not logging these queries\n\n  @since 1.6.0\n  @private\n */\n\nfunction renameColumn(qi, tableName, attrNameBefore, attrNameAfter, options) {\n  options = options || {};\n  return qi.describeTable(tableName, options).then(fields => {\n    fields[attrNameAfter] = _.clone(fields[attrNameBefore]);\n    delete fields[attrNameBefore];\n    const sql = qi.QueryGenerator.renameColumnQuery(tableName, attrNameBefore, attrNameAfter, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n    return Promise.each(subQueries, subQuery => qi.sequelize.query(`${subQuery};`, Object.assign({\n      raw: true\n    }, options)));\n  });\n}\n\nexports.renameColumn = renameColumn;\n/**\n * @param {QueryInterface} qi\n * @param {string} tableName\n * @param {string} constraintName\n * @param {Object} options\n *\n * @private\n */\n\nfunction removeConstraint(qi, tableName, constraintName, options) {\n  let createTableSql;\n  return qi.showConstraint(tableName, constraintName).then(constraints => {\n    // sqlite can't show only one constraint, so we find here the one to remove\n    const constraint = constraints.find(constaint => constaint.constraintName === constraintName);\n\n    if (constraint) {\n      createTableSql = constraint.sql;\n      constraint.constraintName = qi.QueryGenerator.quoteIdentifier(constraint.constraintName);\n      let constraintSnippet = `, CONSTRAINT ${constraint.constraintName} ${constraint.constraintType} ${constraint.constraintCondition}`;\n\n      if (constraint.constraintType === 'FOREIGN KEY') {\n        const referenceTableName = qi.QueryGenerator.quoteTable(constraint.referenceTableName);\n        constraint.referenceTableKeys = constraint.referenceTableKeys.map(columnName => qi.QueryGenerator.quoteIdentifier(columnName));\n        const referenceTableKeys = constraint.referenceTableKeys.join(', ');\n        constraintSnippet += ` REFERENCES ${referenceTableName} (${referenceTableKeys})`;\n        constraintSnippet += ` ON UPDATE ${constraint.updateAction}`;\n        constraintSnippet += ` ON DELETE ${constraint.deleteAction}`;\n      }\n\n      createTableSql = createTableSql.replace(constraintSnippet, '');\n      createTableSql += ';';\n      return qi.describeTable(tableName, options);\n    }\n\n    throw new sequelizeErrors.UnknownConstraintError({\n      message: `Constraint ${constraintName} on table ${tableName} does not exist`,\n      constraint: constraintName,\n      table: tableName\n    });\n  }).then(fields => {\n    const sql = qi.QueryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n\n    const subQueries = sql.split(';').filter(q => q !== '');\n    return Promise.each(subQueries, subQuery => qi.sequelize.query(`${subQuery};`, Object.assign({\n      raw: true\n    }, options)));\n  });\n}\n\nexports.removeConstraint = removeConstraint;\n/**\n * @param {QueryInterface} qi\n * @param {string} tableName\n * @param {Object} options\n *\n * @private\n */\n\nfunction addConstraint(qi, tableName, options) {\n  const constraintSnippet = qi.QueryGenerator.getConstraintSnippet(tableName, options);\n  const describeCreateTableSql = qi.QueryGenerator.describeCreateTableQuery(tableName);\n  let createTableSql;\n  return qi.sequelize.query(describeCreateTableSql, Object.assign({}, options, {\n    type: QueryTypes.SELECT,\n    raw: true\n  })).then(constraints => {\n    const sql = constraints[0].sql;\n    const index = sql.length - 1; //Replace ending ')' with constraint snippet - Simulates String.replaceAt\n    //http://stackoverflow.com/questions/1431094\n\n    createTableSql = `${sql.substr(0, index)}, ${constraintSnippet})${sql.substr(index + 1)};`;\n    return qi.describeTable(tableName, options);\n  }).then(fields => {\n    const sql = qi.QueryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n\n    const subQueries = sql.split(';').filter(q => q !== '');\n    return Promise.each(subQueries, subQuery => qi.sequelize.query(`${subQuery};`, Object.assign({\n      raw: true\n    }, options)));\n  });\n}\n\nexports.addConstraint = addConstraint;\n/**\n * @param {QueryInterface} qi\n * @param {string} tableName\n * @param {Object} options  Query Options\n *\n * @private\n * @returns {Promise}\n */\n\nfunction getForeignKeyReferencesForTable(qi, tableName, options) {\n  const database = qi.sequelize.config.database;\n  const query = qi.QueryGenerator.getForeignKeysQuery(tableName, database);\n  return qi.sequelize.query(query, options).then(result => {\n    return result.map(row => ({\n      tableName,\n      columnName: row.from,\n      referencedTableName: row.table,\n      referencedColumnName: row.to,\n      tableCatalog: database,\n      referencedTableCatalog: database\n    }));\n  });\n}\n\nexports.getForeignKeyReferencesForTable = getForeignKeyReferencesForTable;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/sequelize/lib/dialects/sqlite/query-interface.js"],"names":["_","require","Promise","sequelizeErrors","QueryTypes","removeColumn","qi","tableName","attributeName","options","describeTable","then","fields","sql","QueryGenerator","removeColumnQuery","subQueries","split","filter","q","each","subQuery","sequelize","query","Object","assign","raw","exports","changeColumn","attributes","keys","renameColumn","attrNameBefore","attrNameAfter","clone","renameColumnQuery","removeConstraint","constraintName","createTableSql","showConstraint","constraints","constraint","find","constaint","quoteIdentifier","constraintSnippet","constraintType","constraintCondition","referenceTableName","quoteTable","referenceTableKeys","map","columnName","join","updateAction","deleteAction","replace","UnknownConstraintError","message","table","_alterConstraintQuery","addConstraint","getConstraintSnippet","describeCreateTableSql","describeCreateTableQuery","type","SELECT","index","length","substr","getForeignKeyReferencesForTable","database","config","getForeignKeysQuery","result","row","from","referencedTableName","referencedColumnName","to","tableCatalog","referencedTableCatalog"],"mappings":"AAAA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,eAAD,CAAvB;;AACA,MAAME,eAAe,GAAGF,OAAO,CAAC,cAAD,CAA/B;;AACA,MAAMG,UAAU,GAAGH,OAAO,CAAC,mBAAD,CAA1B;AAEA;;;;;;;;AAQA;;;;;;;;;;;;;;;;AAcA,SAASI,YAAT,CAAsBC,EAAtB,EAA0BC,SAA1B,EAAqCC,aAArC,EAAoDC,OAApD,EAA6D;AAC3DA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,SAAOH,EAAE,CAACI,aAAH,CAAiBH,SAAjB,EAA4BE,OAA5B,EAAqCE,IAArC,CAA0CC,MAAM,IAAI;AACzD,WAAOA,MAAM,CAACJ,aAAD,CAAb;AAEA,UAAMK,GAAG,GAAGP,EAAE,CAACQ,cAAH,CAAkBC,iBAAlB,CAAoCR,SAApC,EAA+CK,MAA/C,CAAZ;AACA,UAAMI,UAAU,GAAGH,GAAG,CAACI,KAAJ,CAAU,GAAV,EAAeC,MAAf,CAAsBC,CAAC,IAAIA,CAAC,KAAK,EAAjC,CAAnB;AAEA,WAAOjB,OAAO,CAACkB,IAAR,CAAaJ,UAAb,EAAyBK,QAAQ,IAAIf,EAAE,CAACgB,SAAH,CAAaC,KAAb,CAAoB,GAAEF,QAAS,GAA/B,EAAmCG,MAAM,CAACC,MAAP,CAAc;AAAEC,MAAAA,GAAG,EAAE;AAAP,KAAd,EAA6BjB,OAA7B,CAAnC,CAArC,CAAP;AACD,GAPM,CAAP;AAQD;;AACDkB,OAAO,CAACtB,YAAR,GAAuBA,YAAvB;AAEA;;;;;;;;;;;;;;;AAcA,SAASuB,YAAT,CAAsBtB,EAAtB,EAA0BC,SAA1B,EAAqCsB,UAArC,EAAiDpB,OAAjD,EAA0D;AACxD,QAAMD,aAAa,GAAGgB,MAAM,CAACM,IAAP,CAAYD,UAAZ,EAAwB,CAAxB,CAAtB;AACApB,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,SAAOH,EAAE,CAACI,aAAH,CAAiBH,SAAjB,EAA4BE,OAA5B,EAAqCE,IAArC,CAA0CC,MAAM,IAAI;AACzDA,IAAAA,MAAM,CAACJ,aAAD,CAAN,GAAwBqB,UAAU,CAACrB,aAAD,CAAlC;AAEA,UAAMK,GAAG,GAAGP,EAAE,CAACQ,cAAH,CAAkBC,iBAAlB,CAAoCR,SAApC,EAA+CK,MAA/C,CAAZ;AACA,UAAMI,UAAU,GAAGH,GAAG,CAACI,KAAJ,CAAU,GAAV,EAAeC,MAAf,CAAsBC,CAAC,IAAIA,CAAC,KAAK,EAAjC,CAAnB;AAEA,WAAOjB,OAAO,CAACkB,IAAR,CAAaJ,UAAb,EAAyBK,QAAQ,IAAIf,EAAE,CAACgB,SAAH,CAAaC,KAAb,CAAoB,GAAEF,QAAS,GAA/B,EAAmCG,MAAM,CAACC,MAAP,CAAc;AAAEC,MAAAA,GAAG,EAAE;AAAP,KAAd,EAA6BjB,OAA7B,CAAnC,CAArC,CAAP;AACD,GAPM,CAAP;AAQD;;AACDkB,OAAO,CAACC,YAAR,GAAuBA,YAAvB;AAEA;;;;;;;;;;;;;;;;AAeA,SAASG,YAAT,CAAsBzB,EAAtB,EAA0BC,SAA1B,EAAqCyB,cAArC,EAAqDC,aAArD,EAAoExB,OAApE,EAA6E;AAC3EA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,SAAOH,EAAE,CAACI,aAAH,CAAiBH,SAAjB,EAA4BE,OAA5B,EAAqCE,IAArC,CAA0CC,MAAM,IAAI;AACzDA,IAAAA,MAAM,CAACqB,aAAD,CAAN,GAAwBjC,CAAC,CAACkC,KAAF,CAAQtB,MAAM,CAACoB,cAAD,CAAd,CAAxB;AACA,WAAOpB,MAAM,CAACoB,cAAD,CAAb;AAEA,UAAMnB,GAAG,GAAGP,EAAE,CAACQ,cAAH,CAAkBqB,iBAAlB,CAAoC5B,SAApC,EAA+CyB,cAA/C,EAA+DC,aAA/D,EAA8ErB,MAA9E,CAAZ;AACA,UAAMI,UAAU,GAAGH,GAAG,CAACI,KAAJ,CAAU,GAAV,EAAeC,MAAf,CAAsBC,CAAC,IAAIA,CAAC,KAAK,EAAjC,CAAnB;AAEA,WAAOjB,OAAO,CAACkB,IAAR,CAAaJ,UAAb,EAAyBK,QAAQ,IAAIf,EAAE,CAACgB,SAAH,CAAaC,KAAb,CAAoB,GAAEF,QAAS,GAA/B,EAAmCG,MAAM,CAACC,MAAP,CAAc;AAAEC,MAAAA,GAAG,EAAE;AAAP,KAAd,EAA6BjB,OAA7B,CAAnC,CAArC,CAAP;AACD,GARM,CAAP;AASD;;AACDkB,OAAO,CAACI,YAAR,GAAuBA,YAAvB;AAEA;;;;;;;;;AAQA,SAASK,gBAAT,CAA0B9B,EAA1B,EAA8BC,SAA9B,EAAyC8B,cAAzC,EAAyD5B,OAAzD,EAAkE;AAChE,MAAI6B,cAAJ;AAEA,SAAOhC,EAAE,CAACiC,cAAH,CAAkBhC,SAAlB,EAA6B8B,cAA7B,EACJ1B,IADI,CACC6B,WAAW,IAAI;AACnB;AACA,UAAMC,UAAU,GAAGD,WAAW,CAACE,IAAZ,CAAiBC,SAAS,IAAIA,SAAS,CAACN,cAAV,KAA6BA,cAA3D,CAAnB;;AAEA,QAAII,UAAJ,EAAgB;AACdH,MAAAA,cAAc,GAAGG,UAAU,CAAC5B,GAA5B;AACA4B,MAAAA,UAAU,CAACJ,cAAX,GAA4B/B,EAAE,CAACQ,cAAH,CAAkB8B,eAAlB,CAAkCH,UAAU,CAACJ,cAA7C,CAA5B;AACA,UAAIQ,iBAAiB,GAAI,gBAAeJ,UAAU,CAACJ,cAAe,IAAGI,UAAU,CAACK,cAAe,IAAGL,UAAU,CAACM,mBAAoB,EAAjI;;AAEA,UAAIN,UAAU,CAACK,cAAX,KAA8B,aAAlC,EAAiD;AAC/C,cAAME,kBAAkB,GAAG1C,EAAE,CAACQ,cAAH,CAAkBmC,UAAlB,CAA6BR,UAAU,CAACO,kBAAxC,CAA3B;AACAP,QAAAA,UAAU,CAACS,kBAAX,GAAgCT,UAAU,CAACS,kBAAX,CAA8BC,GAA9B,CAAkCC,UAAU,IAAI9C,EAAE,CAACQ,cAAH,CAAkB8B,eAAlB,CAAkCQ,UAAlC,CAAhD,CAAhC;AACA,cAAMF,kBAAkB,GAAGT,UAAU,CAACS,kBAAX,CAA8BG,IAA9B,CAAmC,IAAnC,CAA3B;AACAR,QAAAA,iBAAiB,IAAK,eAAcG,kBAAmB,KAAIE,kBAAmB,GAA9E;AACAL,QAAAA,iBAAiB,IAAK,cAAaJ,UAAU,CAACa,YAAa,EAA3D;AACAT,QAAAA,iBAAiB,IAAK,cAAaJ,UAAU,CAACc,YAAa,EAA3D;AACD;;AAEDjB,MAAAA,cAAc,GAAGA,cAAc,CAACkB,OAAf,CAAuBX,iBAAvB,EAA0C,EAA1C,CAAjB;AACAP,MAAAA,cAAc,IAAI,GAAlB;AAEA,aAAOhC,EAAE,CAACI,aAAH,CAAiBH,SAAjB,EAA4BE,OAA5B,CAAP;AACD;;AACD,UAAM,IAAIN,eAAe,CAACsD,sBAApB,CAA2C;AAC/CC,MAAAA,OAAO,EAAG,cAAarB,cAAe,aAAY9B,SAAU,iBADb;AAE/CkC,MAAAA,UAAU,EAAEJ,cAFmC;AAG/CsB,MAAAA,KAAK,EAAEpD;AAHwC,KAA3C,CAAN;AAKD,GA7BI,EA8BJI,IA9BI,CA8BCC,MAAM,IAAI;AACd,UAAMC,GAAG,GAAGP,EAAE,CAACQ,cAAH,CAAkB8C,qBAAlB,CAAwCrD,SAAxC,EAAmDK,MAAnD,EAA2D0B,cAA3D,CAAZ;;AACA,UAAMtB,UAAU,GAAGH,GAAG,CAACI,KAAJ,CAAU,GAAV,EAAeC,MAAf,CAAsBC,CAAC,IAAIA,CAAC,KAAK,EAAjC,CAAnB;AAEA,WAAOjB,OAAO,CAACkB,IAAR,CAAaJ,UAAb,EAAyBK,QAAQ,IAAIf,EAAE,CAACgB,SAAH,CAAaC,KAAb,CAAoB,GAAEF,QAAS,GAA/B,EAAmCG,MAAM,CAACC,MAAP,CAAc;AAAEC,MAAAA,GAAG,EAAE;AAAP,KAAd,EAA6BjB,OAA7B,CAAnC,CAArC,CAAP;AACD,GAnCI,CAAP;AAoCD;;AACDkB,OAAO,CAACS,gBAAR,GAA2BA,gBAA3B;AAEA;;;;;;;;AAOA,SAASyB,aAAT,CAAuBvD,EAAvB,EAA2BC,SAA3B,EAAsCE,OAAtC,EAA+C;AAC7C,QAAMoC,iBAAiB,GAAGvC,EAAE,CAACQ,cAAH,CAAkBgD,oBAAlB,CAAuCvD,SAAvC,EAAkDE,OAAlD,CAA1B;AACA,QAAMsD,sBAAsB,GAAGzD,EAAE,CAACQ,cAAH,CAAkBkD,wBAAlB,CAA2CzD,SAA3C,CAA/B;AACA,MAAI+B,cAAJ;AAEA,SAAOhC,EAAE,CAACgB,SAAH,CAAaC,KAAb,CAAmBwC,sBAAnB,EAA2CvC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBhB,OAAlB,EAA2B;AAAEwD,IAAAA,IAAI,EAAE7D,UAAU,CAAC8D,MAAnB;AAA2BxC,IAAAA,GAAG,EAAE;AAAhC,GAA3B,CAA3C,EACJf,IADI,CACC6B,WAAW,IAAI;AACnB,UAAM3B,GAAG,GAAG2B,WAAW,CAAC,CAAD,CAAX,CAAe3B,GAA3B;AACA,UAAMsD,KAAK,GAAGtD,GAAG,CAACuD,MAAJ,GAAa,CAA3B,CAFmB,CAGnB;AACA;;AACA9B,IAAAA,cAAc,GAAI,GAAEzB,GAAG,CAACwD,MAAJ,CAAW,CAAX,EAAcF,KAAd,CAAqB,KAAItB,iBAAkB,IAAGhC,GAAG,CAACwD,MAAJ,CAAWF,KAAK,GAAG,CAAnB,CAAsB,GAAxF;AAEA,WAAO7D,EAAE,CAACI,aAAH,CAAiBH,SAAjB,EAA4BE,OAA5B,CAAP;AACD,GATI,EAUJE,IAVI,CAUCC,MAAM,IAAI;AACd,UAAMC,GAAG,GAAGP,EAAE,CAACQ,cAAH,CAAkB8C,qBAAlB,CAAwCrD,SAAxC,EAAmDK,MAAnD,EAA2D0B,cAA3D,CAAZ;;AACA,UAAMtB,UAAU,GAAGH,GAAG,CAACI,KAAJ,CAAU,GAAV,EAAeC,MAAf,CAAsBC,CAAC,IAAIA,CAAC,KAAK,EAAjC,CAAnB;AAEA,WAAOjB,OAAO,CAACkB,IAAR,CAAaJ,UAAb,EAAyBK,QAAQ,IAAIf,EAAE,CAACgB,SAAH,CAAaC,KAAb,CAAoB,GAAEF,QAAS,GAA/B,EAAmCG,MAAM,CAACC,MAAP,CAAc;AAAEC,MAAAA,GAAG,EAAE;AAAP,KAAd,EAA6BjB,OAA7B,CAAnC,CAArC,CAAP;AACD,GAfI,CAAP;AAgBD;;AACDkB,OAAO,CAACkC,aAAR,GAAwBA,aAAxB;AAEA;;;;;;;;;AAQA,SAASS,+BAAT,CAAyChE,EAAzC,EAA6CC,SAA7C,EAAwDE,OAAxD,EAAiE;AAC/D,QAAM8D,QAAQ,GAAGjE,EAAE,CAACgB,SAAH,CAAakD,MAAb,CAAoBD,QAArC;AACA,QAAMhD,KAAK,GAAGjB,EAAE,CAACQ,cAAH,CAAkB2D,mBAAlB,CAAsClE,SAAtC,EAAiDgE,QAAjD,CAAd;AACA,SAAOjE,EAAE,CAACgB,SAAH,CAAaC,KAAb,CAAmBA,KAAnB,EAA0Bd,OAA1B,EACJE,IADI,CACC+D,MAAM,IAAI;AACd,WAAOA,MAAM,CAACvB,GAAP,CAAWwB,GAAG,KAAK;AACxBpE,MAAAA,SADwB;AAExB6C,MAAAA,UAAU,EAAEuB,GAAG,CAACC,IAFQ;AAGxBC,MAAAA,mBAAmB,EAAEF,GAAG,CAAChB,KAHD;AAIxBmB,MAAAA,oBAAoB,EAAEH,GAAG,CAACI,EAJF;AAKxBC,MAAAA,YAAY,EAAET,QALU;AAMxBU,MAAAA,sBAAsB,EAAEV;AANA,KAAL,CAAd,CAAP;AAQD,GAVI,CAAP;AAWD;;AAED5C,OAAO,CAAC2C,+BAAR,GAA0CA,+BAA1C","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst Promise = require('../../promise');\nconst sequelizeErrors = require('../../errors');\nconst QueryTypes = require('../../query-types');\n\n/**\n Returns an object that treats SQLite's inabilities to do certain queries.\n\n @class QueryInterface\n @static\n @private\n */\n\n/**\n  A wrapper that fixes SQLite's inability to remove columns from existing tables.\n  It will create a backup of the table, drop the table afterwards and create a\n  new table with the same name but without the obsolete column.\n\n  @param  {QueryInterface} qi\n  @param  {string} tableName     The name of the table.\n  @param  {string} attributeName The name of the attribute that we want to remove.\n  @param  {Object} options\n  @param  {boolean|Function} [options.logging] A function that logs the sql queries, or false for explicitly not logging these queries\n\n  @since 1.6.0\n  @private\n */\nfunction removeColumn(qi, tableName, attributeName, options) {\n  options = options || {};\n\n  return qi.describeTable(tableName, options).then(fields => {\n    delete fields[attributeName];\n\n    const sql = qi.QueryGenerator.removeColumnQuery(tableName, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    return Promise.each(subQueries, subQuery => qi.sequelize.query(`${subQuery};`, Object.assign({ raw: true }, options)));\n  });\n}\nexports.removeColumn = removeColumn;\n\n/**\n  A wrapper that fixes SQLite's inability to change columns from existing tables.\n  It will create a backup of the table, drop the table afterwards and create a\n  new table with the same name but with a modified version of the respective column.\n\n  @param  {QueryInterface} qi\n  @param  {string} tableName The name of the table.\n  @param  {Object} attributes An object with the attribute's name as key and its options as value object.\n  @param  {Object} options\n  @param  {boolean|Function} [options.logging] A function that logs the sql queries, or false for explicitly not logging these queries\n\n  @since 1.6.0\n  @private\n */\nfunction changeColumn(qi, tableName, attributes, options) {\n  const attributeName = Object.keys(attributes)[0];\n  options = options || {};\n\n  return qi.describeTable(tableName, options).then(fields => {\n    fields[attributeName] = attributes[attributeName];\n\n    const sql = qi.QueryGenerator.removeColumnQuery(tableName, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    return Promise.each(subQueries, subQuery => qi.sequelize.query(`${subQuery};`, Object.assign({ raw: true }, options)));\n  });\n}\nexports.changeColumn = changeColumn;\n\n/**\n  A wrapper that fixes SQLite's inability to rename columns from existing tables.\n  It will create a backup of the table, drop the table afterwards and create a\n  new table with the same name but with a renamed version of the respective column.\n\n  @param  {QueryInterface} qi\n  @param  {string} tableName The name of the table.\n  @param  {string} attrNameBefore The name of the attribute before it was renamed.\n  @param  {string} attrNameAfter The name of the attribute after it was renamed.\n  @param  {Object} options\n  @param  {boolean|Function} [options.logging] A function that logs the sql queries, or false for explicitly not logging these queries\n\n  @since 1.6.0\n  @private\n */\nfunction renameColumn(qi, tableName, attrNameBefore, attrNameAfter, options) {\n  options = options || {};\n\n  return qi.describeTable(tableName, options).then(fields => {\n    fields[attrNameAfter] = _.clone(fields[attrNameBefore]);\n    delete fields[attrNameBefore];\n\n    const sql = qi.QueryGenerator.renameColumnQuery(tableName, attrNameBefore, attrNameAfter, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    return Promise.each(subQueries, subQuery => qi.sequelize.query(`${subQuery};`, Object.assign({ raw: true }, options)));\n  });\n}\nexports.renameColumn = renameColumn;\n\n/**\n * @param {QueryInterface} qi\n * @param {string} tableName\n * @param {string} constraintName\n * @param {Object} options\n *\n * @private\n */\nfunction removeConstraint(qi, tableName, constraintName, options) {\n  let createTableSql;\n\n  return qi.showConstraint(tableName, constraintName)\n    .then(constraints => {\n      // sqlite can't show only one constraint, so we find here the one to remove\n      const constraint = constraints.find(constaint => constaint.constraintName === constraintName);\n\n      if (constraint) {\n        createTableSql = constraint.sql;\n        constraint.constraintName = qi.QueryGenerator.quoteIdentifier(constraint.constraintName);\n        let constraintSnippet = `, CONSTRAINT ${constraint.constraintName} ${constraint.constraintType} ${constraint.constraintCondition}`;\n\n        if (constraint.constraintType === 'FOREIGN KEY') {\n          const referenceTableName = qi.QueryGenerator.quoteTable(constraint.referenceTableName);\n          constraint.referenceTableKeys = constraint.referenceTableKeys.map(columnName => qi.QueryGenerator.quoteIdentifier(columnName));\n          const referenceTableKeys = constraint.referenceTableKeys.join(', ');\n          constraintSnippet += ` REFERENCES ${referenceTableName} (${referenceTableKeys})`;\n          constraintSnippet += ` ON UPDATE ${constraint.updateAction}`;\n          constraintSnippet += ` ON DELETE ${constraint.deleteAction}`;\n        }\n\n        createTableSql = createTableSql.replace(constraintSnippet, '');\n        createTableSql += ';';\n\n        return qi.describeTable(tableName, options);\n      }\n      throw new sequelizeErrors.UnknownConstraintError({\n        message: `Constraint ${constraintName} on table ${tableName} does not exist`,\n        constraint: constraintName,\n        table: tableName\n      });\n    })\n    .then(fields => {\n      const sql = qi.QueryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n      const subQueries = sql.split(';').filter(q => q !== '');\n\n      return Promise.each(subQueries, subQuery => qi.sequelize.query(`${subQuery};`, Object.assign({ raw: true }, options)));\n    });\n}\nexports.removeConstraint = removeConstraint;\n\n/**\n * @param {QueryInterface} qi\n * @param {string} tableName\n * @param {Object} options\n *\n * @private\n */\nfunction addConstraint(qi, tableName, options) {\n  const constraintSnippet = qi.QueryGenerator.getConstraintSnippet(tableName, options);\n  const describeCreateTableSql = qi.QueryGenerator.describeCreateTableQuery(tableName);\n  let createTableSql;\n\n  return qi.sequelize.query(describeCreateTableSql, Object.assign({}, options, { type: QueryTypes.SELECT, raw: true }))\n    .then(constraints => {\n      const sql = constraints[0].sql;\n      const index = sql.length - 1;\n      //Replace ending ')' with constraint snippet - Simulates String.replaceAt\n      //http://stackoverflow.com/questions/1431094\n      createTableSql = `${sql.substr(0, index)}, ${constraintSnippet})${sql.substr(index + 1)};`;\n\n      return qi.describeTable(tableName, options);\n    })\n    .then(fields => {\n      const sql = qi.QueryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n      const subQueries = sql.split(';').filter(q => q !== '');\n\n      return Promise.each(subQueries, subQuery => qi.sequelize.query(`${subQuery};`, Object.assign({ raw: true }, options)));\n    });\n}\nexports.addConstraint = addConstraint;\n\n/**\n * @param {QueryInterface} qi\n * @param {string} tableName\n * @param {Object} options  Query Options\n *\n * @private\n * @returns {Promise}\n */\nfunction getForeignKeyReferencesForTable(qi, tableName, options) {\n  const database = qi.sequelize.config.database;\n  const query = qi.QueryGenerator.getForeignKeysQuery(tableName, database);\n  return qi.sequelize.query(query, options)\n    .then(result => {\n      return result.map(row => ({\n        tableName,\n        columnName: row.from,\n        referencedTableName: row.table,\n        referencedColumnName: row.to,\n        tableCatalog: database,\n        referencedTableCatalog: database\n      }));\n    });\n}\n\nexports.getForeignKeyReferencesForTable = getForeignKeyReferencesForTable;\n"]},"metadata":{},"sourceType":"script"}
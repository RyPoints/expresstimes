{"ast":null,"code":"'use strict';\n\nconst uuidv4 = require('uuid/v4');\n\nconst TransactionQueries = {\n  /**\n   * Returns a query that sets the transaction isolation level.\n   *\n   * @param  {string} value   The isolation level.\n   * @param  {Object} options An object with options.\n   * @returns {string}         The generated sql query.\n   * @private\n   */\n  setIsolationLevelQuery(value, options) {\n    if (options.parent) {\n      return;\n    }\n\n    return `SET TRANSACTION ISOLATION LEVEL ${value};`;\n  },\n\n  generateTransactionId() {\n    return uuidv4();\n  },\n\n  /**\n   * Returns a query that starts a transaction.\n   *\n   * @param  {Transaction} transaction\n   * @returns {string}         The generated sql query.\n   * @private\n   */\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      // force quoting of savepoint identifiers for postgres\n      return `SAVEPOINT ${this.quoteIdentifier(transaction.name, true)};`;\n    }\n\n    return 'START TRANSACTION;';\n  },\n\n  deferConstraintsQuery() {},\n\n  setConstraintQuery() {},\n\n  setDeferredQuery() {},\n\n  setImmediateQuery() {},\n\n  /**\n   * Returns a query that commits a transaction.\n   *\n   * @param  {Transaction} transaction An object with options.\n   * @returns {string}         The generated sql query.\n   * @private\n   */\n  commitTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return;\n    }\n\n    return 'COMMIT;';\n  },\n\n  /**\n   * Returns a query that rollbacks a transaction.\n   *\n   * @param  {Transaction} transaction\n   * @returns {string}         The generated sql query.\n   * @private\n   */\n  rollbackTransactionQuery(transaction) {\n    if (transaction.parent) {\n      // force quoting of savepoint identifiers for postgres\n      return `ROLLBACK TO SAVEPOINT ${this.quoteIdentifier(transaction.name, true)};`;\n    }\n\n    return 'ROLLBACK;';\n  }\n\n};\nmodule.exports = TransactionQueries;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/sequelize/lib/dialects/abstract/query-generator/transaction.js"],"names":["uuidv4","require","TransactionQueries","setIsolationLevelQuery","value","options","parent","generateTransactionId","startTransactionQuery","transaction","quoteIdentifier","name","deferConstraintsQuery","setConstraintQuery","setDeferredQuery","setImmediateQuery","commitTransactionQuery","rollbackTransactionQuery","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAtB;;AAEA,MAAMC,kBAAkB,GAAG;AACzB;;;;;;;;AAQAC,EAAAA,sBAAsB,CAACC,KAAD,EAAQC,OAAR,EAAiB;AACrC,QAAIA,OAAO,CAACC,MAAZ,EAAoB;AAClB;AACD;;AAED,WAAQ,mCAAkCF,KAAM,GAAhD;AACD,GAfwB;;AAiBzBG,EAAAA,qBAAqB,GAAG;AACtB,WAAOP,MAAM,EAAb;AACD,GAnBwB;;AAqBzB;;;;;;;AAOAQ,EAAAA,qBAAqB,CAACC,WAAD,EAAc;AACjC,QAAIA,WAAW,CAACH,MAAhB,EAAwB;AACtB;AACA,aAAQ,aAAY,KAAKI,eAAL,CAAqBD,WAAW,CAACE,IAAjC,EAAuC,IAAvC,CAA6C,GAAjE;AACD;;AAED,WAAO,oBAAP;AACD,GAnCwB;;AAqCzBC,EAAAA,qBAAqB,GAAG,CAAE,CArCD;;AAuCzBC,EAAAA,kBAAkB,GAAG,CAAE,CAvCE;;AAwCzBC,EAAAA,gBAAgB,GAAG,CAAE,CAxCI;;AAyCzBC,EAAAA,iBAAiB,GAAG,CAAE,CAzCG;;AA2CzB;;;;;;;AAOAC,EAAAA,sBAAsB,CAACP,WAAD,EAAc;AAClC,QAAIA,WAAW,CAACH,MAAhB,EAAwB;AACtB;AACD;;AAED,WAAO,SAAP;AACD,GAxDwB;;AA0DzB;;;;;;;AAOAW,EAAAA,wBAAwB,CAACR,WAAD,EAAc;AACpC,QAAIA,WAAW,CAACH,MAAhB,EAAwB;AACtB;AACA,aAAQ,yBAAwB,KAAKI,eAAL,CAAqBD,WAAW,CAACE,IAAjC,EAAuC,IAAvC,CAA6C,GAA7E;AACD;;AAED,WAAO,WAAP;AACD;;AAxEwB,CAA3B;AA2EAO,MAAM,CAACC,OAAP,GAAiBjB,kBAAjB","sourcesContent":["'use strict';\n\nconst uuidv4 = require('uuid/v4');\n\nconst TransactionQueries = {\n  /**\n   * Returns a query that sets the transaction isolation level.\n   *\n   * @param  {string} value   The isolation level.\n   * @param  {Object} options An object with options.\n   * @returns {string}         The generated sql query.\n   * @private\n   */\n  setIsolationLevelQuery(value, options) {\n    if (options.parent) {\n      return;\n    }\n\n    return `SET TRANSACTION ISOLATION LEVEL ${value};`;\n  },\n\n  generateTransactionId() {\n    return uuidv4();\n  },\n\n  /**\n   * Returns a query that starts a transaction.\n   *\n   * @param  {Transaction} transaction\n   * @returns {string}         The generated sql query.\n   * @private\n   */\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      // force quoting of savepoint identifiers for postgres\n      return `SAVEPOINT ${this.quoteIdentifier(transaction.name, true)};`;\n    }\n\n    return 'START TRANSACTION;';\n  },\n\n  deferConstraintsQuery() {},\n\n  setConstraintQuery() {},\n  setDeferredQuery() {},\n  setImmediateQuery() {},\n\n  /**\n   * Returns a query that commits a transaction.\n   *\n   * @param  {Transaction} transaction An object with options.\n   * @returns {string}         The generated sql query.\n   * @private\n   */\n  commitTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return;\n    }\n\n    return 'COMMIT;';\n  },\n\n  /**\n   * Returns a query that rollbacks a transaction.\n   *\n   * @param  {Transaction} transaction\n   * @returns {string}         The generated sql query.\n   * @private\n   */\n  rollbackTransactionQuery(transaction) {\n    if (transaction.parent) {\n      // force quoting of savepoint identifiers for postgres\n      return `ROLLBACK TO SAVEPOINT ${this.quoteIdentifier(transaction.name, true)};`;\n    }\n\n    return 'ROLLBACK;';\n  }\n};\n\nmodule.exports = TransactionQueries;\n"]},"metadata":{},"sourceType":"script"}
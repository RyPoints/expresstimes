{"ast":null,"code":"'use strict';\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\nvar types = require('pg-types'); // result object returned from query\n// in the 'end' event and also\n// passed as second argument to provided callback\n\n\nvar Result = function (rowMode, types) {\n  this.command = null;\n  this.rowCount = null;\n  this.oid = null;\n  this.rows = [];\n  this.fields = [];\n  this._parsers = [];\n  this._types = types;\n  this.RowCtor = null;\n  this.rowAsArray = rowMode === 'array';\n\n  if (this.rowAsArray) {\n    this.parseRow = this._parseRowAsArray;\n  }\n};\n\nvar matchRegexp = /^([A-Za-z]+)(?: (\\d+))?(?: (\\d+))?/; // adds a command complete message\n\nResult.prototype.addCommandComplete = function (msg) {\n  var match;\n\n  if (msg.text) {\n    // pure javascript\n    match = matchRegexp.exec(msg.text);\n  } else {\n    // native bindings\n    match = matchRegexp.exec(msg.command);\n  }\n\n  if (match) {\n    this.command = match[1];\n\n    if (match[3]) {\n      // COMMMAND OID ROWS\n      this.oid = parseInt(match[2], 10);\n      this.rowCount = parseInt(match[3], 10);\n    } else if (match[2]) {\n      // COMMAND ROWS\n      this.rowCount = parseInt(match[2], 10);\n    }\n  }\n};\n\nResult.prototype._parseRowAsArray = function (rowData) {\n  var row = [];\n\n  for (var i = 0, len = rowData.length; i < len; i++) {\n    var rawValue = rowData[i];\n\n    if (rawValue !== null) {\n      row.push(this._parsers[i](rawValue));\n    } else {\n      row.push(null);\n    }\n  }\n\n  return row;\n};\n\nResult.prototype.parseRow = function (rowData) {\n  var row = {};\n\n  for (var i = 0, len = rowData.length; i < len; i++) {\n    var rawValue = rowData[i];\n    var field = this.fields[i].name;\n\n    if (rawValue !== null) {\n      row[field] = this._parsers[i](rawValue);\n    } else {\n      row[field] = null;\n    }\n  }\n\n  return row;\n};\n\nResult.prototype.addRow = function (row) {\n  this.rows.push(row);\n};\n\nResult.prototype.addFields = function (fieldDescriptions) {\n  // clears field definitions\n  // multiple query statements in 1 action can result in multiple sets\n  // of rowDescriptions...eg: 'select NOW(); select 1::int;'\n  // you need to reset the fields\n  if (this.fields.length) {\n    this.fields = [];\n    this._parsers = [];\n  }\n\n  for (var i = 0; i < fieldDescriptions.length; i++) {\n    var desc = fieldDescriptions[i];\n    this.fields.push(desc);\n    var parser = (this._types || types).getTypeParser(desc.dataTypeID, desc.format || 'text');\n\n    this._parsers.push(parser);\n  }\n};\n\nmodule.exports = Result;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/pg/lib/result.js"],"names":["types","require","Result","rowMode","command","rowCount","oid","rows","fields","_parsers","_types","RowCtor","rowAsArray","parseRow","_parseRowAsArray","matchRegexp","prototype","addCommandComplete","msg","match","text","exec","parseInt","rowData","row","i","len","length","rawValue","push","field","name","addRow","addFields","fieldDescriptions","desc","parser","getTypeParser","dataTypeID","format","module","exports"],"mappings":"AAAA;AACA;;;;;;;;AAQA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAAnB,C,CAEA;AACA;AACA;;;AACA,IAAIC,MAAM,GAAG,UAAUC,OAAV,EAAmBH,KAAnB,EAA0B;AACrC,OAAKI,OAAL,GAAe,IAAf;AACA,OAAKC,QAAL,GAAgB,IAAhB;AACA,OAAKC,GAAL,GAAW,IAAX;AACA,OAAKC,IAAL,GAAY,EAAZ;AACA,OAAKC,MAAL,GAAc,EAAd;AACA,OAAKC,QAAL,GAAgB,EAAhB;AACA,OAAKC,MAAL,GAAcV,KAAd;AACA,OAAKW,OAAL,GAAe,IAAf;AACA,OAAKC,UAAL,GAAkBT,OAAO,KAAK,OAA9B;;AACA,MAAI,KAAKS,UAAT,EAAqB;AACnB,SAAKC,QAAL,GAAgB,KAAKC,gBAArB;AACD;AACF,CAbD;;AAeA,IAAIC,WAAW,GAAG,oCAAlB,C,CAEA;;AACAb,MAAM,CAACc,SAAP,CAAiBC,kBAAjB,GAAsC,UAAUC,GAAV,EAAe;AACnD,MAAIC,KAAJ;;AACA,MAAID,GAAG,CAACE,IAAR,EAAc;AACZ;AACAD,IAAAA,KAAK,GAAGJ,WAAW,CAACM,IAAZ,CAAiBH,GAAG,CAACE,IAArB,CAAR;AACD,GAHD,MAGO;AACL;AACAD,IAAAA,KAAK,GAAGJ,WAAW,CAACM,IAAZ,CAAiBH,GAAG,CAACd,OAArB,CAAR;AACD;;AACD,MAAIe,KAAJ,EAAW;AACT,SAAKf,OAAL,GAAee,KAAK,CAAC,CAAD,CAApB;;AACA,QAAIA,KAAK,CAAC,CAAD,CAAT,EAAc;AACZ;AACA,WAAKb,GAAL,GAAWgB,QAAQ,CAACH,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAnB;AACA,WAAKd,QAAL,GAAgBiB,QAAQ,CAACH,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAxB;AACD,KAJD,MAIO,IAAIA,KAAK,CAAC,CAAD,CAAT,EAAc;AACnB;AACA,WAAKd,QAAL,GAAgBiB,QAAQ,CAACH,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAxB;AACD;AACF;AACF,CApBD;;AAsBAjB,MAAM,CAACc,SAAP,CAAiBF,gBAAjB,GAAoC,UAAUS,OAAV,EAAmB;AACrD,MAAIC,GAAG,GAAG,EAAV;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGH,OAAO,CAACI,MAA9B,EAAsCF,CAAC,GAAGC,GAA1C,EAA+CD,CAAC,EAAhD,EAAoD;AAClD,QAAIG,QAAQ,GAAGL,OAAO,CAACE,CAAD,CAAtB;;AACA,QAAIG,QAAQ,KAAK,IAAjB,EAAuB;AACrBJ,MAAAA,GAAG,CAACK,IAAJ,CAAS,KAAKpB,QAAL,CAAcgB,CAAd,EAAiBG,QAAjB,CAAT;AACD,KAFD,MAEO;AACLJ,MAAAA,GAAG,CAACK,IAAJ,CAAS,IAAT;AACD;AACF;;AACD,SAAOL,GAAP;AACD,CAXD;;AAaAtB,MAAM,CAACc,SAAP,CAAiBH,QAAjB,GAA4B,UAAUU,OAAV,EAAmB;AAC7C,MAAIC,GAAG,GAAG,EAAV;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGH,OAAO,CAACI,MAA9B,EAAsCF,CAAC,GAAGC,GAA1C,EAA+CD,CAAC,EAAhD,EAAoD;AAClD,QAAIG,QAAQ,GAAGL,OAAO,CAACE,CAAD,CAAtB;AACA,QAAIK,KAAK,GAAG,KAAKtB,MAAL,CAAYiB,CAAZ,EAAeM,IAA3B;;AACA,QAAIH,QAAQ,KAAK,IAAjB,EAAuB;AACrBJ,MAAAA,GAAG,CAACM,KAAD,CAAH,GAAa,KAAKrB,QAAL,CAAcgB,CAAd,EAAiBG,QAAjB,CAAb;AACD,KAFD,MAEO;AACLJ,MAAAA,GAAG,CAACM,KAAD,CAAH,GAAa,IAAb;AACD;AACF;;AACD,SAAON,GAAP;AACD,CAZD;;AAcAtB,MAAM,CAACc,SAAP,CAAiBgB,MAAjB,GAA0B,UAAUR,GAAV,EAAe;AACvC,OAAKjB,IAAL,CAAUsB,IAAV,CAAeL,GAAf;AACD,CAFD;;AAIAtB,MAAM,CAACc,SAAP,CAAiBiB,SAAjB,GAA6B,UAAUC,iBAAV,EAA6B;AACxD;AACA;AACA;AACA;AACA,MAAI,KAAK1B,MAAL,CAAYmB,MAAhB,EAAwB;AACtB,SAAKnB,MAAL,GAAc,EAAd;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACD;;AACD,OAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGS,iBAAiB,CAACP,MAAtC,EAA8CF,CAAC,EAA/C,EAAmD;AACjD,QAAIU,IAAI,GAAGD,iBAAiB,CAACT,CAAD,CAA5B;AACA,SAAKjB,MAAL,CAAYqB,IAAZ,CAAiBM,IAAjB;AACA,QAAIC,MAAM,GAAG,CAAC,KAAK1B,MAAL,IAAeV,KAAhB,EAAuBqC,aAAvB,CAAqCF,IAAI,CAACG,UAA1C,EAAsDH,IAAI,CAACI,MAAL,IAAe,MAArE,CAAb;;AACA,SAAK9B,QAAL,CAAcoB,IAAd,CAAmBO,MAAnB;AACD;AACF,CAfD;;AAiBAI,MAAM,CAACC,OAAP,GAAiBvC,MAAjB","sourcesContent":["'use strict'\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\nvar types = require('pg-types')\n\n// result object returned from query\n// in the 'end' event and also\n// passed as second argument to provided callback\nvar Result = function (rowMode, types) {\n  this.command = null\n  this.rowCount = null\n  this.oid = null\n  this.rows = []\n  this.fields = []\n  this._parsers = []\n  this._types = types\n  this.RowCtor = null\n  this.rowAsArray = rowMode === 'array'\n  if (this.rowAsArray) {\n    this.parseRow = this._parseRowAsArray\n  }\n}\n\nvar matchRegexp = /^([A-Za-z]+)(?: (\\d+))?(?: (\\d+))?/\n\n// adds a command complete message\nResult.prototype.addCommandComplete = function (msg) {\n  var match\n  if (msg.text) {\n    // pure javascript\n    match = matchRegexp.exec(msg.text)\n  } else {\n    // native bindings\n    match = matchRegexp.exec(msg.command)\n  }\n  if (match) {\n    this.command = match[1]\n    if (match[3]) {\n      // COMMMAND OID ROWS\n      this.oid = parseInt(match[2], 10)\n      this.rowCount = parseInt(match[3], 10)\n    } else if (match[2]) {\n      // COMMAND ROWS\n      this.rowCount = parseInt(match[2], 10)\n    }\n  }\n}\n\nResult.prototype._parseRowAsArray = function (rowData) {\n  var row = []\n  for (var i = 0, len = rowData.length; i < len; i++) {\n    var rawValue = rowData[i]\n    if (rawValue !== null) {\n      row.push(this._parsers[i](rawValue))\n    } else {\n      row.push(null)\n    }\n  }\n  return row\n}\n\nResult.prototype.parseRow = function (rowData) {\n  var row = {}\n  for (var i = 0, len = rowData.length; i < len; i++) {\n    var rawValue = rowData[i]\n    var field = this.fields[i].name\n    if (rawValue !== null) {\n      row[field] = this._parsers[i](rawValue)\n    } else {\n      row[field] = null\n    }\n  }\n  return row\n}\n\nResult.prototype.addRow = function (row) {\n  this.rows.push(row)\n}\n\nResult.prototype.addFields = function (fieldDescriptions) {\n  // clears field definitions\n  // multiple query statements in 1 action can result in multiple sets\n  // of rowDescriptions...eg: 'select NOW(); select 1::int;'\n  // you need to reset the fields\n  if (this.fields.length) {\n    this.fields = []\n    this._parsers = []\n  }\n  for (var i = 0; i < fieldDescriptions.length; i++) {\n    var desc = fieldDescriptions[i]\n    this.fields.push(desc)\n    var parser = (this._types || types).getTypeParser(desc.dataTypeID, desc.format || 'text')\n    this._parsers.push(parser)\n  }\n}\n\nmodule.exports = Result\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fs_1 = require(\"fs\");\n\nconst crypto_1 = require(\"crypto\");\n\nconst applicationTokenCredentialsBase_1 = require(\"./applicationTokenCredentialsBase\");\n\nconst authConstants_1 = require(\"../util/authConstants\");\n\nclass ApplicationTokenCertificateCredentials extends applicationTokenCredentialsBase_1.ApplicationTokenCredentialsBase {\n  /**\n   * Creates a new ApplicationTokenCredentials object.\n   * See {@link https://azure.microsoft.com/en-us/documentation/articles/active-directory-devquickstarts-dotnet/ Active Directory Quickstart for .Net}\n   * for detailed instructions on creating an Azure Active Directory application.\n   * @constructor\n   * @param {string} clientId The active directory application client id.\n   * @param {string} domain The domain or tenant id containing this application.\n   * @param {string} certificate A PEM encoded certificate private key.\n   * @param {string} thumbprint A hex encoded thumbprint of the certificate.\n   * @param {string} [tokenAudience] The audience for which the token is requested. Valid values are 'graph', 'batch', or any other resource like 'https://vault.azure.net/'.\n   * If tokenAudience is 'graph' then domain should also be provided and its value should not be the default 'common' tenant. It must be a string (preferrably in a guid format).\n   * @param {Environment} [environment] The azure environment to authenticate with.\n   * @param {object} [tokenCache] The token cache. Default value is the MemoryCache object from adal.\n   */\n  constructor(clientId, domain, certificate, thumbprint, tokenAudience, environment, tokenCache) {\n    if (!certificate || typeof certificate.valueOf() !== \"string\") {\n      throw new Error(\"certificate must be a non empty string.\");\n    }\n\n    if (!thumbprint || typeof thumbprint.valueOf() !== \"string\") {\n      throw new Error(\"thumbprint must be a non empty string.\");\n    }\n\n    super(clientId, domain, tokenAudience, environment, tokenCache);\n    this.certificate = certificate;\n    this.thumbprint = thumbprint;\n  }\n  /**\n   * Tries to get the token from cache initially. If that is unsuccessfull then it tries to get the token from ADAL.\n   * @returns {Promise<TokenResponse>} A promise that resolves to TokenResponse and rejects with an Error.\n   */\n\n\n  getToken() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const tokenResponse = yield this.getTokenFromCache();\n        return tokenResponse;\n      } catch (error) {\n        if (error.message.startsWith(authConstants_1.AuthConstants.SDK_INTERNAL_ERROR)) {\n          return Promise.reject(error);\n        }\n\n        return new Promise((resolve, reject) => {\n          const resource = this.getActiveDirectoryResourceId();\n          this.authContext.acquireTokenWithClientCertificate(resource, this.clientId, this.certificate, this.thumbprint, (error, tokenResponse) => {\n            if (error) {\n              return reject(error);\n            }\n\n            if (tokenResponse.error || tokenResponse.errorDescription) {\n              return reject(tokenResponse);\n            }\n\n            return resolve(tokenResponse);\n          });\n        });\n      }\n    });\n  }\n  /**\n   * Creates a new instance of ApplicationTokenCertificateCredentials.\n   *\n   * @param clientId  The active directory application client id also known as the SPN (ServicePrincipal Name).\n   * See {@link https://azure.microsoft.com/en-us/documentation/articles/active-directory-devquickstarts-dotnet/ Active Directory Quickstart for .Net}\n   * for an example.\n   * @param {string} certificateStringOrFilePath A PEM encoded certificate and private key OR an absolute filepath to the .pem file containing that information. For example:\n   * - CertificateString: \"-----BEGIN PRIVATE KEY-----\\n<xxxxx>\\n-----END PRIVATE KEY-----\\n-----BEGIN CERTIFICATE-----\\n<yyyyy>\\n-----END CERTIFICATE-----\\n\"\n   * - CertificateFilePath: **Absolute** file path of the .pem file.\n   * @param domain The domain or tenant id containing this application.\n   * @param options AzureTokenCredentialsOptions - Object representing optional parameters.\n   *\n   * @returns ApplicationTokenCertificateCredentials\n   */\n\n\n  static create(clientId, certificateStringOrFilePath, domain, options) {\n    if (!certificateStringOrFilePath || typeof certificateStringOrFilePath.valueOf() !== \"string\") {\n      throw new Error(\"'certificateStringOrFilePath' must be a non empty string.\");\n    }\n\n    if (!certificateStringOrFilePath.startsWith(\"-----BEGIN\")) {\n      certificateStringOrFilePath = fs_1.readFileSync(certificateStringOrFilePath, \"utf8\");\n    }\n\n    const certificatePattern = /(-+BEGIN CERTIFICATE-+)(\\n\\r?|\\r\\n?)([A-Za-z0-9\\+\\/\\n\\r]+\\=*)(\\n\\r?|\\r\\n?)(-+END CERTIFICATE-+)/;\n    const matchCert = certificateStringOrFilePath.match(certificatePattern);\n    const rawCertificate = matchCert ? matchCert[3] : \"\";\n\n    if (!rawCertificate) {\n      throw new Error(\"Unable to correctly parse the certificate from the value provided in 'certificateStringOrFilePath' \");\n    }\n\n    const thumbprint = crypto_1.createHash(\"sha1\").update(Buffer.from(rawCertificate, \"base64\")).digest(\"hex\");\n    return new ApplicationTokenCertificateCredentials(clientId, domain, certificateStringOrFilePath, thumbprint, options.tokenAudience, options.environment, options.tokenCache);\n  }\n\n}\n\nexports.ApplicationTokenCertificateCredentials = ApplicationTokenCertificateCredentials;","map":{"version":3,"sources":["../../../lib/credentials/applicationTokenCertificateCredentials.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs_1 = require(\"fs\");\nconst crypto_1 = require(\"crypto\");\nconst applicationTokenCredentialsBase_1 = require(\"./applicationTokenCredentialsBase\");\nconst authConstants_1 = require(\"../util/authConstants\");\nclass ApplicationTokenCertificateCredentials extends applicationTokenCredentialsBase_1.ApplicationTokenCredentialsBase {\n    /**\n     * Creates a new ApplicationTokenCredentials object.\n     * See {@link https://azure.microsoft.com/en-us/documentation/articles/active-directory-devquickstarts-dotnet/ Active Directory Quickstart for .Net}\n     * for detailed instructions on creating an Azure Active Directory application.\n     * @constructor\n     * @param {string} clientId The active directory application client id.\n     * @param {string} domain The domain or tenant id containing this application.\n     * @param {string} certificate A PEM encoded certificate private key.\n     * @param {string} thumbprint A hex encoded thumbprint of the certificate.\n     * @param {string} [tokenAudience] The audience for which the token is requested. Valid values are 'graph', 'batch', or any other resource like 'https://vault.azure.net/'.\n     * If tokenAudience is 'graph' then domain should also be provided and its value should not be the default 'common' tenant. It must be a string (preferrably in a guid format).\n     * @param {Environment} [environment] The azure environment to authenticate with.\n     * @param {object} [tokenCache] The token cache. Default value is the MemoryCache object from adal.\n     */\n    constructor(clientId, domain, certificate, thumbprint, tokenAudience, environment, tokenCache) {\n        if (!certificate || typeof certificate.valueOf() !== \"string\") {\n            throw new Error(\"certificate must be a non empty string.\");\n        }\n        if (!thumbprint || typeof thumbprint.valueOf() !== \"string\") {\n            throw new Error(\"thumbprint must be a non empty string.\");\n        }\n        super(clientId, domain, tokenAudience, environment, tokenCache);\n        this.certificate = certificate;\n        this.thumbprint = thumbprint;\n    }\n    /**\n     * Tries to get the token from cache initially. If that is unsuccessfull then it tries to get the token from ADAL.\n     * @returns {Promise<TokenResponse>} A promise that resolves to TokenResponse and rejects with an Error.\n     */\n    getToken() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const tokenResponse = yield this.getTokenFromCache();\n                return tokenResponse;\n            }\n            catch (error) {\n                if (error.message.startsWith(authConstants_1.AuthConstants.SDK_INTERNAL_ERROR)) {\n                    return Promise.reject(error);\n                }\n                return new Promise((resolve, reject) => {\n                    const resource = this.getActiveDirectoryResourceId();\n                    this.authContext.acquireTokenWithClientCertificate(resource, this.clientId, this.certificate, this.thumbprint, (error, tokenResponse) => {\n                        if (error) {\n                            return reject(error);\n                        }\n                        if (tokenResponse.error || tokenResponse.errorDescription) {\n                            return reject(tokenResponse);\n                        }\n                        return resolve(tokenResponse);\n                    });\n                });\n            }\n        });\n    }\n    /**\n     * Creates a new instance of ApplicationTokenCertificateCredentials.\n     *\n     * @param clientId  The active directory application client id also known as the SPN (ServicePrincipal Name).\n     * See {@link https://azure.microsoft.com/en-us/documentation/articles/active-directory-devquickstarts-dotnet/ Active Directory Quickstart for .Net}\n     * for an example.\n     * @param {string} certificateStringOrFilePath A PEM encoded certificate and private key OR an absolute filepath to the .pem file containing that information. For example:\n     * - CertificateString: \"-----BEGIN PRIVATE KEY-----\\n<xxxxx>\\n-----END PRIVATE KEY-----\\n-----BEGIN CERTIFICATE-----\\n<yyyyy>\\n-----END CERTIFICATE-----\\n\"\n     * - CertificateFilePath: **Absolute** file path of the .pem file.\n     * @param domain The domain or tenant id containing this application.\n     * @param options AzureTokenCredentialsOptions - Object representing optional parameters.\n     *\n     * @returns ApplicationTokenCertificateCredentials\n     */\n    static create(clientId, certificateStringOrFilePath, domain, options) {\n        if (!certificateStringOrFilePath ||\n            typeof certificateStringOrFilePath.valueOf() !== \"string\") {\n            throw new Error(\"'certificateStringOrFilePath' must be a non empty string.\");\n        }\n        if (!certificateStringOrFilePath.startsWith(\"-----BEGIN\")) {\n            certificateStringOrFilePath = fs_1.readFileSync(certificateStringOrFilePath, \"utf8\");\n        }\n        const certificatePattern = /(-+BEGIN CERTIFICATE-+)(\\n\\r?|\\r\\n?)([A-Za-z0-9\\+\\/\\n\\r]+\\=*)(\\n\\r?|\\r\\n?)(-+END CERTIFICATE-+)/;\n        const matchCert = certificateStringOrFilePath.match(certificatePattern);\n        const rawCertificate = matchCert ? matchCert[3] : \"\";\n        if (!rawCertificate) {\n            throw new Error(\"Unable to correctly parse the certificate from the value provided in 'certificateStringOrFilePath' \");\n        }\n        const thumbprint = crypto_1.createHash(\"sha1\")\n            .update(Buffer.from(rawCertificate, \"base64\"))\n            .digest(\"hex\");\n        return new ApplicationTokenCertificateCredentials(clientId, domain, certificateStringOrFilePath, thumbprint, options.tokenAudience, options.environment, options.tokenCache);\n    }\n}\nexports.ApplicationTokenCertificateCredentials = ApplicationTokenCertificateCredentials;\n//# sourceMappingURL=applicationTokenCertificateCredentials.js.map"]},"metadata":{},"sourceType":"script"}
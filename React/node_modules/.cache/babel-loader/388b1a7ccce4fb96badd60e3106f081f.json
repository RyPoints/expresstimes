{"ast":null,"code":"/*\r\n * @copyright\r\n * Copyright © Microsoft Open Technologies, Inc.\r\n *\r\n * All Rights Reserved\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http: *www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS\r\n * OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION\r\n * ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A\r\n * PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.\r\n *\r\n * See the Apache License, Version 2.0 for the specific language\r\n * governing permissions and limitations under the License.\r\n */\n'use strict';\n\nvar _ = require('underscore');\n\nvar constants = require('./constants');\n\nvar UserCodeResponseFields = constants.UserCodeResponseFields;\nvar argumentValidation = {\n  /**\r\n   * Throws if the passed in parameter is not a string.\r\n   * @param  {string} param   The parameter to validate.\r\n   * @param  {string} name    The name of the parameter being validated.\r\n   * @throws {Error} If the parameter is not a valid string.\r\n   */\n  validateStringParameter: function (param, name) {\n    if (!param) {\n      throw new Error('The ' + name + ' parameter is required.');\n    }\n\n    if (!_.isString(param)) {\n      throw new Error('The ' + name + ' parameter must be of type String.');\n    }\n  },\n\n  /**\r\n   * Validates that the callback passed in {@link AuthenticationContext.acquireToken} is a function\r\n   * @param  {AcquireTokenCallback} callback\r\n   * @throws {Error} If the callback parameter is not a function\r\n   */\n  validateCallbackType: function (callback) {\n    if (!callback || !_.isFunction(callback)) {\n      throw new Error('acquireToken requires a function callback parameter.');\n    }\n  },\n  validateUserCodeInfo: function (userCodeInfo) {\n    if (!userCodeInfo) {\n      throw new Error('The userCodeInfo parameter is required');\n    }\n\n    if (!userCodeInfo.hasOwnProperty(UserCodeResponseFields.DEVICE_CODE)) {\n      throw new Error('The userCodeInfo is missing device_code');\n    }\n\n    if (!userCodeInfo.hasOwnProperty(UserCodeResponseFields.INTERVAL)) {\n      throw new Error('The userCodeInfo is missing interval');\n    }\n\n    if (!userCodeInfo.hasOwnProperty(UserCodeResponseFields.EXPIRES_IN)) {\n      throw new Error('The userCodeInfo is missing expires_in');\n    }\n  }\n};\nmodule.exports = argumentValidation;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/adal-node/lib/argument.js"],"names":["_","require","constants","UserCodeResponseFields","argumentValidation","validateStringParameter","param","name","Error","isString","validateCallbackType","callback","isFunction","validateUserCodeInfo","userCodeInfo","hasOwnProperty","DEVICE_CODE","INTERVAL","EXPIRES_IN","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;AAoBA;;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,YAAD,CAAf;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,aAAD,CAAvB;;AAEA,IAAIE,sBAAsB,GAAGD,SAAS,CAACC,sBAAvC;AAEA,IAAIC,kBAAkB,GAAG;AACvB;;;;;;AAMAC,EAAAA,uBAAuB,EAAG,UAASC,KAAT,EAAgBC,IAAhB,EAAsB;AAC9C,QAAI,CAACD,KAAL,EAAY;AACV,YAAM,IAAIE,KAAJ,CAAU,SAASD,IAAT,GAAgB,yBAA1B,CAAN;AACD;;AACD,QAAI,CAACP,CAAC,CAACS,QAAF,CAAWH,KAAX,CAAL,EAAwB;AACtB,YAAM,IAAIE,KAAJ,CAAU,SAASD,IAAT,GAAgB,oCAA1B,CAAN;AACD;AACF,GAdsB;;AAgBvB;;;;;AAKAG,EAAAA,oBAAoB,EAAG,UAASC,QAAT,EAAmB;AACxC,QAAI,CAACA,QAAD,IAAa,CAACX,CAAC,CAACY,UAAF,CAAaD,QAAb,CAAlB,EAA0C;AACxC,YAAM,IAAIH,KAAJ,CAAU,sDAAV,CAAN;AACD;AACF,GAzBsB;AA2BvBK,EAAAA,oBAAoB,EAAG,UAASC,YAAT,EAAuB;AAC3C,QAAI,CAACA,YAAL,EAAkB;AACf,YAAM,IAAIN,KAAJ,CAAU,wCAAV,CAAN;AACF;;AAED,QAAI,CAACM,YAAY,CAACC,cAAb,CAA4BZ,sBAAsB,CAACa,WAAnD,CAAL,EAAqE;AAClE,YAAM,IAAIR,KAAJ,CAAU,yCAAV,CAAN;AACF;;AAED,QAAI,CAACM,YAAY,CAACC,cAAb,CAA4BZ,sBAAsB,CAACc,QAAnD,CAAL,EAAkE;AAC/D,YAAM,IAAIT,KAAJ,CAAU,sCAAV,CAAN;AACF;;AAED,QAAI,CAACM,YAAY,CAACC,cAAb,CAA4BZ,sBAAsB,CAACe,UAAnD,CAAL,EAAoE;AACjE,YAAM,IAAIV,KAAJ,CAAU,wCAAV,CAAN;AACF;AACH;AA3CsB,CAAzB;AA8CAW,MAAM,CAACC,OAAP,GAAiBhB,kBAAjB","sourcesContent":["/*\r\n * @copyright\r\n * Copyright © Microsoft Open Technologies, Inc.\r\n *\r\n * All Rights Reserved\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http: *www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS\r\n * OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION\r\n * ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A\r\n * PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.\r\n *\r\n * See the Apache License, Version 2.0 for the specific language\r\n * governing permissions and limitations under the License.\r\n */\r\n'use strict';\r\n\r\nvar _ = require('underscore');\r\nvar constants = require('./constants');\r\n\r\nvar UserCodeResponseFields = constants.UserCodeResponseFields;\r\n\r\nvar argumentValidation = {\r\n  /**\r\n   * Throws if the passed in parameter is not a string.\r\n   * @param  {string} param   The parameter to validate.\r\n   * @param  {string} name    The name of the parameter being validated.\r\n   * @throws {Error} If the parameter is not a valid string.\r\n   */\r\n  validateStringParameter : function(param, name) {\r\n    if (!param) {\r\n      throw new Error('The ' + name + ' parameter is required.');\r\n    }\r\n    if (!_.isString(param)) {\r\n      throw new Error('The ' + name + ' parameter must be of type String.');\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Validates that the callback passed in {@link AuthenticationContext.acquireToken} is a function\r\n   * @param  {AcquireTokenCallback} callback\r\n   * @throws {Error} If the callback parameter is not a function\r\n   */\r\n  validateCallbackType : function(callback) {\r\n    if (!callback || !_.isFunction(callback)) {\r\n      throw new Error('acquireToken requires a function callback parameter.');\r\n    }\r\n  }, \r\n\r\n  validateUserCodeInfo : function(userCodeInfo) {\r\n     if (!userCodeInfo){\r\n        throw new Error('The userCodeInfo parameter is required');\r\n     }\r\n\r\n     if (!userCodeInfo.hasOwnProperty(UserCodeResponseFields.DEVICE_CODE)){\r\n        throw new Error('The userCodeInfo is missing device_code');\r\n     }\r\n\r\n     if (!userCodeInfo.hasOwnProperty(UserCodeResponseFields.INTERVAL)){\r\n        throw new Error('The userCodeInfo is missing interval');\r\n     }\r\n\r\n     if (!userCodeInfo.hasOwnProperty(UserCodeResponseFields.EXPIRES_IN)){\r\n        throw new Error('The userCodeInfo is missing expires_in');\r\n     }\r\n  }\r\n};\r\n\r\nmodule.exports = argumentValidation;\r\n"]},"metadata":{},"sourceType":"script"}
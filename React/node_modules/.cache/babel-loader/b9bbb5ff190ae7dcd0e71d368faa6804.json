{"ast":null,"code":"'use strict';\n\nconst Packet = require('../packets/packet');\n\nclass TextRow {\n  constructor(columns) {\n    this.columns = columns || [];\n  }\n\n  static fromPacket(packet) {\n    // packet.reset(); // set offset to starting point?\n    const columns = [];\n\n    while (packet.haveMoreData()) {\n      columns.push(packet.readLengthCodedString());\n    }\n\n    return new TextRow(columns);\n  }\n\n  static toPacket(columns, encoding) {\n    const sequenceId = 0; // TODO remove, this is calculated now in connecton\n\n    let length = 0;\n    columns.forEach(val => {\n      if (val === null || typeof val === 'undefined') {\n        ++length;\n        return;\n      }\n\n      length += Packet.lengthCodedStringLength(val.toString(10), encoding);\n    });\n    const buffer = Buffer.allocUnsafe(length + 4);\n    const packet = new Packet(sequenceId, buffer, 0, length + 4);\n    packet.offset = 4;\n    columns.forEach(val => {\n      if (val === null) {\n        packet.writeNull();\n        return;\n      }\n\n      if (typeof val === 'undefined') {\n        packet.writeInt8(0);\n        return;\n      }\n\n      packet.writeLengthCodedString(val.toString(10), encoding);\n    });\n    return packet;\n  }\n\n}\n\nmodule.exports = TextRow;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/mysql2/lib/packets/text_row.js"],"names":["Packet","require","TextRow","constructor","columns","fromPacket","packet","haveMoreData","push","readLengthCodedString","toPacket","encoding","sequenceId","length","forEach","val","lengthCodedStringLength","toString","buffer","Buffer","allocUnsafe","offset","writeNull","writeInt8","writeLengthCodedString","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,mBAAD,CAAtB;;AAEA,MAAMC,OAAN,CAAc;AACZC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,SAAKA,OAAL,GAAeA,OAAO,IAAI,EAA1B;AACD;;AAED,SAAOC,UAAP,CAAkBC,MAAlB,EAA0B;AACxB;AACA,UAAMF,OAAO,GAAG,EAAhB;;AACA,WAAOE,MAAM,CAACC,YAAP,EAAP,EAA8B;AAC5BH,MAAAA,OAAO,CAACI,IAAR,CAAaF,MAAM,CAACG,qBAAP,EAAb;AACD;;AACD,WAAO,IAAIP,OAAJ,CAAYE,OAAZ,CAAP;AACD;;AAED,SAAOM,QAAP,CAAgBN,OAAhB,EAAyBO,QAAzB,EAAmC;AACjC,UAAMC,UAAU,GAAG,CAAnB,CADiC,CACX;;AACtB,QAAIC,MAAM,GAAG,CAAb;AACAT,IAAAA,OAAO,CAACU,OAAR,CAAgBC,GAAG,IAAI;AACrB,UAAIA,GAAG,KAAK,IAAR,IAAgB,OAAOA,GAAP,KAAe,WAAnC,EAAgD;AAC9C,UAAEF,MAAF;AACA;AACD;;AACDA,MAAAA,MAAM,IAAIb,MAAM,CAACgB,uBAAP,CAA+BD,GAAG,CAACE,QAAJ,CAAa,EAAb,CAA/B,EAAiDN,QAAjD,CAAV;AACD,KAND;AAOA,UAAMO,MAAM,GAAGC,MAAM,CAACC,WAAP,CAAmBP,MAAM,GAAG,CAA5B,CAAf;AACA,UAAMP,MAAM,GAAG,IAAIN,MAAJ,CAAWY,UAAX,EAAuBM,MAAvB,EAA+B,CAA/B,EAAkCL,MAAM,GAAG,CAA3C,CAAf;AACAP,IAAAA,MAAM,CAACe,MAAP,GAAgB,CAAhB;AACAjB,IAAAA,OAAO,CAACU,OAAR,CAAgBC,GAAG,IAAI;AACrB,UAAIA,GAAG,KAAK,IAAZ,EAAkB;AAChBT,QAAAA,MAAM,CAACgB,SAAP;AACA;AACD;;AACD,UAAI,OAAOP,GAAP,KAAe,WAAnB,EAAgC;AAC9BT,QAAAA,MAAM,CAACiB,SAAP,CAAiB,CAAjB;AACA;AACD;;AACDjB,MAAAA,MAAM,CAACkB,sBAAP,CAA8BT,GAAG,CAACE,QAAJ,CAAa,EAAb,CAA9B,EAAgDN,QAAhD;AACD,KAVD;AAWA,WAAOL,MAAP;AACD;;AAvCW;;AA0CdmB,MAAM,CAACC,OAAP,GAAiBxB,OAAjB","sourcesContent":["'use strict';\n\nconst Packet = require('../packets/packet');\n\nclass TextRow {\n  constructor(columns) {\n    this.columns = columns || [];\n  }\n\n  static fromPacket(packet) {\n    // packet.reset(); // set offset to starting point?\n    const columns = [];\n    while (packet.haveMoreData()) {\n      columns.push(packet.readLengthCodedString());\n    }\n    return new TextRow(columns);\n  }\n\n  static toPacket(columns, encoding) {\n    const sequenceId = 0; // TODO remove, this is calculated now in connecton\n    let length = 0;\n    columns.forEach(val => {\n      if (val === null || typeof val === 'undefined') {\n        ++length;\n        return;\n      }\n      length += Packet.lengthCodedStringLength(val.toString(10), encoding);\n    });\n    const buffer = Buffer.allocUnsafe(length + 4);\n    const packet = new Packet(sequenceId, buffer, 0, length + 4);\n    packet.offset = 4;\n    columns.forEach(val => {\n      if (val === null) {\n        packet.writeNull();\n        return;\n      }\n      if (typeof val === 'undefined') {\n        packet.writeInt8(0);\n        return;\n      }\n      packet.writeLengthCodedString(val.toString(10), encoding);\n    });\n    return packet;\n  }\n}\n\nmodule.exports = TextRow;\n"]},"metadata":{},"sourceType":"script"}
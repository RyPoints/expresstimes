{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst msiTokenCredentials_1 = require(\"./msiTokenCredentials\");\n\nconst ms_rest_js_1 = require(\"@azure/ms-rest-js\");\n/**\n * @class MSIAppServiceTokenCredentials\n */\n\n\nclass MSIAppServiceTokenCredentials extends msiTokenCredentials_1.MSITokenCredentials {\n  /**\n   * Creates an instance of MSIAppServiceTokenCredentials.\n   * @param {string} [options.msiEndpoint] - The local URL from which your app can request tokens.\n   * Either provide this parameter or set the environment variable `MSI_ENDPOINT`.\n   * For example: `MSI_ENDPOINT=\"http://127.0.0.1:41741/MSI/token/\"`\n   * @param {string} [options.msiSecret] - The secret used in communication between your code and the local MSI agent.\n   * Either provide this parameter or set the environment variable `MSI_SECRET`.\n   * For example: `MSI_SECRET=\"69418689F1E342DD946CB82994CDA3CB\"`\n   * @param {string} [options.resource] - The resource uri or token audience for which the token is needed.\n   * For e.g. it can be:\n   * - resource management endpoint \"https://management.azure.com/\" (default)\n   * - management endpoint \"https://management.core.windows.net/\"\n   * @param {string} [options.msiApiVersion] - The api-version of the local MSI agent. Default value is \"2017-09-01\".\n   */\n  constructor(options) {\n    if (!options) options = {};\n    super(options);\n    options.msiEndpoint = options.msiEndpoint || process.env[\"MSI_ENDPOINT\"];\n    options.msiSecret = options.msiSecret || process.env[\"MSI_SECRET\"];\n\n    if (!options.msiEndpoint || options.msiEndpoint && typeof options.msiEndpoint.valueOf() !== \"string\") {\n      throw new Error('Either provide \"msiEndpoint\" as a property of the \"options\" object ' + 'or set the environment variable \"MSI_ENDPOINT\" and it must be of type \"string\".');\n    }\n\n    if (!options.msiSecret || options.msiSecret && typeof options.msiSecret.valueOf() !== \"string\") {\n      throw new Error('Either provide \"msiSecret\" as a property of the \"options\" object ' + 'or set the environment variable \"MSI_SECRET\" and it must be of type \"string\".');\n    }\n\n    if (!options.msiApiVersion) {\n      options.msiApiVersion = \"2017-09-01\";\n    } else if (typeof options.msiApiVersion.valueOf() !== \"string\") {\n      throw new Error(\"msiApiVersion must be a uri.\");\n    }\n\n    this.msiEndpoint = options.msiEndpoint;\n    this.msiSecret = options.msiSecret;\n    this.msiApiVersion = options.msiApiVersion;\n  }\n  /**\n   * Prepares and sends a GET request to a service endpoint indicated by the app service, which responds with the access token.\n   * @return {Promise<MSITokenResponse>} Promise with the tokenResponse (tokenType and accessToken are the two important properties).\n   */\n\n\n  getToken() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const reqOptions = this.prepareRequestOptions();\n      let opRes;\n      let result;\n      opRes = yield this._httpClient.sendRequest(reqOptions);\n\n      if (opRes.bodyAsText === undefined || opRes.bodyAsText.indexOf(\"ExceptionMessage\") !== -1) {\n        throw new Error(`MSI: Failed to retrieve a token from \"${reqOptions.url}\" with an error: ${opRes.bodyAsText}`);\n      }\n\n      result = this.parseTokenResponse(opRes.bodyAsText);\n\n      if (!result.tokenType) {\n        throw new Error(`Invalid token response, did not find tokenType. Response body is: ${opRes.bodyAsText}`);\n      } else if (!result.accessToken) {\n        throw new Error(`Invalid token response, did not find accessToken. Response body is: ${opRes.bodyAsText}`);\n      }\n\n      return result;\n    });\n  }\n\n  prepareRequestOptions() {\n    const endpoint = this.msiEndpoint.endsWith(\"/\") ? this.msiEndpoint : `${this.msiEndpoint}/`;\n    const resource = encodeURIComponent(this.resource);\n    const getUrl = `${endpoint}?resource=${resource}&api-version=${this.msiApiVersion}`;\n    const reqOptions = {\n      url: getUrl,\n      headers: {\n        \"secret\": this.msiSecret\n      },\n      method: \"GET\"\n    };\n    const webResource = new ms_rest_js_1.WebResource();\n    return webResource.prepare(reqOptions);\n  }\n\n}\n\nexports.MSIAppServiceTokenCredentials = MSIAppServiceTokenCredentials;","map":{"version":3,"sources":["../../../lib/credentials/msiAppServiceTokenCredentials.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst msiTokenCredentials_1 = require(\"./msiTokenCredentials\");\nconst ms_rest_js_1 = require(\"@azure/ms-rest-js\");\n/**\n * @class MSIAppServiceTokenCredentials\n */\nclass MSIAppServiceTokenCredentials extends msiTokenCredentials_1.MSITokenCredentials {\n    /**\n     * Creates an instance of MSIAppServiceTokenCredentials.\n     * @param {string} [options.msiEndpoint] - The local URL from which your app can request tokens.\n     * Either provide this parameter or set the environment variable `MSI_ENDPOINT`.\n     * For example: `MSI_ENDPOINT=\"http://127.0.0.1:41741/MSI/token/\"`\n     * @param {string} [options.msiSecret] - The secret used in communication between your code and the local MSI agent.\n     * Either provide this parameter or set the environment variable `MSI_SECRET`.\n     * For example: `MSI_SECRET=\"69418689F1E342DD946CB82994CDA3CB\"`\n     * @param {string} [options.resource] - The resource uri or token audience for which the token is needed.\n     * For e.g. it can be:\n     * - resource management endpoint \"https://management.azure.com/\" (default)\n     * - management endpoint \"https://management.core.windows.net/\"\n     * @param {string} [options.msiApiVersion] - The api-version of the local MSI agent. Default value is \"2017-09-01\".\n     */\n    constructor(options) {\n        if (!options)\n            options = {};\n        super(options);\n        options.msiEndpoint = options.msiEndpoint || process.env[\"MSI_ENDPOINT\"];\n        options.msiSecret = options.msiSecret || process.env[\"MSI_SECRET\"];\n        if (!options.msiEndpoint || (options.msiEndpoint && typeof options.msiEndpoint.valueOf() !== \"string\")) {\n            throw new Error('Either provide \"msiEndpoint\" as a property of the \"options\" object ' +\n                'or set the environment variable \"MSI_ENDPOINT\" and it must be of type \"string\".');\n        }\n        if (!options.msiSecret || (options.msiSecret && typeof options.msiSecret.valueOf() !== \"string\")) {\n            throw new Error('Either provide \"msiSecret\" as a property of the \"options\" object ' +\n                'or set the environment variable \"MSI_SECRET\" and it must be of type \"string\".');\n        }\n        if (!options.msiApiVersion) {\n            options.msiApiVersion = \"2017-09-01\";\n        }\n        else if (typeof options.msiApiVersion.valueOf() !== \"string\") {\n            throw new Error(\"msiApiVersion must be a uri.\");\n        }\n        this.msiEndpoint = options.msiEndpoint;\n        this.msiSecret = options.msiSecret;\n        this.msiApiVersion = options.msiApiVersion;\n    }\n    /**\n     * Prepares and sends a GET request to a service endpoint indicated by the app service, which responds with the access token.\n     * @return {Promise<MSITokenResponse>} Promise with the tokenResponse (tokenType and accessToken are the two important properties).\n     */\n    getToken() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const reqOptions = this.prepareRequestOptions();\n            let opRes;\n            let result;\n            opRes = yield this._httpClient.sendRequest(reqOptions);\n            if (opRes.bodyAsText === undefined || opRes.bodyAsText.indexOf(\"ExceptionMessage\") !== -1) {\n                throw new Error(`MSI: Failed to retrieve a token from \"${reqOptions.url}\" with an error: ${opRes.bodyAsText}`);\n            }\n            result = this.parseTokenResponse(opRes.bodyAsText);\n            if (!result.tokenType) {\n                throw new Error(`Invalid token response, did not find tokenType. Response body is: ${opRes.bodyAsText}`);\n            }\n            else if (!result.accessToken) {\n                throw new Error(`Invalid token response, did not find accessToken. Response body is: ${opRes.bodyAsText}`);\n            }\n            return result;\n        });\n    }\n    prepareRequestOptions() {\n        const endpoint = this.msiEndpoint.endsWith(\"/\") ? this.msiEndpoint : `${this.msiEndpoint}/`;\n        const resource = encodeURIComponent(this.resource);\n        const getUrl = `${endpoint}?resource=${resource}&api-version=${this.msiApiVersion}`;\n        const reqOptions = {\n            url: getUrl,\n            headers: {\n                \"secret\": this.msiSecret\n            },\n            method: \"GET\"\n        };\n        const webResource = new ms_rest_js_1.WebResource();\n        return webResource.prepare(reqOptions);\n    }\n}\nexports.MSIAppServiceTokenCredentials = MSIAppServiceTokenCredentials;\n//# sourceMappingURL=msiAppServiceTokenCredentials.js.map"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst wkx = require('wkx');\n\nconst inherits = require('../../utils/inherits');\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'http://www.postgresql.org/docs/9.4/static/datatype.html');\n  /**\n   * types:\n   * {\n   *   oids: [oid],\n   *   array_oids: [oid]\n   * }\n   * @see oid here https://github.com/lib/pq/blob/master/oid/types.go\n   */\n\n  BaseTypes.UUID.types.postgres = {\n    oids: [2950],\n    array_oids: [2951]\n  };\n  BaseTypes.CIDR.types.postgres = {\n    oids: [650],\n    array_oids: [651]\n  };\n  BaseTypes.INET.types.postgres = {\n    oids: [869],\n    array_oids: [1041]\n  };\n  BaseTypes.MACADDR.types.postgres = {\n    oids: [829],\n    array_oids: [1040]\n  };\n  BaseTypes.JSON.types.postgres = {\n    oids: [114],\n    array_oids: [199]\n  };\n  BaseTypes.JSONB.types.postgres = {\n    oids: [3802],\n    array_oids: [3807]\n  };\n  BaseTypes.TIME.types.postgres = {\n    oids: [1083],\n    array_oids: [1183]\n  };\n\n  function DATEONLY() {\n    if (!(this instanceof DATEONLY)) return new DATEONLY();\n    BaseTypes.DATEONLY.apply(this, arguments);\n  }\n\n  inherits(DATEONLY, BaseTypes.DATEONLY);\n\n  DATEONLY.parse = function parse(value) {\n    if (value === 'infinity') {\n      value = Infinity;\n    } else if (value === '-infinity') {\n      value = -Infinity;\n    }\n\n    return value;\n  };\n\n  DATEONLY.prototype._stringify = function _stringify(value, options) {\n    if (value === Infinity) {\n      return 'Infinity';\n    } else if (value === -Infinity) {\n      return '-Infinity';\n    }\n\n    return BaseTypes.DATEONLY.prototype._stringify.call(this, value, options);\n  };\n\n  DATEONLY.prototype._sanitize = function _sanitize(value, options) {\n    if ((!options || options && !options.raw) && value !== Infinity && value !== -Infinity) {\n      if (_.isString(value)) {\n        if (_.toLower(value) === 'infinity') {\n          return Infinity;\n        } else if (_.toLower(value) === '-infinity') {\n          return -Infinity;\n        }\n      }\n\n      return BaseTypes.DATEONLY.prototype._sanitize.call(this, value);\n    }\n\n    return value;\n  };\n\n  BaseTypes.DATEONLY.types.postgres = {\n    oids: [1082],\n    array_oids: [1182]\n  };\n\n  function DECIMAL(precision, scale) {\n    if (!(this instanceof DECIMAL)) return new DECIMAL(precision, scale);\n    BaseTypes.DECIMAL.apply(this, arguments);\n  }\n\n  inherits(DECIMAL, BaseTypes.DECIMAL);\n\n  DECIMAL.parse = function parse(value) {\n    return value;\n  }; // numeric\n\n\n  BaseTypes.DECIMAL.types.postgres = {\n    oids: [1700],\n    array_oids: [1231]\n  };\n\n  function STRING(length, binary) {\n    if (!(this instanceof STRING)) return new STRING(length, binary);\n    BaseTypes.STRING.apply(this, arguments);\n  }\n\n  inherits(STRING, BaseTypes.STRING);\n\n  STRING.prototype.toSql = function toSql() {\n    if (this._binary) {\n      return 'BYTEA';\n    }\n\n    return BaseTypes.STRING.prototype.toSql.call(this);\n  };\n\n  BaseTypes.STRING.types.postgres = {\n    oids: [1043],\n    array_oids: [1015]\n  };\n\n  function TEXT(length) {\n    if (!(this instanceof TEXT)) return new TEXT(length);\n    BaseTypes.TEXT.apply(this, arguments);\n  }\n\n  inherits(TEXT, BaseTypes.TEXT);\n\n  TEXT.prototype.toSql = function toSql() {\n    if (this._length) {\n      warn('PostgreSQL does not support TEXT with options. Plain `TEXT` will be used instead.');\n      this._length = undefined;\n    }\n\n    return 'TEXT';\n  };\n\n  BaseTypes.TEXT.types.postgres = {\n    oids: [25],\n    array_oids: [1009]\n  };\n\n  function CHAR(length, binary) {\n    if (!(this instanceof CHAR)) return new CHAR(length, binary);\n    BaseTypes.CHAR.apply(this, arguments);\n  }\n\n  inherits(CHAR, BaseTypes.CHAR);\n\n  CHAR.prototype.toSql = function toSql() {\n    if (this._binary) {\n      return 'BYTEA';\n    }\n\n    return BaseTypes.CHAR.prototype.toSql.call(this);\n  };\n\n  BaseTypes.CHAR.types.postgres = {\n    oids: [18, 1042],\n    array_oids: [1002, 1014]\n  };\n\n  function BOOLEAN() {\n    if (!(this instanceof BOOLEAN)) return new BOOLEAN();\n    BaseTypes.BOOLEAN.apply(this, arguments);\n  }\n\n  inherits(BOOLEAN, BaseTypes.BOOLEAN);\n\n  BOOLEAN.prototype.toSql = function toSql() {\n    return 'BOOLEAN';\n  };\n\n  BOOLEAN.prototype._sanitize = function _sanitize(value) {\n    if (value !== null && value !== undefined) {\n      if (Buffer.isBuffer(value) && value.length === 1) {\n        // Bit fields are returned as buffers\n        value = value[0];\n      }\n\n      if (_.isString(value)) {\n        // Only take action on valid boolean strings.\n        value = value === 'true' || value === 't' ? true : value === 'false' || value === 'f' ? false : value;\n      } else if (_.isNumber(value)) {\n        // Only take action on valid boolean integers.\n        value = value === 1 ? true : value === 0 ? false : value;\n      }\n    }\n\n    return value;\n  };\n\n  BOOLEAN.parse = BOOLEAN.prototype._sanitize;\n  BaseTypes.BOOLEAN.types.postgres = {\n    oids: [16],\n    array_oids: [1000]\n  };\n\n  function DATE(length) {\n    if (!(this instanceof DATE)) return new DATE(length);\n    BaseTypes.DATE.apply(this, arguments);\n  }\n\n  inherits(DATE, BaseTypes.DATE);\n\n  DATE.prototype.toSql = function toSql() {\n    return 'TIMESTAMP WITH TIME ZONE';\n  };\n\n  DATE.prototype.validate = function validate(value) {\n    if (value !== Infinity && value !== -Infinity) {\n      return BaseTypes.DATE.prototype.validate.call(this, value);\n    }\n\n    return true;\n  };\n\n  DATE.prototype._stringify = function _stringify(value, options) {\n    if (value === Infinity) {\n      return 'Infinity';\n    } else if (value === -Infinity) {\n      return '-Infinity';\n    }\n\n    return BaseTypes.DATE.prototype._stringify.call(this, value, options);\n  };\n\n  DATE.prototype._sanitize = function _sanitize(value, options) {\n    if ((!options || options && !options.raw) && !(value instanceof Date) && !!value && value !== Infinity && value !== -Infinity) {\n      if (_.isString(value)) {\n        if (_.toLower(value) === 'infinity') {\n          return Infinity;\n        } else if (_.toLower(value) === '-infinity') {\n          return -Infinity;\n        }\n      }\n\n      return new Date(value);\n    }\n\n    return value;\n  };\n\n  BaseTypes.DATE.types.postgres = {\n    oids: [1184],\n    array_oids: [1185]\n  };\n\n  function SMALLINT(length) {\n    if (!(this instanceof SMALLINT)) return new SMALLINT(length);\n    BaseTypes.SMALLINT.apply(this, arguments); // POSTGRES does not support any parameters for bigint\n\n    if (this._length || this.options.length || this._unsigned || this._zerofill) {\n      warn('PostgreSQL does not support SMALLINT with options. Plain `SMALLINT` will be used instead.');\n      this._length = undefined;\n      this.options.length = undefined;\n      this._unsigned = undefined;\n      this._zerofill = undefined;\n    }\n  }\n\n  inherits(SMALLINT, BaseTypes.SMALLINT); // int2\n\n  BaseTypes.SMALLINT.types.postgres = {\n    oids: [21],\n    array_oids: [1005]\n  };\n\n  function INTEGER(length) {\n    if (!(this instanceof INTEGER)) return new INTEGER(length);\n    BaseTypes.INTEGER.apply(this, arguments); // POSTGRES does not support any parameters for integer\n\n    if (this._length || this.options.length || this._unsigned || this._zerofill) {\n      warn('PostgreSQL does not support INTEGER with options. Plain `INTEGER` will be used instead.');\n      this._length = undefined;\n      this.options.length = undefined;\n      this._unsigned = undefined;\n      this._zerofill = undefined;\n    }\n  }\n\n  inherits(INTEGER, BaseTypes.INTEGER);\n\n  INTEGER.parse = function parse(value) {\n    return parseInt(value, 10);\n  }; // int4\n\n\n  BaseTypes.INTEGER.types.postgres = {\n    oids: [23],\n    array_oids: [1007]\n  };\n\n  function BIGINT(length) {\n    if (!(this instanceof BIGINT)) return new BIGINT(length);\n    BaseTypes.BIGINT.apply(this, arguments); // POSTGRES does not support any parameters for bigint\n\n    if (this._length || this.options.length || this._unsigned || this._zerofill) {\n      warn('PostgreSQL does not support BIGINT with options. Plain `BIGINT` will be used instead.');\n      this._length = undefined;\n      this.options.length = undefined;\n      this._unsigned = undefined;\n      this._zerofill = undefined;\n    }\n  }\n\n  inherits(BIGINT, BaseTypes.BIGINT); // int8\n\n  BaseTypes.BIGINT.types.postgres = {\n    oids: [20],\n    array_oids: [1016]\n  };\n\n  function REAL(length, decimals) {\n    if (!(this instanceof REAL)) return new REAL(length, decimals);\n    BaseTypes.REAL.apply(this, arguments); // POSTGRES does not support any parameters for real\n\n    if (this._length || this.options.length || this._unsigned || this._zerofill) {\n      warn('PostgreSQL does not support REAL with options. Plain `REAL` will be used instead.');\n      this._length = undefined;\n      this.options.length = undefined;\n      this._unsigned = undefined;\n      this._zerofill = undefined;\n    }\n  }\n\n  inherits(REAL, BaseTypes.REAL); // float4\n\n  BaseTypes.REAL.types.postgres = {\n    oids: [700],\n    array_oids: [1021]\n  };\n\n  function DOUBLE(length, decimals) {\n    if (!(this instanceof DOUBLE)) return new DOUBLE(length, decimals);\n    BaseTypes.DOUBLE.apply(this, arguments); // POSTGRES does not support any parameters for double\n\n    if (this._length || this.options.length || this._unsigned || this._zerofill) {\n      warn('PostgreSQL does not support DOUBLE with options. Plain `DOUBLE` will be used instead.');\n      this._length = undefined;\n      this.options.length = undefined;\n      this._unsigned = undefined;\n      this._zerofill = undefined;\n    }\n  }\n\n  inherits(DOUBLE, BaseTypes.DOUBLE); // float8\n\n  BaseTypes.DOUBLE.types.postgres = {\n    oids: [701],\n    array_oids: [1022]\n  };\n\n  function FLOAT(length, decimals) {\n    if (!(this instanceof FLOAT)) return new FLOAT(length, decimals);\n    BaseTypes.FLOAT.apply(this, arguments); // POSTGRES does only support lengths as parameter.\n    // Values between 1-24 result in REAL\n    // Values between 25-53 result in DOUBLE PRECISION\n    // If decimals are provided remove these and print a warning\n\n    if (this._decimals) {\n      warn('PostgreSQL does not support FLOAT with decimals. Plain `FLOAT` will be used instead.');\n      this._length = undefined;\n      this.options.length = undefined;\n      this._decimals = undefined;\n    }\n\n    if (this._unsigned) {\n      warn('PostgreSQL does not support FLOAT unsigned. `UNSIGNED` was removed.');\n      this._unsigned = undefined;\n    }\n\n    if (this._zerofill) {\n      warn('PostgreSQL does not support FLOAT zerofill. `ZEROFILL` was removed.');\n      this._zerofill = undefined;\n    }\n  }\n\n  inherits(FLOAT, BaseTypes.FLOAT);\n  delete FLOAT.parse; // Float has no separate type in PG\n\n  function BLOB(length) {\n    if (!(this instanceof BLOB)) return new BLOB(length);\n    BaseTypes.BLOB.apply(this, arguments);\n  }\n\n  inherits(BLOB, BaseTypes.BLOB);\n\n  BLOB.prototype.toSql = function toSql() {\n    if (this._length) {\n      warn('PostgreSQL does not support BLOB (BYTEA) with options. Plain `BYTEA` will be used instead.');\n      this._length = undefined;\n    }\n\n    return 'BYTEA';\n  };\n\n  BLOB.prototype._hexify = function _hexify(hex) {\n    // bytea hex format http://www.postgresql.org/docs/current/static/datatype-binary.html\n    return \"E'\\\\\\\\x\" + hex + \"'\";\n  };\n\n  BaseTypes.BLOB.types.postgres = {\n    oids: [17],\n    array_oids: [1001]\n  };\n\n  function GEOMETRY(type, srid) {\n    if (!(this instanceof GEOMETRY)) return new GEOMETRY(type, srid);\n    BaseTypes.GEOMETRY.apply(this, arguments);\n  }\n\n  inherits(GEOMETRY, BaseTypes.GEOMETRY);\n\n  GEOMETRY.prototype.toSql = function toSql() {\n    let result = this.key;\n\n    if (this.type) {\n      result += '(' + this.type;\n\n      if (this.srid) {\n        result += ',' + this.srid;\n      }\n\n      result += ')';\n    }\n\n    return result;\n  };\n\n  BaseTypes.GEOMETRY.types.postgres = {\n    oids: [],\n    array_oids: []\n  };\n\n  GEOMETRY.parse = GEOMETRY.prototype.parse = function parse(value) {\n    const b = new Buffer(value, 'hex');\n    return wkx.Geometry.parse(b).toGeoJSON();\n  };\n\n  GEOMETRY.prototype._stringify = function _stringify(value, options) {\n    return 'ST_GeomFromGeoJSON(' + options.escape(JSON.stringify(value)) + ')';\n  };\n\n  function GEOGRAPHY(type, srid) {\n    if (!(this instanceof GEOGRAPHY)) return new GEOGRAPHY(type, srid);\n    BaseTypes.GEOGRAPHY.apply(this, arguments);\n  }\n\n  inherits(GEOGRAPHY, BaseTypes.GEOGRAPHY);\n\n  GEOGRAPHY.prototype.toSql = function toSql() {\n    let result = 'GEOGRAPHY';\n\n    if (this.type) {\n      result += '(' + this.type;\n\n      if (this.srid) {\n        result += ',' + this.srid;\n      }\n\n      result += ')';\n    }\n\n    return result;\n  };\n\n  BaseTypes.GEOGRAPHY.types.postgres = {\n    oids: [],\n    array_oids: []\n  };\n\n  GEOGRAPHY.parse = GEOGRAPHY.prototype.parse = function parse(value) {\n    const b = new Buffer(value, 'hex');\n    return wkx.Geometry.parse(b).toGeoJSON();\n  };\n\n  GEOGRAPHY.prototype._stringify = function _stringify(value, options) {\n    return 'ST_GeomFromGeoJSON(' + options.escape(JSON.stringify(value)) + ')';\n  };\n\n  let hstore;\n\n  function HSTORE() {\n    if (!(this instanceof HSTORE)) return new HSTORE();\n    BaseTypes.HSTORE.apply(this, arguments);\n\n    if (!hstore) {\n      // All datatype files are loaded at import - make sure we don't load the hstore parser before a hstore is instantiated\n      hstore = require('./hstore');\n    }\n  }\n\n  inherits(HSTORE, BaseTypes.HSTORE);\n\n  HSTORE.parse = function parse(value) {\n    if (!hstore) {\n      // All datatype files are loaded at import - make sure we don't load the hstore parser before a hstore is instantiated\n      hstore = require('./hstore');\n    }\n\n    return hstore.parse(value);\n  };\n\n  HSTORE.prototype.escape = false;\n\n  HSTORE.prototype._stringify = function _stringify(value) {\n    if (!hstore) {\n      // All datatype files are loaded at import - make sure we don't load the hstore parser before a hstore is instantiated\n      hstore = require('./hstore');\n    }\n\n    return \"'\" + hstore.stringify(value) + \"'\";\n  };\n\n  BaseTypes.HSTORE.types.postgres = {\n    oids: [],\n    array_oids: []\n  };\n\n  function RANGE(subtype) {\n    if (!(this instanceof RANGE)) return new RANGE(subtype);\n    BaseTypes.RANGE.apply(this, arguments);\n  }\n\n  inherits(RANGE, BaseTypes.RANGE);\n  RANGE.oid_map = {\n    3904: 23,\n    // int4\n    3905: 23,\n    3906: 1700,\n    // Numeric\n    3907: 1700,\n    3908: 1114,\n    // timestamp\n    3909: 1114,\n    3910: 1184,\n    // timestamptz\n    3911: 1184,\n    3912: 1082,\n    // date\n    3913: 1082,\n    3926: 20,\n    // int8\n    3927: 20\n  };\n\n  const range = require('./range');\n\n  RANGE.parse = function parse(value, oid, getTypeParser) {\n    const parser = getTypeParser(RANGE.oid_map[oid]);\n    return range.parse(value, parser);\n  };\n\n  RANGE.prototype.escape = false;\n\n  RANGE.prototype._stringify = function _stringify(values, options) {\n    if (!Array.isArray(values)) {\n      return \"'\" + this.options.subtype.stringify(values, options) + \"'::\" + this.toCastType();\n    }\n\n    const valuesStringified = values.map(value => {\n      if (_.includes([null, -Infinity, Infinity], value)) {\n        // Pass through \"unbounded\" bounds unchanged\n        return value;\n      } else if (this.options.subtype.stringify) {\n        return this.options.subtype.stringify(value, options);\n      } else {\n        return options.escape(value);\n      }\n    }); // Array.map does not preserve extra array properties\n\n    valuesStringified.inclusive = values.inclusive;\n    return '\\'' + range.stringify(valuesStringified) + '\\'';\n  };\n\n  BaseTypes.RANGE.types.postgres = {\n    oids: [3904, 3906, 3908, 3910, 3912, 3926],\n    array_oids: [3905, 3907, 3909, 3911, 3913, 3927]\n  };\n  BaseTypes.ARRAY.prototype.escape = false;\n\n  BaseTypes.ARRAY.prototype._stringify = function _stringify(values, options) {\n    let str = 'ARRAY[' + values.map(value => {\n      if (this.type && this.type.stringify) {\n        value = this.type.stringify(value, options);\n\n        if (this.type.escape === false) {\n          return value;\n        }\n      }\n\n      return options.escape(value);\n    }, this).join(',') + ']';\n\n    if (this.type) {\n      const Utils = require('../../utils');\n\n      let castKey = this.toSql();\n\n      if (this.type instanceof BaseTypes.ENUM) {\n        castKey = Utils.addTicks(Utils.generateEnumName(options.field.Model.getTableName(), options.field.fieldName), '\"') + '[]';\n      }\n\n      str += '::' + castKey;\n    }\n\n    return str;\n  };\n\n  function ENUM(options) {\n    if (!(this instanceof ENUM)) return new ENUM(options);\n    BaseTypes.ENUM.apply(this, arguments);\n  }\n\n  inherits(ENUM, BaseTypes.ENUM);\n\n  ENUM.parse = function (value) {\n    return value;\n  };\n\n  BaseTypes.ENUM.types.postgres = {\n    oids: [],\n    array_oids: []\n  };\n  const exports = {\n    DECIMAL,\n    BLOB,\n    STRING,\n    CHAR,\n    TEXT,\n    SMALLINT,\n    INTEGER,\n    BIGINT,\n    BOOLEAN,\n    DATE,\n    DATEONLY,\n    REAL,\n    'DOUBLE PRECISION': DOUBLE,\n    FLOAT,\n    GEOMETRY,\n    GEOGRAPHY,\n    HSTORE,\n    RANGE,\n    ENUM\n  };\n\n  _.forIn(exports, (DataType, key) => {\n    if (!DataType.key) DataType.key = key;\n\n    if (!DataType.extend) {\n      DataType.extend = oldType => new DataType(oldType.options);\n    }\n  });\n\n  return exports;\n};","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/sequelize/lib/dialects/postgres/data-types.js"],"names":["_","require","wkx","inherits","module","exports","BaseTypes","warn","ABSTRACT","bind","undefined","UUID","types","postgres","oids","array_oids","CIDR","INET","MACADDR","JSON","JSONB","TIME","DATEONLY","apply","arguments","parse","value","Infinity","prototype","_stringify","options","call","_sanitize","raw","isString","toLower","DECIMAL","precision","scale","STRING","length","binary","toSql","_binary","TEXT","_length","CHAR","BOOLEAN","Buffer","isBuffer","isNumber","DATE","validate","Date","SMALLINT","_unsigned","_zerofill","INTEGER","parseInt","BIGINT","REAL","decimals","DOUBLE","FLOAT","_decimals","BLOB","_hexify","hex","GEOMETRY","type","srid","result","key","b","Geometry","toGeoJSON","escape","stringify","GEOGRAPHY","hstore","HSTORE","RANGE","subtype","oid_map","range","oid","getTypeParser","parser","values","Array","isArray","toCastType","valuesStringified","map","includes","inclusive","ARRAY","str","join","Utils","castKey","ENUM","addTicks","generateEnumName","field","Model","getTableName","fieldName","forIn","DataType","extend","oldType"],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst wkx = require('wkx');\nconst inherits = require('../../utils/inherits');\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'http://www.postgresql.org/docs/9.4/static/datatype.html');\n\n  /**\n   * types:\n   * {\n   *   oids: [oid],\n   *   array_oids: [oid]\n   * }\n   * @see oid here https://github.com/lib/pq/blob/master/oid/types.go\n   */\n\n  BaseTypes.UUID.types.postgres = {\n    oids: [2950],\n    array_oids: [2951]\n  };\n\n  BaseTypes.CIDR.types.postgres = {\n    oids: [650],\n    array_oids: [651]\n  };\n\n  BaseTypes.INET.types.postgres = {\n    oids: [869],\n    array_oids: [1041]\n  };\n\n  BaseTypes.MACADDR.types.postgres = {\n    oids: [829],\n    array_oids: [1040]\n  };\n\n  BaseTypes.JSON.types.postgres = {\n    oids: [114],\n    array_oids: [199]\n  };\n\n  BaseTypes.JSONB.types.postgres = {\n    oids: [3802],\n    array_oids: [3807]\n  };\n\n  BaseTypes.TIME.types.postgres = {\n    oids: [1083],\n    array_oids: [1183]\n  };\n\n  function DATEONLY() {\n    if (!(this instanceof DATEONLY)) return new DATEONLY();\n    BaseTypes.DATEONLY.apply(this, arguments);\n  }\n  inherits(DATEONLY, BaseTypes.DATEONLY);\n\n  DATEONLY.parse = function parse(value) {\n    if (value === 'infinity') {\n      value = Infinity;\n    } else if (value === '-infinity') {\n      value = -Infinity;\n    }\n\n    return value;\n  };\n\n  DATEONLY.prototype._stringify = function _stringify(value, options) {\n    if (value === Infinity) {\n      return 'Infinity';\n    } else if (value === -Infinity) {\n      return '-Infinity';\n    }\n\n    return BaseTypes.DATEONLY.prototype._stringify.call(this, value, options);\n  };\n\n  DATEONLY.prototype._sanitize = function _sanitize(value, options) {\n    if ((!options || options && !options.raw) && value !== Infinity && value !== -Infinity) {\n      if (_.isString(value)) {\n        if (_.toLower(value) === 'infinity') {\n          return Infinity;\n        } else if (_.toLower(value) === '-infinity') {\n          return -Infinity;\n        }\n      }\n\n      return BaseTypes.DATEONLY.prototype._sanitize.call(this, value);\n    }\n\n    return value;\n  };\n\n  BaseTypes.DATEONLY.types.postgres = {\n    oids: [1082],\n    array_oids: [1182]\n  };\n\n  function DECIMAL(precision, scale) {\n    if (!(this instanceof DECIMAL)) return new DECIMAL(precision, scale);\n    BaseTypes.DECIMAL.apply(this, arguments);\n  }\n  inherits(DECIMAL, BaseTypes.DECIMAL);\n\n  DECIMAL.parse = function parse(value) {\n    return value;\n  };\n\n  // numeric\n  BaseTypes.DECIMAL.types.postgres = {\n    oids: [1700],\n    array_oids: [1231]\n  };\n\n  function STRING(length, binary) {\n    if (!(this instanceof STRING)) return new STRING(length, binary);\n    BaseTypes.STRING.apply(this, arguments);\n  }\n  inherits(STRING, BaseTypes.STRING);\n\n  STRING.prototype.toSql = function toSql() {\n    if (this._binary) {\n      return 'BYTEA';\n    }\n    return BaseTypes.STRING.prototype.toSql.call(this);\n  };\n\n  BaseTypes.STRING.types.postgres = {\n    oids: [1043],\n    array_oids: [1015]\n  };\n\n  function TEXT(length) {\n    if (!(this instanceof TEXT)) return new TEXT(length);\n    BaseTypes.TEXT.apply(this, arguments);\n  }\n  inherits(TEXT, BaseTypes.TEXT);\n\n  TEXT.prototype.toSql = function toSql() {\n    if (this._length) {\n      warn('PostgreSQL does not support TEXT with options. Plain `TEXT` will be used instead.');\n      this._length = undefined;\n    }\n    return 'TEXT';\n  };\n\n  BaseTypes.TEXT.types.postgres = {\n    oids: [25],\n    array_oids: [1009]\n  };\n\n  function CHAR(length, binary) {\n    if (!(this instanceof CHAR)) return new CHAR(length, binary);\n    BaseTypes.CHAR.apply(this, arguments);\n  }\n  inherits(CHAR, BaseTypes.CHAR);\n\n  CHAR.prototype.toSql = function toSql() {\n    if (this._binary) {\n      return 'BYTEA';\n    }\n    return BaseTypes.CHAR.prototype.toSql.call(this);\n  };\n\n  BaseTypes.CHAR.types.postgres = {\n    oids: [18, 1042],\n    array_oids: [1002, 1014]\n  };\n\n  function BOOLEAN() {\n    if (!(this instanceof BOOLEAN)) return new BOOLEAN();\n    BaseTypes.BOOLEAN.apply(this, arguments);\n  }\n  inherits(BOOLEAN, BaseTypes.BOOLEAN);\n\n  BOOLEAN.prototype.toSql = function toSql() {\n    return 'BOOLEAN';\n  };\n\n  BOOLEAN.prototype._sanitize = function _sanitize(value) {\n    if (value !== null && value !== undefined) {\n      if (Buffer.isBuffer(value) && value.length === 1) {\n        // Bit fields are returned as buffers\n        value = value[0];\n      }\n\n      if (_.isString(value)) {\n        // Only take action on valid boolean strings.\n        value = value === 'true' || value === 't' ? true : value === 'false' || value === 'f' ? false : value;\n\n      } else if (_.isNumber(value)) {\n        // Only take action on valid boolean integers.\n        value = value === 1 ? true : value === 0 ? false : value;\n      }\n    }\n\n    return value;\n  };\n  BOOLEAN.parse = BOOLEAN.prototype._sanitize;\n\n  BaseTypes.BOOLEAN.types.postgres = {\n    oids: [16],\n    array_oids: [1000]\n  };\n\n  function DATE(length) {\n    if (!(this instanceof DATE)) return new DATE(length);\n    BaseTypes.DATE.apply(this, arguments);\n  }\n  inherits(DATE, BaseTypes.DATE);\n\n  DATE.prototype.toSql = function toSql() {\n    return 'TIMESTAMP WITH TIME ZONE';\n  };\n\n  DATE.prototype.validate = function validate(value) {\n    if (value !== Infinity && value !== -Infinity) {\n      return BaseTypes.DATE.prototype.validate.call(this, value);\n    }\n\n    return true;\n  };\n\n  DATE.prototype._stringify = function _stringify(value, options) {\n    if (value === Infinity) {\n      return 'Infinity';\n    } else if (value === -Infinity) {\n      return '-Infinity';\n    }\n\n    return BaseTypes.DATE.prototype._stringify.call(this, value, options);\n  };\n\n  DATE.prototype._sanitize = function _sanitize(value, options) {\n    if ((!options || options && !options.raw) && !(value instanceof Date) && !!value && value !== Infinity && value !== -Infinity) {\n      if (_.isString(value)) {\n        if (_.toLower(value) === 'infinity') {\n          return Infinity;\n        } else if (_.toLower(value) === '-infinity') {\n          return -Infinity;\n        }\n      }\n\n      return new Date(value);\n    }\n\n    return value;\n  };\n\n  BaseTypes.DATE.types.postgres = {\n    oids: [1184],\n    array_oids: [1185]\n  };\n\n  function SMALLINT(length) {\n    if (!(this instanceof SMALLINT)) return new SMALLINT(length);\n    BaseTypes.SMALLINT.apply(this, arguments);\n\n    // POSTGRES does not support any parameters for bigint\n    if (this._length || this.options.length || this._unsigned || this._zerofill) {\n      warn('PostgreSQL does not support SMALLINT with options. Plain `SMALLINT` will be used instead.');\n      this._length = undefined;\n      this.options.length = undefined;\n      this._unsigned = undefined;\n      this._zerofill = undefined;\n    }\n  }\n  inherits(SMALLINT, BaseTypes.SMALLINT);\n\n  // int2\n  BaseTypes.SMALLINT.types.postgres = {\n    oids: [21],\n    array_oids: [1005]\n  };\n\n  function INTEGER(length) {\n    if (!(this instanceof INTEGER)) return new INTEGER(length);\n    BaseTypes.INTEGER.apply(this, arguments);\n\n    // POSTGRES does not support any parameters for integer\n    if (this._length || this.options.length || this._unsigned || this._zerofill) {\n      warn('PostgreSQL does not support INTEGER with options. Plain `INTEGER` will be used instead.');\n      this._length = undefined;\n      this.options.length = undefined;\n      this._unsigned = undefined;\n      this._zerofill = undefined;\n    }\n  }\n  inherits(INTEGER, BaseTypes.INTEGER);\n\n  INTEGER.parse = function parse(value) {\n    return parseInt(value, 10);\n  };\n\n  // int4\n  BaseTypes.INTEGER.types.postgres = {\n    oids: [23],\n    array_oids: [1007]\n  };\n\n  function BIGINT(length) {\n    if (!(this instanceof BIGINT)) return new BIGINT(length);\n    BaseTypes.BIGINT.apply(this, arguments);\n\n    // POSTGRES does not support any parameters for bigint\n    if (this._length || this.options.length || this._unsigned || this._zerofill) {\n      warn('PostgreSQL does not support BIGINT with options. Plain `BIGINT` will be used instead.');\n      this._length = undefined;\n      this.options.length = undefined;\n      this._unsigned = undefined;\n      this._zerofill = undefined;\n    }\n  }\n  inherits(BIGINT, BaseTypes.BIGINT);\n\n  // int8\n  BaseTypes.BIGINT.types.postgres = {\n    oids: [20],\n    array_oids: [1016]\n  };\n\n  function REAL(length, decimals) {\n    if (!(this instanceof REAL)) return new REAL(length, decimals);\n    BaseTypes.REAL.apply(this, arguments);\n\n    // POSTGRES does not support any parameters for real\n    if (this._length || this.options.length || this._unsigned || this._zerofill) {\n      warn('PostgreSQL does not support REAL with options. Plain `REAL` will be used instead.');\n      this._length = undefined;\n      this.options.length = undefined;\n      this._unsigned = undefined;\n      this._zerofill = undefined;\n    }\n  }\n  inherits(REAL, BaseTypes.REAL);\n\n  // float4\n  BaseTypes.REAL.types.postgres = {\n    oids: [700],\n    array_oids: [1021]\n  };\n\n  function DOUBLE(length, decimals) {\n    if (!(this instanceof DOUBLE)) return new DOUBLE(length, decimals);\n    BaseTypes.DOUBLE.apply(this, arguments);\n\n    // POSTGRES does not support any parameters for double\n    if (this._length || this.options.length || this._unsigned || this._zerofill) {\n      warn('PostgreSQL does not support DOUBLE with options. Plain `DOUBLE` will be used instead.');\n      this._length = undefined;\n      this.options.length = undefined;\n      this._unsigned = undefined;\n      this._zerofill = undefined;\n    }\n  }\n  inherits(DOUBLE, BaseTypes.DOUBLE);\n\n  // float8\n  BaseTypes.DOUBLE.types.postgres = {\n    oids: [701],\n    array_oids: [1022]\n  };\n\n  function FLOAT(length, decimals) {\n    if (!(this instanceof FLOAT)) return new FLOAT(length, decimals);\n    BaseTypes.FLOAT.apply(this, arguments);\n\n    // POSTGRES does only support lengths as parameter.\n    // Values between 1-24 result in REAL\n    // Values between 25-53 result in DOUBLE PRECISION\n    // If decimals are provided remove these and print a warning\n    if (this._decimals) {\n      warn('PostgreSQL does not support FLOAT with decimals. Plain `FLOAT` will be used instead.');\n      this._length = undefined;\n      this.options.length = undefined;\n      this._decimals = undefined;\n    }\n    if (this._unsigned) {\n      warn('PostgreSQL does not support FLOAT unsigned. `UNSIGNED` was removed.');\n      this._unsigned = undefined;\n    }\n    if (this._zerofill) {\n      warn('PostgreSQL does not support FLOAT zerofill. `ZEROFILL` was removed.');\n      this._zerofill = undefined;\n    }\n  }\n  inherits(FLOAT, BaseTypes.FLOAT);\n  delete FLOAT.parse; // Float has no separate type in PG\n\n  function BLOB(length) {\n    if (!(this instanceof BLOB)) return new BLOB(length);\n    BaseTypes.BLOB.apply(this, arguments);\n  }\n  inherits(BLOB, BaseTypes.BLOB);\n\n  BLOB.prototype.toSql = function toSql() {\n    if (this._length) {\n      warn('PostgreSQL does not support BLOB (BYTEA) with options. Plain `BYTEA` will be used instead.');\n      this._length = undefined;\n    }\n    return 'BYTEA';\n  };\n\n  BLOB.prototype._hexify = function _hexify(hex) {\n    // bytea hex format http://www.postgresql.org/docs/current/static/datatype-binary.html\n    return \"E'\\\\\\\\x\" + hex + \"'\";\n  };\n\n  BaseTypes.BLOB.types.postgres = {\n    oids: [17],\n    array_oids: [1001]\n  };\n\n  function GEOMETRY(type, srid) {\n    if (!(this instanceof GEOMETRY)) return new GEOMETRY(type, srid);\n    BaseTypes.GEOMETRY.apply(this, arguments);\n  }\n  inherits(GEOMETRY, BaseTypes.GEOMETRY);\n\n  GEOMETRY.prototype.toSql = function toSql() {\n    let result = this.key;\n\n    if (this.type) {\n      result += '(' + this.type;\n\n      if (this.srid) {\n        result += ',' + this.srid;\n      }\n\n      result += ')';\n    }\n\n    return result;\n  };\n\n  BaseTypes.GEOMETRY.types.postgres = {\n    oids: [],\n    array_oids: []\n  };\n\n  GEOMETRY.parse = GEOMETRY.prototype.parse = function parse(value) {\n    const b = new Buffer(value, 'hex');\n    return wkx.Geometry.parse(b).toGeoJSON();\n  };\n\n  GEOMETRY.prototype._stringify = function _stringify(value, options) {\n    return 'ST_GeomFromGeoJSON(' + options.escape(JSON.stringify(value)) + ')';\n  };\n\n  function GEOGRAPHY(type, srid) {\n    if (!(this instanceof GEOGRAPHY)) return new GEOGRAPHY(type, srid);\n    BaseTypes.GEOGRAPHY.apply(this, arguments);\n  }\n  inherits(GEOGRAPHY, BaseTypes.GEOGRAPHY);\n\n  GEOGRAPHY.prototype.toSql = function toSql() {\n    let result = 'GEOGRAPHY';\n\n    if (this.type) {\n      result += '(' + this.type;\n\n      if (this.srid) {\n        result += ',' + this.srid;\n      }\n\n      result += ')';\n    }\n\n    return result;\n  };\n\n  BaseTypes.GEOGRAPHY.types.postgres = {\n    oids: [],\n    array_oids: []\n  };\n\n  GEOGRAPHY.parse = GEOGRAPHY.prototype.parse = function parse(value) {\n    const b = new Buffer(value, 'hex');\n    return wkx.Geometry.parse(b).toGeoJSON();\n  };\n\n  GEOGRAPHY.prototype._stringify = function _stringify(value, options) {\n    return 'ST_GeomFromGeoJSON(' + options.escape(JSON.stringify(value)) + ')';\n  };\n\n  let hstore;\n  function HSTORE() {\n    if (!(this instanceof HSTORE)) return new HSTORE();\n    BaseTypes.HSTORE.apply(this, arguments);\n\n    if (!hstore) {\n      // All datatype files are loaded at import - make sure we don't load the hstore parser before a hstore is instantiated\n      hstore = require('./hstore');\n    }\n  }\n  inherits(HSTORE, BaseTypes.HSTORE);\n\n  HSTORE.parse = function parse(value) {\n    if (!hstore) {\n      // All datatype files are loaded at import - make sure we don't load the hstore parser before a hstore is instantiated\n      hstore = require('./hstore');\n    }\n    return hstore.parse(value);\n  };\n\n  HSTORE.prototype.escape = false;\n  HSTORE.prototype._stringify = function _stringify(value) {\n    if (!hstore) {\n      // All datatype files are loaded at import - make sure we don't load the hstore parser before a hstore is instantiated\n      hstore = require('./hstore');\n    }\n    return \"'\" + hstore.stringify(value) + \"'\";\n  };\n\n  BaseTypes.HSTORE.types.postgres = {\n    oids: [],\n    array_oids: []\n  };\n\n  function RANGE(subtype) {\n    if (!(this instanceof RANGE)) return new RANGE(subtype);\n    BaseTypes.RANGE.apply(this, arguments);\n  }\n  inherits(RANGE, BaseTypes.RANGE);\n\n  RANGE.oid_map = {\n    3904: 23, // int4\n    3905: 23,\n    3906: 1700, // Numeric\n    3907: 1700,\n    3908: 1114, // timestamp\n    3909: 1114,\n    3910: 1184, // timestamptz\n    3911: 1184,\n    3912: 1082, // date\n    3913: 1082,\n    3926: 20,    // int8\n    3927: 20\n  };\n\n  const range = require('./range');\n  RANGE.parse = function parse(value, oid, getTypeParser) {\n    const parser = getTypeParser(RANGE.oid_map[oid]);\n\n    return range.parse(value, parser);\n  };\n\n  RANGE.prototype.escape = false;\n  RANGE.prototype._stringify = function _stringify(values, options) {\n    if (!Array.isArray(values)) {\n      return \"'\" + this.options.subtype.stringify(values, options) + \"'::\" +\n        this.toCastType();\n    }\n    const valuesStringified = values.map(value => {\n      if (_.includes([null, -Infinity, Infinity], value)) {\n        // Pass through \"unbounded\" bounds unchanged\n        return value;\n      } else if (this.options.subtype.stringify) {\n        return this.options.subtype.stringify(value, options);\n      } else {\n        return options.escape(value);\n      }\n    });\n\n    // Array.map does not preserve extra array properties\n    valuesStringified.inclusive = values.inclusive;\n\n    return  '\\'' + range.stringify(valuesStringified) + '\\'';\n  };\n\n  BaseTypes.RANGE.types.postgres = {\n    oids: [3904, 3906, 3908, 3910, 3912, 3926],\n    array_oids: [3905, 3907, 3909, 3911, 3913, 3927]\n  };\n\n  BaseTypes.ARRAY.prototype.escape = false;\n  BaseTypes.ARRAY.prototype._stringify = function _stringify(values, options) {\n    let str = 'ARRAY[' + values.map(value => {\n      if (this.type && this.type.stringify) {\n        value = this.type.stringify(value, options);\n\n        if (this.type.escape === false) {\n          return value;\n        }\n      }\n      return options.escape(value);\n    }, this).join(',') + ']';\n\n    if (this.type) {\n      const Utils = require('../../utils');\n      let castKey = this.toSql();\n\n      if (this.type instanceof BaseTypes.ENUM) {\n        castKey = Utils.addTicks(\n          Utils.generateEnumName(options.field.Model.getTableName(), options.field.fieldName),\n          '\"'\n        ) + '[]';\n      }\n\n      str += '::' + castKey;\n    }\n\n    return str;\n  };\n\n  function ENUM(options) {\n    if (!(this instanceof ENUM)) return new ENUM(options);\n    BaseTypes.ENUM.apply(this, arguments);\n  }\n  inherits(ENUM, BaseTypes.ENUM);\n\n  ENUM.parse = function(value) {\n    return value;\n  };\n\n  BaseTypes.ENUM.types.postgres = {\n    oids: [],\n    array_oids: []\n  };\n\n  const exports = {\n    DECIMAL,\n    BLOB,\n    STRING,\n    CHAR,\n    TEXT,\n    SMALLINT,\n    INTEGER,\n    BIGINT,\n    BOOLEAN,\n    DATE,\n    DATEONLY,\n    REAL,\n    'DOUBLE PRECISION': DOUBLE,\n    FLOAT,\n    GEOMETRY,\n    GEOGRAPHY,\n    HSTORE,\n    RANGE,\n    ENUM\n  };\n\n  _.forIn(exports, (DataType, key) => {\n    if (!DataType.key) DataType.key = key;\n    if (!DataType.extend) {\n      DataType.extend = oldType => new DataType(oldType.options);\n    }\n  });\n\n  return exports;\n};\n"]},"metadata":{},"sourceType":"script"}
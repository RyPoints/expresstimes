{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n/**\n * Sequelize provides a host of custom error classes, to allow you to do easier debugging. All of these errors are exposed on the sequelize object and the sequelize constructor.\n * All sequelize errors inherit from the base JS error object.\n *\n * This means that errors can be accessed using `Sequelize.ValidationError` or `sequelize.ValidationError`\n * The Base Error all Sequelize Errors inherit from.\n */\n\n\nclass BaseError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'SequelizeBaseError';\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n}\n\nexports.BaseError = BaseError;\n/**\n * Scope Error. Thrown when the sequelize cannot query the specified scope.\n */\n\nclass SequelizeScopeError extends BaseError {\n  constructor(parent) {\n    super(parent);\n    this.name = 'SequelizeScopeError';\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n}\n\nexports.SequelizeScopeError = SequelizeScopeError;\n/**\n * Validation Error. Thrown when the sequelize validation has failed. The error contains an `errors` property,\n * which is an array with 1 or more ValidationErrorItems, one for each validation that failed.\n *\n * @param {string} message Error message\n * @param {Array} [errors] Array of ValidationErrorItem objects describing the validation errors\n *\n * @property errors {ValidationErrorItems[]}\n */\n\nclass ValidationError extends BaseError {\n  constructor(message, errors) {\n    super(message);\n    this.name = 'SequelizeValidationError';\n    this.message = 'Validation Error';\n    /**\n     *\n     * @type {ValidationErrorItem[]}\n     */\n\n    this.errors = errors || []; // Use provided error message if available...\n\n    if (message) {\n      this.message = message; // ... otherwise create a concatenated message out of existing errors.\n    } else if (this.errors.length > 0 && this.errors[0].message) {\n      this.message = this.errors.map(err => (err.type || err.origin) + ': ' + err.message).join(',\\n');\n    }\n\n    Error.captureStackTrace(this, this.constructor);\n  }\n  /**\n   * Gets all validation error items for the path / field specified.\n   *\n   * @param {string} path The path to be checked for error items\n   * @returns {ValidationErrorItem[]} Validation error items for the specified path\n   */\n\n\n  get(path) {\n    return this.errors.reduce((reduced, error) => {\n      if (error.path === path) {\n        reduced.push(error);\n      }\n\n      return reduced;\n    }, []);\n  }\n\n}\n\nexports.ValidationError = ValidationError;\n/**\n * Thrown when attempting to update a stale model instance\n */\n\nclass OptimisticLockError extends BaseError {\n  constructor(options) {\n    options = options || {};\n    options.message = options.message || 'Attempting to update a stale model instance: ' + options.modelName;\n    super(options);\n    this.name = 'SequelizeOptimisticLockError';\n    /**\n     * The name of the model on which the update was attempted\n     * @type {string}\n     */\n\n    this.modelName = options.modelName;\n    /**\n     * The values of the attempted update\n     * @type {object}\n     */\n\n    this.values = options.values;\n    /**\n     *\n     * @type {object}\n     */\n\n    this.where = options.where;\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n}\n\nexports.OptimisticLockError = OptimisticLockError;\n/**\n * A base class for all database related errors.\n */\n\nclass DatabaseError extends BaseError {\n  constructor(parent) {\n    super(parent.message);\n    this.name = 'SequelizeDatabaseError';\n    /**\n     * @type {Error}\n     */\n\n    this.parent = parent;\n    /**\n     * @type {Error}\n     */\n\n    this.original = parent;\n    /**\n     * The SQL that triggered the error\n     * @type {string}\n     */\n\n    this.sql = parent.sql;\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n}\n\nexports.DatabaseError = DatabaseError;\n/**\n * Thrown when a database query times out because of a deadlock\n */\n\nclass TimeoutError extends DatabaseError {\n  constructor(parent) {\n    super(parent);\n    this.name = 'SequelizeTimeoutError';\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n}\n\nexports.TimeoutError = TimeoutError;\n/**\n * Thrown when a unique constraint is violated in the database\n */\n\nclass UniqueConstraintError extends ValidationError {\n  constructor(options) {\n    options = options || {};\n    options.parent = options.parent || {\n      sql: ''\n    };\n    options.message = options.message || options.parent.message || 'Validation Error';\n    options.errors = options.errors || {};\n    super(options.message, options.errors);\n    this.name = 'SequelizeUniqueConstraintError';\n    this.errors = options.errors;\n    this.fields = options.fields;\n    this.parent = options.parent;\n    this.original = options.parent;\n    this.sql = options.parent.sql;\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n}\n\nexports.UniqueConstraintError = UniqueConstraintError;\n/**\n * Thrown when a foreign key constraint is violated in the database\n */\n\nclass ForeignKeyConstraintError extends DatabaseError {\n  constructor(options) {\n    options = options || {};\n    options.parent = options.parent || {\n      sql: ''\n    };\n    super(options.parent);\n    this.name = 'SequelizeForeignKeyConstraintError';\n    this.message = options.message || options.parent.message || 'Database Error';\n    this.fields = options.fields;\n    this.table = options.table;\n    this.value = options.value;\n    this.index = options.index;\n    this.reltype = options.reltype;\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n}\n\nexports.ForeignKeyConstraintError = ForeignKeyConstraintError;\n/**\n * Thrown when an exclusion constraint is violated in the database\n */\n\nclass ExclusionConstraintError extends DatabaseError {\n  constructor(options) {\n    options = options || {};\n    options.parent = options.parent || {\n      sql: ''\n    };\n    super(options.parent);\n    this.name = 'SequelizeExclusionConstraintError';\n    this.message = options.message || options.parent.message || '';\n    this.constraint = options.constraint;\n    this.fields = options.fields;\n    this.table = options.table;\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n}\n\nexports.ExclusionConstraintError = ExclusionConstraintError;\n/**\n * Thrown when constraint name is not found in the database\n */\n\nclass UnknownConstraintError extends DatabaseError {\n  constructor(message) {\n    const parent = {\n      message\n    };\n    super(parent);\n    this.name = 'SequelizeUnknownConstraintError';\n    this.message = message || 'The specified constraint does not exist';\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n}\n\nexports.UnknownConstraintError = UnknownConstraintError;\n/**\n * Validation Error Item\n * Instances of this class are included in the `ValidationError.errors` property.\n *\n * @param {String} message An error message\n * @param {String} type The type/origin of the validation error\n * @param {String} path The field that triggered the validation error\n * @param {String} value The value that generated the error\n * @param {Object} [inst] the DAO instance that caused the validation error\n * @param {Object} [validatorKey] a validation \"key\", used for identification\n * @param {String} [fnName] property name of the BUILT-IN validator function that caused the validation error (e.g. \"in\" or \"len\"), if applicable\n * @param {String} [fnArgs] parameters used with the BUILT-IN validator function, if applicable\n */\n\nclass ValidationErrorItem {\n  constructor(message, type, path, value, inst, validatorKey, fnName, fnArgs) {\n    /**\n     * An error message\n     *\n     * @type {String} message\n     */\n    this.message = message || '';\n    /**\n     * The type/origin of the validation error\n     *\n     * @type {String}\n     */\n\n    this.type = null;\n    /**\n     * The field that triggered the validation error\n     *\n     * @type {String}\n     */\n\n    this.path = path || null;\n    /**\n     * The value that generated the error\n     *\n     * @type {String}\n     */\n\n    this.value = value !== undefined ? value : null;\n    this.origin = null;\n    /**\n     * The DAO instance that caused the validation error\n     *\n     * @type {Model}\n     */\n\n    this.instance = inst || null;\n    /**\n     * A validation \"key\", used for identification\n     *\n     * @type {String}\n     */\n\n    this.validatorKey = validatorKey || null;\n    /**\n     * Property name of the BUILT-IN validator function that caused the validation error (e.g. \"in\" or \"len\"), if applicable\n     *\n     * @type {String}\n     */\n\n    this.validatorName = fnName || null;\n    /**\n     * Parameters used with the BUILT-IN validator function, if applicable\n     *\n     * @type {String}\n     */\n\n    this.validatorArgs = fnArgs || [];\n\n    if (type) {\n      if (ValidationErrorItem.Origins[type]) {\n        this.origin = type;\n      } else {\n        const lowercaseType = _.toLower(type + '').trim();\n\n        const realType = ValidationErrorItem.TypeStringMap[lowercaseType];\n\n        if (realType && ValidationErrorItem.Origins[realType]) {\n          this.origin = realType;\n          this.type = type;\n        }\n      }\n    } // This doesn't need captureStackTrace because it's not a subclass of Error\n\n  }\n  /**\n   * return a lowercase, trimmed string \"key\" that identifies the validator.\n   *\n   * Note: the string will be empty if the instance has neither a valid `validatorKey` property nor a valid `validatorName` property\n   *\n   * @param   {Boolean} [useTypeAsNS=true]      controls whether the returned value is \"namespace\",\n   *                                            this parameter is ignored if the validator's `type` is not one of ValidationErrorItem.Origins\n   * @param   {String}  [NSSeparator='.']       a separator string for concatenating the namespace, must be not be empty,\n   *                                            defaults to \".\" (fullstop). only used and validated if useTypeAsNS is TRUE.\n   * @throws  {Error}                           thrown if NSSeparator is found to be invalid.\n   * @return  {String}\n   *\n   * @private\n   */\n\n\n  getValidatorKey(useTypeAsNS, NSSeparator) {\n    const useTANS = typeof useTypeAsNS === 'undefined' ? true : !!useTypeAsNS;\n    const NSSep = typeof NSSeparator === 'undefined' ? '.' : NSSeparator;\n    const type = this.origin;\n    const key = this.validatorKey || this.validatorName;\n    const useNS = useTANS && type && ValidationErrorItem.Origins[type];\n\n    if (useNS && (typeof NSSep !== 'string' || !NSSep.length)) {\n      throw new Error('Invalid namespace separator given, must be a non-empty string');\n    }\n\n    if (!(typeof key === 'string' && key.length)) {\n      return '';\n    }\n\n    return _.toLower(useNS ? [type, key].join(NSSep) : key).trim();\n  }\n\n}\n\nexports.ValidationErrorItem = ValidationErrorItem;\n/**\n * An enum that defines valid ValidationErrorItem `origin` values\n *\n * @type {Object}\n * @property CORE       {String}  specifies errors that originate from the sequelize \"core\"\n * @property DB         {String}  specifies validation errors that originate from the storage engine\n * @property FUNCTION   {String}  specifies validation errors that originate from validator functions (both built-in and custom) defined for a given attribute\n */\n\nValidationErrorItem.Origins = {\n  CORE: 'CORE',\n  DB: 'DB',\n  FUNCTION: 'FUNCTION'\n};\n/**\n * An object that is used internally by the `ValidationErrorItem` class\n * that maps current `type` strings (as given to ValidationErrorItem.constructor()) to\n * our new `origin` values.\n *\n * @type {Object}\n */\n\nValidationErrorItem.TypeStringMap = {\n  'notnull violation': 'CORE',\n  'string violation': 'CORE',\n  'unique violation': 'DB',\n  'validation error': 'FUNCTION'\n};\n/**\n * A base class for all connection related errors.\n */\n\nclass ConnectionError extends BaseError {\n  constructor(parent) {\n    super(parent ? parent.message : '');\n    this.name = 'SequelizeConnectionError';\n    /**\n     * The connection specific error which triggered this one\n     * @type {Error}\n     */\n\n    this.parent = parent;\n    this.original = parent;\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n}\n\nexports.ConnectionError = ConnectionError;\n/**\n * Thrown when a connection to a database is refused\n */\n\nclass ConnectionRefusedError extends ConnectionError {\n  constructor(parent) {\n    super(parent);\n    this.name = 'SequelizeConnectionRefusedError';\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n}\n\nexports.ConnectionRefusedError = ConnectionRefusedError;\n/**\n * Thrown when a connection to a database is refused due to insufficient privileges\n */\n\nclass AccessDeniedError extends ConnectionError {\n  constructor(parent) {\n    super(parent);\n    this.name = 'SequelizeAccessDeniedError';\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n}\n\nexports.AccessDeniedError = AccessDeniedError;\n/**\n * Thrown when a connection to a database has a hostname that was not found\n */\n\nclass HostNotFoundError extends ConnectionError {\n  constructor(parent) {\n    super(parent);\n    this.name = 'SequelizeHostNotFoundError';\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n}\n\nexports.HostNotFoundError = HostNotFoundError;\n/**\n * Thrown when a connection to a database has a hostname that was not reachable\n */\n\nclass HostNotReachableError extends ConnectionError {\n  constructor(parent) {\n    super(parent);\n    this.name = 'SequelizeHostNotReachableError';\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n}\n\nexports.HostNotReachableError = HostNotReachableError;\n/**\n * Thrown when a connection to a database has invalid values for any of the connection parameters\n */\n\nclass InvalidConnectionError extends ConnectionError {\n  constructor(parent) {\n    super(parent);\n    this.name = 'SequelizeInvalidConnectionError';\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n}\n\nexports.InvalidConnectionError = InvalidConnectionError;\n/**\n * Thrown when a connection to a database times out\n */\n\nclass ConnectionTimedOutError extends ConnectionError {\n  constructor(parent) {\n    super(parent);\n    this.name = 'SequelizeConnectionTimedOutError';\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n}\n\nexports.ConnectionTimedOutError = ConnectionTimedOutError;\n/**\n * Thrown when a some problem occurred with Instance methods (see message for details)\n */\n\nclass InstanceError extends BaseError {\n  constructor(message) {\n    super(message);\n    this.name = 'SequelizeInstanceError';\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n}\n\nexports.InstanceError = InstanceError;\n/**\n * Thrown when a record was not found, Usually used with rejectOnEmpty mode (see message for details)\n */\n\nclass EmptyResultError extends BaseError {\n  constructor(message) {\n    super(message);\n    this.name = 'SequelizeEmptyResultError';\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n}\n\nexports.EmptyResultError = EmptyResultError;\n/**\n * Thrown when an include statement is improperly constructed (see message for details)\n */\n\nclass EagerLoadingError extends BaseError {\n  constructor(message) {\n    super(message);\n    this.name = 'SequelizeEagerLoadingError';\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n}\n\nexports.EagerLoadingError = EagerLoadingError;\n/**\n * Thrown when an association is improperly constructed (see message for details)\n */\n\nclass AssociationError extends BaseError {\n  constructor(message) {\n    super(message);\n    this.name = 'SequelizeAssociationError';\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n}\n\nexports.AssociationError = AssociationError;\n/**\n * Thrown when a query is passed invalid options (see message for details)\n */\n\nclass QueryError extends BaseError {\n  constructor(message) {\n    super(message);\n    this.name = 'SequelizeQueryError';\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n}\n\nexports.QueryError = QueryError;\n/**\n * Thrown when bulk operation fails, it represent per record level error.\n * Used with Promise.AggregateError\n *\n * @param {Error}  error   Error for a given record/instance\n * @param {Object} record  DAO instance that error belongs to\n */\n\nclass BulkRecordError extends BaseError {\n  constructor(error, record) {\n    super(error.message);\n    this.name = 'SequelizeBulkRecordError';\n    this.errors = error;\n    this.record = record;\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n}\n\nexports.BulkRecordError = BulkRecordError;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/sequelize/lib/errors/index.js"],"names":["_","require","BaseError","Error","constructor","message","name","captureStackTrace","exports","SequelizeScopeError","parent","ValidationError","errors","length","map","err","type","origin","join","get","path","reduce","reduced","error","push","OptimisticLockError","options","modelName","values","where","DatabaseError","original","sql","TimeoutError","UniqueConstraintError","fields","ForeignKeyConstraintError","table","value","index","reltype","ExclusionConstraintError","constraint","UnknownConstraintError","ValidationErrorItem","inst","validatorKey","fnName","fnArgs","undefined","instance","validatorName","validatorArgs","Origins","lowercaseType","toLower","trim","realType","TypeStringMap","getValidatorKey","useTypeAsNS","NSSeparator","useTANS","NSSep","key","useNS","CORE","DB","FUNCTION","ConnectionError","ConnectionRefusedError","AccessDeniedError","HostNotFoundError","HostNotReachableError","InvalidConnectionError","ConnectionTimedOutError","InstanceError","EmptyResultError","EagerLoadingError","AssociationError","QueryError","BulkRecordError","record"],"mappings":"AAAA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;AAEA;;;;;;;;;AAOA,MAAMC,SAAN,SAAwBC,KAAxB,CAA8B;AAC5BC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,UAAMA,OAAN;AACA,SAAKC,IAAL,GAAY,oBAAZ;AACAH,IAAAA,KAAK,CAACI,iBAAN,CAAwB,IAAxB,EAA8B,KAAKH,WAAnC;AACD;;AAL2B;;AAO9BI,OAAO,CAACN,SAAR,GAAoBA,SAApB;AAEA;;;;AAGA,MAAMO,mBAAN,SAAkCP,SAAlC,CAA4C;AAC1CE,EAAAA,WAAW,CAACM,MAAD,EAAS;AAClB,UAAMA,MAAN;AACA,SAAKJ,IAAL,GAAY,qBAAZ;AACAH,IAAAA,KAAK,CAACI,iBAAN,CAAwB,IAAxB,EAA8B,KAAKH,WAAnC;AACD;;AALyC;;AAO5CI,OAAO,CAACC,mBAAR,GAA8BA,mBAA9B;AAEA;;;;;;;;;;AASA,MAAME,eAAN,SAA8BT,SAA9B,CAAwC;AACtCE,EAAAA,WAAW,CAACC,OAAD,EAAUO,MAAV,EAAkB;AAC3B,UAAMP,OAAN;AACA,SAAKC,IAAL,GAAY,0BAAZ;AACA,SAAKD,OAAL,GAAe,kBAAf;AACA;;;;;AAIA,SAAKO,MAAL,GAAcA,MAAM,IAAI,EAAxB,CAR2B,CAU3B;;AACA,QAAIP,OAAJ,EAAa;AACX,WAAKA,OAAL,GAAeA,OAAf,CADW,CAGX;AACD,KAJD,MAIO,IAAI,KAAKO,MAAL,CAAYC,MAAZ,GAAqB,CAArB,IAA0B,KAAKD,MAAL,CAAY,CAAZ,EAAeP,OAA7C,EAAsD;AAC3D,WAAKA,OAAL,GAAe,KAAKO,MAAL,CAAYE,GAAZ,CAAgBC,GAAG,IAAI,CAACA,GAAG,CAACC,IAAJ,IAAYD,GAAG,CAACE,MAAjB,IAA2B,IAA3B,GAAkCF,GAAG,CAACV,OAA7D,EAAsEa,IAAtE,CAA2E,KAA3E,CAAf;AACD;;AACDf,IAAAA,KAAK,CAACI,iBAAN,CAAwB,IAAxB,EAA8B,KAAKH,WAAnC;AACD;AAED;;;;;;;;AAMAe,EAAAA,GAAG,CAACC,IAAD,EAAO;AACR,WAAO,KAAKR,MAAL,CAAYS,MAAZ,CAAmB,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAC5C,UAAIA,KAAK,CAACH,IAAN,KAAeA,IAAnB,EAAyB;AACvBE,QAAAA,OAAO,CAACE,IAAR,CAAaD,KAAb;AACD;;AACD,aAAOD,OAAP;AACD,KALM,EAKJ,EALI,CAAP;AAMD;;AAnCqC;;AAqCxCd,OAAO,CAACG,eAAR,GAA0BA,eAA1B;AAEA;;;;AAGA,MAAMc,mBAAN,SAAkCvB,SAAlC,CAA4C;AAC1CE,EAAAA,WAAW,CAACsB,OAAD,EAAU;AACnBA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,IAAAA,OAAO,CAACrB,OAAR,GAAkBqB,OAAO,CAACrB,OAAR,IAAmB,kDAAkDqB,OAAO,CAACC,SAA/F;AACA,UAAMD,OAAN;AACA,SAAKpB,IAAL,GAAY,8BAAZ;AACA;;;;;AAIA,SAAKqB,SAAL,GAAiBD,OAAO,CAACC,SAAzB;AACA;;;;;AAIA,SAAKC,MAAL,GAAcF,OAAO,CAACE,MAAtB;AACA;;;;;AAIA,SAAKC,KAAL,GAAaH,OAAO,CAACG,KAArB;AACA1B,IAAAA,KAAK,CAACI,iBAAN,CAAwB,IAAxB,EAA8B,KAAKH,WAAnC;AACD;;AAtByC;;AAwB5CI,OAAO,CAACiB,mBAAR,GAA8BA,mBAA9B;AAEA;;;;AAGA,MAAMK,aAAN,SAA4B5B,SAA5B,CAAsC;AACpCE,EAAAA,WAAW,CAACM,MAAD,EAAS;AAClB,UAAMA,MAAM,CAACL,OAAb;AACA,SAAKC,IAAL,GAAY,wBAAZ;AACA;;;;AAGA,SAAKI,MAAL,GAAcA,MAAd;AACA;;;;AAGA,SAAKqB,QAAL,GAAgBrB,MAAhB;AACA;;;;;AAIA,SAAKsB,GAAL,GAAWtB,MAAM,CAACsB,GAAlB;AACA7B,IAAAA,KAAK,CAACI,iBAAN,CAAwB,IAAxB,EAA8B,KAAKH,WAAnC;AACD;;AAlBmC;;AAoBtCI,OAAO,CAACsB,aAAR,GAAwBA,aAAxB;AAEA;;;;AAGA,MAAMG,YAAN,SAA2BH,aAA3B,CAAyC;AACvC1B,EAAAA,WAAW,CAACM,MAAD,EAAS;AAClB,UAAMA,MAAN;AACA,SAAKJ,IAAL,GAAY,uBAAZ;AACAH,IAAAA,KAAK,CAACI,iBAAN,CAAwB,IAAxB,EAA8B,KAAKH,WAAnC;AACD;;AALsC;;AAOzCI,OAAO,CAACyB,YAAR,GAAuBA,YAAvB;AAEA;;;;AAGA,MAAMC,qBAAN,SAAoCvB,eAApC,CAAoD;AAClDP,EAAAA,WAAW,CAACsB,OAAD,EAAU;AACnBA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,IAAAA,OAAO,CAAChB,MAAR,GAAiBgB,OAAO,CAAChB,MAAR,IAAkB;AAAEsB,MAAAA,GAAG,EAAE;AAAP,KAAnC;AACAN,IAAAA,OAAO,CAACrB,OAAR,GAAkBqB,OAAO,CAACrB,OAAR,IAAmBqB,OAAO,CAAChB,MAAR,CAAeL,OAAlC,IAA6C,kBAA/D;AACAqB,IAAAA,OAAO,CAACd,MAAR,GAAiBc,OAAO,CAACd,MAAR,IAAkB,EAAnC;AACA,UAAMc,OAAO,CAACrB,OAAd,EAAuBqB,OAAO,CAACd,MAA/B;AAEA,SAAKN,IAAL,GAAY,gCAAZ;AACA,SAAKM,MAAL,GAAcc,OAAO,CAACd,MAAtB;AACA,SAAKuB,MAAL,GAAcT,OAAO,CAACS,MAAtB;AACA,SAAKzB,MAAL,GAAcgB,OAAO,CAAChB,MAAtB;AACA,SAAKqB,QAAL,GAAgBL,OAAO,CAAChB,MAAxB;AACA,SAAKsB,GAAL,GAAWN,OAAO,CAAChB,MAAR,CAAesB,GAA1B;AACA7B,IAAAA,KAAK,CAACI,iBAAN,CAAwB,IAAxB,EAA8B,KAAKH,WAAnC;AACD;;AAfiD;;AAiBpDI,OAAO,CAAC0B,qBAAR,GAAgCA,qBAAhC;AAEA;;;;AAGA,MAAME,yBAAN,SAAwCN,aAAxC,CAAsD;AACpD1B,EAAAA,WAAW,CAACsB,OAAD,EAAU;AACnBA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,IAAAA,OAAO,CAAChB,MAAR,GAAiBgB,OAAO,CAAChB,MAAR,IAAkB;AAAEsB,MAAAA,GAAG,EAAE;AAAP,KAAnC;AAEA,UAAMN,OAAO,CAAChB,MAAd;AACA,SAAKJ,IAAL,GAAY,oCAAZ;AAEA,SAAKD,OAAL,GAAeqB,OAAO,CAACrB,OAAR,IAAmBqB,OAAO,CAAChB,MAAR,CAAeL,OAAlC,IAA6C,gBAA5D;AACA,SAAK8B,MAAL,GAAcT,OAAO,CAACS,MAAtB;AACA,SAAKE,KAAL,GAAaX,OAAO,CAACW,KAArB;AACA,SAAKC,KAAL,GAAaZ,OAAO,CAACY,KAArB;AACA,SAAKC,KAAL,GAAab,OAAO,CAACa,KAArB;AACA,SAAKC,OAAL,GAAed,OAAO,CAACc,OAAvB;AACArC,IAAAA,KAAK,CAACI,iBAAN,CAAwB,IAAxB,EAA8B,KAAKH,WAAnC;AACD;;AAfmD;;AAiBtDI,OAAO,CAAC4B,yBAAR,GAAoCA,yBAApC;AAEA;;;;AAGA,MAAMK,wBAAN,SAAuCX,aAAvC,CAAqD;AACnD1B,EAAAA,WAAW,CAACsB,OAAD,EAAU;AACnBA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,IAAAA,OAAO,CAAChB,MAAR,GAAiBgB,OAAO,CAAChB,MAAR,IAAkB;AAAEsB,MAAAA,GAAG,EAAE;AAAP,KAAnC;AAEA,UAAMN,OAAO,CAAChB,MAAd;AACA,SAAKJ,IAAL,GAAY,mCAAZ;AAEA,SAAKD,OAAL,GAAeqB,OAAO,CAACrB,OAAR,IAAmBqB,OAAO,CAAChB,MAAR,CAAeL,OAAlC,IAA6C,EAA5D;AACA,SAAKqC,UAAL,GAAkBhB,OAAO,CAACgB,UAA1B;AACA,SAAKP,MAAL,GAAcT,OAAO,CAACS,MAAtB;AACA,SAAKE,KAAL,GAAaX,OAAO,CAACW,KAArB;AACAlC,IAAAA,KAAK,CAACI,iBAAN,CAAwB,IAAxB,EAA8B,KAAKH,WAAnC;AACD;;AAbkD;;AAerDI,OAAO,CAACiC,wBAAR,GAAmCA,wBAAnC;AAEA;;;;AAGA,MAAME,sBAAN,SAAqCb,aAArC,CAAmD;AACjD1B,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,UAAMK,MAAM,GAAG;AAAEL,MAAAA;AAAF,KAAf;AACA,UAAMK,MAAN;AACA,SAAKJ,IAAL,GAAY,iCAAZ;AACA,SAAKD,OAAL,GAAeA,OAAO,IAAI,yCAA1B;AACAF,IAAAA,KAAK,CAACI,iBAAN,CAAwB,IAAxB,EAA8B,KAAKH,WAAnC;AACD;;AAPgD;;AASnDI,OAAO,CAACmC,sBAAR,GAAiCA,sBAAjC;AAEA;;;;;;;;;;;;;;AAaA,MAAMC,mBAAN,CAA0B;AACxBxC,EAAAA,WAAW,CAACC,OAAD,EAAUW,IAAV,EAAgBI,IAAhB,EAAsBkB,KAAtB,EAA6BO,IAA7B,EAAmCC,YAAnC,EAAiDC,MAAjD,EAAyDC,MAAzD,EAAiE;AAC1E;;;;;AAKA,SAAK3C,OAAL,GAAeA,OAAO,IAAI,EAA1B;AAEA;;;;;;AAKA,SAAKW,IAAL,GAAY,IAAZ;AAEA;;;;;;AAKA,SAAKI,IAAL,GAAYA,IAAI,IAAI,IAApB;AAEA;;;;;;AAKA,SAAKkB,KAAL,GAAaA,KAAK,KAAKW,SAAV,GAAsBX,KAAtB,GAA8B,IAA3C;AAEA,SAAKrB,MAAL,GAAc,IAAd;AAEA;;;;;;AAKA,SAAKiC,QAAL,GAAgBL,IAAI,IAAI,IAAxB;AAEA;;;;;;AAKA,SAAKC,YAAL,GAAoBA,YAAY,IAAI,IAApC;AAEA;;;;;;AAKA,SAAKK,aAAL,GAAqBJ,MAAM,IAAI,IAA/B;AAEA;;;;;;AAKA,SAAKK,aAAL,GAAqBJ,MAAM,IAAI,EAA/B;;AAEA,QAAIhC,IAAJ,EAAU;AACR,UAAI4B,mBAAmB,CAACS,OAApB,CAA6BrC,IAA7B,CAAJ,EAAyC;AACvC,aAAKC,MAAL,GAAcD,IAAd;AACD,OAFD,MAEO;AACL,cAAMsC,aAAa,GAAGtD,CAAC,CAACuD,OAAF,CAAUvC,IAAI,GAAG,EAAjB,EAAqBwC,IAArB,EAAtB;;AACA,cAAMC,QAAQ,GAAIb,mBAAmB,CAACc,aAApB,CAAmCJ,aAAnC,CAAlB;;AAEA,YAAIG,QAAQ,IAAIb,mBAAmB,CAACS,OAApB,CAA6BI,QAA7B,CAAhB,EAAyD;AACvD,eAAKxC,MAAL,GAAcwC,QAAd;AACA,eAAKzC,IAAL,GAAYA,IAAZ;AACD;AACF;AACF,KAvEyE,CAyE1E;;AACD;AAED;;;;;;;;;;;;;;;;AAcA2C,EAAAA,eAAe,CAACC,WAAD,EAAcC,WAAd,EAA2B;AACxC,UAAMC,OAAO,GAAG,OAAOF,WAAP,KAAuB,WAAvB,GAAsC,IAAtC,GAA6C,CAAC,CAACA,WAA/D;AACA,UAAMG,KAAK,GAAG,OAAOF,WAAP,KAAuB,WAAvB,GAAqC,GAArC,GAA2CA,WAAzD;AAEA,UAAM7C,IAAI,GAAG,KAAKC,MAAlB;AACA,UAAM+C,GAAG,GAAG,KAAKlB,YAAL,IAAqB,KAAKK,aAAtC;AACA,UAAMc,KAAK,GAAGH,OAAO,IAAI9C,IAAX,IAAmB4B,mBAAmB,CAACS,OAApB,CAA6BrC,IAA7B,CAAjC;;AAEA,QAAIiD,KAAK,KAAK,OAAOF,KAAP,KAAiB,QAAjB,IAA6B,CAACA,KAAK,CAAClD,MAAzC,CAAT,EAA2D;AACzD,YAAM,IAAIV,KAAJ,CAAU,+DAAV,CAAN;AACD;;AAED,QAAI,EAAE,OAAO6D,GAAP,KAAe,QAAf,IAA2BA,GAAG,CAACnD,MAAjC,CAAJ,EAA8C;AAC5C,aAAO,EAAP;AACD;;AAED,WAAOb,CAAC,CAACuD,OAAF,CAAUU,KAAK,GAAG,CAACjD,IAAD,EAAOgD,GAAP,EAAY9C,IAAZ,CAAiB6C,KAAjB,CAAH,GAA6BC,GAA5C,EAAiDR,IAAjD,EAAP;AACD;;AA5GuB;;AA+G1BhD,OAAO,CAACoC,mBAAR,GAA8BA,mBAA9B;AAEA;;;;;;;;;AAQAA,mBAAmB,CAACS,OAApB,GAA8B;AAC5Ba,EAAAA,IAAI,EAAE,MADsB;AAE5BC,EAAAA,EAAE,EAAE,IAFwB;AAG5BC,EAAAA,QAAQ,EAAE;AAHkB,CAA9B;AAMA;;;;;;;;AAOAxB,mBAAmB,CAACc,aAApB,GAAoC;AAClC,uBAAqB,MADa;AAElC,sBAAoB,MAFc;AAGlC,sBAAoB,IAHc;AAIlC,sBAAoB;AAJc,CAApC;AAOA;;;;AAGA,MAAMW,eAAN,SAA8BnE,SAA9B,CAAwC;AACtCE,EAAAA,WAAW,CAACM,MAAD,EAAS;AAClB,UAAMA,MAAM,GAAGA,MAAM,CAACL,OAAV,GAAoB,EAAhC;AACA,SAAKC,IAAL,GAAY,0BAAZ;AACA;;;;;AAIA,SAAKI,MAAL,GAAcA,MAAd;AACA,SAAKqB,QAAL,GAAgBrB,MAAhB;AACAP,IAAAA,KAAK,CAACI,iBAAN,CAAwB,IAAxB,EAA8B,KAAKH,WAAnC;AACD;;AAXqC;;AAaxCI,OAAO,CAAC6D,eAAR,GAA0BA,eAA1B;AAEA;;;;AAGA,MAAMC,sBAAN,SAAqCD,eAArC,CAAqD;AACnDjE,EAAAA,WAAW,CAACM,MAAD,EAAS;AAClB,UAAMA,MAAN;AACA,SAAKJ,IAAL,GAAY,iCAAZ;AACAH,IAAAA,KAAK,CAACI,iBAAN,CAAwB,IAAxB,EAA8B,KAAKH,WAAnC;AACD;;AALkD;;AAOrDI,OAAO,CAAC8D,sBAAR,GAAiCA,sBAAjC;AAEA;;;;AAGA,MAAMC,iBAAN,SAAgCF,eAAhC,CAAgD;AAC9CjE,EAAAA,WAAW,CAACM,MAAD,EAAS;AAClB,UAAMA,MAAN;AACA,SAAKJ,IAAL,GAAY,4BAAZ;AACAH,IAAAA,KAAK,CAACI,iBAAN,CAAwB,IAAxB,EAA8B,KAAKH,WAAnC;AACD;;AAL6C;;AAOhDI,OAAO,CAAC+D,iBAAR,GAA4BA,iBAA5B;AAEA;;;;AAGA,MAAMC,iBAAN,SAAgCH,eAAhC,CAAgD;AAC9CjE,EAAAA,WAAW,CAACM,MAAD,EAAS;AAClB,UAAMA,MAAN;AACA,SAAKJ,IAAL,GAAY,4BAAZ;AACAH,IAAAA,KAAK,CAACI,iBAAN,CAAwB,IAAxB,EAA8B,KAAKH,WAAnC;AACD;;AAL6C;;AAOhDI,OAAO,CAACgE,iBAAR,GAA4BA,iBAA5B;AAEA;;;;AAGA,MAAMC,qBAAN,SAAoCJ,eAApC,CAAoD;AAClDjE,EAAAA,WAAW,CAACM,MAAD,EAAS;AAClB,UAAMA,MAAN;AACA,SAAKJ,IAAL,GAAY,gCAAZ;AACAH,IAAAA,KAAK,CAACI,iBAAN,CAAwB,IAAxB,EAA8B,KAAKH,WAAnC;AACD;;AALiD;;AAOpDI,OAAO,CAACiE,qBAAR,GAAgCA,qBAAhC;AAEA;;;;AAGA,MAAMC,sBAAN,SAAqCL,eAArC,CAAqD;AACnDjE,EAAAA,WAAW,CAACM,MAAD,EAAS;AAClB,UAAMA,MAAN;AACA,SAAKJ,IAAL,GAAY,iCAAZ;AACAH,IAAAA,KAAK,CAACI,iBAAN,CAAwB,IAAxB,EAA8B,KAAKH,WAAnC;AACD;;AALkD;;AAOrDI,OAAO,CAACkE,sBAAR,GAAiCA,sBAAjC;AAEA;;;;AAGA,MAAMC,uBAAN,SAAsCN,eAAtC,CAAsD;AACpDjE,EAAAA,WAAW,CAACM,MAAD,EAAS;AAClB,UAAMA,MAAN;AACA,SAAKJ,IAAL,GAAY,kCAAZ;AACAH,IAAAA,KAAK,CAACI,iBAAN,CAAwB,IAAxB,EAA8B,KAAKH,WAAnC;AACD;;AALmD;;AAOtDI,OAAO,CAACmE,uBAAR,GAAkCA,uBAAlC;AAEA;;;;AAGA,MAAMC,aAAN,SAA4B1E,SAA5B,CAAsC;AACpCE,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,UAAMA,OAAN;AACA,SAAKC,IAAL,GAAY,wBAAZ;AACAH,IAAAA,KAAK,CAACI,iBAAN,CAAwB,IAAxB,EAA8B,KAAKH,WAAnC;AACD;;AALmC;;AAOtCI,OAAO,CAACoE,aAAR,GAAwBA,aAAxB;AAEA;;;;AAGA,MAAMC,gBAAN,SAA+B3E,SAA/B,CAAyC;AACvCE,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,UAAMA,OAAN;AACA,SAAKC,IAAL,GAAY,2BAAZ;AACAH,IAAAA,KAAK,CAACI,iBAAN,CAAwB,IAAxB,EAA8B,KAAKH,WAAnC;AACD;;AALsC;;AAOzCI,OAAO,CAACqE,gBAAR,GAA2BA,gBAA3B;AAEA;;;;AAGA,MAAMC,iBAAN,SAAgC5E,SAAhC,CAA0C;AACxCE,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,UAAMA,OAAN;AACA,SAAKC,IAAL,GAAY,4BAAZ;AACAH,IAAAA,KAAK,CAACI,iBAAN,CAAwB,IAAxB,EAA8B,KAAKH,WAAnC;AACD;;AALuC;;AAO1CI,OAAO,CAACsE,iBAAR,GAA4BA,iBAA5B;AAEA;;;;AAGA,MAAMC,gBAAN,SAA+B7E,SAA/B,CAAyC;AACvCE,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,UAAMA,OAAN;AACA,SAAKC,IAAL,GAAY,2BAAZ;AACAH,IAAAA,KAAK,CAACI,iBAAN,CAAwB,IAAxB,EAA8B,KAAKH,WAAnC;AACD;;AALsC;;AAOzCI,OAAO,CAACuE,gBAAR,GAA2BA,gBAA3B;AACA;;;;AAGA,MAAMC,UAAN,SAAyB9E,SAAzB,CAAmC;AACjCE,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,UAAMA,OAAN;AACA,SAAKC,IAAL,GAAY,qBAAZ;AACAH,IAAAA,KAAK,CAACI,iBAAN,CAAwB,IAAxB,EAA8B,KAAKH,WAAnC;AACD;;AALgC;;AAOnCI,OAAO,CAACwE,UAAR,GAAqBA,UAArB;AAEA;;;;;;;;AAOA,MAAMC,eAAN,SAA8B/E,SAA9B,CAAwC;AACtCE,EAAAA,WAAW,CAACmB,KAAD,EAAQ2D,MAAR,EAAgB;AACzB,UAAM3D,KAAK,CAAClB,OAAZ;AACA,SAAKC,IAAL,GAAY,0BAAZ;AACA,SAAKM,MAAL,GAAcW,KAAd;AACA,SAAK2D,MAAL,GAAcA,MAAd;AACA/E,IAAAA,KAAK,CAACI,iBAAN,CAAwB,IAAxB,EAA8B,KAAKH,WAAnC;AACD;;AAPqC;;AASxCI,OAAO,CAACyE,eAAR,GAA0BA,eAA1B","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\n\n/**\n * Sequelize provides a host of custom error classes, to allow you to do easier debugging. All of these errors are exposed on the sequelize object and the sequelize constructor.\n * All sequelize errors inherit from the base JS error object.\n *\n * This means that errors can be accessed using `Sequelize.ValidationError` or `sequelize.ValidationError`\n * The Base Error all Sequelize Errors inherit from.\n */\nclass BaseError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'SequelizeBaseError';\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\nexports.BaseError = BaseError;\n\n/**\n * Scope Error. Thrown when the sequelize cannot query the specified scope.\n */\nclass SequelizeScopeError extends BaseError {\n  constructor(parent) {\n    super(parent);\n    this.name = 'SequelizeScopeError';\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\nexports.SequelizeScopeError = SequelizeScopeError;\n\n/**\n * Validation Error. Thrown when the sequelize validation has failed. The error contains an `errors` property,\n * which is an array with 1 or more ValidationErrorItems, one for each validation that failed.\n *\n * @param {string} message Error message\n * @param {Array} [errors] Array of ValidationErrorItem objects describing the validation errors\n *\n * @property errors {ValidationErrorItems[]}\n */\nclass ValidationError extends BaseError {\n  constructor(message, errors) {\n    super(message);\n    this.name = 'SequelizeValidationError';\n    this.message = 'Validation Error';\n    /**\n     *\n     * @type {ValidationErrorItem[]}\n     */\n    this.errors = errors || [];\n\n    // Use provided error message if available...\n    if (message) {\n      this.message = message;\n\n      // ... otherwise create a concatenated message out of existing errors.\n    } else if (this.errors.length > 0 && this.errors[0].message) {\n      this.message = this.errors.map(err => (err.type || err.origin) + ': ' + err.message).join(',\\n');\n    }\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n  /**\n   * Gets all validation error items for the path / field specified.\n   *\n   * @param {string} path The path to be checked for error items\n   * @returns {ValidationErrorItem[]} Validation error items for the specified path\n   */\n  get(path) {\n    return this.errors.reduce((reduced, error) => {\n      if (error.path === path) {\n        reduced.push(error);\n      }\n      return reduced;\n    }, []);\n  }\n}\nexports.ValidationError = ValidationError;\n\n/**\n * Thrown when attempting to update a stale model instance\n */\nclass OptimisticLockError extends BaseError {\n  constructor(options) {\n    options = options || {};\n    options.message = options.message || 'Attempting to update a stale model instance: ' + options.modelName;\n    super(options);\n    this.name = 'SequelizeOptimisticLockError';\n    /**\n     * The name of the model on which the update was attempted\n     * @type {string}\n     */\n    this.modelName = options.modelName;\n    /**\n     * The values of the attempted update\n     * @type {object}\n     */\n    this.values = options.values;\n    /**\n     *\n     * @type {object}\n     */\n    this.where = options.where;\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\nexports.OptimisticLockError = OptimisticLockError;\n\n/**\n * A base class for all database related errors.\n */\nclass DatabaseError extends BaseError {\n  constructor(parent) {\n    super(parent.message);\n    this.name = 'SequelizeDatabaseError';\n    /**\n     * @type {Error}\n     */\n    this.parent = parent;\n    /**\n     * @type {Error}\n     */\n    this.original = parent;\n    /**\n     * The SQL that triggered the error\n     * @type {string}\n     */\n    this.sql = parent.sql;\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\nexports.DatabaseError = DatabaseError;\n\n/**\n * Thrown when a database query times out because of a deadlock\n */\nclass TimeoutError extends DatabaseError {\n  constructor(parent) {\n    super(parent);\n    this.name = 'SequelizeTimeoutError';\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\nexports.TimeoutError = TimeoutError;\n\n/**\n * Thrown when a unique constraint is violated in the database\n */\nclass UniqueConstraintError extends ValidationError {\n  constructor(options) {\n    options = options || {};\n    options.parent = options.parent || { sql: '' };\n    options.message = options.message || options.parent.message || 'Validation Error';\n    options.errors = options.errors || {};\n    super(options.message, options.errors);\n\n    this.name = 'SequelizeUniqueConstraintError';\n    this.errors = options.errors;\n    this.fields = options.fields;\n    this.parent = options.parent;\n    this.original = options.parent;\n    this.sql = options.parent.sql;\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\nexports.UniqueConstraintError = UniqueConstraintError;\n\n/**\n * Thrown when a foreign key constraint is violated in the database\n */\nclass ForeignKeyConstraintError extends DatabaseError {\n  constructor(options) {\n    options = options || {};\n    options.parent = options.parent || { sql: '' };\n\n    super(options.parent);\n    this.name = 'SequelizeForeignKeyConstraintError';\n\n    this.message = options.message || options.parent.message || 'Database Error';\n    this.fields = options.fields;\n    this.table = options.table;\n    this.value = options.value;\n    this.index = options.index;\n    this.reltype = options.reltype;\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\nexports.ForeignKeyConstraintError = ForeignKeyConstraintError;\n\n/**\n * Thrown when an exclusion constraint is violated in the database\n */\nclass ExclusionConstraintError extends DatabaseError {\n  constructor(options) {\n    options = options || {};\n    options.parent = options.parent || { sql: '' };\n\n    super(options.parent);\n    this.name = 'SequelizeExclusionConstraintError';\n\n    this.message = options.message || options.parent.message || '';\n    this.constraint = options.constraint;\n    this.fields = options.fields;\n    this.table = options.table;\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\nexports.ExclusionConstraintError = ExclusionConstraintError;\n\n/**\n * Thrown when constraint name is not found in the database\n */\nclass UnknownConstraintError extends DatabaseError {\n  constructor(message) {\n    const parent = { message };\n    super(parent);\n    this.name = 'SequelizeUnknownConstraintError';\n    this.message = message || 'The specified constraint does not exist';\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\nexports.UnknownConstraintError = UnknownConstraintError;\n\n/**\n * Validation Error Item\n * Instances of this class are included in the `ValidationError.errors` property.\n *\n * @param {String} message An error message\n * @param {String} type The type/origin of the validation error\n * @param {String} path The field that triggered the validation error\n * @param {String} value The value that generated the error\n * @param {Object} [inst] the DAO instance that caused the validation error\n * @param {Object} [validatorKey] a validation \"key\", used for identification\n * @param {String} [fnName] property name of the BUILT-IN validator function that caused the validation error (e.g. \"in\" or \"len\"), if applicable\n * @param {String} [fnArgs] parameters used with the BUILT-IN validator function, if applicable\n */\nclass ValidationErrorItem {\n  constructor(message, type, path, value, inst, validatorKey, fnName, fnArgs) {\n    /**\n     * An error message\n     *\n     * @type {String} message\n     */\n    this.message = message || '';\n\n    /**\n     * The type/origin of the validation error\n     *\n     * @type {String}\n     */\n    this.type = null;\n\n    /**\n     * The field that triggered the validation error\n     *\n     * @type {String}\n     */\n    this.path = path || null;\n\n    /**\n     * The value that generated the error\n     *\n     * @type {String}\n     */\n    this.value = value !== undefined ? value : null;\n\n    this.origin = null;\n\n    /**\n     * The DAO instance that caused the validation error\n     *\n     * @type {Model}\n     */\n    this.instance = inst || null;\n\n    /**\n     * A validation \"key\", used for identification\n     *\n     * @type {String}\n     */\n    this.validatorKey = validatorKey || null;\n\n    /**\n     * Property name of the BUILT-IN validator function that caused the validation error (e.g. \"in\" or \"len\"), if applicable\n     *\n     * @type {String}\n     */\n    this.validatorName = fnName || null;\n\n    /**\n     * Parameters used with the BUILT-IN validator function, if applicable\n     *\n     * @type {String}\n     */\n    this.validatorArgs = fnArgs || [];\n\n    if (type) {\n      if (ValidationErrorItem.Origins[ type ]) {\n        this.origin = type;\n      } else {\n        const lowercaseType = _.toLower(type + '').trim();\n        const realType  = ValidationErrorItem.TypeStringMap[ lowercaseType ];\n\n        if (realType && ValidationErrorItem.Origins[ realType ]) {\n          this.origin = realType;\n          this.type = type;\n        }\n      }\n    }\n\n    // This doesn't need captureStackTrace because it's not a subclass of Error\n  }\n\n  /**\n   * return a lowercase, trimmed string \"key\" that identifies the validator.\n   *\n   * Note: the string will be empty if the instance has neither a valid `validatorKey` property nor a valid `validatorName` property\n   *\n   * @param   {Boolean} [useTypeAsNS=true]      controls whether the returned value is \"namespace\",\n   *                                            this parameter is ignored if the validator's `type` is not one of ValidationErrorItem.Origins\n   * @param   {String}  [NSSeparator='.']       a separator string for concatenating the namespace, must be not be empty,\n   *                                            defaults to \".\" (fullstop). only used and validated if useTypeAsNS is TRUE.\n   * @throws  {Error}                           thrown if NSSeparator is found to be invalid.\n   * @return  {String}\n   *\n   * @private\n   */\n  getValidatorKey(useTypeAsNS, NSSeparator) {\n    const useTANS = typeof useTypeAsNS === 'undefined' ?  true : !!useTypeAsNS;\n    const NSSep = typeof NSSeparator === 'undefined' ? '.' : NSSeparator;\n\n    const type = this.origin;\n    const key = this.validatorKey || this.validatorName;\n    const useNS = useTANS && type && ValidationErrorItem.Origins[ type ];\n\n    if (useNS && (typeof NSSep !== 'string' || !NSSep.length)) {\n      throw new Error('Invalid namespace separator given, must be a non-empty string');\n    }\n\n    if (!(typeof key === 'string' && key.length)) {\n      return '';\n    }\n\n    return _.toLower(useNS ? [type, key].join(NSSep) : key).trim();\n  }\n}\n\nexports.ValidationErrorItem = ValidationErrorItem;\n\n/**\n * An enum that defines valid ValidationErrorItem `origin` values\n *\n * @type {Object}\n * @property CORE       {String}  specifies errors that originate from the sequelize \"core\"\n * @property DB         {String}  specifies validation errors that originate from the storage engine\n * @property FUNCTION   {String}  specifies validation errors that originate from validator functions (both built-in and custom) defined for a given attribute\n */\nValidationErrorItem.Origins = {\n  CORE: 'CORE',\n  DB: 'DB',\n  FUNCTION: 'FUNCTION'\n};\n\n/**\n * An object that is used internally by the `ValidationErrorItem` class\n * that maps current `type` strings (as given to ValidationErrorItem.constructor()) to\n * our new `origin` values.\n *\n * @type {Object}\n */\nValidationErrorItem.TypeStringMap = {\n  'notnull violation': 'CORE',\n  'string violation': 'CORE',\n  'unique violation': 'DB',\n  'validation error': 'FUNCTION'\n};\n\n/**\n * A base class for all connection related errors.\n */\nclass ConnectionError extends BaseError {\n  constructor(parent) {\n    super(parent ? parent.message : '');\n    this.name = 'SequelizeConnectionError';\n    /**\n     * The connection specific error which triggered this one\n     * @type {Error}\n     */\n    this.parent = parent;\n    this.original = parent;\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\nexports.ConnectionError = ConnectionError;\n\n/**\n * Thrown when a connection to a database is refused\n */\nclass ConnectionRefusedError extends ConnectionError {\n  constructor(parent) {\n    super(parent);\n    this.name = 'SequelizeConnectionRefusedError';\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\nexports.ConnectionRefusedError = ConnectionRefusedError;\n\n/**\n * Thrown when a connection to a database is refused due to insufficient privileges\n */\nclass AccessDeniedError extends ConnectionError {\n  constructor(parent) {\n    super(parent);\n    this.name = 'SequelizeAccessDeniedError';\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\nexports.AccessDeniedError = AccessDeniedError;\n\n/**\n * Thrown when a connection to a database has a hostname that was not found\n */\nclass HostNotFoundError extends ConnectionError {\n  constructor(parent) {\n    super(parent);\n    this.name = 'SequelizeHostNotFoundError';\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\nexports.HostNotFoundError = HostNotFoundError;\n\n/**\n * Thrown when a connection to a database has a hostname that was not reachable\n */\nclass HostNotReachableError extends ConnectionError {\n  constructor(parent) {\n    super(parent);\n    this.name = 'SequelizeHostNotReachableError';\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\nexports.HostNotReachableError = HostNotReachableError;\n\n/**\n * Thrown when a connection to a database has invalid values for any of the connection parameters\n */\nclass InvalidConnectionError extends ConnectionError {\n  constructor(parent) {\n    super(parent);\n    this.name = 'SequelizeInvalidConnectionError';\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\nexports.InvalidConnectionError = InvalidConnectionError;\n\n/**\n * Thrown when a connection to a database times out\n */\nclass ConnectionTimedOutError extends ConnectionError {\n  constructor(parent) {\n    super(parent);\n    this.name = 'SequelizeConnectionTimedOutError';\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\nexports.ConnectionTimedOutError = ConnectionTimedOutError;\n\n/**\n * Thrown when a some problem occurred with Instance methods (see message for details)\n */\nclass InstanceError extends BaseError {\n  constructor(message) {\n    super(message);\n    this.name = 'SequelizeInstanceError';\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\nexports.InstanceError = InstanceError;\n\n/**\n * Thrown when a record was not found, Usually used with rejectOnEmpty mode (see message for details)\n */\nclass EmptyResultError extends BaseError {\n  constructor(message) {\n    super(message);\n    this.name = 'SequelizeEmptyResultError';\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\nexports.EmptyResultError = EmptyResultError;\n\n/**\n * Thrown when an include statement is improperly constructed (see message for details)\n */\nclass EagerLoadingError extends BaseError {\n  constructor(message) {\n    super(message);\n    this.name = 'SequelizeEagerLoadingError';\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\nexports.EagerLoadingError = EagerLoadingError;\n\n/**\n * Thrown when an association is improperly constructed (see message for details)\n */\nclass AssociationError extends BaseError {\n  constructor(message) {\n    super(message);\n    this.name = 'SequelizeAssociationError';\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\nexports.AssociationError = AssociationError;\n/**\n * Thrown when a query is passed invalid options (see message for details)\n */\nclass QueryError extends BaseError {\n  constructor(message) {\n    super(message);\n    this.name = 'SequelizeQueryError';\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\nexports.QueryError = QueryError;\n\n/**\n * Thrown when bulk operation fails, it represent per record level error.\n * Used with Promise.AggregateError\n *\n * @param {Error}  error   Error for a given record/instance\n * @param {Object} record  DAO instance that error belongs to\n */\nclass BulkRecordError extends BaseError {\n  constructor(error, record) {\n    super(error.message);\n    this.name = 'SequelizeBulkRecordError';\n    this.errors = error;\n    this.record = record;\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\nexports.BulkRecordError = BulkRecordError;\n"]},"metadata":{},"sourceType":"script"}
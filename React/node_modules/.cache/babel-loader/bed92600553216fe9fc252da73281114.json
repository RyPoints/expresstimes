{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst inherits = require('../../utils/inherits');\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'https://www.sqlite.org/datatype3.html');\n  /**\n   * @see https://sqlite.org/datatype3.html\n   */\n\n  BaseTypes.DATE.types.sqlite = ['DATETIME'];\n  BaseTypes.STRING.types.sqlite = ['VARCHAR', 'VARCHAR BINARY'];\n  BaseTypes.CHAR.types.sqlite = ['CHAR', 'CHAR BINARY'];\n  BaseTypes.TEXT.types.sqlite = ['TEXT'];\n  BaseTypes.TINYINT.types.sqlite = ['TINYINT'];\n  BaseTypes.SMALLINT.types.sqlite = ['SMALLINT'];\n  BaseTypes.MEDIUMINT.types.sqlite = ['MEDIUMINT'];\n  BaseTypes.INTEGER.types.sqlite = ['INTEGER'];\n  BaseTypes.BIGINT.types.sqlite = ['BIGINT'];\n  BaseTypes.FLOAT.types.sqlite = ['FLOAT'];\n  BaseTypes.TIME.types.sqlite = ['TIME'];\n  BaseTypes.DATEONLY.types.sqlite = ['DATE'];\n  BaseTypes.BOOLEAN.types.sqlite = ['TINYINT'];\n  BaseTypes.BLOB.types.sqlite = ['TINYBLOB', 'BLOB', 'LONGBLOB'];\n  BaseTypes.DECIMAL.types.sqlite = ['DECIMAL'];\n  BaseTypes.UUID.types.sqlite = ['UUID'];\n  BaseTypes.ENUM.types.sqlite = false;\n  BaseTypes.REAL.types.sqlite = ['REAL'];\n  BaseTypes.DOUBLE.types.sqlite = ['DOUBLE PRECISION'];\n  BaseTypes.GEOMETRY.types.sqlite = false;\n  BaseTypes.JSON.types.sqlite = ['JSON', 'JSONB'];\n\n  function JSONTYPE() {\n    if (!(this instanceof JSONTYPE)) return new JSONTYPE();\n    BaseTypes.JSON.apply(this, arguments);\n  }\n\n  inherits(JSONTYPE, BaseTypes.JSON);\n\n  JSONTYPE.parse = function parse(data) {\n    return JSON.parse(data);\n  };\n\n  function DATE(length) {\n    if (!(this instanceof DATE)) return new DATE(length);\n    BaseTypes.DATE.apply(this, arguments);\n  }\n\n  inherits(DATE, BaseTypes.DATE);\n\n  DATE.parse = function parse(date, options) {\n    if (date.indexOf('+') === -1) {\n      // For backwards compat. Dates inserted by sequelize < 2.0dev12 will not have a timestamp set\n      return new Date(date + options.timezone);\n    } else {\n      return new Date(date); // We already have a timezone stored in the string\n    }\n  };\n\n  function DATEONLY() {\n    if (!(this instanceof DATEONLY)) return new DATEONLY();\n    BaseTypes.DATEONLY.apply(this, arguments);\n  }\n\n  inherits(DATEONLY, BaseTypes.DATEONLY);\n\n  DATEONLY.parse = function parse(date) {\n    return date;\n  };\n\n  function STRING(length, binary) {\n    if (!(this instanceof STRING)) return new STRING(length, binary);\n    BaseTypes.STRING.apply(this, arguments);\n  }\n\n  inherits(STRING, BaseTypes.STRING);\n\n  STRING.prototype.toSql = function toSql() {\n    if (this._binary) {\n      return 'VARCHAR BINARY(' + this._length + ')';\n    } else {\n      return BaseTypes.STRING.prototype.toSql.call(this);\n    }\n  };\n\n  function TEXT(length) {\n    if (!(this instanceof TEXT)) return new TEXT(length);\n    BaseTypes.TEXT.apply(this, arguments);\n  }\n\n  inherits(TEXT, BaseTypes.TEXT);\n\n  TEXT.prototype.toSql = function toSql() {\n    if (this._length) {\n      warn('SQLite does not support TEXT with options. Plain `TEXT` will be used instead.');\n      this._length = undefined;\n    }\n\n    return 'TEXT';\n  };\n\n  function CHAR(length, binary) {\n    if (!(this instanceof CHAR)) return new CHAR(length, binary);\n    BaseTypes.CHAR.apply(this, arguments);\n  }\n\n  inherits(CHAR, BaseTypes.CHAR);\n\n  CHAR.prototype.toSql = function toSql() {\n    if (this._binary) {\n      return 'CHAR BINARY(' + this._length + ')';\n    } else {\n      return BaseTypes.CHAR.prototype.toSql.call(this);\n    }\n  };\n\n  function NUMBER(options) {\n    if (!(this instanceof NUMBER)) return new NUMBER(options);\n    BaseTypes.NUMBER.apply(this, arguments);\n  }\n\n  inherits(NUMBER, BaseTypes.NUMBER);\n\n  NUMBER.prototype.toSql = function toSql() {\n    let result = this.key;\n\n    if (this._unsigned) {\n      result += ' UNSIGNED';\n    }\n\n    if (this._zerofill) {\n      result += ' ZEROFILL';\n    }\n\n    if (this._length) {\n      result += '(' + this._length;\n\n      if (typeof this._decimals === 'number') {\n        result += ',' + this._decimals;\n      }\n\n      result += ')';\n    }\n\n    return result;\n  };\n\n  function TINYINT(length) {\n    if (!(this instanceof TINYINT)) return new TINYINT(length);\n    BaseTypes.TINYINT.apply(this, arguments);\n  }\n\n  inherits(TINYINT, BaseTypes.TINYINT);\n\n  TINYINT.prototype.toSql = function toSql() {\n    return NUMBER.prototype.toSql.call(this);\n  };\n\n  function SMALLINT(length) {\n    if (!(this instanceof SMALLINT)) return new SMALLINT(length);\n    BaseTypes.SMALLINT.apply(this, arguments);\n  }\n\n  inherits(SMALLINT, BaseTypes.SMALLINT);\n\n  SMALLINT.prototype.toSql = function toSql() {\n    return NUMBER.prototype.toSql.call(this);\n  };\n\n  function MEDIUMINT(length) {\n    if (!(this instanceof MEDIUMINT)) return new MEDIUMINT(length);\n    BaseTypes.MEDIUMINT.apply(this, arguments);\n  }\n\n  inherits(MEDIUMINT, BaseTypes.MEDIUMINT);\n\n  MEDIUMINT.prototype.toSql = function toSql() {\n    return NUMBER.prototype.toSql.call(this);\n  };\n\n  function INTEGER(length) {\n    if (!(this instanceof INTEGER)) return new INTEGER(length);\n    BaseTypes.INTEGER.apply(this, arguments);\n  }\n\n  inherits(INTEGER, BaseTypes.INTEGER);\n\n  INTEGER.prototype.toSql = function toSql() {\n    return NUMBER.prototype.toSql.call(this);\n  };\n\n  function BIGINT(length) {\n    if (!(this instanceof BIGINT)) return new BIGINT(length);\n    BaseTypes.BIGINT.apply(this, arguments);\n  }\n\n  inherits(BIGINT, BaseTypes.BIGINT);\n\n  BIGINT.prototype.toSql = function toSql() {\n    return NUMBER.prototype.toSql.call(this);\n  };\n\n  function FLOAT(length, decimals) {\n    if (!(this instanceof FLOAT)) return new FLOAT(length, decimals);\n    BaseTypes.FLOAT.apply(this, arguments);\n  }\n\n  inherits(FLOAT, BaseTypes.FLOAT);\n\n  FLOAT.prototype.toSql = function toSql() {\n    return NUMBER.prototype.toSql.call(this);\n  };\n\n  function DOUBLE(length, decimals) {\n    if (!(this instanceof DOUBLE)) return new DOUBLE(length, decimals);\n    BaseTypes.DOUBLE.apply(this, arguments);\n  }\n\n  inherits(DOUBLE, BaseTypes.DOUBLE);\n\n  DOUBLE.prototype.toSql = function toSql() {\n    return NUMBER.prototype.toSql.call(this);\n  };\n\n  function REAL(length, decimals) {\n    if (!(this instanceof REAL)) return new REAL(length, decimals);\n    BaseTypes.REAL.apply(this, arguments);\n  }\n\n  inherits(REAL, BaseTypes.REAL);\n\n  REAL.prototype.toSql = function toSql() {\n    return NUMBER.prototype.toSql.call(this);\n  };\n\n  [FLOAT, DOUBLE, REAL].forEach(floating => {\n    floating.parse = function parse(value) {\n      if (_.isString(value)) {\n        if (value === 'NaN') {\n          return NaN;\n        } else if (value === 'Infinity') {\n          return Infinity;\n        } else if (value === '-Infinity') {\n          return -Infinity;\n        }\n      }\n\n      return value;\n    };\n  });\n\n  function ENUM() {\n    if (!(this instanceof ENUM)) {\n      const obj = Object.create(ENUM.prototype);\n      ENUM.apply(obj, arguments);\n      return obj;\n    }\n\n    BaseTypes.ENUM.apply(this, arguments);\n  }\n\n  inherits(ENUM, BaseTypes.ENUM);\n\n  ENUM.prototype.toSql = function toSql() {\n    return 'TEXT';\n  };\n\n  const exports = {\n    DATE,\n    DATEONLY,\n    STRING,\n    CHAR,\n    NUMBER,\n    FLOAT,\n    REAL,\n    'DOUBLE PRECISION': DOUBLE,\n    TINYINT,\n    SMALLINT,\n    MEDIUMINT,\n    INTEGER,\n    BIGINT,\n    TEXT,\n    ENUM,\n    JSON: JSONTYPE\n  };\n\n  _.forIn(exports, (DataType, key) => {\n    if (!DataType.key) DataType.key = key;\n\n    if (!DataType.extend) {\n      DataType.extend = oldType => {\n        return new DataType(oldType.options);\n      };\n    }\n  });\n\n  return exports;\n};","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/sequelize/lib/dialects/sqlite/data-types.js"],"names":["_","require","inherits","module","exports","BaseTypes","warn","ABSTRACT","bind","undefined","DATE","types","sqlite","STRING","CHAR","TEXT","TINYINT","SMALLINT","MEDIUMINT","INTEGER","BIGINT","FLOAT","TIME","DATEONLY","BOOLEAN","BLOB","DECIMAL","UUID","ENUM","REAL","DOUBLE","GEOMETRY","JSON","JSONTYPE","apply","arguments","parse","data","length","date","options","indexOf","Date","timezone","binary","prototype","toSql","_binary","_length","call","NUMBER","result","key","_unsigned","_zerofill","_decimals","decimals","forEach","floating","value","isString","NaN","Infinity","obj","Object","create","forIn","DataType","extend","oldType"],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst inherits = require('../../utils/inherits');\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'https://www.sqlite.org/datatype3.html');\n\n  /**\n   * @see https://sqlite.org/datatype3.html\n   */\n\n  BaseTypes.DATE.types.sqlite = ['DATETIME'];\n  BaseTypes.STRING.types.sqlite = ['VARCHAR', 'VARCHAR BINARY'];\n  BaseTypes.CHAR.types.sqlite = ['CHAR', 'CHAR BINARY'];\n  BaseTypes.TEXT.types.sqlite = ['TEXT'];\n  BaseTypes.TINYINT.types.sqlite = ['TINYINT'];\n  BaseTypes.SMALLINT.types.sqlite = ['SMALLINT'];\n  BaseTypes.MEDIUMINT.types.sqlite = ['MEDIUMINT'];\n  BaseTypes.INTEGER.types.sqlite = ['INTEGER'];\n  BaseTypes.BIGINT.types.sqlite = ['BIGINT'];\n  BaseTypes.FLOAT.types.sqlite = ['FLOAT'];\n  BaseTypes.TIME.types.sqlite = ['TIME'];\n  BaseTypes.DATEONLY.types.sqlite = ['DATE'];\n  BaseTypes.BOOLEAN.types.sqlite = ['TINYINT'];\n  BaseTypes.BLOB.types.sqlite = ['TINYBLOB', 'BLOB', 'LONGBLOB'];\n  BaseTypes.DECIMAL.types.sqlite = ['DECIMAL'];\n  BaseTypes.UUID.types.sqlite = ['UUID'];\n  BaseTypes.ENUM.types.sqlite = false;\n  BaseTypes.REAL.types.sqlite = ['REAL'];\n  BaseTypes.DOUBLE.types.sqlite = ['DOUBLE PRECISION'];\n  BaseTypes.GEOMETRY.types.sqlite = false;\n  BaseTypes.JSON.types.sqlite = ['JSON', 'JSONB'];\n\n  function JSONTYPE() {\n    if (!(this instanceof JSONTYPE)) return new JSONTYPE();\n    BaseTypes.JSON.apply(this, arguments);\n  }\n  inherits(JSONTYPE, BaseTypes.JSON);\n\n  JSONTYPE.parse = function parse(data) {\n    return JSON.parse(data);\n  };\n\n  function DATE(length) {\n    if (!(this instanceof DATE)) return new DATE(length);\n    BaseTypes.DATE.apply(this, arguments);\n  }\n  inherits(DATE, BaseTypes.DATE);\n\n  DATE.parse = function parse(date, options) {\n    if (date.indexOf('+') === -1) {\n      // For backwards compat. Dates inserted by sequelize < 2.0dev12 will not have a timestamp set\n      return new Date(date + options.timezone);\n    } else {\n      return new Date(date); // We already have a timezone stored in the string\n    }\n  };\n\n  function DATEONLY() {\n    if (!(this instanceof DATEONLY)) return new DATEONLY();\n    BaseTypes.DATEONLY.apply(this, arguments);\n  }\n  inherits(DATEONLY, BaseTypes.DATEONLY);\n\n  DATEONLY.parse = function parse(date) {\n    return date;\n  };\n\n  function STRING(length, binary) {\n    if (!(this instanceof STRING)) return new STRING(length, binary);\n    BaseTypes.STRING.apply(this, arguments);\n  }\n  inherits(STRING, BaseTypes.STRING);\n\n  STRING.prototype.toSql = function toSql() {\n    if (this._binary) {\n      return 'VARCHAR BINARY(' + this._length + ')';\n    } else {\n      return BaseTypes.STRING.prototype.toSql.call(this);\n    }\n  };\n\n  function TEXT(length) {\n    if (!(this instanceof TEXT)) return new TEXT(length);\n    BaseTypes.TEXT.apply(this, arguments);\n  }\n  inherits(TEXT, BaseTypes.TEXT);\n\n  TEXT.prototype.toSql = function toSql() {\n    if (this._length) {\n      warn('SQLite does not support TEXT with options. Plain `TEXT` will be used instead.');\n      this._length = undefined;\n    }\n    return 'TEXT';\n  };\n\n  function CHAR(length, binary) {\n    if (!(this instanceof CHAR)) return new CHAR(length, binary);\n    BaseTypes.CHAR.apply(this, arguments);\n  }\n  inherits(CHAR, BaseTypes.CHAR);\n\n  CHAR.prototype.toSql = function toSql() {\n    if (this._binary) {\n      return 'CHAR BINARY(' + this._length + ')';\n    } else {\n      return BaseTypes.CHAR.prototype.toSql.call(this);\n    }\n  };\n\n  function NUMBER(options) {\n    if (!(this instanceof NUMBER)) return new NUMBER(options);\n    BaseTypes.NUMBER.apply(this, arguments);\n  }\n  inherits(NUMBER, BaseTypes.NUMBER);\n\n  NUMBER.prototype.toSql = function toSql() {\n    let result = this.key;\n\n    if (this._unsigned) {\n      result += ' UNSIGNED';\n    }\n    if (this._zerofill) {\n      result += ' ZEROFILL';\n    }\n\n    if (this._length) {\n      result += '(' + this._length;\n      if (typeof this._decimals === 'number') {\n        result += ',' + this._decimals;\n      }\n      result += ')';\n    }\n    return result;\n  };\n\n  function TINYINT(length) {\n    if (!(this instanceof TINYINT)) return new TINYINT(length);\n    BaseTypes.TINYINT.apply(this, arguments);\n  }\n  inherits(TINYINT, BaseTypes.TINYINT);\n\n  TINYINT.prototype.toSql = function toSql() {\n    return NUMBER.prototype.toSql.call(this);\n  };\n\n  function SMALLINT(length) {\n    if (!(this instanceof SMALLINT)) return new SMALLINT(length);\n    BaseTypes.SMALLINT.apply(this, arguments);\n  }\n  inherits(SMALLINT, BaseTypes.SMALLINT);\n\n  SMALLINT.prototype.toSql = function toSql() {\n    return NUMBER.prototype.toSql.call(this);\n  };\n\n  function MEDIUMINT(length) {\n    if (!(this instanceof MEDIUMINT)) return new MEDIUMINT(length);\n    BaseTypes.MEDIUMINT.apply(this, arguments);\n  }\n  inherits(MEDIUMINT, BaseTypes.MEDIUMINT);\n\n  MEDIUMINT.prototype.toSql = function toSql() {\n    return NUMBER.prototype.toSql.call(this);\n  };\n\n  function INTEGER(length) {\n    if (!(this instanceof INTEGER)) return new INTEGER(length);\n    BaseTypes.INTEGER.apply(this, arguments);\n  }\n  inherits(INTEGER, BaseTypes.INTEGER);\n\n  INTEGER.prototype.toSql = function toSql() {\n    return NUMBER.prototype.toSql.call(this);\n  };\n\n  function BIGINT(length) {\n    if (!(this instanceof BIGINT)) return new BIGINT(length);\n    BaseTypes.BIGINT.apply(this, arguments);\n  }\n  inherits(BIGINT, BaseTypes.BIGINT);\n\n  BIGINT.prototype.toSql = function toSql() {\n    return NUMBER.prototype.toSql.call(this);\n  };\n\n  function FLOAT(length, decimals) {\n    if (!(this instanceof FLOAT)) return new FLOAT(length, decimals);\n    BaseTypes.FLOAT.apply(this, arguments);\n  }\n  inherits(FLOAT, BaseTypes.FLOAT);\n  FLOAT.prototype.toSql = function toSql() {\n    return NUMBER.prototype.toSql.call(this);\n  };\n\n  function DOUBLE(length, decimals) {\n    if (!(this instanceof DOUBLE)) return new DOUBLE(length, decimals);\n    BaseTypes.DOUBLE.apply(this, arguments);\n  }\n  inherits(DOUBLE, BaseTypes.DOUBLE);\n  DOUBLE.prototype.toSql = function toSql() {\n    return NUMBER.prototype.toSql.call(this);\n  };\n\n  function REAL(length, decimals) {\n    if (!(this instanceof REAL)) return new REAL(length, decimals);\n    BaseTypes.REAL.apply(this, arguments);\n  }\n  inherits(REAL, BaseTypes.REAL);\n  REAL.prototype.toSql = function toSql() {\n    return NUMBER.prototype.toSql.call(this);\n  };\n\n  [FLOAT, DOUBLE, REAL].forEach(floating => {\n    floating.parse = function parse(value) {\n      if (_.isString(value)) {\n        if (value === 'NaN') {\n          return NaN;\n        } else if (value === 'Infinity') {\n          return Infinity;\n        } else if (value === '-Infinity') {\n          return -Infinity;\n        }\n      }\n      return value;\n    };\n  });\n\n  function ENUM() {\n    if (!(this instanceof ENUM)) {\n      const obj = Object.create(ENUM.prototype);\n      ENUM.apply(obj, arguments);\n      return obj;\n    }\n    BaseTypes.ENUM.apply(this, arguments);\n  }\n  inherits(ENUM, BaseTypes.ENUM);\n\n  ENUM.prototype.toSql = function toSql() {\n    return 'TEXT';\n  };\n\n  const exports = {\n    DATE,\n    DATEONLY,\n    STRING,\n    CHAR,\n    NUMBER,\n    FLOAT,\n    REAL,\n    'DOUBLE PRECISION': DOUBLE,\n    TINYINT,\n    SMALLINT,\n    MEDIUMINT,\n    INTEGER,\n    BIGINT,\n    TEXT,\n    ENUM,\n    JSON: JSONTYPE\n  };\n\n  _.forIn(exports, (DataType, key) => {\n    if (!DataType.key) DataType.key = key;\n    if (!DataType.extend) {\n      DataType.extend = oldType => {\n        return new DataType(oldType.options);\n      };\n    }\n  });\n\n  return exports;\n\n};\n"]},"metadata":{},"sourceType":"script"}
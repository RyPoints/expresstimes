{"ast":null,"code":"/*\r\n * @copyright\r\n * Copyright Â© Microsoft Open Technologies, Inc.\r\n *\r\n * All Rights Reserved\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http: *www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS\r\n * OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION\r\n * ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A\r\n * PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.\r\n *\r\n * See the Apache License, Version 2.0 for the specific language\r\n * governing permissions and limitations under the License.\r\n */\n'use strict';\n\nvar _ = require('underscore');\n\nvar adalIdConstants = require('./constants').AdalIdParameters;\n\nvar os = require('os');\n\nvar url = require('url');\n\nvar ADAL_VERSION;\n/**\r\n * @namespace  Util\r\n * @private\r\n */\n\nfunction loadAdalVersion() {\n  ADAL_VERSION = require('../package.json').version;\n}\n\nfunction adalInit() {\n  loadAdalVersion();\n}\n/**\r\n * @static\r\n * @memberOf Util\r\n * @param {string|int}   statusCode  An HTTP status code.\r\n */\n\n\nfunction isHttpSuccess(statusCode) {\n  return statusCode >= 200 && statusCode < 300;\n}\n\nfunction addDefaultRequestHeaders(self, options) {\n  if (!options.headers) {\n    options.headers = {};\n  }\n\n  var headers = options.headers;\n\n  if (!headers['Accept-Charset']) {\n    headers['Accept-Charset'] = 'utf-8';\n  }\n\n  headers['client-request-id'] = self._callContext._logContext.correlationId;\n  headers['return-client-request-id'] = 'true'; // ADAL Id headers\n\n  headers[adalIdConstants.SKU] = adalIdConstants.NODE_SKU;\n  headers[adalIdConstants.VERSION] = ADAL_VERSION;\n  headers[adalIdConstants.OS] = os.platform();\n  headers[adalIdConstants.CPU] = os.arch();\n}\n/**\r\n* Central place for housing default request options.  This is a place holder\r\n* for when SSL validation is implemented an all requests are subject to that\r\n* policy.\r\n* @static\r\n* @memberOf Util\r\n* @param {object} options   A set of options that will be merged with teh default options\r\n*                           These will override any default options.\r\n* @returns {object}         Returns the merged options.\r\n*/\n\n\nfunction createRequestOptions(self, options) {\n  var defaultOptions = {}; //{ strictSSL : true };\n\n  var mergedOptions = defaultOptions;\n\n  if (options) {\n    _.extend(mergedOptions, options);\n  }\n\n  if (self._callContext.options && self._callContext.options.http) {\n    _.extend(mergedOptions, self._callContext.options.http);\n  }\n\n  addDefaultRequestHeaders(self, mergedOptions);\n  return mergedOptions;\n}\n\nfunction logReturnCorrelationId(log, operationMessage, response) {\n  if (response && response.headers && response.headers['client-request-id']) {\n    log.info(operationMessage + 'Server returned this correlationId: ' + response.headers['client-request-id'], true);\n  }\n}\n/**\r\n* Creates a function that can be used as the callback for http request operations.  This is meant\r\n* to centralize error handling in one place.\r\n* @static\r\n* @memberOf Util\r\n* @param {string} operationMessage  A message to be prepended to logged error strings.  This should be something like 'Mex Request'\r\n*                                   and summarize the purpose of the http request.\r\n* @param {object} log               A Logger object being used by the calling component.\r\n* @param {Util.CreateRequestHandlerErrorCallback}    errorCallback   Called in the event of an error.\r\n* @param {Util.CreateRequestHandlerSuccessCallabck}  successCallback Called on successfull completion of the request.\r\n*/\n\n\nfunction createRequestHandler(operationMessage, log, errorCallback, successCallback) {\n  return function (err, response, body) {\n    logReturnCorrelationId(log, operationMessage, response);\n\n    if (err) {\n      log.error(operationMessage + ' request failed with', err, true);\n      errorCallback(err);\n      return;\n    }\n\n    if (!isHttpSuccess(response.statusCode)) {\n      var returnErrorString = operationMessage + ' request returned http error: ' + response.statusCode;\n      var errorResponse;\n\n      if (body) {\n        returnErrorString += ' and server response: ' + body;\n\n        try {\n          errorResponse = JSON.parse(body);\n        } catch (e) {// No problem if it doesn't parse.\n        }\n      }\n\n      errorCallback(log.createError(returnErrorString, true), errorResponse);\n      return;\n    }\n\n    successCallback(response, body);\n  };\n}\n/**\r\n* @callback CreateRequestHandlerErrorCallback\r\n* @memberOf Util\r\n* @param {Error}  error  An error object.\r\n*/\n\n/**\r\n* @callback CreateRequestHandlerSuccessCallabck\r\n* @memberOf Util\r\n* @param {object} response    The response object returned from request.\r\n* @param {string} body        The body of the http response.\r\n*/\n\n/**\r\n* Deep copies a url object.\r\n* @static\r\n* @memberOf Util\r\n* @param {URL} urlSource   The source url object to copy.\r\n* @returns {URL}           A deep copy of sourceUrl.\r\n*/\n\n\nfunction copyUrl(urlSource) {\n  return url.parse(url.format(urlSource));\n}\n\nfunction convertUrlSafeToRegularBase64EncodedString(str) {\n  return str.replace(/-/g, '+').replace(/_/g, '/');\n}\n\nfunction convertRegularToUrlSafeBase64EncodedString(str) {\n  return str.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n\nfunction base64DecodeStringUrlSafe(str) {\n  var base64 = convertUrlSafeToRegularBase64EncodedString(str);\n  return new Buffer(base64, 'base64').toString('utf8');\n}\n\nfunction base64EncodeStringUrlSafe(str) {\n  var base64 = new Buffer(str, 'utf8').toString('base64');\n  var converted = convertRegularToUrlSafeBase64EncodedString(base64);\n  return converted;\n}\n\nmodule.exports.adalInit = adalInit;\nmodule.exports.isHttpSuccess = isHttpSuccess;\nmodule.exports.createRequestHandler = createRequestHandler;\nmodule.exports.createRequestOptions = createRequestOptions;\nmodule.exports.copyUrl = copyUrl;\nmodule.exports.base64DecodeStringUrlSafe = base64DecodeStringUrlSafe;\nmodule.exports.base64EncodeStringUrlSafe = base64EncodeStringUrlSafe;\nmodule.exports.convertRegularToUrlSafeBase64EncodedString = convertRegularToUrlSafeBase64EncodedString;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/adal-node/lib/util.js"],"names":["_","require","adalIdConstants","AdalIdParameters","os","url","ADAL_VERSION","loadAdalVersion","version","adalInit","isHttpSuccess","statusCode","addDefaultRequestHeaders","self","options","headers","_callContext","_logContext","correlationId","SKU","NODE_SKU","VERSION","OS","platform","CPU","arch","createRequestOptions","defaultOptions","mergedOptions","extend","http","logReturnCorrelationId","log","operationMessage","response","info","createRequestHandler","errorCallback","successCallback","err","body","error","returnErrorString","errorResponse","JSON","parse","e","createError","copyUrl","urlSource","format","convertUrlSafeToRegularBase64EncodedString","str","replace","convertRegularToUrlSafeBase64EncodedString","base64DecodeStringUrlSafe","base64","Buffer","toString","base64EncodeStringUrlSafe","converted","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * @copyright\r\n * Copyright Â© Microsoft Open Technologies, Inc.\r\n *\r\n * All Rights Reserved\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http: *www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS\r\n * OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION\r\n * ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A\r\n * PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.\r\n *\r\n * See the Apache License, Version 2.0 for the specific language\r\n * governing permissions and limitations under the License.\r\n */\r\n'use strict';\r\n\r\nvar _ = require('underscore');\r\nvar adalIdConstants = require('./constants').AdalIdParameters;\r\nvar os = require('os');\r\nvar url = require('url');\r\n\r\nvar ADAL_VERSION;\r\n\r\n/**\r\n * @namespace  Util\r\n * @private\r\n */\r\n\r\nfunction loadAdalVersion() {\r\n  ADAL_VERSION = require('../package.json').version;\r\n}\r\n\r\nfunction adalInit() {\r\n  loadAdalVersion();\r\n}\r\n\r\n/**\r\n * @static\r\n * @memberOf Util\r\n * @param {string|int}   statusCode  An HTTP status code.\r\n */\r\nfunction isHttpSuccess(statusCode) {\r\n  return statusCode >= 200 && statusCode < 300;\r\n}\r\n\r\nfunction addDefaultRequestHeaders (self, options) {\r\n  if (!options.headers) {\r\n    options.headers = {};\r\n  }\r\n  var headers = options.headers;\r\n  if (!headers['Accept-Charset']) {\r\n    headers['Accept-Charset'] = 'utf-8';\r\n  }\r\n  headers['client-request-id'] = self._callContext._logContext.correlationId;\r\n  headers['return-client-request-id'] = 'true';\r\n\r\n  // ADAL Id headers\r\n  headers[adalIdConstants.SKU] = adalIdConstants.NODE_SKU;\r\n  headers[adalIdConstants.VERSION] = ADAL_VERSION;\r\n  headers[adalIdConstants.OS] = os.platform();\r\n  headers[adalIdConstants.CPU] = os.arch();\r\n}\r\n\r\n/**\r\n* Central place for housing default request options.  This is a place holder\r\n* for when SSL validation is implemented an all requests are subject to that\r\n* policy.\r\n* @static\r\n* @memberOf Util\r\n* @param {object} options   A set of options that will be merged with teh default options\r\n*                           These will override any default options.\r\n* @returns {object}         Returns the merged options.\r\n*/\r\nfunction createRequestOptions(self, options) {\r\n  var defaultOptions = {}; //{ strictSSL : true };\r\n  var mergedOptions = defaultOptions;\r\n  if (options) {\r\n    _.extend(mergedOptions, options);\r\n  }\r\n  if (self._callContext.options && self._callContext.options.http) {\r\n    _.extend(mergedOptions, self._callContext.options.http);\r\n  }\r\n\r\n  addDefaultRequestHeaders(self, mergedOptions);\r\n  return mergedOptions;\r\n}\r\n\r\nfunction logReturnCorrelationId(log, operationMessage, response) {\r\n  if (response && response.headers && response.headers['client-request-id']) {\r\n    log.info(operationMessage + 'Server returned this correlationId: ' + response.headers['client-request-id'], true);\r\n  }\r\n}\r\n\r\n/**\r\n* Creates a function that can be used as the callback for http request operations.  This is meant\r\n* to centralize error handling in one place.\r\n* @static\r\n* @memberOf Util\r\n* @param {string} operationMessage  A message to be prepended to logged error strings.  This should be something like 'Mex Request'\r\n*                                   and summarize the purpose of the http request.\r\n* @param {object} log               A Logger object being used by the calling component.\r\n* @param {Util.CreateRequestHandlerErrorCallback}    errorCallback   Called in the event of an error.\r\n* @param {Util.CreateRequestHandlerSuccessCallabck}  successCallback Called on successfull completion of the request.\r\n*/\r\nfunction createRequestHandler(operationMessage, log, errorCallback, successCallback) {\r\n  return function(err, response, body) {\r\n    logReturnCorrelationId(log, operationMessage, response);\r\n    if (err) {\r\n      log.error(operationMessage + ' request failed with', err, true);\r\n      errorCallback(err);\r\n      return;\r\n    }\r\n    if (!isHttpSuccess(response.statusCode)) {\r\n      var returnErrorString = operationMessage + ' request returned http error: ' + response.statusCode;\r\n      var errorResponse;\r\n      if (body) {\r\n        returnErrorString += ' and server response: ' + body;\r\n        try {\r\n          errorResponse = JSON.parse(body);\r\n        } catch (e) {\r\n          // No problem if it doesn't parse.\r\n        }\r\n      }\r\n      errorCallback(log.createError(returnErrorString, true), errorResponse);\r\n      return;\r\n    }\r\n\r\n    successCallback(response, body);\r\n  };\r\n}\r\n\r\n/**\r\n* @callback CreateRequestHandlerErrorCallback\r\n* @memberOf Util\r\n* @param {Error}  error  An error object.\r\n*/\r\n\r\n/**\r\n* @callback CreateRequestHandlerSuccessCallabck\r\n* @memberOf Util\r\n* @param {object} response    The response object returned from request.\r\n* @param {string} body        The body of the http response.\r\n*/\r\n\r\n/**\r\n* Deep copies a url object.\r\n* @static\r\n* @memberOf Util\r\n* @param {URL} urlSource   The source url object to copy.\r\n* @returns {URL}           A deep copy of sourceUrl.\r\n*/\r\nfunction copyUrl(urlSource) {\r\n  return url.parse(url.format(urlSource));\r\n}\r\n\r\nfunction convertUrlSafeToRegularBase64EncodedString(str) {\r\n  return str.replace(/-/g, '+').replace(/_/g, '/');\r\n}\r\n\r\nfunction convertRegularToUrlSafeBase64EncodedString(str) {\r\n  return str.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\r\n}\r\n\r\nfunction base64DecodeStringUrlSafe(str) {\r\n  var base64 = convertUrlSafeToRegularBase64EncodedString(str);\r\n  return (new Buffer(base64, 'base64')).toString('utf8');\r\n}\r\n\r\nfunction base64EncodeStringUrlSafe(str) {\r\n  var base64 = (new Buffer(str, 'utf8').toString('base64'));\r\n  var converted = convertRegularToUrlSafeBase64EncodedString(base64);\r\n  return converted;\r\n}\r\n\r\nmodule.exports.adalInit = adalInit;\r\nmodule.exports.isHttpSuccess = isHttpSuccess;\r\nmodule.exports.createRequestHandler = createRequestHandler;\r\nmodule.exports.createRequestOptions = createRequestOptions;\r\nmodule.exports.copyUrl = copyUrl;\r\nmodule.exports.base64DecodeStringUrlSafe = base64DecodeStringUrlSafe;\r\nmodule.exports.base64EncodeStringUrlSafe = base64EncodeStringUrlSafe;\r\nmodule.exports.convertRegularToUrlSafeBase64EncodedString = convertRegularToUrlSafeBase64EncodedString;"]},"metadata":{},"sourceType":"script"}
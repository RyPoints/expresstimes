{"ast":null,"code":"'use strict';\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'https://www.sqlite.org/datatype3.html');\n  /**\n   * Removes unsupported SQLite options, i.e., UNSIGNED and ZEROFILL, for the integer data types.\n   *\n   * @param {Object} dataType The base integer data type.\n   * @private\n   */\n\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._zerofill || dataType._unsigned) {\n      warn(`SQLite does not support '${dataType.key}' with UNSIGNED or ZEROFILL. Plain '${dataType.key}' will be used instead.`);\n      dataType._unsigned = undefined;\n      dataType._zerofill = undefined;\n    }\n  }\n  /**\n   * @see https://sqlite.org/datatype3.html\n   */\n\n\n  BaseTypes.DATE.types.sqlite = ['DATETIME'];\n  BaseTypes.STRING.types.sqlite = ['VARCHAR', 'VARCHAR BINARY'];\n  BaseTypes.CHAR.types.sqlite = ['CHAR', 'CHAR BINARY'];\n  BaseTypes.TEXT.types.sqlite = ['TEXT'];\n  BaseTypes.TINYINT.types.sqlite = ['TINYINT'];\n  BaseTypes.SMALLINT.types.sqlite = ['SMALLINT'];\n  BaseTypes.MEDIUMINT.types.sqlite = ['MEDIUMINT'];\n  BaseTypes.INTEGER.types.sqlite = ['INTEGER'];\n  BaseTypes.BIGINT.types.sqlite = ['BIGINT'];\n  BaseTypes.FLOAT.types.sqlite = ['FLOAT'];\n  BaseTypes.TIME.types.sqlite = ['TIME'];\n  BaseTypes.DATEONLY.types.sqlite = ['DATE'];\n  BaseTypes.BOOLEAN.types.sqlite = ['TINYINT'];\n  BaseTypes.BLOB.types.sqlite = ['TINYBLOB', 'BLOB', 'LONGBLOB'];\n  BaseTypes.DECIMAL.types.sqlite = ['DECIMAL'];\n  BaseTypes.UUID.types.sqlite = ['UUID'];\n  BaseTypes.ENUM.types.sqlite = false;\n  BaseTypes.REAL.types.sqlite = ['REAL'];\n  BaseTypes.DOUBLE.types.sqlite = ['DOUBLE PRECISION'];\n  BaseTypes.GEOMETRY.types.sqlite = false;\n  BaseTypes.JSON.types.sqlite = ['JSON', 'JSONB'];\n\n  class JSONTYPE extends BaseTypes.JSON {\n    static parse(data) {\n      return JSON.parse(data);\n    }\n\n  }\n\n  class DATE extends BaseTypes.DATE {\n    static parse(date, options) {\n      if (!date.includes('+')) {\n        // For backwards compat. Dates inserted by sequelize < 2.0dev12 will not have a timestamp set\n        return new Date(date + options.timezone);\n      }\n\n      return new Date(date); // We already have a timezone stored in the string\n    }\n\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(date) {\n      return date;\n    }\n\n  }\n\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (this._binary) {\n        return `VARCHAR BINARY(${this._length})`;\n      }\n\n      return super.toSql(this);\n    }\n\n  }\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      if (this._length) {\n        warn('SQLite does not support TEXT with options. Plain `TEXT` will be used instead.');\n        this._length = undefined;\n      }\n\n      return 'TEXT';\n    }\n\n  }\n\n  class CITEXT extends BaseTypes.CITEXT {\n    toSql() {\n      return 'TEXT COLLATE NOCASE';\n    }\n\n  }\n\n  class CHAR extends BaseTypes.CHAR {\n    toSql() {\n      if (this._binary) {\n        return `CHAR BINARY(${this._length})`;\n      }\n\n      return super.toSql();\n    }\n\n  }\n\n  class NUMBER extends BaseTypes.NUMBER {\n    toSql() {\n      let result = this.key;\n\n      if (this._unsigned) {\n        result += ' UNSIGNED';\n      }\n\n      if (this._zerofill) {\n        result += ' ZEROFILL';\n      }\n\n      if (this._length) {\n        result += `(${this._length}`;\n\n        if (typeof this._decimals === 'number') {\n          result += `,${this._decimals}`;\n        }\n\n        result += ')';\n      }\n\n      return result;\n    }\n\n  }\n\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  class MEDIUMINT extends BaseTypes.MEDIUMINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  class FLOAT extends BaseTypes.FLOAT {}\n\n  class DOUBLE extends BaseTypes.DOUBLE {}\n\n  class REAL extends BaseTypes.REAL {}\n\n  function parseFloating(value) {\n    if (typeof value !== 'string') {\n      return value;\n    }\n\n    if (value === 'NaN') {\n      return NaN;\n    }\n\n    if (value === 'Infinity') {\n      return Infinity;\n    }\n\n    if (value === '-Infinity') {\n      return -Infinity;\n    }\n  }\n\n  for (const floating of [FLOAT, DOUBLE, REAL]) {\n    floating.parse = parseFloating;\n  }\n\n  for (const num of [FLOAT, DOUBLE, REAL, TINYINT, SMALLINT, MEDIUMINT, INTEGER, BIGINT]) {\n    num.prototype.toSql = NUMBER.prototype.toSql;\n  }\n\n  class ENUM extends BaseTypes.ENUM {\n    toSql() {\n      return 'TEXT';\n    }\n\n  }\n\n  return {\n    DATE,\n    DATEONLY,\n    STRING,\n    CHAR,\n    NUMBER,\n    FLOAT,\n    REAL,\n    'DOUBLE PRECISION': DOUBLE,\n    TINYINT,\n    SMALLINT,\n    MEDIUMINT,\n    INTEGER,\n    BIGINT,\n    TEXT,\n    ENUM,\n    JSON: JSONTYPE,\n    CITEXT\n  };\n};","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/sequelize/lib/dialects/sqlite/data-types.js"],"names":["module","exports","BaseTypes","warn","ABSTRACT","bind","undefined","removeUnsupportedIntegerOptions","dataType","_zerofill","_unsigned","key","DATE","types","sqlite","STRING","CHAR","TEXT","TINYINT","SMALLINT","MEDIUMINT","INTEGER","BIGINT","FLOAT","TIME","DATEONLY","BOOLEAN","BLOB","DECIMAL","UUID","ENUM","REAL","DOUBLE","GEOMETRY","JSON","JSONTYPE","parse","data","date","options","includes","Date","timezone","toSql","_binary","_length","CITEXT","NUMBER","result","_decimals","constructor","length","parseFloating","value","NaN","Infinity","floating","num","prototype"],"mappings":"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","sourcesContent":["'use strict';\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'https://www.sqlite.org/datatype3.html');\n\n  /**\n   * Removes unsupported SQLite options, i.e., UNSIGNED and ZEROFILL, for the integer data types.\n   *\n   * @param {Object} dataType The base integer data type.\n   * @private\n   */\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._zerofill || dataType._unsigned) {\n      warn(`SQLite does not support '${dataType.key}' with UNSIGNED or ZEROFILL. Plain '${dataType.key}' will be used instead.`);\n      dataType._unsigned = undefined;\n      dataType._zerofill = undefined;\n    }\n  }\n\n  /**\n   * @see https://sqlite.org/datatype3.html\n   */\n\n  BaseTypes.DATE.types.sqlite = ['DATETIME'];\n  BaseTypes.STRING.types.sqlite = ['VARCHAR', 'VARCHAR BINARY'];\n  BaseTypes.CHAR.types.sqlite = ['CHAR', 'CHAR BINARY'];\n  BaseTypes.TEXT.types.sqlite = ['TEXT'];\n  BaseTypes.TINYINT.types.sqlite = ['TINYINT'];\n  BaseTypes.SMALLINT.types.sqlite = ['SMALLINT'];\n  BaseTypes.MEDIUMINT.types.sqlite = ['MEDIUMINT'];\n  BaseTypes.INTEGER.types.sqlite = ['INTEGER'];\n  BaseTypes.BIGINT.types.sqlite = ['BIGINT'];\n  BaseTypes.FLOAT.types.sqlite = ['FLOAT'];\n  BaseTypes.TIME.types.sqlite = ['TIME'];\n  BaseTypes.DATEONLY.types.sqlite = ['DATE'];\n  BaseTypes.BOOLEAN.types.sqlite = ['TINYINT'];\n  BaseTypes.BLOB.types.sqlite = ['TINYBLOB', 'BLOB', 'LONGBLOB'];\n  BaseTypes.DECIMAL.types.sqlite = ['DECIMAL'];\n  BaseTypes.UUID.types.sqlite = ['UUID'];\n  BaseTypes.ENUM.types.sqlite = false;\n  BaseTypes.REAL.types.sqlite = ['REAL'];\n  BaseTypes.DOUBLE.types.sqlite = ['DOUBLE PRECISION'];\n  BaseTypes.GEOMETRY.types.sqlite = false;\n  BaseTypes.JSON.types.sqlite = ['JSON', 'JSONB'];\n\n  class JSONTYPE extends BaseTypes.JSON {\n    static parse(data) {\n      return JSON.parse(data);\n    }\n  }\n\n  class DATE extends BaseTypes.DATE {\n    static parse(date, options) {\n      if (!date.includes('+')) {\n        // For backwards compat. Dates inserted by sequelize < 2.0dev12 will not have a timestamp set\n        return new Date(date + options.timezone);\n      }\n      return new Date(date); // We already have a timezone stored in the string\n    }\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(date) {\n      return date;\n    }\n  }\n\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (this._binary) {\n        return `VARCHAR BINARY(${this._length})`;\n      }\n      return super.toSql(this);\n    }\n  }\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      if (this._length) {\n        warn('SQLite does not support TEXT with options. Plain `TEXT` will be used instead.');\n        this._length = undefined;\n      }\n      return 'TEXT';\n    }\n  }\n\n  class CITEXT extends BaseTypes.CITEXT {\n    toSql() {\n      return 'TEXT COLLATE NOCASE';\n    }\n  }\n\n  class CHAR extends BaseTypes.CHAR {\n    toSql() {\n      if (this._binary) {\n        return `CHAR BINARY(${this._length})`;\n      }\n      return super.toSql();\n    }\n  }\n\n  class NUMBER extends BaseTypes.NUMBER {\n    toSql() {\n      let result = this.key;\n      if (this._unsigned) {\n        result += ' UNSIGNED';\n      }\n      if (this._zerofill) {\n        result += ' ZEROFILL';\n      }\n      if (this._length) {\n        result += `(${this._length}`;\n        if (typeof this._decimals === 'number') {\n          result += `,${this._decimals}`;\n        }\n        result += ')';\n      }\n      return result;\n    }\n  }\n\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class MEDIUMINT extends BaseTypes.MEDIUMINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class FLOAT extends BaseTypes.FLOAT {\n  }\n\n  class DOUBLE extends BaseTypes.DOUBLE {\n  }\n\n  class REAL extends BaseTypes.REAL { }\n\n  function parseFloating(value) {\n    if (typeof value !== 'string') {\n      return value;\n    }\n    if (value === 'NaN') {\n      return NaN;\n    }\n    if (value === 'Infinity') {\n      return Infinity;\n    }\n    if (value === '-Infinity') {\n      return -Infinity;\n    }\n  }\n  for (const floating of [FLOAT, DOUBLE, REAL]) {\n    floating.parse = parseFloating;\n  }\n\n\n  for (const num of [FLOAT, DOUBLE, REAL, TINYINT, SMALLINT, MEDIUMINT, INTEGER, BIGINT]) {\n    num.prototype.toSql = NUMBER.prototype.toSql;\n  }\n\n  class ENUM extends BaseTypes.ENUM {\n    toSql() {\n      return 'TEXT';\n    }\n  }\n\n  return {\n    DATE,\n    DATEONLY,\n    STRING,\n    CHAR,\n    NUMBER,\n    FLOAT,\n    REAL,\n    'DOUBLE PRECISION': DOUBLE,\n    TINYINT,\n    SMALLINT,\n    MEDIUMINT,\n    INTEGER,\n    BIGINT,\n    TEXT,\n    ENUM,\n    JSON: JSONTYPE,\n    CITEXT\n  };\n};\n"]},"metadata":{},"sourceType":"script"}
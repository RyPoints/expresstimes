{"ast":null,"code":"'use strict';\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\nvar net = require('net');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar util = require('util');\n\nvar Writer = require('buffer-writer');\n\nvar Reader = require('packet-reader');\n\nvar TEXT_MODE = 0;\nvar BINARY_MODE = 1;\n\nvar Connection = function (config) {\n  EventEmitter.call(this);\n  config = config || {};\n  this.stream = config.stream || new net.Socket();\n  this._keepAlive = config.keepAlive;\n  this._keepAliveInitialDelayMillis = config.keepAliveInitialDelayMillis;\n  this.lastBuffer = false;\n  this.lastOffset = 0;\n  this.buffer = null;\n  this.offset = null;\n  this.encoding = config.encoding || 'utf8';\n  this.parsedStatements = {};\n  this.writer = new Writer();\n  this.ssl = config.ssl || false;\n  this._ending = false;\n  this._mode = TEXT_MODE;\n  this._emitMessage = false;\n  this._reader = new Reader({\n    headerSize: 1,\n    lengthPadding: -4\n  });\n  var self = this;\n  this.on('newListener', function (eventName) {\n    if (eventName === 'message') {\n      self._emitMessage = true;\n    }\n  });\n};\n\nutil.inherits(Connection, EventEmitter);\n\nConnection.prototype.connect = function (port, host) {\n  var self = this;\n\n  if (this.stream.readyState === 'closed') {\n    this.stream.connect(port, host);\n  } else if (this.stream.readyState === 'open') {\n    this.emit('connect');\n  }\n\n  this.stream.on('connect', function () {\n    if (self._keepAlive) {\n      self.stream.setKeepAlive(true, self._keepAliveInitialDelayMillis);\n    }\n\n    self.emit('connect');\n  });\n\n  const reportStreamError = function (error) {\n    // errors about disconnections should be ignored during disconnect\n    if (self._ending && (error.code === 'ECONNRESET' || error.code === 'EPIPE')) {\n      return;\n    }\n\n    self.emit('error', error);\n  };\n\n  this.stream.on('error', reportStreamError);\n  this.stream.on('close', function () {\n    self.emit('end');\n  });\n\n  if (!this.ssl) {\n    return this.attachListeners(this.stream);\n  }\n\n  this.stream.once('data', function (buffer) {\n    var responseCode = buffer.toString('utf8');\n\n    switch (responseCode) {\n      case 'N':\n        // Server does not support SSL connections\n        return self.emit('error', new Error('The server does not support SSL connections'));\n\n      case 'S':\n        // Server supports SSL connections, continue with a secure connection\n        break;\n\n      default:\n        // Any other response byte, including 'E' (ErrorResponse) indicating a server error\n        return self.emit('error', new Error('There was an error establishing an SSL connection'));\n    }\n\n    var tls = require('tls');\n\n    const options = {\n      socket: self.stream,\n      checkServerIdentity: self.ssl.checkServerIdentity || tls.checkServerIdentity,\n      rejectUnauthorized: self.ssl.rejectUnauthorized,\n      ca: self.ssl.ca,\n      pfx: self.ssl.pfx,\n      key: self.ssl.key,\n      passphrase: self.ssl.passphrase,\n      cert: self.ssl.cert,\n      secureOptions: self.ssl.secureOptions,\n      NPNProtocols: self.ssl.NPNProtocols\n    };\n\n    if (net.isIP(host) === 0) {\n      options.servername = host;\n    }\n\n    self.stream = tls.connect(options);\n    self.attachListeners(self.stream);\n    self.stream.on('error', reportStreamError);\n    self.emit('sslconnect');\n  });\n};\n\nConnection.prototype.attachListeners = function (stream) {\n  var self = this;\n  stream.on('data', function (buff) {\n    self._reader.addChunk(buff);\n\n    var packet = self._reader.read();\n\n    while (packet) {\n      var msg = self.parseMessage(packet);\n      var eventName = msg.name === 'error' ? 'errorMessage' : msg.name;\n\n      if (self._emitMessage) {\n        self.emit('message', msg);\n      }\n\n      self.emit(eventName, msg);\n      packet = self._reader.read();\n    }\n  });\n  stream.on('end', function () {\n    self.emit('end');\n  });\n};\n\nConnection.prototype.requestSsl = function () {\n  var bodyBuffer = this.writer.addInt16(0x04D2).addInt16(0x162F).flush();\n  var length = bodyBuffer.length + 4;\n  var buffer = new Writer().addInt32(length).add(bodyBuffer).join();\n  this.stream.write(buffer);\n};\n\nConnection.prototype.startup = function (config) {\n  var writer = this.writer.addInt16(3).addInt16(0);\n  Object.keys(config).forEach(function (key) {\n    var val = config[key];\n    writer.addCString(key).addCString(val);\n  });\n  writer.addCString('client_encoding').addCString(\"'utf-8'\");\n  var bodyBuffer = writer.addCString('').flush(); // this message is sent without a code\n\n  var length = bodyBuffer.length + 4;\n  var buffer = new Writer().addInt32(length).add(bodyBuffer).join();\n  this.stream.write(buffer);\n};\n\nConnection.prototype.cancel = function (processID, secretKey) {\n  var bodyBuffer = this.writer.addInt16(1234).addInt16(5678).addInt32(processID).addInt32(secretKey).flush();\n  var length = bodyBuffer.length + 4;\n  var buffer = new Writer().addInt32(length).add(bodyBuffer).join();\n  this.stream.write(buffer);\n};\n\nConnection.prototype.password = function (password) {\n  // 0x70 = 'p'\n  this._send(0x70, this.writer.addCString(password));\n};\n\nConnection.prototype.sendSASLInitialResponseMessage = function (mechanism, initialResponse) {\n  // 0x70 = 'p'\n  this.writer.addCString(mechanism).addInt32(Buffer.byteLength(initialResponse)).addString(initialResponse);\n\n  this._send(0x70);\n};\n\nConnection.prototype.sendSCRAMClientFinalMessage = function (additionalData) {\n  // 0x70 = 'p'\n  this.writer.addString(additionalData);\n\n  this._send(0x70);\n};\n\nConnection.prototype._send = function (code, more) {\n  if (!this.stream.writable) {\n    return false;\n  }\n\n  if (more === true) {\n    this.writer.addHeader(code);\n  } else {\n    return this.stream.write(this.writer.flush(code));\n  }\n};\n\nConnection.prototype.query = function (text) {\n  // 0x51 = Q\n  this.stream.write(this.writer.addCString(text).flush(0x51));\n}; // send parse message\n// \"more\" === true to buffer the message until flush() is called\n\n\nConnection.prototype.parse = function (query, more) {\n  // expect something like this:\n  // { name: 'queryName',\n  //   text: 'select * from blah',\n  //   types: ['int8', 'bool'] }\n  // normalize missing query names to allow for null\n  query.name = query.name || '';\n\n  if (query.name.length > 63) {\n    /* eslint-disable no-console */\n    console.error('Warning! Postgres only supports 63 characters for query names.');\n    console.error('You supplied %s (%s)', query.name, query.name.length);\n    console.error('This can cause conflicts and silent errors executing queries');\n    /* eslint-enable no-console */\n  } // normalize null type array\n\n\n  query.types = query.types || [];\n  var len = query.types.length;\n  var buffer = this.writer.addCString(query.name) // name of query\n  .addCString(query.text) // actual query text\n  .addInt16(len);\n\n  for (var i = 0; i < len; i++) {\n    buffer.addInt32(query.types[i]);\n  }\n\n  var code = 0x50;\n\n  this._send(code, more);\n}; // send bind message\n// \"more\" === true to buffer the message until flush() is called\n\n\nConnection.prototype.bind = function (config, more) {\n  // normalize config\n  config = config || {};\n  config.portal = config.portal || '';\n  config.statement = config.statement || '';\n  config.binary = config.binary || false;\n  var values = config.values || [];\n  var len = values.length;\n  var useBinary = false;\n\n  for (var j = 0; j < len; j++) {\n    useBinary |= values[j] instanceof Buffer;\n  }\n\n  var buffer = this.writer.addCString(config.portal).addCString(config.statement);\n\n  if (!useBinary) {\n    buffer.addInt16(0);\n  } else {\n    buffer.addInt16(len);\n\n    for (j = 0; j < len; j++) {\n      buffer.addInt16(values[j] instanceof Buffer);\n    }\n  }\n\n  buffer.addInt16(len);\n\n  for (var i = 0; i < len; i++) {\n    var val = values[i];\n\n    if (val === null || typeof val === 'undefined') {\n      buffer.addInt32(-1);\n    } else if (val instanceof Buffer) {\n      buffer.addInt32(val.length);\n      buffer.add(val);\n    } else {\n      buffer.addInt32(Buffer.byteLength(val));\n      buffer.addString(val);\n    }\n  }\n\n  if (config.binary) {\n    buffer.addInt16(1); // format codes to use binary\n\n    buffer.addInt16(1);\n  } else {\n    buffer.addInt16(0); // format codes to use text\n  } // 0x42 = 'B'\n\n\n  this._send(0x42, more);\n}; // send execute message\n// \"more\" === true to buffer the message until flush() is called\n\n\nConnection.prototype.execute = function (config, more) {\n  config = config || {};\n  config.portal = config.portal || '';\n  config.rows = config.rows || '';\n  this.writer.addCString(config.portal).addInt32(config.rows); // 0x45 = 'E'\n\n  this._send(0x45, more);\n};\n\nvar emptyBuffer = Buffer.alloc(0);\n\nConnection.prototype.flush = function () {\n  // 0x48 = 'H'\n  this.writer.add(emptyBuffer);\n\n  this._send(0x48);\n};\n\nConnection.prototype.sync = function () {\n  // clear out any pending data in the writer\n  this.writer.flush(0);\n  this.writer.add(emptyBuffer);\n  this._ending = true;\n\n  this._send(0x53);\n};\n\nconst END_BUFFER = Buffer.from([0x58, 0x00, 0x00, 0x00, 0x04]);\n\nConnection.prototype.end = function () {\n  // 0x58 = 'X'\n  this.writer.add(emptyBuffer);\n  this._ending = true;\n  return this.stream.write(END_BUFFER, () => {\n    this.stream.end();\n  });\n};\n\nConnection.prototype.close = function (msg, more) {\n  this.writer.addCString(msg.type + (msg.name || ''));\n\n  this._send(0x43, more);\n};\n\nConnection.prototype.describe = function (msg, more) {\n  this.writer.addCString(msg.type + (msg.name || ''));\n\n  this._send(0x44, more);\n};\n\nConnection.prototype.sendCopyFromChunk = function (chunk) {\n  this.stream.write(this.writer.add(chunk).flush(0x64));\n};\n\nConnection.prototype.endCopyFrom = function () {\n  this.stream.write(this.writer.add(emptyBuffer).flush(0x63));\n};\n\nConnection.prototype.sendCopyFail = function (msg) {\n  // this.stream.write(this.writer.add(emptyBuffer).flush(0x66));\n  this.writer.addCString(msg);\n\n  this._send(0x66);\n};\n\nvar Message = function (name, length) {\n  this.name = name;\n  this.length = length;\n};\n\nConnection.prototype.parseMessage = function (buffer) {\n  this.offset = 0;\n  var length = buffer.length + 4;\n\n  switch (this._reader.header) {\n    case 0x52:\n      // R\n      return this.parseR(buffer, length);\n\n    case 0x53:\n      // S\n      return this.parseS(buffer, length);\n\n    case 0x4b:\n      // K\n      return this.parseK(buffer, length);\n\n    case 0x43:\n      // C\n      return this.parseC(buffer, length);\n\n    case 0x5a:\n      // Z\n      return this.parseZ(buffer, length);\n\n    case 0x54:\n      // T\n      return this.parseT(buffer, length);\n\n    case 0x44:\n      // D\n      return this.parseD(buffer, length);\n\n    case 0x45:\n      // E\n      return this.parseE(buffer, length);\n\n    case 0x4e:\n      // N\n      return this.parseN(buffer, length);\n\n    case 0x31:\n      // 1\n      return new Message('parseComplete', length);\n\n    case 0x32:\n      // 2\n      return new Message('bindComplete', length);\n\n    case 0x33:\n      // 3\n      return new Message('closeComplete', length);\n\n    case 0x41:\n      // A\n      return this.parseA(buffer, length);\n\n    case 0x6e:\n      // n\n      return new Message('noData', length);\n\n    case 0x49:\n      // I\n      return new Message('emptyQuery', length);\n\n    case 0x73:\n      // s\n      return new Message('portalSuspended', length);\n\n    case 0x47:\n      // G\n      return this.parseG(buffer, length);\n\n    case 0x48:\n      // H\n      return this.parseH(buffer, length);\n\n    case 0x57:\n      // W\n      return new Message('replicationStart', length);\n\n    case 0x63:\n      // c\n      return new Message('copyDone', length);\n\n    case 0x64:\n      // d\n      return this.parsed(buffer, length);\n  }\n};\n\nConnection.prototype.parseR = function (buffer, length) {\n  var code = this.parseInt32(buffer);\n  var msg = new Message('authenticationOk', length);\n\n  switch (code) {\n    case 0:\n      // AuthenticationOk\n      return msg;\n\n    case 3:\n      // AuthenticationCleartextPassword\n      if (msg.length === 8) {\n        msg.name = 'authenticationCleartextPassword';\n        return msg;\n      }\n\n      break;\n\n    case 5:\n      // AuthenticationMD5Password\n      if (msg.length === 12) {\n        msg.name = 'authenticationMD5Password';\n        msg.salt = Buffer.alloc(4);\n        buffer.copy(msg.salt, 0, this.offset, this.offset + 4);\n        this.offset += 4;\n        return msg;\n      }\n\n      break;\n\n    case 10:\n      // AuthenticationSASL\n      msg.name = 'authenticationSASL';\n      msg.mechanisms = [];\n\n      do {\n        var mechanism = this.parseCString(buffer);\n\n        if (mechanism) {\n          msg.mechanisms.push(mechanism);\n        }\n      } while (mechanism);\n\n      return msg;\n\n    case 11:\n      // AuthenticationSASLContinue\n      msg.name = 'authenticationSASLContinue';\n      msg.data = this.readString(buffer, length - 4);\n      return msg;\n\n    case 12:\n      // AuthenticationSASLFinal\n      msg.name = 'authenticationSASLFinal';\n      msg.data = this.readString(buffer, length - 4);\n      return msg;\n  }\n\n  throw new Error('Unknown authenticationOk message type' + util.inspect(msg));\n};\n\nConnection.prototype.parseS = function (buffer, length) {\n  var msg = new Message('parameterStatus', length);\n  msg.parameterName = this.parseCString(buffer);\n  msg.parameterValue = this.parseCString(buffer);\n  return msg;\n};\n\nConnection.prototype.parseK = function (buffer, length) {\n  var msg = new Message('backendKeyData', length);\n  msg.processID = this.parseInt32(buffer);\n  msg.secretKey = this.parseInt32(buffer);\n  return msg;\n};\n\nConnection.prototype.parseC = function (buffer, length) {\n  var msg = new Message('commandComplete', length);\n  msg.text = this.parseCString(buffer);\n  return msg;\n};\n\nConnection.prototype.parseZ = function (buffer, length) {\n  var msg = new Message('readyForQuery', length);\n  msg.name = 'readyForQuery';\n  msg.status = this.readString(buffer, 1);\n  return msg;\n};\n\nvar ROW_DESCRIPTION = 'rowDescription';\n\nConnection.prototype.parseT = function (buffer, length) {\n  var msg = new Message(ROW_DESCRIPTION, length);\n  msg.fieldCount = this.parseInt16(buffer);\n  var fields = [];\n\n  for (var i = 0; i < msg.fieldCount; i++) {\n    fields.push(this.parseField(buffer));\n  }\n\n  msg.fields = fields;\n  return msg;\n};\n\nvar Field = function () {\n  this.name = null;\n  this.tableID = null;\n  this.columnID = null;\n  this.dataTypeID = null;\n  this.dataTypeSize = null;\n  this.dataTypeModifier = null;\n  this.format = null;\n};\n\nvar FORMAT_TEXT = 'text';\nvar FORMAT_BINARY = 'binary';\n\nConnection.prototype.parseField = function (buffer) {\n  var field = new Field();\n  field.name = this.parseCString(buffer);\n  field.tableID = this.parseInt32(buffer);\n  field.columnID = this.parseInt16(buffer);\n  field.dataTypeID = this.parseInt32(buffer);\n  field.dataTypeSize = this.parseInt16(buffer);\n  field.dataTypeModifier = this.parseInt32(buffer);\n\n  if (this.parseInt16(buffer) === TEXT_MODE) {\n    this._mode = TEXT_MODE;\n    field.format = FORMAT_TEXT;\n  } else {\n    this._mode = BINARY_MODE;\n    field.format = FORMAT_BINARY;\n  }\n\n  return field;\n};\n\nvar DATA_ROW = 'dataRow';\n\nvar DataRowMessage = function (length, fieldCount) {\n  this.name = DATA_ROW;\n  this.length = length;\n  this.fieldCount = fieldCount;\n  this.fields = [];\n}; // extremely hot-path code\n\n\nConnection.prototype.parseD = function (buffer, length) {\n  var fieldCount = this.parseInt16(buffer);\n  var msg = new DataRowMessage(length, fieldCount);\n\n  for (var i = 0; i < fieldCount; i++) {\n    msg.fields.push(this._readValue(buffer));\n  }\n\n  return msg;\n}; // extremely hot-path code\n\n\nConnection.prototype._readValue = function (buffer) {\n  var length = this.parseInt32(buffer);\n  if (length === -1) return null;\n\n  if (this._mode === TEXT_MODE) {\n    return this.readString(buffer, length);\n  }\n\n  return this.readBytes(buffer, length);\n}; // parses error\n\n\nConnection.prototype.parseE = function (buffer, length) {\n  var fields = {};\n  var msg, item;\n  var input = new Message('error', length);\n  var fieldType = this.readString(buffer, 1);\n\n  while (fieldType !== '\\0') {\n    fields[fieldType] = this.parseCString(buffer);\n    fieldType = this.readString(buffer, 1);\n  }\n\n  if (input.name === 'error') {\n    // the msg is an Error instance\n    msg = new Error(fields.M);\n\n    for (item in input) {\n      // copy input properties to the error\n      if (Object.prototype.hasOwnProperty.call(input, item)) {\n        msg[item] = input[item];\n      }\n    }\n  } else {\n    // the msg is an object literal\n    msg = input;\n    msg.message = fields.M;\n  }\n\n  msg.severity = fields.S;\n  msg.code = fields.C;\n  msg.detail = fields.D;\n  msg.hint = fields.H;\n  msg.position = fields.P;\n  msg.internalPosition = fields.p;\n  msg.internalQuery = fields.q;\n  msg.where = fields.W;\n  msg.schema = fields.s;\n  msg.table = fields.t;\n  msg.column = fields.c;\n  msg.dataType = fields.d;\n  msg.constraint = fields.n;\n  msg.file = fields.F;\n  msg.line = fields.L;\n  msg.routine = fields.R;\n  return msg;\n}; // same thing, different name\n\n\nConnection.prototype.parseN = function (buffer, length) {\n  var msg = this.parseE(buffer, length);\n  msg.name = 'notice';\n  return msg;\n};\n\nConnection.prototype.parseA = function (buffer, length) {\n  var msg = new Message('notification', length);\n  msg.processId = this.parseInt32(buffer);\n  msg.channel = this.parseCString(buffer);\n  msg.payload = this.parseCString(buffer);\n  return msg;\n};\n\nConnection.prototype.parseG = function (buffer, length) {\n  var msg = new Message('copyInResponse', length);\n  return this.parseGH(buffer, msg);\n};\n\nConnection.prototype.parseH = function (buffer, length) {\n  var msg = new Message('copyOutResponse', length);\n  return this.parseGH(buffer, msg);\n};\n\nConnection.prototype.parseGH = function (buffer, msg) {\n  var isBinary = buffer[this.offset] !== 0;\n  this.offset++;\n  msg.binary = isBinary;\n  var columnCount = this.parseInt16(buffer);\n  msg.columnTypes = [];\n\n  for (var i = 0; i < columnCount; i++) {\n    msg.columnTypes.push(this.parseInt16(buffer));\n  }\n\n  return msg;\n};\n\nConnection.prototype.parsed = function (buffer, length) {\n  var msg = new Message('copyData', length);\n  msg.chunk = this.readBytes(buffer, msg.length - 4);\n  return msg;\n};\n\nConnection.prototype.parseInt32 = function (buffer) {\n  var value = buffer.readInt32BE(this.offset);\n  this.offset += 4;\n  return value;\n};\n\nConnection.prototype.parseInt16 = function (buffer) {\n  var value = buffer.readInt16BE(this.offset);\n  this.offset += 2;\n  return value;\n};\n\nConnection.prototype.readString = function (buffer, length) {\n  return buffer.toString(this.encoding, this.offset, this.offset += length);\n};\n\nConnection.prototype.readBytes = function (buffer, length) {\n  return buffer.slice(this.offset, this.offset += length);\n};\n\nConnection.prototype.parseCString = function (buffer) {\n  var start = this.offset;\n  var end = buffer.indexOf(0, start);\n  this.offset = end + 1;\n  return buffer.toString(this.encoding, start, end);\n}; // end parsing methods\n\n\nmodule.exports = Connection;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/pg/lib/connection.js"],"names":["net","require","EventEmitter","util","Writer","Reader","TEXT_MODE","BINARY_MODE","Connection","config","call","stream","Socket","_keepAlive","keepAlive","_keepAliveInitialDelayMillis","keepAliveInitialDelayMillis","lastBuffer","lastOffset","buffer","offset","encoding","parsedStatements","writer","ssl","_ending","_mode","_emitMessage","_reader","headerSize","lengthPadding","self","on","eventName","inherits","prototype","connect","port","host","readyState","emit","setKeepAlive","reportStreamError","error","code","attachListeners","once","responseCode","toString","Error","tls","options","socket","checkServerIdentity","rejectUnauthorized","ca","pfx","key","passphrase","cert","secureOptions","NPNProtocols","isIP","servername","buff","addChunk","packet","read","msg","parseMessage","name","requestSsl","bodyBuffer","addInt16","flush","length","addInt32","add","join","write","startup","Object","keys","forEach","val","addCString","cancel","processID","secretKey","password","_send","sendSASLInitialResponseMessage","mechanism","initialResponse","Buffer","byteLength","addString","sendSCRAMClientFinalMessage","additionalData","more","writable","addHeader","query","text","parse","console","types","len","i","bind","portal","statement","binary","values","useBinary","j","execute","rows","emptyBuffer","alloc","sync","END_BUFFER","from","end","close","type","describe","sendCopyFromChunk","chunk","endCopyFrom","sendCopyFail","Message","header","parseR","parseS","parseK","parseC","parseZ","parseT","parseD","parseE","parseN","parseA","parseG","parseH","parsed","parseInt32","salt","copy","mechanisms","parseCString","push","data","readString","inspect","parameterName","parameterValue","status","ROW_DESCRIPTION","fieldCount","parseInt16","fields","parseField","Field","tableID","columnID","dataTypeID","dataTypeSize","dataTypeModifier","format","FORMAT_TEXT","FORMAT_BINARY","field","DATA_ROW","DataRowMessage","_readValue","readBytes","item","input","fieldType","M","hasOwnProperty","message","severity","S","C","detail","D","hint","H","position","P","internalPosition","p","internalQuery","q","where","W","schema","s","table","t","column","c","dataType","d","constraint","n","file","F","line","L","routine","R","processId","channel","payload","parseGH","isBinary","columnCount","columnTypes","value","readInt32BE","readInt16BE","slice","start","indexOf","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\nvar net = require('net')\nvar EventEmitter = require('events').EventEmitter\nvar util = require('util')\n\nvar Writer = require('buffer-writer')\nvar Reader = require('packet-reader')\n\nvar TEXT_MODE = 0\nvar BINARY_MODE = 1\nvar Connection = function (config) {\n  EventEmitter.call(this)\n  config = config || {}\n  this.stream = config.stream || new net.Socket()\n  this._keepAlive = config.keepAlive\n  this._keepAliveInitialDelayMillis = config.keepAliveInitialDelayMillis\n  this.lastBuffer = false\n  this.lastOffset = 0\n  this.buffer = null\n  this.offset = null\n  this.encoding = config.encoding || 'utf8'\n  this.parsedStatements = {}\n  this.writer = new Writer()\n  this.ssl = config.ssl || false\n  this._ending = false\n  this._mode = TEXT_MODE\n  this._emitMessage = false\n  this._reader = new Reader({\n    headerSize: 1,\n    lengthPadding: -4\n  })\n  var self = this\n  this.on('newListener', function (eventName) {\n    if (eventName === 'message') {\n      self._emitMessage = true\n    }\n  })\n}\n\nutil.inherits(Connection, EventEmitter)\n\nConnection.prototype.connect = function (port, host) {\n  var self = this\n\n  if (this.stream.readyState === 'closed') {\n    this.stream.connect(port, host)\n  } else if (this.stream.readyState === 'open') {\n    this.emit('connect')\n  }\n\n  this.stream.on('connect', function () {\n    if (self._keepAlive) {\n      self.stream.setKeepAlive(true, self._keepAliveInitialDelayMillis)\n    }\n    self.emit('connect')\n  })\n\n  const reportStreamError = function (error) {\n    // errors about disconnections should be ignored during disconnect\n    if (self._ending && (error.code === 'ECONNRESET' || error.code === 'EPIPE')) {\n      return\n    }\n    self.emit('error', error)\n  }\n  this.stream.on('error', reportStreamError)\n\n  this.stream.on('close', function () {\n    self.emit('end')\n  })\n\n  if (!this.ssl) {\n    return this.attachListeners(this.stream)\n  }\n\n  this.stream.once('data', function (buffer) {\n    var responseCode = buffer.toString('utf8')\n    switch (responseCode) {\n      case 'N': // Server does not support SSL connections\n        return self.emit('error', new Error('The server does not support SSL connections'))\n      case 'S': // Server supports SSL connections, continue with a secure connection\n        break\n      default: // Any other response byte, including 'E' (ErrorResponse) indicating a server error\n        return self.emit('error', new Error('There was an error establishing an SSL connection'))\n    }\n    var tls = require('tls')\n    const options = {\n      socket: self.stream,\n      checkServerIdentity: self.ssl.checkServerIdentity || tls.checkServerIdentity,\n      rejectUnauthorized: self.ssl.rejectUnauthorized,\n      ca: self.ssl.ca,\n      pfx: self.ssl.pfx,\n      key: self.ssl.key,\n      passphrase: self.ssl.passphrase,\n      cert: self.ssl.cert,\n      secureOptions: self.ssl.secureOptions,\n      NPNProtocols: self.ssl.NPNProtocols\n    }\n    if (net.isIP(host) === 0) {\n      options.servername = host\n    }\n    self.stream = tls.connect(options)\n    self.attachListeners(self.stream)\n    self.stream.on('error', reportStreamError)\n\n    self.emit('sslconnect')\n  })\n}\n\nConnection.prototype.attachListeners = function (stream) {\n  var self = this\n  stream.on('data', function (buff) {\n    self._reader.addChunk(buff)\n    var packet = self._reader.read()\n    while (packet) {\n      var msg = self.parseMessage(packet)\n      var eventName = msg.name === 'error' ? 'errorMessage' : msg.name\n      if (self._emitMessage) {\n        self.emit('message', msg)\n      }\n      self.emit(eventName, msg)\n      packet = self._reader.read()\n    }\n  })\n  stream.on('end', function () {\n    self.emit('end')\n  })\n}\n\nConnection.prototype.requestSsl = function () {\n  var bodyBuffer = this.writer\n    .addInt16(0x04D2)\n    .addInt16(0x162F).flush()\n\n  var length = bodyBuffer.length + 4\n\n  var buffer = new Writer()\n    .addInt32(length)\n    .add(bodyBuffer)\n    .join()\n  this.stream.write(buffer)\n}\n\nConnection.prototype.startup = function (config) {\n  var writer = this.writer\n    .addInt16(3)\n    .addInt16(0)\n\n  Object.keys(config).forEach(function (key) {\n    var val = config[key]\n    writer.addCString(key).addCString(val)\n  })\n\n  writer.addCString('client_encoding').addCString(\"'utf-8'\")\n\n  var bodyBuffer = writer.addCString('').flush()\n  // this message is sent without a code\n\n  var length = bodyBuffer.length + 4\n\n  var buffer = new Writer()\n    .addInt32(length)\n    .add(bodyBuffer)\n    .join()\n  this.stream.write(buffer)\n}\n\nConnection.prototype.cancel = function (processID, secretKey) {\n  var bodyBuffer = this.writer\n    .addInt16(1234)\n    .addInt16(5678)\n    .addInt32(processID)\n    .addInt32(secretKey)\n    .flush()\n\n  var length = bodyBuffer.length + 4\n\n  var buffer = new Writer()\n    .addInt32(length)\n    .add(bodyBuffer)\n    .join()\n  this.stream.write(buffer)\n}\n\nConnection.prototype.password = function (password) {\n  // 0x70 = 'p'\n  this._send(0x70, this.writer.addCString(password))\n}\n\nConnection.prototype.sendSASLInitialResponseMessage = function (mechanism, initialResponse) {\n  // 0x70 = 'p'\n  this.writer\n    .addCString(mechanism)\n    .addInt32(Buffer.byteLength(initialResponse))\n    .addString(initialResponse)\n\n  this._send(0x70)\n}\n\nConnection.prototype.sendSCRAMClientFinalMessage = function (additionalData) {\n  // 0x70 = 'p'\n  this.writer\n    .addString(additionalData)\n\n  this._send(0x70)\n}\n\nConnection.prototype._send = function (code, more) {\n  if (!this.stream.writable) {\n    return false\n  }\n  if (more === true) {\n    this.writer.addHeader(code)\n  } else {\n    return this.stream.write(this.writer.flush(code))\n  }\n}\n\nConnection.prototype.query = function (text) {\n  // 0x51 = Q\n  this.stream.write(this.writer.addCString(text).flush(0x51))\n}\n\n// send parse message\n// \"more\" === true to buffer the message until flush() is called\nConnection.prototype.parse = function (query, more) {\n  // expect something like this:\n  // { name: 'queryName',\n  //   text: 'select * from blah',\n  //   types: ['int8', 'bool'] }\n\n  // normalize missing query names to allow for null\n  query.name = query.name || ''\n  if (query.name.length > 63) {\n    /* eslint-disable no-console */\n    console.error('Warning! Postgres only supports 63 characters for query names.')\n    console.error('You supplied %s (%s)', query.name, query.name.length)\n    console.error('This can cause conflicts and silent errors executing queries')\n    /* eslint-enable no-console */\n  }\n  // normalize null type array\n  query.types = query.types || []\n  var len = query.types.length\n  var buffer = this.writer\n    .addCString(query.name) // name of query\n    .addCString(query.text) // actual query text\n    .addInt16(len)\n  for (var i = 0; i < len; i++) {\n    buffer.addInt32(query.types[i])\n  }\n\n  var code = 0x50\n  this._send(code, more)\n}\n\n// send bind message\n// \"more\" === true to buffer the message until flush() is called\nConnection.prototype.bind = function (config, more) {\n  // normalize config\n  config = config || {}\n  config.portal = config.portal || ''\n  config.statement = config.statement || ''\n  config.binary = config.binary || false\n  var values = config.values || []\n  var len = values.length\n  var useBinary = false\n  for (var j = 0; j < len; j++) { useBinary |= values[j] instanceof Buffer }\n  var buffer = this.writer\n    .addCString(config.portal)\n    .addCString(config.statement)\n  if (!useBinary) { buffer.addInt16(0) } else {\n    buffer.addInt16(len)\n    for (j = 0; j < len; j++) { buffer.addInt16(values[j] instanceof Buffer) }\n  }\n  buffer.addInt16(len)\n  for (var i = 0; i < len; i++) {\n    var val = values[i]\n    if (val === null || typeof val === 'undefined') {\n      buffer.addInt32(-1)\n    } else if (val instanceof Buffer) {\n      buffer.addInt32(val.length)\n      buffer.add(val)\n    } else {\n      buffer.addInt32(Buffer.byteLength(val))\n      buffer.addString(val)\n    }\n  }\n\n  if (config.binary) {\n    buffer.addInt16(1) // format codes to use binary\n    buffer.addInt16(1)\n  } else {\n    buffer.addInt16(0) // format codes to use text\n  }\n  // 0x42 = 'B'\n  this._send(0x42, more)\n}\n\n// send execute message\n// \"more\" === true to buffer the message until flush() is called\nConnection.prototype.execute = function (config, more) {\n  config = config || {}\n  config.portal = config.portal || ''\n  config.rows = config.rows || ''\n  this.writer\n    .addCString(config.portal)\n    .addInt32(config.rows)\n\n  // 0x45 = 'E'\n  this._send(0x45, more)\n}\n\nvar emptyBuffer = Buffer.alloc(0)\n\nConnection.prototype.flush = function () {\n  // 0x48 = 'H'\n  this.writer.add(emptyBuffer)\n  this._send(0x48)\n}\n\nConnection.prototype.sync = function () {\n  // clear out any pending data in the writer\n  this.writer.flush(0)\n\n  this.writer.add(emptyBuffer)\n  this._ending = true\n  this._send(0x53)\n}\n\nconst END_BUFFER = Buffer.from([0x58, 0x00, 0x00, 0x00, 0x04])\n\nConnection.prototype.end = function () {\n  // 0x58 = 'X'\n  this.writer.add(emptyBuffer)\n  this._ending = true\n  return this.stream.write(END_BUFFER, () => {\n    this.stream.end()\n  })\n}\n\nConnection.prototype.close = function (msg, more) {\n  this.writer.addCString(msg.type + (msg.name || ''))\n  this._send(0x43, more)\n}\n\nConnection.prototype.describe = function (msg, more) {\n  this.writer.addCString(msg.type + (msg.name || ''))\n  this._send(0x44, more)\n}\n\nConnection.prototype.sendCopyFromChunk = function (chunk) {\n  this.stream.write(this.writer.add(chunk).flush(0x64))\n}\n\nConnection.prototype.endCopyFrom = function () {\n  this.stream.write(this.writer.add(emptyBuffer).flush(0x63))\n}\n\nConnection.prototype.sendCopyFail = function (msg) {\n  // this.stream.write(this.writer.add(emptyBuffer).flush(0x66));\n  this.writer.addCString(msg)\n  this._send(0x66)\n}\n\nvar Message = function (name, length) {\n  this.name = name\n  this.length = length\n}\n\nConnection.prototype.parseMessage = function (buffer) {\n  this.offset = 0\n  var length = buffer.length + 4\n  switch (this._reader.header) {\n    case 0x52: // R\n      return this.parseR(buffer, length)\n\n    case 0x53: // S\n      return this.parseS(buffer, length)\n\n    case 0x4b: // K\n      return this.parseK(buffer, length)\n\n    case 0x43: // C\n      return this.parseC(buffer, length)\n\n    case 0x5a: // Z\n      return this.parseZ(buffer, length)\n\n    case 0x54: // T\n      return this.parseT(buffer, length)\n\n    case 0x44: // D\n      return this.parseD(buffer, length)\n\n    case 0x45: // E\n      return this.parseE(buffer, length)\n\n    case 0x4e: // N\n      return this.parseN(buffer, length)\n\n    case 0x31: // 1\n      return new Message('parseComplete', length)\n\n    case 0x32: // 2\n      return new Message('bindComplete', length)\n\n    case 0x33: // 3\n      return new Message('closeComplete', length)\n\n    case 0x41: // A\n      return this.parseA(buffer, length)\n\n    case 0x6e: // n\n      return new Message('noData', length)\n\n    case 0x49: // I\n      return new Message('emptyQuery', length)\n\n    case 0x73: // s\n      return new Message('portalSuspended', length)\n\n    case 0x47: // G\n      return this.parseG(buffer, length)\n\n    case 0x48: // H\n      return this.parseH(buffer, length)\n\n    case 0x57: // W\n      return new Message('replicationStart', length)\n\n    case 0x63: // c\n      return new Message('copyDone', length)\n\n    case 0x64: // d\n      return this.parsed(buffer, length)\n  }\n}\n\nConnection.prototype.parseR = function (buffer, length) {\n  var code = this.parseInt32(buffer)\n\n  var msg = new Message('authenticationOk', length)\n\n  switch (code) {\n    case 0: // AuthenticationOk\n      return msg\n    case 3: // AuthenticationCleartextPassword\n      if (msg.length === 8) {\n        msg.name = 'authenticationCleartextPassword'\n        return msg\n      }\n      break\n    case 5: // AuthenticationMD5Password\n      if (msg.length === 12) {\n        msg.name = 'authenticationMD5Password'\n        msg.salt = Buffer.alloc(4)\n        buffer.copy(msg.salt, 0, this.offset, this.offset + 4)\n        this.offset += 4\n        return msg\n      }\n\n      break\n    case 10: // AuthenticationSASL\n      msg.name = 'authenticationSASL'\n      msg.mechanisms = []\n      do {\n        var mechanism = this.parseCString(buffer)\n\n        if (mechanism) {\n          msg.mechanisms.push(mechanism)\n        }\n      } while (mechanism)\n\n      return msg\n    case 11: // AuthenticationSASLContinue\n      msg.name = 'authenticationSASLContinue'\n      msg.data = this.readString(buffer, length - 4)\n\n      return msg\n    case 12: // AuthenticationSASLFinal\n      msg.name = 'authenticationSASLFinal'\n      msg.data = this.readString(buffer, length - 4)\n\n      return msg\n  }\n\n  throw new Error('Unknown authenticationOk message type' + util.inspect(msg))\n}\n\nConnection.prototype.parseS = function (buffer, length) {\n  var msg = new Message('parameterStatus', length)\n  msg.parameterName = this.parseCString(buffer)\n  msg.parameterValue = this.parseCString(buffer)\n  return msg\n}\n\nConnection.prototype.parseK = function (buffer, length) {\n  var msg = new Message('backendKeyData', length)\n  msg.processID = this.parseInt32(buffer)\n  msg.secretKey = this.parseInt32(buffer)\n  return msg\n}\n\nConnection.prototype.parseC = function (buffer, length) {\n  var msg = new Message('commandComplete', length)\n  msg.text = this.parseCString(buffer)\n  return msg\n}\n\nConnection.prototype.parseZ = function (buffer, length) {\n  var msg = new Message('readyForQuery', length)\n  msg.name = 'readyForQuery'\n  msg.status = this.readString(buffer, 1)\n  return msg\n}\n\nvar ROW_DESCRIPTION = 'rowDescription'\nConnection.prototype.parseT = function (buffer, length) {\n  var msg = new Message(ROW_DESCRIPTION, length)\n  msg.fieldCount = this.parseInt16(buffer)\n  var fields = []\n  for (var i = 0; i < msg.fieldCount; i++) {\n    fields.push(this.parseField(buffer))\n  }\n  msg.fields = fields\n  return msg\n}\n\nvar Field = function () {\n  this.name = null\n  this.tableID = null\n  this.columnID = null\n  this.dataTypeID = null\n  this.dataTypeSize = null\n  this.dataTypeModifier = null\n  this.format = null\n}\n\nvar FORMAT_TEXT = 'text'\nvar FORMAT_BINARY = 'binary'\nConnection.prototype.parseField = function (buffer) {\n  var field = new Field()\n  field.name = this.parseCString(buffer)\n  field.tableID = this.parseInt32(buffer)\n  field.columnID = this.parseInt16(buffer)\n  field.dataTypeID = this.parseInt32(buffer)\n  field.dataTypeSize = this.parseInt16(buffer)\n  field.dataTypeModifier = this.parseInt32(buffer)\n  if (this.parseInt16(buffer) === TEXT_MODE) {\n    this._mode = TEXT_MODE\n    field.format = FORMAT_TEXT\n  } else {\n    this._mode = BINARY_MODE\n    field.format = FORMAT_BINARY\n  }\n  return field\n}\n\nvar DATA_ROW = 'dataRow'\nvar DataRowMessage = function (length, fieldCount) {\n  this.name = DATA_ROW\n  this.length = length\n  this.fieldCount = fieldCount\n  this.fields = []\n}\n\n// extremely hot-path code\nConnection.prototype.parseD = function (buffer, length) {\n  var fieldCount = this.parseInt16(buffer)\n  var msg = new DataRowMessage(length, fieldCount)\n  for (var i = 0; i < fieldCount; i++) {\n    msg.fields.push(this._readValue(buffer))\n  }\n  return msg\n}\n\n// extremely hot-path code\nConnection.prototype._readValue = function (buffer) {\n  var length = this.parseInt32(buffer)\n  if (length === -1) return null\n  if (this._mode === TEXT_MODE) {\n    return this.readString(buffer, length)\n  }\n  return this.readBytes(buffer, length)\n}\n\n// parses error\nConnection.prototype.parseE = function (buffer, length) {\n  var fields = {}\n  var msg, item\n  var input = new Message('error', length)\n  var fieldType = this.readString(buffer, 1)\n  while (fieldType !== '\\0') {\n    fields[fieldType] = this.parseCString(buffer)\n    fieldType = this.readString(buffer, 1)\n  }\n  if (input.name === 'error') {\n    // the msg is an Error instance\n    msg = new Error(fields.M)\n    for (item in input) {\n      // copy input properties to the error\n      if (Object.prototype.hasOwnProperty.call(input, item)) {\n        msg[item] = input[item]\n      }\n    }\n  } else {\n    // the msg is an object literal\n    msg = input\n    msg.message = fields.M\n  }\n  msg.severity = fields.S\n  msg.code = fields.C\n  msg.detail = fields.D\n  msg.hint = fields.H\n  msg.position = fields.P\n  msg.internalPosition = fields.p\n  msg.internalQuery = fields.q\n  msg.where = fields.W\n  msg.schema = fields.s\n  msg.table = fields.t\n  msg.column = fields.c\n  msg.dataType = fields.d\n  msg.constraint = fields.n\n  msg.file = fields.F\n  msg.line = fields.L\n  msg.routine = fields.R\n  return msg\n}\n\n// same thing, different name\nConnection.prototype.parseN = function (buffer, length) {\n  var msg = this.parseE(buffer, length)\n  msg.name = 'notice'\n  return msg\n}\n\nConnection.prototype.parseA = function (buffer, length) {\n  var msg = new Message('notification', length)\n  msg.processId = this.parseInt32(buffer)\n  msg.channel = this.parseCString(buffer)\n  msg.payload = this.parseCString(buffer)\n  return msg\n}\n\nConnection.prototype.parseG = function (buffer, length) {\n  var msg = new Message('copyInResponse', length)\n  return this.parseGH(buffer, msg)\n}\n\nConnection.prototype.parseH = function (buffer, length) {\n  var msg = new Message('copyOutResponse', length)\n  return this.parseGH(buffer, msg)\n}\n\nConnection.prototype.parseGH = function (buffer, msg) {\n  var isBinary = buffer[this.offset] !== 0\n  this.offset++\n  msg.binary = isBinary\n  var columnCount = this.parseInt16(buffer)\n  msg.columnTypes = []\n  for (var i = 0; i < columnCount; i++) {\n    msg.columnTypes.push(this.parseInt16(buffer))\n  }\n  return msg\n}\n\nConnection.prototype.parsed = function (buffer, length) {\n  var msg = new Message('copyData', length)\n  msg.chunk = this.readBytes(buffer, msg.length - 4)\n  return msg\n}\n\nConnection.prototype.parseInt32 = function (buffer) {\n  var value = buffer.readInt32BE(this.offset)\n  this.offset += 4\n  return value\n}\n\nConnection.prototype.parseInt16 = function (buffer) {\n  var value = buffer.readInt16BE(this.offset)\n  this.offset += 2\n  return value\n}\n\nConnection.prototype.readString = function (buffer, length) {\n  return buffer.toString(this.encoding, this.offset, (this.offset += length))\n}\n\nConnection.prototype.readBytes = function (buffer, length) {\n  return buffer.slice(this.offset, (this.offset += length))\n}\n\nConnection.prototype.parseCString = function (buffer) {\n  var start = this.offset\n  var end = buffer.indexOf(0, start)\n  this.offset = end + 1\n  return buffer.toString(this.encoding, start, end)\n}\n// end parsing methods\nmodule.exports = Connection\n"]},"metadata":{},"sourceType":"script"}
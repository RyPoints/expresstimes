{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst moment = require('moment-timezone');\n\nmodule.exports = BaseTypes => {\n  BaseTypes.ABSTRACT.prototype.dialectTypes = 'https://mariadb.com/kb/en/library/resultset/#field-types';\n  /**\n   * types: [buffer_type, ...]\n   * @see documentation : https://mariadb.com/kb/en/library/resultset/#field-types\n   * @see connector implementation : https://github.com/MariaDB/mariadb-connector-nodejs/blob/master/lib/const/field-type.js\n   */\n\n  BaseTypes.DATE.types.mariadb = ['DATETIME'];\n  BaseTypes.STRING.types.mariadb = ['VAR_STRING'];\n  BaseTypes.CHAR.types.mariadb = ['STRING'];\n  BaseTypes.TEXT.types.mariadb = ['BLOB'];\n  BaseTypes.TINYINT.types.mariadb = ['TINY'];\n  BaseTypes.SMALLINT.types.mariadb = ['SHORT'];\n  BaseTypes.MEDIUMINT.types.mariadb = ['INT24'];\n  BaseTypes.INTEGER.types.mariadb = ['LONG'];\n  BaseTypes.BIGINT.types.mariadb = ['LONGLONG'];\n  BaseTypes.FLOAT.types.mariadb = ['FLOAT'];\n  BaseTypes.TIME.types.mariadb = ['TIME'];\n  BaseTypes.DATEONLY.types.mariadb = ['DATE'];\n  BaseTypes.BOOLEAN.types.mariadb = ['TINY'];\n  BaseTypes.BLOB.types.mariadb = ['TINYBLOB', 'BLOB', 'LONGBLOB'];\n  BaseTypes.DECIMAL.types.mariadb = ['NEWDECIMAL'];\n  BaseTypes.UUID.types.mariadb = false;\n  BaseTypes.ENUM.types.mariadb = false;\n  BaseTypes.REAL.types.mariadb = ['DOUBLE'];\n  BaseTypes.DOUBLE.types.mariadb = ['DOUBLE'];\n  BaseTypes.GEOMETRY.types.mariadb = ['GEOMETRY'];\n  BaseTypes.JSON.types.mariadb = ['JSON'];\n\n  class DECIMAL extends BaseTypes.DECIMAL {\n    toSql() {\n      let definition = super.toSql();\n\n      if (this._unsigned) {\n        definition += ' UNSIGNED';\n      }\n\n      if (this._zerofill) {\n        definition += ' ZEROFILL';\n      }\n\n      return definition;\n    }\n\n  }\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return `DATETIME${this._length ? `(${this._length})` : ''}`;\n    }\n\n    _stringify(date, options) {\n      date = this._applyTimezone(date, options);\n      return date.format('YYYY-MM-DD HH:mm:ss.SSS');\n    }\n\n    static parse(value, options) {\n      value = value.string();\n\n      if (value === null) {\n        return value;\n      }\n\n      if (moment.tz.zone(options.timezone)) {\n        value = moment.tz(value, options.timezone).toDate();\n      } else {\n        value = new Date(`${value} ${options.timezone}`);\n      }\n\n      return value;\n    }\n\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return value.string();\n    }\n\n  }\n\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return 'CHAR(36) BINARY';\n    }\n\n  }\n\n  class GEOMETRY extends BaseTypes.GEOMETRY {\n    constructor(type, srid) {\n      super(type, srid);\n\n      if (_.isEmpty(this.type)) {\n        this.sqlType = this.key;\n      } else {\n        this.sqlType = this.type;\n      }\n    }\n\n    toSql() {\n      return this.sqlType;\n    }\n\n  }\n\n  class ENUM extends BaseTypes.ENUM {\n    toSql(options) {\n      return `ENUM(${this.values.map(value => options.escape(value)).join(', ')})`;\n    }\n\n  }\n\n  class JSONTYPE extends BaseTypes.JSON {\n    _stringify(value, options) {\n      return options.operation === 'where' && typeof value === 'string' ? value : JSON.stringify(value);\n    }\n\n  }\n\n  return {\n    ENUM,\n    DATE,\n    DATEONLY,\n    UUID,\n    GEOMETRY,\n    DECIMAL,\n    JSON: JSONTYPE\n  };\n};","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/sequelize/lib/dialects/mariadb/data-types.js"],"names":["_","require","moment","module","exports","BaseTypes","ABSTRACT","prototype","dialectTypes","DATE","types","mariadb","STRING","CHAR","TEXT","TINYINT","SMALLINT","MEDIUMINT","INTEGER","BIGINT","FLOAT","TIME","DATEONLY","BOOLEAN","BLOB","DECIMAL","UUID","ENUM","REAL","DOUBLE","GEOMETRY","JSON","toSql","definition","_unsigned","_zerofill","_length","_stringify","date","options","_applyTimezone","format","parse","value","string","tz","zone","timezone","toDate","Date","constructor","type","srid","isEmpty","sqlType","key","values","map","escape","join","JSONTYPE","operation","stringify"],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst moment = require('moment-timezone');\n\nmodule.exports = BaseTypes => {\n  BaseTypes.ABSTRACT.prototype.dialectTypes = 'https://mariadb.com/kb/en/library/resultset/#field-types';\n\n  /**\n   * types: [buffer_type, ...]\n   * @see documentation : https://mariadb.com/kb/en/library/resultset/#field-types\n   * @see connector implementation : https://github.com/MariaDB/mariadb-connector-nodejs/blob/master/lib/const/field-type.js\n   */\n\n  BaseTypes.DATE.types.mariadb = ['DATETIME'];\n  BaseTypes.STRING.types.mariadb = ['VAR_STRING'];\n  BaseTypes.CHAR.types.mariadb = ['STRING'];\n  BaseTypes.TEXT.types.mariadb = ['BLOB'];\n  BaseTypes.TINYINT.types.mariadb = ['TINY'];\n  BaseTypes.SMALLINT.types.mariadb = ['SHORT'];\n  BaseTypes.MEDIUMINT.types.mariadb = ['INT24'];\n  BaseTypes.INTEGER.types.mariadb = ['LONG'];\n  BaseTypes.BIGINT.types.mariadb = ['LONGLONG'];\n  BaseTypes.FLOAT.types.mariadb = ['FLOAT'];\n  BaseTypes.TIME.types.mariadb = ['TIME'];\n  BaseTypes.DATEONLY.types.mariadb = ['DATE'];\n  BaseTypes.BOOLEAN.types.mariadb = ['TINY'];\n  BaseTypes.BLOB.types.mariadb = ['TINYBLOB', 'BLOB', 'LONGBLOB'];\n  BaseTypes.DECIMAL.types.mariadb = ['NEWDECIMAL'];\n  BaseTypes.UUID.types.mariadb = false;\n  BaseTypes.ENUM.types.mariadb = false;\n  BaseTypes.REAL.types.mariadb = ['DOUBLE'];\n  BaseTypes.DOUBLE.types.mariadb = ['DOUBLE'];\n  BaseTypes.GEOMETRY.types.mariadb = ['GEOMETRY'];\n  BaseTypes.JSON.types.mariadb = ['JSON'];\n\n  class DECIMAL extends BaseTypes.DECIMAL {\n    toSql() {\n      let definition = super.toSql();\n      if (this._unsigned) {\n        definition += ' UNSIGNED';\n      }\n      if (this._zerofill) {\n        definition += ' ZEROFILL';\n      }\n      return definition;\n    }\n  }\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return `DATETIME${this._length ? `(${this._length})` : ''}`;\n    }\n    _stringify(date, options) {\n      date = this._applyTimezone(date, options);\n      return date.format('YYYY-MM-DD HH:mm:ss.SSS');\n    }\n    static parse(value, options) {\n      value = value.string();\n      if (value === null) {\n        return value;\n      }\n      if (moment.tz.zone(options.timezone)) {\n        value = moment.tz(value, options.timezone).toDate();\n      }\n      else {\n        value = new Date(`${value} ${options.timezone}`);\n      }\n      return value;\n    }\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return value.string();\n    }\n  }\n\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return 'CHAR(36) BINARY';\n    }\n  }\n\n  class GEOMETRY extends BaseTypes.GEOMETRY {\n    constructor(type, srid) {\n      super(type, srid);\n      if (_.isEmpty(this.type)) {\n        this.sqlType = this.key;\n      }\n      else {\n        this.sqlType = this.type;\n      }\n    }\n    toSql() {\n      return this.sqlType;\n    }\n  }\n\n  class ENUM extends BaseTypes.ENUM {\n    toSql(options) {\n      return `ENUM(${this.values.map(value => options.escape(value)).join(', ')})`;\n    }\n  }\n\n  class JSONTYPE extends BaseTypes.JSON {\n    _stringify(value, options) {\n      return options.operation === 'where' && typeof value === 'string' ? value\n        : JSON.stringify(value);\n    }\n  }\n\n  return {\n    ENUM,\n    DATE,\n    DATEONLY,\n    UUID,\n    GEOMETRY,\n    DECIMAL,\n    JSON: JSONTYPE\n  };\n};\n"]},"metadata":{},"sourceType":"script"}
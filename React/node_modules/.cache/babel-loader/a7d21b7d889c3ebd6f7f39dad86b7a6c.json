{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport * as tslib_1 from \"tslib\";\nimport { URLBuilder } from \"../url\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nexport function redirectPolicy(maximumRetries) {\n  if (maximumRetries === void 0) {\n    maximumRetries = 20;\n  }\n\n  return {\n    create: function (nextPolicy, options) {\n      return new RedirectPolicy(nextPolicy, options, maximumRetries);\n    }\n  };\n}\n\nvar RedirectPolicy =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(RedirectPolicy, _super);\n\n  function RedirectPolicy(nextPolicy, options, maxRetries) {\n    if (maxRetries === void 0) {\n      maxRetries = 20;\n    }\n\n    var _this = _super.call(this, nextPolicy, options) || this;\n\n    _this.maxRetries = maxRetries;\n    return _this;\n  }\n\n  RedirectPolicy.prototype.sendRequest = function (request) {\n    var _this = this;\n\n    return this._nextPolicy.sendRequest(request).then(function (response) {\n      return handleRedirect(_this, response, 0);\n    });\n  };\n\n  return RedirectPolicy;\n}(BaseRequestPolicy);\n\nexport { RedirectPolicy };\n\nfunction handleRedirect(policy, response, currentRetries) {\n  var request = response.request,\n      status = response.status;\n  var locationHeader = response.headers.get(\"location\");\n\n  if (locationHeader && (status === 300 || status === 307 || status === 303 && request.method === \"POST\") && (!policy.maxRetries || currentRetries < policy.maxRetries)) {\n    var builder = URLBuilder.parse(request.url);\n    builder.setPath(locationHeader);\n    request.url = builder.toString(); // POST request with Status code 303 should be converted into a\n    // redirected GET request if the redirect url is present in the location header\n\n    if (status === 303) {\n      request.method = \"GET\";\n    }\n\n    return policy._nextPolicy.sendRequest(request).then(function (res) {\n      return handleRedirect(policy, res, currentRetries + 1);\n    });\n  }\n\n  return Promise.resolve(response);\n}","map":{"version":3,"sources":["../../../lib/policies/redirectPolicy.ts"],"names":[],"mappings":"AAAA;AACA;;AAGA,SAAS,UAAT,QAA2B,QAA3B;AAEA,SAAS,iBAAT,QAA6F,iBAA7F;AAEA,OAAM,SAAU,cAAV,CAAyB,cAAzB,EAA4C;AAAnB,MAAA,cAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,cAAA,GAAA,EAAA;AAAmB;;AAChD,SAAO;AACL,IAAA,MAAM,EAAE,UAAC,UAAD,EAA4B,OAA5B,EAAyD;AAC/D,aAAO,IAAI,cAAJ,CAAmB,UAAnB,EAA+B,OAA/B,EAAwC,cAAxC,CAAP;AACD;AAHI,GAAP;AAKD;;AAED,IAAA,cAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAoC,EAAA,OAAA,CAAA,SAAA,CAAA,cAAA,EAAA,MAAA;;AAClC,WAAA,cAAA,CAAY,UAAZ,EAAuC,OAAvC,EAA+E,UAA/E,EAA8F;AAAf,QAAA,UAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,UAAA,GAAA,EAAA;AAAe;;AAA9F,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,UAAN,EAAkB,OAAlB,KAA0B,IAD5B;;AAA+E,IAAA,KAAA,CAAA,UAAA,GAAA,UAAA;;AAE9E;;AAEM,EAAA,cAAA,CAAA,SAAA,CAAA,WAAA,GAAP,UAAmB,OAAnB,EAAuC;AAAvC,QAAA,KAAA,GAAA,IAAA;;AACE,WAAO,KAAK,WAAL,CAAiB,WAAjB,CAA6B,OAA7B,EAAsC,IAAtC,CAA2C,UAAA,QAAA,EAAQ;AAAI,aAAA,cAAc,CAAC,KAAD,EAAO,QAAP,EAAd,CAAc,CAAd;AAAiC,KAAxF,CAAP;AACD,GAFM;;AAGT,SAAA,cAAA;AAAC,CARD,CAAoC,iBAApC,CAAA;;;;AAUA,SAAS,cAAT,CAAwB,MAAxB,EAAgD,QAAhD,EAAiF,cAAjF,EAAuG;AAC7F,MAAA,OAAA,GAAA,QAAA,CAAA,OAAA;AAAA,MAAS,MAAA,GAAA,QAAA,CAAA,MAAT;AACR,MAAM,cAAc,GAAG,QAAQ,CAAC,OAAT,CAAiB,GAAjB,CAAqB,UAArB,CAAvB;;AACA,MAAI,cAAc,KACf,MAAM,KAAK,GAAX,IAAkB,MAAM,KAAK,GAA7B,IAAqC,MAAM,KAAK,GAAX,IAAkB,OAAO,CAAC,MAAR,KAAmB,MAD3D,CAAd,KAED,CAAC,MAAM,CAAC,UAAR,IAAsB,cAAc,GAAG,MAAM,CAAC,UAF7C,CAAJ,EAE8D;AAE5D,QAAM,OAAO,GAAG,UAAU,CAAC,KAAX,CAAiB,OAAO,CAAC,GAAzB,CAAhB;AACA,IAAA,OAAO,CAAC,OAAR,CAAgB,cAAhB;AACA,IAAA,OAAO,CAAC,GAAR,GAAc,OAAO,CAAC,QAAR,EAAd,CAJ4D,CAM5D;AACA;;AACA,QAAI,MAAM,KAAK,GAAf,EAAoB;AAClB,MAAA,OAAO,CAAC,MAAR,GAAiB,KAAjB;AACD;;AAED,WAAO,MAAM,CAAC,WAAP,CAAmB,WAAnB,CAA+B,OAA/B,EACJ,IADI,CACC,UAAA,GAAA,EAAG;AAAI,aAAA,cAAc,CAAC,MAAD,EAAS,GAAT,EAAc,cAAc,GAA1C,CAAc,CAAd;AAA+C,KADvD,CAAP;AAED;;AAED,SAAO,OAAO,CAAC,OAAR,CAAgB,QAAhB,CAAP;AACD","sourceRoot":"","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport * as tslib_1 from \"tslib\";\nimport { URLBuilder } from \"../url\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nexport function redirectPolicy(maximumRetries) {\n    if (maximumRetries === void 0) { maximumRetries = 20; }\n    return {\n        create: function (nextPolicy, options) {\n            return new RedirectPolicy(nextPolicy, options, maximumRetries);\n        }\n    };\n}\nvar RedirectPolicy = /** @class */ (function (_super) {\n    tslib_1.__extends(RedirectPolicy, _super);\n    function RedirectPolicy(nextPolicy, options, maxRetries) {\n        if (maxRetries === void 0) { maxRetries = 20; }\n        var _this = _super.call(this, nextPolicy, options) || this;\n        _this.maxRetries = maxRetries;\n        return _this;\n    }\n    RedirectPolicy.prototype.sendRequest = function (request) {\n        var _this = this;\n        return this._nextPolicy.sendRequest(request).then(function (response) { return handleRedirect(_this, response, 0); });\n    };\n    return RedirectPolicy;\n}(BaseRequestPolicy));\nexport { RedirectPolicy };\nfunction handleRedirect(policy, response, currentRetries) {\n    var request = response.request, status = response.status;\n    var locationHeader = response.headers.get(\"location\");\n    if (locationHeader &&\n        (status === 300 || status === 307 || (status === 303 && request.method === \"POST\")) &&\n        (!policy.maxRetries || currentRetries < policy.maxRetries)) {\n        var builder = URLBuilder.parse(request.url);\n        builder.setPath(locationHeader);\n        request.url = builder.toString();\n        // POST request with Status code 303 should be converted into a\n        // redirected GET request if the redirect url is present in the location header\n        if (status === 303) {\n            request.method = \"GET\";\n        }\n        return policy._nextPolicy.sendRequest(request)\n            .then(function (res) { return handleRedirect(policy, res, currentRetries + 1); });\n    }\n    return Promise.resolve(response);\n}\n//# sourceMappingURL=redirectPolicy.js.map"]},"metadata":{},"sourceType":"module"}
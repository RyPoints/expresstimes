{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst msRest = require(\"@azure/ms-rest-js\");\n\nconst applicationTokenCredentialsBase_1 = require(\"../credentials/applicationTokenCredentialsBase\");\n\nconst authConstants_1 = require(\"../util/authConstants\");\n/**\n * Builds an array of tenantIds.\n * @param {TokenCredentialsBase} credentials The credentials.\n * @param {string} apiVersion default value 2016-06-01\n * @returns {Promise<string[]>} resolves to an array of tenantIds and rejects with an error.\n */\n\n\nfunction buildTenantList(credentials, apiVersion = \"2016-06-01\") {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (credentials.domain && credentials.domain !== authConstants_1.AuthConstants.AAD_COMMON_TENANT) {\n      return Promise.resolve([credentials.domain]);\n    }\n\n    const client = new msRest.ServiceClient(credentials);\n    const baseUrl = credentials.environment.resourceManagerEndpointUrl;\n    const reqUrl = `${baseUrl}${baseUrl.endsWith(\"/\") ? \"\" : \"/\"}tenants?api-version=${apiVersion}`;\n    const req = {\n      url: reqUrl,\n      method: \"GET\"\n    };\n    let res;\n\n    try {\n      res = yield client.sendRequest(req);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n    const result = [];\n    const tenants = res.parsedBody;\n\n    for (const tenant in tenants.value) {\n      result.push(tenant.tenantId);\n    }\n\n    return Promise.resolve(result);\n  });\n}\n\nexports.buildTenantList = buildTenantList;\n\nfunction getSubscriptionsFromTenants(credentials, tenantList, apiVersion = \"2016-06-01\") {\n  return __awaiter(this, void 0, void 0, function* () {\n    let subscriptions = [];\n    let userType = \"user\";\n    let username;\n    const originalDomain = credentials.domain;\n\n    if (credentials instanceof applicationTokenCredentialsBase_1.ApplicationTokenCredentialsBase) {\n      userType = \"servicePrincipal\";\n      username = credentials.clientId;\n    } else {\n      username = credentials.username;\n    }\n\n    for (const tenant of tenantList) {\n      credentials.domain = tenant;\n      const client = new msRest.ServiceClient(credentials);\n      const baseUrl = credentials.environment.resourceManagerEndpointUrl;\n      const reqUrl = `${baseUrl}${baseUrl.endsWith(\"/\") ? \"\" : \"/\"}subscriptions?api-version=${apiVersion}`;\n      const req = {\n        url: reqUrl,\n        method: \"GET\"\n      };\n      let res;\n\n      try {\n        res = yield client.sendRequest(req);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n\n      const subscriptionList = res.parsedBody.value;\n      subscriptions = subscriptions.concat(subscriptionList.map(s => {\n        s.tenantId = tenant;\n        s.user = {\n          name: username,\n          type: userType\n        };\n        s.environmentName = credentials.environment.name;\n        s.name = s.displayName;\n        s.id = s.subscriptionId;\n        delete s.displayName;\n        delete s.subscriptionId;\n        delete s.subscriptionPolicies;\n        return s;\n      }));\n    } // Reset the original domain.\n\n\n    credentials.domain = originalDomain;\n    return Promise.resolve(subscriptions);\n  });\n}\n\nexports.getSubscriptionsFromTenants = getSubscriptionsFromTenants;","map":{"version":3,"sources":["../../../lib/subscriptionManagement/subscriptionUtils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst msRest = require(\"@azure/ms-rest-js\");\nconst applicationTokenCredentialsBase_1 = require(\"../credentials/applicationTokenCredentialsBase\");\nconst authConstants_1 = require(\"../util/authConstants\");\n/**\n * Builds an array of tenantIds.\n * @param {TokenCredentialsBase} credentials The credentials.\n * @param {string} apiVersion default value 2016-06-01\n * @returns {Promise<string[]>} resolves to an array of tenantIds and rejects with an error.\n */\nfunction buildTenantList(credentials, apiVersion = \"2016-06-01\") {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (credentials.domain && credentials.domain !== authConstants_1.AuthConstants.AAD_COMMON_TENANT) {\n            return Promise.resolve([credentials.domain]);\n        }\n        const client = new msRest.ServiceClient(credentials);\n        const baseUrl = credentials.environment.resourceManagerEndpointUrl;\n        const reqUrl = `${baseUrl}${baseUrl.endsWith(\"/\") ? \"\" : \"/\"}tenants?api-version=${apiVersion}`;\n        const req = {\n            url: reqUrl,\n            method: \"GET\",\n        };\n        let res;\n        try {\n            res = yield client.sendRequest(req);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n        const result = [];\n        const tenants = res.parsedBody;\n        for (const tenant in tenants.value) {\n            result.push(tenant.tenantId);\n        }\n        return Promise.resolve(result);\n    });\n}\nexports.buildTenantList = buildTenantList;\nfunction getSubscriptionsFromTenants(credentials, tenantList, apiVersion = \"2016-06-01\") {\n    return __awaiter(this, void 0, void 0, function* () {\n        let subscriptions = [];\n        let userType = \"user\";\n        let username;\n        const originalDomain = credentials.domain;\n        if (credentials instanceof applicationTokenCredentialsBase_1.ApplicationTokenCredentialsBase) {\n            userType = \"servicePrincipal\";\n            username = credentials.clientId;\n        }\n        else {\n            username = credentials.username;\n        }\n        for (const tenant of tenantList) {\n            credentials.domain = tenant;\n            const client = new msRest.ServiceClient(credentials);\n            const baseUrl = credentials.environment.resourceManagerEndpointUrl;\n            const reqUrl = `${baseUrl}${baseUrl.endsWith(\"/\") ? \"\" : \"/\"}subscriptions?api-version=${apiVersion}`;\n            const req = {\n                url: reqUrl,\n                method: \"GET\",\n            };\n            let res;\n            try {\n                res = yield client.sendRequest(req);\n            }\n            catch (err) {\n                return Promise.reject(err);\n            }\n            const subscriptionList = res.parsedBody.value;\n            subscriptions = subscriptions.concat(subscriptionList.map((s) => {\n                s.tenantId = tenant;\n                s.user = { name: username, type: userType };\n                s.environmentName = credentials.environment.name;\n                s.name = s.displayName;\n                s.id = s.subscriptionId;\n                delete s.displayName;\n                delete s.subscriptionId;\n                delete s.subscriptionPolicies;\n                return s;\n            }));\n        }\n        // Reset the original domain.\n        credentials.domain = originalDomain;\n        return Promise.resolve(subscriptions);\n    });\n}\nexports.getSubscriptionsFromTenants = getSubscriptionsFromTenants;\n//# sourceMappingURL=subscriptionUtils.js.map"]},"metadata":{},"sourceType":"script"}
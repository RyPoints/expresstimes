{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { HttpHeaders } from \"./httpHeaders\";\nimport { RestError } from \"./restError\";\n/**\n * A HttpClient implementation that uses XMLHttpRequest to send HTTP requests.\n */\n\nvar XhrHttpClient =\n/** @class */\nfunction () {\n  function XhrHttpClient() {}\n\n  XhrHttpClient.prototype.sendRequest = function (request) {\n    var xhr = new XMLHttpRequest();\n\n    if (request.proxySettings) {\n      throw new Error(\"HTTP proxy is not supported in browser environment\");\n    }\n\n    var abortSignal = request.abortSignal;\n\n    if (abortSignal) {\n      var listener_1 = function () {\n        xhr.abort();\n      };\n\n      abortSignal.addEventListener(\"abort\", listener_1);\n      xhr.addEventListener(\"readystatechange\", function () {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n          abortSignal.removeEventListener(\"abort\", listener_1);\n        }\n      });\n    }\n\n    addProgressListener(xhr.upload, request.onUploadProgress);\n    addProgressListener(xhr, request.onDownloadProgress);\n\n    if (request.formData) {\n      var formData = request.formData;\n      var requestForm_1 = new FormData();\n\n      var appendFormValue = function (key, value) {\n        if (value && value.hasOwnProperty(\"value\") && value.hasOwnProperty(\"options\")) {\n          requestForm_1.append(key, value.value, value.options);\n        } else {\n          requestForm_1.append(key, value);\n        }\n      };\n\n      for (var _i = 0, _a = Object.keys(formData); _i < _a.length; _i++) {\n        var formKey = _a[_i];\n        var formValue = formData[formKey];\n\n        if (Array.isArray(formValue)) {\n          for (var j = 0; j < formValue.length; j++) {\n            appendFormValue(formKey, formValue[j]);\n          }\n        } else {\n          appendFormValue(formKey, formValue);\n        }\n      }\n\n      request.body = requestForm_1;\n      request.formData = undefined;\n      var contentType = request.headers.get(\"Content-Type\");\n\n      if (contentType && contentType.indexOf(\"multipart/form-data\") !== -1) {\n        // browser will automatically apply a suitable content-type header\n        request.headers.remove(\"Content-Type\");\n      }\n    }\n\n    xhr.open(request.method, request.url);\n    xhr.timeout = request.timeout;\n    xhr.withCredentials = request.withCredentials;\n\n    for (var _b = 0, _c = request.headers.headersArray(); _b < _c.length; _b++) {\n      var header = _c[_b];\n      xhr.setRequestHeader(header.name, header.value);\n    }\n\n    xhr.responseType = request.streamResponseBody ? \"blob\" : \"text\"; // tslint:disable-next-line:no-null-keyword\n\n    xhr.send(request.body === undefined ? null : request.body);\n\n    if (request.streamResponseBody) {\n      return new Promise(function (resolve, reject) {\n        xhr.addEventListener(\"readystatechange\", function () {\n          // Resolve as soon as headers are loaded\n          if (xhr.readyState === XMLHttpRequest.HEADERS_RECEIVED) {\n            var blobBody = new Promise(function (resolve, reject) {\n              xhr.addEventListener(\"load\", function () {\n                resolve(xhr.response);\n              });\n              rejectOnTerminalEvent(request, xhr, reject);\n            });\n            resolve({\n              request: request,\n              status: xhr.status,\n              headers: parseHeaders(xhr),\n              blobBody: blobBody\n            });\n          }\n        });\n        rejectOnTerminalEvent(request, xhr, reject);\n      });\n    } else {\n      return new Promise(function (resolve, reject) {\n        xhr.addEventListener(\"load\", function () {\n          return resolve({\n            request: request,\n            status: xhr.status,\n            headers: parseHeaders(xhr),\n            bodyAsText: xhr.responseText\n          });\n        });\n        rejectOnTerminalEvent(request, xhr, reject);\n      });\n    }\n  };\n\n  return XhrHttpClient;\n}();\n\nexport { XhrHttpClient };\n\nfunction addProgressListener(xhr, listener) {\n  if (listener) {\n    xhr.addEventListener(\"progress\", function (rawEvent) {\n      return listener({\n        loadedBytes: rawEvent.loaded\n      });\n    });\n  }\n} // exported locally for testing\n\n\nexport function parseHeaders(xhr) {\n  var responseHeaders = new HttpHeaders();\n  var headerLines = xhr.getAllResponseHeaders().trim().split(/[\\r\\n]+/);\n\n  for (var _i = 0, headerLines_1 = headerLines; _i < headerLines_1.length; _i++) {\n    var line = headerLines_1[_i];\n    var index = line.indexOf(\":\");\n    var headerName = line.slice(0, index);\n    var headerValue = line.slice(index + 2);\n    responseHeaders.set(headerName, headerValue);\n  }\n\n  return responseHeaders;\n}\n\nfunction rejectOnTerminalEvent(request, xhr, reject) {\n  xhr.addEventListener(\"error\", function () {\n    return reject(new RestError(\"Failed to send request to \" + request.url, RestError.REQUEST_SEND_ERROR, undefined, request));\n  });\n  xhr.addEventListener(\"abort\", function () {\n    return reject(new RestError(\"The request was aborted\", RestError.REQUEST_ABORTED_ERROR, undefined, request));\n  });\n  xhr.addEventListener(\"timeout\", function () {\n    return reject(new RestError(\"timeout of \" + xhr.timeout + \"ms exceeded\", RestError.REQUEST_SEND_ERROR, undefined, request));\n  });\n}","map":{"version":3,"sources":["../../lib/xhrHttpClient.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { HttpHeaders } from \"./httpHeaders\";\nimport { RestError } from \"./restError\";\n/**\n * A HttpClient implementation that uses XMLHttpRequest to send HTTP requests.\n */\nvar XhrHttpClient = /** @class */ (function () {\n    function XhrHttpClient() {\n    }\n    XhrHttpClient.prototype.sendRequest = function (request) {\n        var xhr = new XMLHttpRequest();\n        if (request.proxySettings) {\n            throw new Error(\"HTTP proxy is not supported in browser environment\");\n        }\n        var abortSignal = request.abortSignal;\n        if (abortSignal) {\n            var listener_1 = function () {\n                xhr.abort();\n            };\n            abortSignal.addEventListener(\"abort\", listener_1);\n            xhr.addEventListener(\"readystatechange\", function () {\n                if (xhr.readyState === XMLHttpRequest.DONE) {\n                    abortSignal.removeEventListener(\"abort\", listener_1);\n                }\n            });\n        }\n        addProgressListener(xhr.upload, request.onUploadProgress);\n        addProgressListener(xhr, request.onDownloadProgress);\n        if (request.formData) {\n            var formData = request.formData;\n            var requestForm_1 = new FormData();\n            var appendFormValue = function (key, value) {\n                if (value && value.hasOwnProperty(\"value\") && value.hasOwnProperty(\"options\")) {\n                    requestForm_1.append(key, value.value, value.options);\n                }\n                else {\n                    requestForm_1.append(key, value);\n                }\n            };\n            for (var _i = 0, _a = Object.keys(formData); _i < _a.length; _i++) {\n                var formKey = _a[_i];\n                var formValue = formData[formKey];\n                if (Array.isArray(formValue)) {\n                    for (var j = 0; j < formValue.length; j++) {\n                        appendFormValue(formKey, formValue[j]);\n                    }\n                }\n                else {\n                    appendFormValue(formKey, formValue);\n                }\n            }\n            request.body = requestForm_1;\n            request.formData = undefined;\n            var contentType = request.headers.get(\"Content-Type\");\n            if (contentType && contentType.indexOf(\"multipart/form-data\") !== -1) {\n                // browser will automatically apply a suitable content-type header\n                request.headers.remove(\"Content-Type\");\n            }\n        }\n        xhr.open(request.method, request.url);\n        xhr.timeout = request.timeout;\n        xhr.withCredentials = request.withCredentials;\n        for (var _b = 0, _c = request.headers.headersArray(); _b < _c.length; _b++) {\n            var header = _c[_b];\n            xhr.setRequestHeader(header.name, header.value);\n        }\n        xhr.responseType = request.streamResponseBody ? \"blob\" : \"text\";\n        // tslint:disable-next-line:no-null-keyword\n        xhr.send(request.body === undefined ? null : request.body);\n        if (request.streamResponseBody) {\n            return new Promise(function (resolve, reject) {\n                xhr.addEventListener(\"readystatechange\", function () {\n                    // Resolve as soon as headers are loaded\n                    if (xhr.readyState === XMLHttpRequest.HEADERS_RECEIVED) {\n                        var blobBody = new Promise(function (resolve, reject) {\n                            xhr.addEventListener(\"load\", function () {\n                                resolve(xhr.response);\n                            });\n                            rejectOnTerminalEvent(request, xhr, reject);\n                        });\n                        resolve({\n                            request: request,\n                            status: xhr.status,\n                            headers: parseHeaders(xhr),\n                            blobBody: blobBody\n                        });\n                    }\n                });\n                rejectOnTerminalEvent(request, xhr, reject);\n            });\n        }\n        else {\n            return new Promise(function (resolve, reject) {\n                xhr.addEventListener(\"load\", function () { return resolve({\n                    request: request,\n                    status: xhr.status,\n                    headers: parseHeaders(xhr),\n                    bodyAsText: xhr.responseText\n                }); });\n                rejectOnTerminalEvent(request, xhr, reject);\n            });\n        }\n    };\n    return XhrHttpClient;\n}());\nexport { XhrHttpClient };\nfunction addProgressListener(xhr, listener) {\n    if (listener) {\n        xhr.addEventListener(\"progress\", function (rawEvent) { return listener({\n            loadedBytes: rawEvent.loaded\n        }); });\n    }\n}\n// exported locally for testing\nexport function parseHeaders(xhr) {\n    var responseHeaders = new HttpHeaders();\n    var headerLines = xhr.getAllResponseHeaders().trim().split(/[\\r\\n]+/);\n    for (var _i = 0, headerLines_1 = headerLines; _i < headerLines_1.length; _i++) {\n        var line = headerLines_1[_i];\n        var index = line.indexOf(\":\");\n        var headerName = line.slice(0, index);\n        var headerValue = line.slice(index + 2);\n        responseHeaders.set(headerName, headerValue);\n    }\n    return responseHeaders;\n}\nfunction rejectOnTerminalEvent(request, xhr, reject) {\n    xhr.addEventListener(\"error\", function () { return reject(new RestError(\"Failed to send request to \" + request.url, RestError.REQUEST_SEND_ERROR, undefined, request)); });\n    xhr.addEventListener(\"abort\", function () { return reject(new RestError(\"The request was aborted\", RestError.REQUEST_ABORTED_ERROR, undefined, request)); });\n    xhr.addEventListener(\"timeout\", function () { return reject(new RestError(\"timeout of \" + xhr.timeout + \"ms exceeded\", RestError.REQUEST_SEND_ERROR, undefined, request)); });\n}\n//# sourceMappingURL=xhrHttpClient.js.map"]},"metadata":{},"sourceType":"module"}
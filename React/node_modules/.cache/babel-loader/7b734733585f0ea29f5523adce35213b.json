{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _intn = _interopRequireDefault(require(\"./intn\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst BigInt = {\n  id: 0x7F,\n  type: 'INT8',\n  name: 'BigInt',\n  declaration: function declaration() {\n    return 'bigint';\n  },\n  writeTypeInfo: function writeTypeInfo(buffer) {\n    buffer.writeUInt8(_intn.default.id);\n    buffer.writeUInt8(8);\n  },\n  writeParameterData: function writeParameterData(buffer, parameter, _options, cb) {\n    const value = parameter.value;\n\n    if (value != null) {\n      const val = typeof value !== 'number' ? parseInt(value) : value;\n      buffer.writeUInt8(8);\n      buffer.writeInt64LE(val);\n    } else {\n      buffer.writeUInt8(0);\n    }\n\n    cb();\n  },\n  validate: function validate(value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (isNaN(value)) {\n      return new TypeError('Invalid number.');\n    }\n\n    if (value < -9007199254740991 || value > 9007199254740991) {\n      // Number.MIN_SAFE_INTEGER = -9007199254740991\n      // Number.MAX_SAFE_INTEGER = 9007199254740991\n      // 9007199254740991 = (2**53) - 1\n      // Can't use Number.MIN_SAFE_INTEGER and Number.MAX_SAFE_INTEGER directly though\n      // as these constants are not available in node 0.10.\n      return new TypeError('Value must be between -9007199254740991 and 9007199254740991, inclusive.' + ' For bigger numbers, use VarChar type.');\n    }\n\n    return value;\n  }\n};\nvar _default = BigInt;\nexports.default = _default;\nmodule.exports = BigInt;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/tedious/lib/data-types/bigint.js"],"names":["Object","defineProperty","exports","value","default","_intn","_interopRequireDefault","require","obj","__esModule","BigInt","id","type","name","declaration","writeTypeInfo","buffer","writeUInt8","writeParameterData","parameter","_options","cb","val","parseInt","writeInt64LE","validate","isNaN","TypeError","_default","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,KAAK,GAAGC,sBAAsB,CAACC,OAAO,CAAC,QAAD,CAAR,CAAlC;;AAEA,SAASD,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEJ,IAAAA,OAAO,EAAEI;AAAX,GAArC;AAAwD;;AAE/F,MAAME,MAAM,GAAG;AACbC,EAAAA,EAAE,EAAE,IADS;AAEbC,EAAAA,IAAI,EAAE,MAFO;AAGbC,EAAAA,IAAI,EAAE,QAHO;AAIbC,EAAAA,WAAW,EAAE,SAASA,WAAT,GAAuB;AAClC,WAAO,QAAP;AACD,GANY;AAObC,EAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBC,MAAvB,EAA+B;AAC5CA,IAAAA,MAAM,CAACC,UAAP,CAAkBZ,KAAK,CAACD,OAAN,CAAcO,EAAhC;AACAK,IAAAA,MAAM,CAACC,UAAP,CAAkB,CAAlB;AACD,GAVY;AAWbC,EAAAA,kBAAkB,EAAE,SAASA,kBAAT,CAA4BF,MAA5B,EAAoCG,SAApC,EAA+CC,QAA/C,EAAyDC,EAAzD,EAA6D;AAC/E,UAAMlB,KAAK,GAAGgB,SAAS,CAAChB,KAAxB;;AAEA,QAAIA,KAAK,IAAI,IAAb,EAAmB;AACjB,YAAMmB,GAAG,GAAG,OAAOnB,KAAP,KAAiB,QAAjB,GAA4BoB,QAAQ,CAACpB,KAAD,CAApC,GAA8CA,KAA1D;AACAa,MAAAA,MAAM,CAACC,UAAP,CAAkB,CAAlB;AACAD,MAAAA,MAAM,CAACQ,YAAP,CAAoBF,GAApB;AACD,KAJD,MAIO;AACLN,MAAAA,MAAM,CAACC,UAAP,CAAkB,CAAlB;AACD;;AAEDI,IAAAA,EAAE;AACH,GAvBY;AAwBbI,EAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBtB,KAAlB,EAAyB;AACjC,QAAIA,KAAK,IAAI,IAAb,EAAmB;AACjB,aAAO,IAAP;AACD;;AAED,QAAIuB,KAAK,CAACvB,KAAD,CAAT,EAAkB;AAChB,aAAO,IAAIwB,SAAJ,CAAc,iBAAd,CAAP;AACD;;AAED,QAAIxB,KAAK,GAAG,CAAC,gBAAT,IAA6BA,KAAK,GAAG,gBAAzC,EAA2D;AACzD;AACA;AACA;AACA;AACA;AACA,aAAO,IAAIwB,SAAJ,CAAc,6EAA6E,wCAA3F,CAAP;AACD;;AAED,WAAOxB,KAAP;AACD;AA3CY,CAAf;AA6CA,IAAIyB,QAAQ,GAAGlB,MAAf;AACAR,OAAO,CAACE,OAAR,GAAkBwB,QAAlB;AACAC,MAAM,CAAC3B,OAAP,GAAiBQ,MAAjB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _intn = _interopRequireDefault(require(\"./intn\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst BigInt = {\n  id: 0x7F,\n  type: 'INT8',\n  name: 'BigInt',\n  declaration: function declaration() {\n    return 'bigint';\n  },\n  writeTypeInfo: function writeTypeInfo(buffer) {\n    buffer.writeUInt8(_intn.default.id);\n    buffer.writeUInt8(8);\n  },\n  writeParameterData: function writeParameterData(buffer, parameter, _options, cb) {\n    const value = parameter.value;\n\n    if (value != null) {\n      const val = typeof value !== 'number' ? parseInt(value) : value;\n      buffer.writeUInt8(8);\n      buffer.writeInt64LE(val);\n    } else {\n      buffer.writeUInt8(0);\n    }\n\n    cb();\n  },\n  validate: function validate(value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (isNaN(value)) {\n      return new TypeError('Invalid number.');\n    }\n\n    if (value < -9007199254740991 || value > 9007199254740991) {\n      // Number.MIN_SAFE_INTEGER = -9007199254740991\n      // Number.MAX_SAFE_INTEGER = 9007199254740991\n      // 9007199254740991 = (2**53) - 1\n      // Can't use Number.MIN_SAFE_INTEGER and Number.MAX_SAFE_INTEGER directly though\n      // as these constants are not available in node 0.10.\n      return new TypeError('Value must be between -9007199254740991 and 9007199254740991, inclusive.' + ' For bigger numbers, use VarChar type.');\n    }\n\n    return value;\n  }\n};\nvar _default = BigInt;\nexports.default = _default;\nmodule.exports = BigInt;"]},"metadata":{},"sourceType":"script"}
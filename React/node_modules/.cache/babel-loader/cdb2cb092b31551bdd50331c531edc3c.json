{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst Op = require('../../../operators');\n\nconst Utils = require('../../../utils');\n\nconst OperatorHelpers = {\n  OperatorMap: {\n    [Op.eq]: '=',\n    [Op.ne]: '!=',\n    [Op.gte]: '>=',\n    [Op.gt]: '>',\n    [Op.lte]: '<=',\n    [Op.lt]: '<',\n    [Op.not]: 'IS NOT',\n    [Op.is]: 'IS',\n    [Op.in]: 'IN',\n    [Op.notIn]: 'NOT IN',\n    [Op.like]: 'LIKE',\n    [Op.notLike]: 'NOT LIKE',\n    [Op.iLike]: 'ILIKE',\n    [Op.notILike]: 'NOT ILIKE',\n    [Op.startsWith]: 'LIKE',\n    [Op.endsWith]: 'LIKE',\n    [Op.substring]: 'LIKE',\n    [Op.regexp]: '~',\n    [Op.notRegexp]: '!~',\n    [Op.iRegexp]: '~*',\n    [Op.notIRegexp]: '!~*',\n    [Op.between]: 'BETWEEN',\n    [Op.notBetween]: 'NOT BETWEEN',\n    [Op.overlap]: '&&',\n    [Op.contains]: '@>',\n    [Op.contained]: '<@',\n    [Op.adjacent]: '-|-',\n    [Op.strictLeft]: '<<',\n    [Op.strictRight]: '>>',\n    [Op.noExtendRight]: '&<',\n    [Op.noExtendLeft]: '&>',\n    [Op.any]: 'ANY',\n    [Op.all]: 'ALL',\n    [Op.and]: ' AND ',\n    [Op.or]: ' OR ',\n    [Op.col]: 'COL',\n    [Op.placeholder]: '$$PLACEHOLDER$$'\n  },\n  OperatorsAliasMap: {},\n\n  setOperatorsAliases(aliases) {\n    if (!aliases || _.isEmpty(aliases)) {\n      this.OperatorsAliasMap = false;\n    } else {\n      this.OperatorsAliasMap = Object.assign({}, aliases);\n    }\n  },\n\n  _replaceAliases(orig) {\n    const obj = {};\n\n    if (!this.OperatorsAliasMap) {\n      return orig;\n    }\n\n    Utils.getOperators(orig).forEach(op => {\n      const item = orig[op];\n\n      if (_.isPlainObject(item)) {\n        obj[op] = this._replaceAliases(item);\n      } else {\n        obj[op] = item;\n      }\n    });\n\n    _.forOwn(orig, (item, prop) => {\n      prop = this.OperatorsAliasMap[prop] || prop;\n\n      if (_.isPlainObject(item)) {\n        item = this._replaceAliases(item);\n      }\n\n      obj[prop] = item;\n    });\n\n    return obj;\n  }\n\n};\nmodule.exports = OperatorHelpers;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/sequelize/lib/dialects/abstract/query-generator/operators.js"],"names":["_","require","Op","Utils","OperatorHelpers","OperatorMap","eq","ne","gte","gt","lte","lt","not","is","in","notIn","like","notLike","iLike","notILike","startsWith","endsWith","substring","regexp","notRegexp","iRegexp","notIRegexp","between","notBetween","overlap","contains","contained","adjacent","strictLeft","strictRight","noExtendRight","noExtendLeft","any","all","and","or","col","placeholder","OperatorsAliasMap","setOperatorsAliases","aliases","isEmpty","Object","assign","_replaceAliases","orig","obj","getOperators","forEach","op","item","isPlainObject","forOwn","prop","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst Op = require('../../../operators');\nconst Utils = require('../../../utils');\n\nconst OperatorHelpers = {\n  OperatorMap: {\n    [Op.eq]: '=',\n    [Op.ne]: '!=',\n    [Op.gte]: '>=',\n    [Op.gt]: '>',\n    [Op.lte]: '<=',\n    [Op.lt]: '<',\n    [Op.not]: 'IS NOT',\n    [Op.is]: 'IS',\n    [Op.in]: 'IN',\n    [Op.notIn]: 'NOT IN',\n    [Op.like]: 'LIKE',\n    [Op.notLike]: 'NOT LIKE',\n    [Op.iLike]: 'ILIKE',\n    [Op.notILike]: 'NOT ILIKE',\n    [Op.startsWith]: 'LIKE',\n    [Op.endsWith]: 'LIKE',\n    [Op.substring]: 'LIKE',\n    [Op.regexp]: '~',\n    [Op.notRegexp]: '!~',\n    [Op.iRegexp]: '~*',\n    [Op.notIRegexp]: '!~*',\n    [Op.between]: 'BETWEEN',\n    [Op.notBetween]: 'NOT BETWEEN',\n    [Op.overlap]: '&&',\n    [Op.contains]: '@>',\n    [Op.contained]: '<@',\n    [Op.adjacent]: '-|-',\n    [Op.strictLeft]: '<<',\n    [Op.strictRight]: '>>',\n    [Op.noExtendRight]: '&<',\n    [Op.noExtendLeft]: '&>',\n    [Op.any]: 'ANY',\n    [Op.all]: 'ALL',\n    [Op.and]: ' AND ',\n    [Op.or]: ' OR ',\n    [Op.col]: 'COL',\n    [Op.placeholder]: '$$PLACEHOLDER$$'\n  },\n\n  OperatorsAliasMap: {},\n\n  setOperatorsAliases(aliases) {\n    if (!aliases || _.isEmpty(aliases)) {\n      this.OperatorsAliasMap = false;\n    } else {\n      this.OperatorsAliasMap = Object.assign({}, aliases);\n    }\n  },\n\n  _replaceAliases(orig) {\n    const obj = {};\n    if (!this.OperatorsAliasMap) {\n      return orig;\n    }\n\n    Utils.getOperators(orig).forEach(op => {\n      const item = orig[op];\n      if (_.isPlainObject(item)) {\n        obj[op] = this._replaceAliases(item);\n      } else {\n        obj[op] = item;\n      }\n    });\n\n    _.forOwn(orig, (item, prop) => {\n      prop = this.OperatorsAliasMap[prop] || prop;\n      if (_.isPlainObject(item)) {\n        item = this._replaceAliases(item);\n      }\n      obj[prop] = item;\n    });\n    return obj;\n  }\n};\n\nmodule.exports = OperatorHelpers;\n"]},"metadata":{},"sourceType":"script"}
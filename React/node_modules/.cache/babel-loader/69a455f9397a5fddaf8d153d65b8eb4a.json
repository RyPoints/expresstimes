{"ast":null,"code":"/*\r\n * @copyright\r\n * Copyright Â© Microsoft Open Technologies, Inc.\r\n *\r\n * All Rights Reserved\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http: *www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS\r\n * OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION\r\n * ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A\r\n * PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.\r\n *\r\n * See the Apache License, Version 2.0 for the specific language\r\n * governing permissions and limitations under the License.\r\n */\n'use strict';\n\nvar querystring = require('querystring');\n\nvar request = require('request');\n\nvar _ = require('underscore');\n\nvar url = require('url');\n\nvar constants = require('./constants');\n\nvar Logger = require('./log').Logger;\n\nvar util = require('./util');\n\nvar AccountType = constants.UserRealm.AccountType;\nvar FederationProtocolType = constants.UserRealm.FederationProtocolType;\nvar USER_REALM_PATH_TEMPLATE = 'common/UserRealm/<user>';\n/**\r\n * Create a new UserRealm object\r\n * @private\r\n * @constructor\r\n * @param {object} callContext Contains any context information that applies to the request.\r\n * @param {string} userPrinciple   The username for which a realm needs to be discovered.\r\n * @param {string} authority       The string url of the authority that owns the userPrinciple.\r\n */\n\nfunction UserRealm(callContext, userPrinciple, authority) {\n  this._log = new Logger('UserRealm', callContext._logContext);\n  this._callContext = callContext;\n  this._apiVersion = '1.0';\n  this._federationProtocol = null;\n  this._accountType = null;\n  this._federationMetadataUrl = null;\n  this._federationActiveAuthUrl = null;\n  this._userPrinciple = userPrinciple;\n  this._authority = authority;\n}\n/**\r\n* The API version requested by UserRealm.\r\n* @type {string}\r\n* @instance\r\n* @memberOf UserRealm\r\n* @name apiVersion\r\n*/\n\n\nObject.defineProperty(UserRealm.prototype, 'apiVersion', {\n  get: function () {\n    return this._apiVersion;\n  }\n});\n/**\r\n* The federation protocol used by the users realm.\r\n* @type {string}\r\n* @instance\r\n* @memberOf UserRealm\r\n* @name federationProtocol\r\n*/\n\nObject.defineProperty(UserRealm.prototype, 'federationProtocol', {\n  get: function () {\n    return this._federationProtocol;\n  }\n});\n/**\r\n* The Type of account.  Either managed or federated.\r\n* @type {string}\r\n* @instance\r\n* @memberOf UserRealm\r\n* @name accountType\r\n*/\n\nObject.defineProperty(UserRealm.prototype, 'accountType', {\n  get: function () {\n    return this._accountType;\n  }\n});\n/**\r\n* If this is a federated account then this property will contain the mex url.\r\n* @type {string}\r\n* @instance\r\n* @memberOf UserRealm\r\n* @name federationsMetadataUrl\r\n*/\n\nObject.defineProperty(UserRealm.prototype, 'federationMetadataUrl', {\n  get: function () {\n    return this._federationMetadataUrl;\n  }\n});\n/**\r\n* If the account is federated this will contain the authentication endpoint.\r\n* @type {string}\r\n* @instance\r\n* @memberOf UserRealm\r\n* @name federationActiveAuthUrl\r\n*/\n\nObject.defineProperty(UserRealm.prototype, 'federationActiveAuthUrl', {\n  get: function () {\n    return this._federationActiveAuthUrl;\n  }\n});\n/**\r\n* Given the authority url this method constructs a full user realm discovery url.\r\n* @private\r\n* @returns A full user realm discovery url including path and query string.\r\n*/\n\nUserRealm.prototype._getUserRealmUrl = function () {\n  var userRealmUrl = util.copyUrl(this._authority);\n  var urlEncodedUser = encodeURIComponent(this._userPrinciple);\n  userRealmUrl.pathname = USER_REALM_PATH_TEMPLATE.replace('<user>', urlEncodedUser);\n  var userRealmQuery = {\n    'api-version': this._apiVersion\n  };\n  userRealmUrl.search = querystring.stringify(userRealmQuery);\n  userRealmUrl = util.copyUrl(userRealmUrl);\n  return userRealmUrl;\n};\n/**\r\n* Given a constants object and a value, validates that the value is a key in the constants object.\r\n* @private\r\n* @param {object} constants   An object containing constant key value pairs.\r\n* @param {string}  value       A value to check against the constants\r\n* @param {bool}   caseSensitive  set to true if comparisons should be made as case sensitive.  Defaults to false.\r\n* @returns {bool|string}  If value passed in matches one of the constants then the return value is the matched constant.\r\n*                         If a non case sensitive match was done, then the value returned may be different than the value\r\n*                         passed in.  If there is no match then the method returns false.\r\n*/\n\n\nUserRealm.prototype._validateConstantValue = function (constants, value, caseSensitive) {\n  if (!value) {\n    return false;\n  }\n\n  if (!caseSensitive) {\n    value = value.toLowerCase();\n  }\n\n  return _.contains(_.values(constants), value) ? value : false;\n};\n/**\r\n* Checks whether an account type string is valid.\r\n* @private\r\n* @param {string} type  An account type string.\r\n* @returns {bool}\r\n*/\n\n\nUserRealm.prototype._validateAccountType = function (type) {\n  return this._validateConstantValue(AccountType, type);\n};\n/**\r\n* Checks whether a federation protocol string is valid.\r\n* @private\r\n* @param {string} protocol  A federation protocol string.\r\n* @returns {bool}\r\n*/\n\n\nUserRealm.prototype._validateFederationProtocol = function (protocol) {\n  return this._validateConstantValue(FederationProtocolType, protocol);\n};\n/**\r\n* Logs the values parsed as part of user realm discovery.\r\n* @private\r\n*/\n\n\nUserRealm.prototype._logParsedResponse = function () {\n  this._log.verbose('UserRealm response:');\n\n  this._log.verbose(' AccountType:             ' + this.accountType);\n\n  this._log.verbose(' FederationProtocol:      ' + this.federationProtocol);\n\n  this._log.verbose(' FederationMetatdataUrl:  ' + this.federationMetadataUrl, true);\n\n  this._log.verbose(' FederationActiveAuthUrl: ' + this.federationActiveAuthUrl, true);\n};\n/**\r\n* Parses the response from a user realm discovery request.\r\n* @private\r\n* @param {string} body    The body returned as part of the http user realm discovery request.\r\n* @param {UserRealm.DiscoverCallback} callback  Called when parsing is complete.\r\n*/\n\n\nUserRealm.prototype._parseDiscoveryResponse = function (body, callback) {\n  this._log.verbose('Discovery response:\\n' + body, true);\n\n  var response;\n\n  try {\n    response = JSON.parse(body);\n  } catch (err) {\n    callback(this._log.createError('Parsing realm discovery respone JSON failed: ' + body, true));\n    return;\n  }\n\n  var accountType = this._validateAccountType(response['account_type']);\n\n  if (!accountType) {\n    callback(this._log.createError('Cannot parse account_type: ' + accountType));\n    return;\n  }\n\n  this._accountType = accountType;\n\n  if (this._accountType === AccountType.Federated) {\n    var protocol = this._validateFederationProtocol(response['federation_protocol']);\n\n    if (!protocol) {\n      callback(this._log.createError('Cannot parse federation protocol: ' + protocol));\n      return;\n    }\n\n    this._federationProtocol = protocol;\n    this._federationMetadataUrl = response['federation_metadata_url'];\n    this._federationActiveAuthUrl = response['federation_active_auth_url'];\n  }\n\n  this._logParsedResponse();\n\n  callback();\n};\n/**\r\n* @callback DiscoverCallback\r\n* @memberOf UserRealm\r\n* @param {Error} error   If an error occurs during discovery then this parameter will be used to return the error.\r\n*/\n\n/**\r\n* Performs user realm discovery and fills in the properties on this object.\r\n* @private\r\n* @param {UserRealm.DiscoverCallback} callback  Called when discovery is complete.\r\n*/\n\n\nUserRealm.prototype.discover = function (callback) {\n  var self = this;\n  var options = util.createRequestOptions(this, {\n    headers: {\n      Accept: 'application/json'\n    }\n  });\n\n  var userRealmUrl = this._getUserRealmUrl();\n\n  this._log.verbose('Performing user realm discovery at: ' + url.format(userRealmUrl), true);\n\n  request.get(userRealmUrl, options, util.createRequestHandler('User Realm Discovery', this._log, callback, function (response, body) {\n    self._parseDiscoveryResponse(body, callback);\n  }));\n};\n\nmodule.exports = UserRealm;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/adal-node/lib/user-realm.js"],"names":["querystring","require","request","_","url","constants","Logger","util","AccountType","UserRealm","FederationProtocolType","USER_REALM_PATH_TEMPLATE","callContext","userPrinciple","authority","_log","_logContext","_callContext","_apiVersion","_federationProtocol","_accountType","_federationMetadataUrl","_federationActiveAuthUrl","_userPrinciple","_authority","Object","defineProperty","prototype","get","_getUserRealmUrl","userRealmUrl","copyUrl","urlEncodedUser","encodeURIComponent","pathname","replace","userRealmQuery","search","stringify","_validateConstantValue","value","caseSensitive","toLowerCase","contains","values","_validateAccountType","type","_validateFederationProtocol","protocol","_logParsedResponse","verbose","accountType","federationProtocol","federationMetadataUrl","federationActiveAuthUrl","_parseDiscoveryResponse","body","callback","response","JSON","parse","err","createError","Federated","discover","self","options","createRequestOptions","headers","Accept","format","createRequestHandler","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;AAoBA;;AAEA,IAAIA,WAAW,GAAGC,OAAO,CAAC,aAAD,CAAzB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,SAAD,CAArB;;AACA,IAAIE,CAAC,GAAGF,OAAO,CAAC,YAAD,CAAf;;AACA,IAAIG,GAAG,GAAGH,OAAO,CAAC,KAAD,CAAjB;;AAEA,IAAII,SAAS,GAAGJ,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIK,MAAM,GAAGL,OAAO,CAAC,OAAD,CAAP,CAAiBK,MAA9B;;AACA,IAAIC,IAAI,GAAGN,OAAO,CAAC,QAAD,CAAlB;;AAEA,IAAIO,WAAW,GAAGH,SAAS,CAACI,SAAV,CAAoBD,WAAtC;AACA,IAAIE,sBAAsB,GAAGL,SAAS,CAACI,SAAV,CAAoBC,sBAAjD;AAEA,IAAIC,wBAAwB,GAAG,yBAA/B;AAEA;;;;;;;;;AAQA,SAASF,SAAT,CAAmBG,WAAnB,EAAgCC,aAAhC,EAA+CC,SAA/C,EAA0D;AACxD,OAAKC,IAAL,GAAY,IAAIT,MAAJ,CAAW,WAAX,EAAwBM,WAAW,CAACI,WAApC,CAAZ;AACA,OAAKC,YAAL,GAAoBL,WAApB;AACA,OAAKM,WAAL,GAAmB,KAAnB;AACA,OAAKC,mBAAL,GAA2B,IAA3B;AACA,OAAKC,YAAL,GAAoB,IAApB;AACA,OAAKC,sBAAL,GAA8B,IAA9B;AACA,OAAKC,wBAAL,GAAgC,IAAhC;AACA,OAAKC,cAAL,GAAsBV,aAAtB;AACA,OAAKW,UAAL,GAAkBV,SAAlB;AACD;AAED;;;;;;;;;AAOAW,MAAM,CAACC,cAAP,CAAsBjB,SAAS,CAACkB,SAAhC,EAA2C,YAA3C,EAAyD;AACvDC,EAAAA,GAAG,EAAG,YAAW;AACf,WAAO,KAAKV,WAAZ;AACD;AAHsD,CAAzD;AAMA;;;;;;;;AAOAO,MAAM,CAACC,cAAP,CAAsBjB,SAAS,CAACkB,SAAhC,EAA2C,oBAA3C,EAAiE;AAC/DC,EAAAA,GAAG,EAAG,YAAW;AACf,WAAO,KAAKT,mBAAZ;AACD;AAH8D,CAAjE;AAMA;;;;;;;;AAOAM,MAAM,CAACC,cAAP,CAAsBjB,SAAS,CAACkB,SAAhC,EAA2C,aAA3C,EAA0D;AACxDC,EAAAA,GAAG,EAAG,YAAW;AACf,WAAO,KAAKR,YAAZ;AACD;AAHuD,CAA1D;AAMA;;;;;;;;AAOAK,MAAM,CAACC,cAAP,CAAsBjB,SAAS,CAACkB,SAAhC,EAA2C,uBAA3C,EAAoE;AAClEC,EAAAA,GAAG,EAAG,YAAW;AACf,WAAO,KAAKP,sBAAZ;AACD;AAHiE,CAApE;AAMA;;;;;;;;AAOAI,MAAM,CAACC,cAAP,CAAsBjB,SAAS,CAACkB,SAAhC,EAA2C,yBAA3C,EAAsE;AACpEC,EAAAA,GAAG,EAAG,YAAW;AACf,WAAO,KAAKN,wBAAZ;AACD;AAHmE,CAAtE;AAMA;;;;;;AAKAb,SAAS,CAACkB,SAAV,CAAoBE,gBAApB,GAAuC,YAAW;AAChD,MAAIC,YAAY,GAAGvB,IAAI,CAACwB,OAAL,CAAa,KAAKP,UAAlB,CAAnB;AACA,MAAIQ,cAAc,GAAGC,kBAAkB,CAAC,KAAKV,cAAN,CAAvC;AACAO,EAAAA,YAAY,CAACI,QAAb,GAAwBvB,wBAAwB,CAACwB,OAAzB,CAAiC,QAAjC,EAA2CH,cAA3C,CAAxB;AAEA,MAAII,cAAc,GAAG;AACnB,mBAAgB,KAAKlB;AADF,GAArB;AAIAY,EAAAA,YAAY,CAACO,MAAb,GAAsBrC,WAAW,CAACsC,SAAZ,CAAsBF,cAAtB,CAAtB;AAEAN,EAAAA,YAAY,GAAGvB,IAAI,CAACwB,OAAL,CAAaD,YAAb,CAAf;AAEA,SAAOA,YAAP;AACD,CAdD;AAgBA;;;;;;;;;;;;AAUArB,SAAS,CAACkB,SAAV,CAAoBY,sBAApB,GAA6C,UAASlC,SAAT,EAAoBmC,KAApB,EAA2BC,aAA3B,EAA0C;AACrF,MAAI,CAACD,KAAL,EAAY;AACV,WAAO,KAAP;AACD;;AACD,MAAI,CAACC,aAAL,EAAoB;AAClBD,IAAAA,KAAK,GAAGA,KAAK,CAACE,WAAN,EAAR;AACD;;AACD,SAAOvC,CAAC,CAACwC,QAAF,CAAWxC,CAAC,CAACyC,MAAF,CAASvC,SAAT,CAAX,EAAgCmC,KAAhC,IAAyCA,KAAzC,GAAiD,KAAxD;AACD,CARD;AAUA;;;;;;;;AAMA/B,SAAS,CAACkB,SAAV,CAAoBkB,oBAApB,GAA2C,UAASC,IAAT,EAAe;AACxD,SAAO,KAAKP,sBAAL,CAA4B/B,WAA5B,EAAyCsC,IAAzC,CAAP;AACD,CAFD;AAIA;;;;;;;;AAMArC,SAAS,CAACkB,SAAV,CAAoBoB,2BAApB,GAAkD,UAASC,QAAT,EAAmB;AACnE,SAAO,KAAKT,sBAAL,CAA4B7B,sBAA5B,EAAoDsC,QAApD,CAAP;AACD,CAFD;AAIA;;;;;;AAIAvC,SAAS,CAACkB,SAAV,CAAoBsB,kBAApB,GAAyC,YAAW;AAClD,OAAKlC,IAAL,CAAUmC,OAAV,CAAkB,qBAAlB;;AACA,OAAKnC,IAAL,CAAUmC,OAAV,CAAkB,+BAA+B,KAAKC,WAAtD;;AACA,OAAKpC,IAAL,CAAUmC,OAAV,CAAkB,+BAA+B,KAAKE,kBAAtD;;AACA,OAAKrC,IAAL,CAAUmC,OAAV,CAAkB,+BAA+B,KAAKG,qBAAtD,EAA6E,IAA7E;;AACA,OAAKtC,IAAL,CAAUmC,OAAV,CAAkB,+BAA+B,KAAKI,uBAAtD,EAA+E,IAA/E;AACD,CAND;AAQA;;;;;;;;AAMA7C,SAAS,CAACkB,SAAV,CAAoB4B,uBAApB,GAA8C,UAASC,IAAT,EAAeC,QAAf,EAAyB;AACrE,OAAK1C,IAAL,CAAUmC,OAAV,CAAkB,0BAA0BM,IAA5C,EAAkD,IAAlD;;AAEA,MAAIE,QAAJ;;AACA,MAAI;AACFA,IAAAA,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAX;AACD,GAFD,CAEE,OAAOK,GAAP,EAAY;AACZJ,IAAAA,QAAQ,CAAC,KAAK1C,IAAL,CAAU+C,WAAV,CAAsB,kDAAkDN,IAAxE,EAA8E,IAA9E,CAAD,CAAR;AACA;AACD;;AAED,MAAIL,WAAW,GAAG,KAAKN,oBAAL,CAA0Ba,QAAQ,CAAC,cAAD,CAAlC,CAAlB;;AACA,MAAI,CAACP,WAAL,EAAkB;AAChBM,IAAAA,QAAQ,CAAC,KAAK1C,IAAL,CAAU+C,WAAV,CAAsB,gCAAgCX,WAAtD,CAAD,CAAR;AACA;AACD;;AAED,OAAK/B,YAAL,GAAoB+B,WAApB;;AAEA,MAAI,KAAK/B,YAAL,KAAsBZ,WAAW,CAACuD,SAAtC,EAAiD;AAC/C,QAAIf,QAAQ,GAAG,KAAKD,2BAAL,CAAiCW,QAAQ,CAAC,qBAAD,CAAzC,CAAf;;AAEA,QAAI,CAACV,QAAL,EAAe;AACbS,MAAAA,QAAQ,CAAC,KAAK1C,IAAL,CAAU+C,WAAV,CAAsB,uCAAuCd,QAA7D,CAAD,CAAR;AACA;AACD;;AAED,SAAK7B,mBAAL,GAA2B6B,QAA3B;AACA,SAAK3B,sBAAL,GAA8BqC,QAAQ,CAAC,yBAAD,CAAtC;AACA,SAAKpC,wBAAL,GAAgCoC,QAAQ,CAAC,4BAAD,CAAxC;AACD;;AAED,OAAKT,kBAAL;;AACAQ,EAAAA,QAAQ;AACT,CAlCD;AAoCA;;;;;;AAMA;;;;;;;AAKAhD,SAAS,CAACkB,SAAV,CAAoBqC,QAApB,GAA+B,UAASP,QAAT,EAAmB;AAChD,MAAIQ,IAAI,GAAG,IAAX;AACA,MAAIC,OAAO,GAAG3D,IAAI,CAAC4D,oBAAL,CACZ,IADY,EAEZ;AACEC,IAAAA,OAAO,EAAG;AACRC,MAAAA,MAAM,EAAG;AADD;AADZ,GAFY,CAAd;;AASA,MAAIvC,YAAY,GAAG,KAAKD,gBAAL,EAAnB;;AACA,OAAKd,IAAL,CAAUmC,OAAV,CAAkB,yCAAyC9C,GAAG,CAACkE,MAAJ,CAAWxC,YAAX,CAA3D,EAAqF,IAArF;;AACA5B,EAAAA,OAAO,CAAC0B,GAAR,CAAYE,YAAZ,EAA0BoC,OAA1B,EAAmC3D,IAAI,CAACgE,oBAAL,CAA0B,sBAA1B,EAAkD,KAAKxD,IAAvD,EAA6D0C,QAA7D,EACjC,UAASC,QAAT,EAAmBF,IAAnB,EAAyB;AACvBS,IAAAA,IAAI,CAACV,uBAAL,CAA6BC,IAA7B,EAAmCC,QAAnC;AACD,GAHgC,CAAnC;AAKD,CAlBD;;AAoBAe,MAAM,CAACC,OAAP,GAAiBhE,SAAjB","sourcesContent":["/*\r\n * @copyright\r\n * Copyright Â© Microsoft Open Technologies, Inc.\r\n *\r\n * All Rights Reserved\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http: *www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS\r\n * OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION\r\n * ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A\r\n * PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.\r\n *\r\n * See the Apache License, Version 2.0 for the specific language\r\n * governing permissions and limitations under the License.\r\n */\r\n'use strict';\r\n\r\nvar querystring = require('querystring');\r\nvar request = require('request');\r\nvar _ = require('underscore');\r\nvar url = require('url');\r\n\r\nvar constants = require('./constants');\r\nvar Logger = require('./log').Logger;\r\nvar util = require('./util');\r\n\r\nvar AccountType = constants.UserRealm.AccountType;\r\nvar FederationProtocolType = constants.UserRealm.FederationProtocolType;\r\n\r\nvar USER_REALM_PATH_TEMPLATE = 'common/UserRealm/<user>';\r\n\r\n/**\r\n * Create a new UserRealm object\r\n * @private\r\n * @constructor\r\n * @param {object} callContext Contains any context information that applies to the request.\r\n * @param {string} userPrinciple   The username for which a realm needs to be discovered.\r\n * @param {string} authority       The string url of the authority that owns the userPrinciple.\r\n */\r\nfunction UserRealm(callContext, userPrinciple, authority) {\r\n  this._log = new Logger('UserRealm', callContext._logContext);\r\n  this._callContext = callContext;\r\n  this._apiVersion = '1.0';\r\n  this._federationProtocol = null;\r\n  this._accountType = null;\r\n  this._federationMetadataUrl = null;\r\n  this._federationActiveAuthUrl = null;\r\n  this._userPrinciple = userPrinciple;\r\n  this._authority = authority;\r\n}\r\n\r\n/**\r\n* The API version requested by UserRealm.\r\n* @type {string}\r\n* @instance\r\n* @memberOf UserRealm\r\n* @name apiVersion\r\n*/\r\nObject.defineProperty(UserRealm.prototype, 'apiVersion', {\r\n  get : function() {\r\n    return this._apiVersion;\r\n  }\r\n});\r\n\r\n/**\r\n* The federation protocol used by the users realm.\r\n* @type {string}\r\n* @instance\r\n* @memberOf UserRealm\r\n* @name federationProtocol\r\n*/\r\nObject.defineProperty(UserRealm.prototype, 'federationProtocol', {\r\n  get : function() {\r\n    return this._federationProtocol;\r\n  }\r\n});\r\n\r\n/**\r\n* The Type of account.  Either managed or federated.\r\n* @type {string}\r\n* @instance\r\n* @memberOf UserRealm\r\n* @name accountType\r\n*/\r\nObject.defineProperty(UserRealm.prototype, 'accountType', {\r\n  get : function() {\r\n    return this._accountType;\r\n  }\r\n});\r\n\r\n/**\r\n* If this is a federated account then this property will contain the mex url.\r\n* @type {string}\r\n* @instance\r\n* @memberOf UserRealm\r\n* @name federationsMetadataUrl\r\n*/\r\nObject.defineProperty(UserRealm.prototype, 'federationMetadataUrl', {\r\n  get : function() {\r\n    return this._federationMetadataUrl;\r\n  }\r\n});\r\n\r\n/**\r\n* If the account is federated this will contain the authentication endpoint.\r\n* @type {string}\r\n* @instance\r\n* @memberOf UserRealm\r\n* @name federationActiveAuthUrl\r\n*/\r\nObject.defineProperty(UserRealm.prototype, 'federationActiveAuthUrl', {\r\n  get : function() {\r\n    return this._federationActiveAuthUrl;\r\n  }\r\n});\r\n\r\n/**\r\n* Given the authority url this method constructs a full user realm discovery url.\r\n* @private\r\n* @returns A full user realm discovery url including path and query string.\r\n*/\r\nUserRealm.prototype._getUserRealmUrl = function() {\r\n  var userRealmUrl = util.copyUrl(this._authority);\r\n  var urlEncodedUser = encodeURIComponent(this._userPrinciple);\r\n  userRealmUrl.pathname = USER_REALM_PATH_TEMPLATE.replace('<user>', urlEncodedUser);\r\n\r\n  var userRealmQuery = {\r\n    'api-version' : this._apiVersion\r\n  };\r\n\r\n  userRealmUrl.search = querystring.stringify(userRealmQuery);\r\n\r\n  userRealmUrl = util.copyUrl(userRealmUrl);\r\n\r\n  return userRealmUrl;\r\n};\r\n\r\n/**\r\n* Given a constants object and a value, validates that the value is a key in the constants object.\r\n* @private\r\n* @param {object} constants   An object containing constant key value pairs.\r\n* @param {string}  value       A value to check against the constants\r\n* @param {bool}   caseSensitive  set to true if comparisons should be made as case sensitive.  Defaults to false.\r\n* @returns {bool|string}  If value passed in matches one of the constants then the return value is the matched constant.\r\n*                         If a non case sensitive match was done, then the value returned may be different than the value\r\n*                         passed in.  If there is no match then the method returns false.\r\n*/\r\nUserRealm.prototype._validateConstantValue = function(constants, value, caseSensitive) {\r\n  if (!value) {\r\n    return false;\r\n  }\r\n  if (!caseSensitive) {\r\n    value = value.toLowerCase();\r\n  }\r\n  return _.contains(_.values(constants), value) ? value : false;\r\n};\r\n\r\n/**\r\n* Checks whether an account type string is valid.\r\n* @private\r\n* @param {string} type  An account type string.\r\n* @returns {bool}\r\n*/\r\nUserRealm.prototype._validateAccountType = function(type) {\r\n  return this._validateConstantValue(AccountType, type);\r\n};\r\n\r\n/**\r\n* Checks whether a federation protocol string is valid.\r\n* @private\r\n* @param {string} protocol  A federation protocol string.\r\n* @returns {bool}\r\n*/\r\nUserRealm.prototype._validateFederationProtocol = function(protocol) {\r\n  return this._validateConstantValue(FederationProtocolType, protocol);\r\n};\r\n\r\n/**\r\n* Logs the values parsed as part of user realm discovery.\r\n* @private\r\n*/\r\nUserRealm.prototype._logParsedResponse = function() {\r\n  this._log.verbose('UserRealm response:');\r\n  this._log.verbose(' AccountType:             ' + this.accountType);\r\n  this._log.verbose(' FederationProtocol:      ' + this.federationProtocol);\r\n  this._log.verbose(' FederationMetatdataUrl:  ' + this.federationMetadataUrl, true);\r\n  this._log.verbose(' FederationActiveAuthUrl: ' + this.federationActiveAuthUrl, true);\r\n};\r\n\r\n/**\r\n* Parses the response from a user realm discovery request.\r\n* @private\r\n* @param {string} body    The body returned as part of the http user realm discovery request.\r\n* @param {UserRealm.DiscoverCallback} callback  Called when parsing is complete.\r\n*/\r\nUserRealm.prototype._parseDiscoveryResponse = function(body, callback) {\r\n  this._log.verbose('Discovery response:\\n' + body, true);\r\n\r\n  var response;\r\n  try {\r\n    response = JSON.parse(body);\r\n  } catch (err) {\r\n    callback(this._log.createError('Parsing realm discovery respone JSON failed: ' + body, true));\r\n    return;\r\n  }\r\n\r\n  var accountType = this._validateAccountType(response['account_type']);\r\n  if (!accountType) {\r\n    callback(this._log.createError('Cannot parse account_type: ' + accountType));\r\n    return;\r\n  }\r\n\r\n  this._accountType = accountType;\r\n\r\n  if (this._accountType === AccountType.Federated) {\r\n    var protocol = this._validateFederationProtocol(response['federation_protocol']);\r\n\r\n    if (!protocol) {\r\n      callback(this._log.createError('Cannot parse federation protocol: ' + protocol));\r\n      return;\r\n    }\r\n\r\n    this._federationProtocol = protocol;\r\n    this._federationMetadataUrl = response['federation_metadata_url'];\r\n    this._federationActiveAuthUrl = response['federation_active_auth_url'];\r\n  }\r\n\r\n  this._logParsedResponse();\r\n  callback();\r\n};\r\n\r\n/**\r\n* @callback DiscoverCallback\r\n* @memberOf UserRealm\r\n* @param {Error} error   If an error occurs during discovery then this parameter will be used to return the error.\r\n*/\r\n\r\n/**\r\n* Performs user realm discovery and fills in the properties on this object.\r\n* @private\r\n* @param {UserRealm.DiscoverCallback} callback  Called when discovery is complete.\r\n*/\r\nUserRealm.prototype.discover = function(callback) {\r\n  var self = this;\r\n  var options = util.createRequestOptions(\r\n    this,\r\n    {\r\n      headers : {\r\n        Accept : 'application/json'\r\n      }\r\n    }\r\n  );\r\n\r\n  var userRealmUrl = this._getUserRealmUrl();\r\n  this._log.verbose('Performing user realm discovery at: ' + url.format(userRealmUrl), true);\r\n  request.get(userRealmUrl, options, util.createRequestHandler('User Realm Discovery', this._log, callback,\r\n    function(response, body) {\r\n      self._parseDiscoveryResponse(body, callback);\r\n    })\r\n  );\r\n};\r\n\r\nmodule.exports = UserRealm;"]},"metadata":{},"sourceType":"script"}
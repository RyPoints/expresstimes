{"ast":null,"code":"var Duplex = require('stream').Duplex;\n\nvar Writable = require('stream').Writable;\n\nvar util = require('util');\n\nvar CopyStream = module.exports = function (pq, options) {\n  Duplex.call(this, options);\n  this.pq = pq;\n  this._reading = false;\n};\n\nutil.inherits(CopyStream, Duplex); // writer methods\n\nCopyStream.prototype._write = function (chunk, encoding, cb) {\n  var result = this.pq.putCopyData(chunk); // sent successfully\n\n  if (result === 1) return cb(); // error\n\n  if (result === -1) return cb(new Error(this.pq.errorMessage())); // command would block. wait for writable and call again.\n\n  var self = this;\n  this.pq.writable(function () {\n    self._write(chunk, encoding, cb);\n  });\n};\n\nCopyStream.prototype.end = function () {\n  var args = Array.prototype.slice.call(arguments, 0);\n  var self = this;\n  var callback = args.pop();\n\n  if (args.length) {\n    this.write(args[0]);\n  }\n\n  var result = this.pq.putCopyEnd(); // sent successfully\n\n  if (result === 1) {\n    // consume our results and then call 'end' on the\n    // \"parent\" writable class so we can emit 'finish' and\n    // all that jazz\n    return consumeResults(this.pq, function (err, res) {\n      Writable.prototype.end.call(self); // handle possible passing of callback to end method\n\n      if (callback) {\n        callback(err);\n      }\n    });\n  } // error\n\n\n  if (result === -1) {\n    var err = new Error(this.pq.errorMessage());\n    return this.emit('error', err);\n  } // command would block. wait for writable and call end again\n  // don't pass any buffers to end on the second call because\n  // we already sent them to possible this.write the first time\n  // we called end\n\n\n  return this.pq.writable(function () {\n    return self.end.apply(self, callback);\n  });\n}; // reader methods\n\n\nCopyStream.prototype._consumeBuffer = function (cb) {\n  var result = this.pq.getCopyData(true);\n\n  if (result instanceof Buffer) {\n    return setImmediate(function () {\n      cb(null, result);\n    });\n  }\n\n  if (result === -1) {\n    // end of stream\n    return cb(null, null);\n  }\n\n  if (result === 0) {\n    var self = this;\n    this.pq.once('readable', function () {\n      self.pq.stopReader();\n      self.pq.consumeInput();\n\n      self._consumeBuffer(cb);\n    });\n    return this.pq.startReader();\n  }\n\n  cb(new Error('Unrecognized read status: ' + result));\n};\n\nCopyStream.prototype._read = function (size) {\n  if (this._reading) return;\n  this._reading = true; // console.log('read begin');\n\n  var self = this;\n\n  this._consumeBuffer(function (err, buffer) {\n    self._reading = false;\n\n    if (err) {\n      return self.emit('error', err);\n    }\n\n    if (buffer === false) {\n      // nothing to read for now, return\n      return;\n    }\n\n    self.push(buffer);\n  });\n};\n\nvar consumeResults = function (pq, cb) {\n  var cleanup = function () {\n    pq.removeListener('readable', onReadable);\n    pq.stopReader();\n  };\n\n  var readError = function (message) {\n    cleanup();\n    return cb(new Error(message || pq.errorMessage()));\n  };\n\n  var onReadable = function () {\n    // read waiting data from the socket\n    // e.g. clear the pending 'select'\n    if (!pq.consumeInput()) {\n      return readError();\n    } // check if there is still outstanding data\n    // if so, wait for it all to come in\n\n\n    if (pq.isBusy()) {\n      return;\n    } // load our result object\n\n\n    pq.getResult(); // \"read until results return null\"\n    // or in our case ensure we only have one result\n\n    if (pq.getResult() && pq.resultStatus() !== 'PGRES_COPY_OUT') {\n      return readError('Only one result at a time is accepted');\n    }\n\n    if (pq.resultStatus() === 'PGRES_FATAL_ERROR') {\n      return readError();\n    }\n\n    cleanup();\n    return cb(null);\n  };\n\n  pq.on('readable', onReadable);\n  pq.startReader();\n};","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/pg-native/lib/copy-stream.js"],"names":["Duplex","require","Writable","util","CopyStream","module","exports","pq","options","call","_reading","inherits","prototype","_write","chunk","encoding","cb","result","putCopyData","Error","errorMessage","self","writable","end","args","Array","slice","arguments","callback","pop","length","write","putCopyEnd","consumeResults","err","res","emit","apply","_consumeBuffer","getCopyData","Buffer","setImmediate","once","stopReader","consumeInput","startReader","_read","size","buffer","push","cleanup","removeListener","onReadable","readError","message","isBusy","getResult","resultStatus","on"],"mappings":"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","sourcesContent":["var Duplex = require('stream').Duplex\nvar Writable = require('stream').Writable\nvar util = require('util')\n\nvar CopyStream = module.exports = function (pq, options) {\n  Duplex.call(this, options)\n  this.pq = pq\n  this._reading = false\n}\n\nutil.inherits(CopyStream, Duplex)\n\n// writer methods\nCopyStream.prototype._write = function (chunk, encoding, cb) {\n  var result = this.pq.putCopyData(chunk)\n\n  // sent successfully\n  if (result === 1) return cb()\n\n  // error\n  if (result === -1) return cb(new Error(this.pq.errorMessage()))\n\n  // command would block. wait for writable and call again.\n  var self = this\n  this.pq.writable(function () {\n    self._write(chunk, encoding, cb)\n  })\n}\n\nCopyStream.prototype.end = function () {\n  var args = Array.prototype.slice.call(arguments, 0)\n  var self = this\n\n  var callback = args.pop()\n\n  if (args.length) {\n    this.write(args[0])\n  }\n  var result = this.pq.putCopyEnd()\n\n  // sent successfully\n  if (result === 1) {\n    // consume our results and then call 'end' on the\n    // \"parent\" writable class so we can emit 'finish' and\n    // all that jazz\n    return consumeResults(this.pq, function (err, res) {\n      Writable.prototype.end.call(self)\n\n      // handle possible passing of callback to end method\n      if (callback) {\n        callback(err)\n      }\n    })\n  }\n\n  // error\n  if (result === -1) {\n    var err = new Error(this.pq.errorMessage())\n    return this.emit('error', err)\n  }\n\n  // command would block. wait for writable and call end again\n  // don't pass any buffers to end on the second call because\n  // we already sent them to possible this.write the first time\n  // we called end\n  return this.pq.writable(function () {\n    return self.end.apply(self, callback)\n  })\n}\n\n// reader methods\nCopyStream.prototype._consumeBuffer = function (cb) {\n  var result = this.pq.getCopyData(true)\n  if (result instanceof Buffer) {\n    return setImmediate(function () {\n      cb(null, result)\n    })\n  }\n  if (result === -1) {\n    // end of stream\n    return cb(null, null)\n  }\n  if (result === 0) {\n    var self = this\n    this.pq.once('readable', function () {\n      self.pq.stopReader()\n      self.pq.consumeInput()\n      self._consumeBuffer(cb)\n    })\n    return this.pq.startReader()\n  }\n  cb(new Error('Unrecognized read status: ' + result))\n}\n\nCopyStream.prototype._read = function (size) {\n  if (this._reading) return\n  this._reading = true\n  // console.log('read begin');\n  var self = this\n  this._consumeBuffer(function (err, buffer) {\n    self._reading = false\n    if (err) {\n      return self.emit('error', err)\n    }\n    if (buffer === false) {\n      // nothing to read for now, return\n      return\n    }\n    self.push(buffer)\n  })\n}\n\nvar consumeResults = function (pq, cb) {\n  var cleanup = function () {\n    pq.removeListener('readable', onReadable)\n    pq.stopReader()\n  }\n\n  var readError = function (message) {\n    cleanup()\n    return cb(new Error(message || pq.errorMessage()))\n  }\n\n  var onReadable = function () {\n    // read waiting data from the socket\n    // e.g. clear the pending 'select'\n    if (!pq.consumeInput()) {\n      return readError()\n    }\n\n    // check if there is still outstanding data\n    // if so, wait for it all to come in\n    if (pq.isBusy()) {\n      return\n    }\n\n    // load our result object\n    pq.getResult()\n\n    // \"read until results return null\"\n    // or in our case ensure we only have one result\n    if (pq.getResult() && pq.resultStatus() !== 'PGRES_COPY_OUT') {\n      return readError('Only one result at a time is accepted')\n    }\n\n    if (pq.resultStatus() === 'PGRES_FATAL_ERROR') {\n      return readError()\n    }\n\n    cleanup()\n    return cb(null)\n  }\n  pq.on('readable', onReadable)\n  pq.startReader()\n}\n"]},"metadata":{},"sourceType":"script"}
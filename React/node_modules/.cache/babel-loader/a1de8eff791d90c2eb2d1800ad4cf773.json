{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\n/**\n * A collection of HttpHeaders that can be sent with a HTTP request.\n */\nfunction getHeaderKey(headerName) {\n  return headerName.toLowerCase();\n}\n/**\n * A collection of HTTP header key/value pairs.\n */\n\n\nvar HttpHeaders =\n/** @class */\nfunction () {\n  function HttpHeaders(rawHeaders) {\n    this._headersMap = {};\n\n    if (rawHeaders) {\n      for (var headerName in rawHeaders) {\n        this.set(headerName, rawHeaders[headerName]);\n      }\n    }\n  }\n  /**\n   * Set a header in this collection with the provided name and value. The name is\n   * case-insensitive.\n   * @param headerName The name of the header to set. This value is case-insensitive.\n   * @param headerValue The value of the header to set.\n   */\n\n\n  HttpHeaders.prototype.set = function (headerName, headerValue) {\n    this._headersMap[getHeaderKey(headerName)] = {\n      name: headerName,\n      value: headerValue.toString()\n    };\n  };\n  /**\n   * Get the header value for the provided header name, or undefined if no header exists in this\n   * collection with the provided name.\n   * @param headerName The name of the header.\n   */\n\n\n  HttpHeaders.prototype.get = function (headerName) {\n    var header = this._headersMap[getHeaderKey(headerName)];\n\n    return !header ? undefined : header.value;\n  };\n  /**\n   * Get whether or not this header collection contains a header entry for the provided header name.\n   */\n\n\n  HttpHeaders.prototype.contains = function (headerName) {\n    return !!this._headersMap[getHeaderKey(headerName)];\n  };\n  /**\n   * Remove the header with the provided headerName. Return whether or not the header existed and\n   * was removed.\n   * @param headerName The name of the header to remove.\n   */\n\n\n  HttpHeaders.prototype.remove = function (headerName) {\n    var result = this.contains(headerName);\n    delete this._headersMap[getHeaderKey(headerName)];\n    return result;\n  };\n  /**\n   * Get the headers that are contained this collection as an object.\n   */\n\n\n  HttpHeaders.prototype.rawHeaders = function () {\n    var result = {};\n\n    for (var headerKey in this._headersMap) {\n      var header = this._headersMap[headerKey];\n      result[header.name.toLowerCase()] = header.value;\n    }\n\n    return result;\n  };\n  /**\n   * Get the headers that are contained in this collection as an array.\n   */\n\n\n  HttpHeaders.prototype.headersArray = function () {\n    var headers = [];\n\n    for (var headerKey in this._headersMap) {\n      headers.push(this._headersMap[headerKey]);\n    }\n\n    return headers;\n  };\n  /**\n   * Get the header names that are contained in this collection.\n   */\n\n\n  HttpHeaders.prototype.headerNames = function () {\n    var headerNames = [];\n    var headers = this.headersArray();\n\n    for (var i = 0; i < headers.length; ++i) {\n      headerNames.push(headers[i].name);\n    }\n\n    return headerNames;\n  };\n  /**\n   * Get the header names that are contained in this collection.\n   */\n\n\n  HttpHeaders.prototype.headerValues = function () {\n    var headerValues = [];\n    var headers = this.headersArray();\n\n    for (var i = 0; i < headers.length; ++i) {\n      headerValues.push(headers[i].value);\n    }\n\n    return headerValues;\n  };\n  /**\n   * Get the JSON object representation of this HTTP header collection.\n   */\n\n\n  HttpHeaders.prototype.toJson = function () {\n    return this.rawHeaders();\n  };\n  /**\n   * Get the string representation of this HTTP header collection.\n   */\n\n\n  HttpHeaders.prototype.toString = function () {\n    return JSON.stringify(this.toJson());\n  };\n  /**\n   * Create a deep clone/copy of this HttpHeaders collection.\n   */\n\n\n  HttpHeaders.prototype.clone = function () {\n    return new HttpHeaders(this.rawHeaders());\n  };\n\n  return HttpHeaders;\n}();\n\nexport { HttpHeaders };","map":{"version":3,"sources":["../../lib/httpHeaders.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n/**\n * A collection of HttpHeaders that can be sent with a HTTP request.\n */\nfunction getHeaderKey(headerName) {\n    return headerName.toLowerCase();\n}\n/**\n * A collection of HTTP header key/value pairs.\n */\nvar HttpHeaders = /** @class */ (function () {\n    function HttpHeaders(rawHeaders) {\n        this._headersMap = {};\n        if (rawHeaders) {\n            for (var headerName in rawHeaders) {\n                this.set(headerName, rawHeaders[headerName]);\n            }\n        }\n    }\n    /**\n     * Set a header in this collection with the provided name and value. The name is\n     * case-insensitive.\n     * @param headerName The name of the header to set. This value is case-insensitive.\n     * @param headerValue The value of the header to set.\n     */\n    HttpHeaders.prototype.set = function (headerName, headerValue) {\n        this._headersMap[getHeaderKey(headerName)] = { name: headerName, value: headerValue.toString() };\n    };\n    /**\n     * Get the header value for the provided header name, or undefined if no header exists in this\n     * collection with the provided name.\n     * @param headerName The name of the header.\n     */\n    HttpHeaders.prototype.get = function (headerName) {\n        var header = this._headersMap[getHeaderKey(headerName)];\n        return !header ? undefined : header.value;\n    };\n    /**\n     * Get whether or not this header collection contains a header entry for the provided header name.\n     */\n    HttpHeaders.prototype.contains = function (headerName) {\n        return !!this._headersMap[getHeaderKey(headerName)];\n    };\n    /**\n     * Remove the header with the provided headerName. Return whether or not the header existed and\n     * was removed.\n     * @param headerName The name of the header to remove.\n     */\n    HttpHeaders.prototype.remove = function (headerName) {\n        var result = this.contains(headerName);\n        delete this._headersMap[getHeaderKey(headerName)];\n        return result;\n    };\n    /**\n     * Get the headers that are contained this collection as an object.\n     */\n    HttpHeaders.prototype.rawHeaders = function () {\n        var result = {};\n        for (var headerKey in this._headersMap) {\n            var header = this._headersMap[headerKey];\n            result[header.name.toLowerCase()] = header.value;\n        }\n        return result;\n    };\n    /**\n     * Get the headers that are contained in this collection as an array.\n     */\n    HttpHeaders.prototype.headersArray = function () {\n        var headers = [];\n        for (var headerKey in this._headersMap) {\n            headers.push(this._headersMap[headerKey]);\n        }\n        return headers;\n    };\n    /**\n     * Get the header names that are contained in this collection.\n     */\n    HttpHeaders.prototype.headerNames = function () {\n        var headerNames = [];\n        var headers = this.headersArray();\n        for (var i = 0; i < headers.length; ++i) {\n            headerNames.push(headers[i].name);\n        }\n        return headerNames;\n    };\n    /**\n     * Get the header names that are contained in this collection.\n     */\n    HttpHeaders.prototype.headerValues = function () {\n        var headerValues = [];\n        var headers = this.headersArray();\n        for (var i = 0; i < headers.length; ++i) {\n            headerValues.push(headers[i].value);\n        }\n        return headerValues;\n    };\n    /**\n     * Get the JSON object representation of this HTTP header collection.\n     */\n    HttpHeaders.prototype.toJson = function () {\n        return this.rawHeaders();\n    };\n    /**\n     * Get the string representation of this HTTP header collection.\n     */\n    HttpHeaders.prototype.toString = function () {\n        return JSON.stringify(this.toJson());\n    };\n    /**\n     * Create a deep clone/copy of this HttpHeaders collection.\n     */\n    HttpHeaders.prototype.clone = function () {\n        return new HttpHeaders(this.rawHeaders());\n    };\n    return HttpHeaders;\n}());\nexport { HttpHeaders };\n//# sourceMappingURL=httpHeaders.js.map"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict';\n\nconst Command = require('./command.js');\n\nconst Packets = require('../packets/index.js');\n\nconst ClientHandshake = require('./client_handshake.js');\n\nconst CharsetToEncoding = require('../constants/charset_encodings.js');\n\nclass ChangeUser extends Command {\n  constructor(options, callback) {\n    super();\n    this.onResult = callback;\n    this.user = options.user;\n    this.password = options.password;\n    this.database = options.database;\n    this.passwordSha1 = options.passwordSha1;\n    this.charsetNumber = options.charsetNumber;\n    this.currentConfig = options.currentConfig;\n  }\n\n  start(packet, connection) {\n    const newPacket = new Packets.ChangeUser({\n      flags: connection.config.clientFlags,\n      user: this.user,\n      database: this.database,\n      charsetNumber: this.charsetNumber,\n      password: this.password,\n      passwordSha1: this.passwordSha1,\n      authPluginData1: connection._handshakePacket.authPluginData1,\n      authPluginData2: connection._handshakePacket.authPluginData2\n    });\n    this.currentConfig.user = this.user;\n    this.currentConfig.password = this.password;\n    this.currentConfig.database = this.database;\n    this.currentConfig.charsetNumber = this.charsetNumber;\n    connection.clientEncoding = CharsetToEncoding[this.charsetNumber]; // reset prepared statements cache as all statements become invalid after changeUser\n\n    connection._statements.reset();\n\n    connection.writePacket(newPacket.toPacket());\n    return ChangeUser.prototype.handshakeResult;\n  }\n\n}\n\nChangeUser.prototype.handshakeResult = ClientHandshake.prototype.handshakeResult;\nChangeUser.prototype.calculateNativePasswordAuthToken = ClientHandshake.prototype.calculateNativePasswordAuthToken;\nmodule.exports = ChangeUser;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/mysql2/lib/commands/change_user.js"],"names":["Command","require","Packets","ClientHandshake","CharsetToEncoding","ChangeUser","constructor","options","callback","onResult","user","password","database","passwordSha1","charsetNumber","currentConfig","start","packet","connection","newPacket","flags","config","clientFlags","authPluginData1","_handshakePacket","authPluginData2","clientEncoding","_statements","reset","writePacket","toPacket","prototype","handshakeResult","calculateNativePasswordAuthToken","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,cAAD,CAAvB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,qBAAD,CAAvB;;AACA,MAAME,eAAe,GAAGF,OAAO,CAAC,uBAAD,CAA/B;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,mCAAD,CAAjC;;AAEA,MAAMI,UAAN,SAAyBL,OAAzB,CAAiC;AAC/BM,EAAAA,WAAW,CAACC,OAAD,EAAUC,QAAV,EAAoB;AAC7B;AACA,SAAKC,QAAL,GAAgBD,QAAhB;AACA,SAAKE,IAAL,GAAYH,OAAO,CAACG,IAApB;AACA,SAAKC,QAAL,GAAgBJ,OAAO,CAACI,QAAxB;AACA,SAAKC,QAAL,GAAgBL,OAAO,CAACK,QAAxB;AACA,SAAKC,YAAL,GAAoBN,OAAO,CAACM,YAA5B;AACA,SAAKC,aAAL,GAAqBP,OAAO,CAACO,aAA7B;AACA,SAAKC,aAAL,GAAqBR,OAAO,CAACQ,aAA7B;AACD;;AACDC,EAAAA,KAAK,CAACC,MAAD,EAASC,UAAT,EAAqB;AACxB,UAAMC,SAAS,GAAG,IAAIjB,OAAO,CAACG,UAAZ,CAAuB;AACvCe,MAAAA,KAAK,EAAEF,UAAU,CAACG,MAAX,CAAkBC,WADc;AAEvCZ,MAAAA,IAAI,EAAE,KAAKA,IAF4B;AAGvCE,MAAAA,QAAQ,EAAE,KAAKA,QAHwB;AAIvCE,MAAAA,aAAa,EAAE,KAAKA,aAJmB;AAKvCH,MAAAA,QAAQ,EAAE,KAAKA,QALwB;AAMvCE,MAAAA,YAAY,EAAE,KAAKA,YANoB;AAOvCU,MAAAA,eAAe,EAAEL,UAAU,CAACM,gBAAX,CAA4BD,eAPN;AAQvCE,MAAAA,eAAe,EAAEP,UAAU,CAACM,gBAAX,CAA4BC;AARN,KAAvB,CAAlB;AAUA,SAAKV,aAAL,CAAmBL,IAAnB,GAA0B,KAAKA,IAA/B;AACA,SAAKK,aAAL,CAAmBJ,QAAnB,GAA8B,KAAKA,QAAnC;AACA,SAAKI,aAAL,CAAmBH,QAAnB,GAA8B,KAAKA,QAAnC;AACA,SAAKG,aAAL,CAAmBD,aAAnB,GAAmC,KAAKA,aAAxC;AACAI,IAAAA,UAAU,CAACQ,cAAX,GAA4BtB,iBAAiB,CAAC,KAAKU,aAAN,CAA7C,CAfwB,CAgBxB;;AACAI,IAAAA,UAAU,CAACS,WAAX,CAAuBC,KAAvB;;AACAV,IAAAA,UAAU,CAACW,WAAX,CAAuBV,SAAS,CAACW,QAAV,EAAvB;AACA,WAAOzB,UAAU,CAAC0B,SAAX,CAAqBC,eAA5B;AACD;;AA/B8B;;AAkCjC3B,UAAU,CAAC0B,SAAX,CAAqBC,eAArB,GACE7B,eAAe,CAAC4B,SAAhB,CAA0BC,eAD5B;AAEA3B,UAAU,CAAC0B,SAAX,CAAqBE,gCAArB,GACE9B,eAAe,CAAC4B,SAAhB,CAA0BE,gCAD5B;AAGAC,MAAM,CAACC,OAAP,GAAiB9B,UAAjB","sourcesContent":["'use strict';\n\nconst Command = require('./command.js');\nconst Packets = require('../packets/index.js');\nconst ClientHandshake = require('./client_handshake.js');\nconst CharsetToEncoding = require('../constants/charset_encodings.js');\n\nclass ChangeUser extends Command {\n  constructor(options, callback) {\n    super();\n    this.onResult = callback;\n    this.user = options.user;\n    this.password = options.password;\n    this.database = options.database;\n    this.passwordSha1 = options.passwordSha1;\n    this.charsetNumber = options.charsetNumber;\n    this.currentConfig = options.currentConfig;\n  }\n  start(packet, connection) {\n    const newPacket = new Packets.ChangeUser({\n      flags: connection.config.clientFlags,\n      user: this.user,\n      database: this.database,\n      charsetNumber: this.charsetNumber,\n      password: this.password,\n      passwordSha1: this.passwordSha1,\n      authPluginData1: connection._handshakePacket.authPluginData1,\n      authPluginData2: connection._handshakePacket.authPluginData2\n    });\n    this.currentConfig.user = this.user;\n    this.currentConfig.password = this.password;\n    this.currentConfig.database = this.database;\n    this.currentConfig.charsetNumber = this.charsetNumber;\n    connection.clientEncoding = CharsetToEncoding[this.charsetNumber];\n    // reset prepared statements cache as all statements become invalid after changeUser\n    connection._statements.reset();\n    connection.writePacket(newPacket.toPacket());\n    return ChangeUser.prototype.handshakeResult;\n  }\n}\n\nChangeUser.prototype.handshakeResult =\n  ClientHandshake.prototype.handshakeResult;\nChangeUser.prototype.calculateNativePasswordAuthToken =\n  ClientHandshake.prototype.calculateNativePasswordAuthToken;\n\nmodule.exports = ChangeUser;\n"]},"metadata":{},"sourceType":"script"}
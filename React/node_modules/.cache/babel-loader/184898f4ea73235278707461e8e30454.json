{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as utils from \"../util/utils\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nexport function rpRegistrationPolicy(retryTimeout) {\n  if (retryTimeout === void 0) {\n    retryTimeout = 30;\n  }\n\n  return {\n    create: function (nextPolicy, options) {\n      return new RPRegistrationPolicy(nextPolicy, options, retryTimeout);\n    }\n  };\n}\n\nvar RPRegistrationPolicy =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(RPRegistrationPolicy, _super);\n\n  function RPRegistrationPolicy(nextPolicy, options, _retryTimeout) {\n    if (_retryTimeout === void 0) {\n      _retryTimeout = 30;\n    }\n\n    var _this = _super.call(this, nextPolicy, options) || this;\n\n    _this._retryTimeout = _retryTimeout;\n    return _this;\n  }\n\n  RPRegistrationPolicy.prototype.sendRequest = function (request) {\n    var _this = this;\n\n    return this._nextPolicy.sendRequest(request.clone()).then(function (response) {\n      return registerIfNeeded(_this, request, response);\n    });\n  };\n\n  return RPRegistrationPolicy;\n}(BaseRequestPolicy);\n\nexport { RPRegistrationPolicy };\n\nfunction registerIfNeeded(policy, request, response) {\n  if (response.status === 409) {\n    var rpName = checkRPNotRegisteredError(response.bodyAsText);\n\n    if (rpName) {\n      var urlPrefix = extractSubscriptionUrl(request.url);\n      return registerRP(policy, urlPrefix, rpName, request) // Autoregistration of ${provider} failed for some reason. We will not return this error\n      // instead will return the initial response with 409 status code back to the user.\n      // do nothing here as we are returning the original response at the end of this method.\n      .catch(function () {\n        return false;\n      }).then(function (registrationStatus) {\n        if (registrationStatus) {\n          // Retry the original request. We have to change the x-ms-client-request-id\n          // otherwise Azure endpoint will return the initial 409 (cached) response.\n          request.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n          return policy._nextPolicy.sendRequest(request.clone());\n        }\n\n        return response;\n      });\n    }\n  }\n\n  return Promise.resolve(response);\n}\n/**\n * Reuses the headers of the original request and url (if specified).\n * @param {WebResource} originalRequest The original request\n * @param {boolean} reuseUrlToo Should the url from the original request be reused as well. Default false.\n * @returns {object} A new request object with desired headers.\n */\n\n\nfunction getRequestEssentials(originalRequest, reuseUrlToo) {\n  if (reuseUrlToo === void 0) {\n    reuseUrlToo = false;\n  }\n\n  var reqOptions = originalRequest.clone();\n\n  if (reuseUrlToo) {\n    reqOptions.url = originalRequest.url;\n  } // We have to change the x-ms-client-request-id otherwise Azure endpoint\n  // will return the initial 409 (cached) response.\n\n\n  reqOptions.headers.set(\"x-ms-client-request-id\", utils.generateUuid()); // Set content-type to application/json\n\n  reqOptions.headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  return reqOptions;\n}\n/**\n * Validates the error code and message associated with 409 response status code. If it matches to that of\n * RP not registered then it returns the name of the RP else returns undefined.\n * @param {string} body The response body received after making the original request.\n * @returns {string} The name of the RP if condition is satisfied else undefined.\n */\n\n\nfunction checkRPNotRegisteredError(body) {\n  var result, responseBody;\n\n  if (body) {\n    try {\n      responseBody = JSON.parse(body);\n    } catch (err) {// do nothing;\n    }\n\n    if (responseBody && responseBody.error && responseBody.error.message && responseBody.error.code && responseBody.error.code === \"MissingSubscriptionRegistration\") {\n      var matchRes = responseBody.error.message.match(/.*'(.*)'/i);\n\n      if (matchRes) {\n        result = matchRes.pop();\n      }\n    }\n  }\n\n  return result;\n}\n/**\n * Extracts the first part of the URL, just after subscription:\n * https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param {string} url The original request url\n * @returns {string} The url prefix as explained above.\n */\n\n\nfunction extractSubscriptionUrl(url) {\n  var result;\n  var matchRes = url.match(/.*\\/subscriptions\\/[a-f0-9-]+\\//ig);\n\n  if (matchRes && matchRes[0]) {\n    result = matchRes[0];\n  } else {\n    throw new Error(\"Unable to extract subscriptionId from the given url - \" + url + \".\");\n  }\n\n  return result;\n}\n/**\n * Registers the given provider.\n * @param {RPRegistrationPolicy} policy The RPRegistrationPolicy this function is being called against.\n * @param {string} urlPrefix https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param {string} provider The provider name to be registered.\n * @param {WebResource} originalRequest The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @param {registrationCallback} callback The callback that handles the RP registration\n */\n\n\nfunction registerRP(policy, urlPrefix, provider, originalRequest) {\n  var postUrl = urlPrefix + \"providers/\" + provider + \"/register?api-version=2016-02-01\";\n  var getUrl = urlPrefix + \"providers/\" + provider + \"?api-version=2016-02-01\";\n  var reqOptions = getRequestEssentials(originalRequest);\n  reqOptions.method = \"POST\";\n  reqOptions.url = postUrl;\n  return policy._nextPolicy.sendRequest(reqOptions).then(function (response) {\n    if (response.status !== 200) {\n      throw new Error(\"Autoregistration of \" + provider + \" failed. Please try registering manually.\");\n    }\n\n    return getRegistrationStatus(policy, getUrl, originalRequest);\n  });\n}\n/**\n * Polls the registration status of the provider that was registered. Polling happens at an interval of 30 seconds.\n * Polling will happen till the registrationState property of the response body is \"Registered\".\n * @param {RPRegistrationPolicy} policy The RPRegistrationPolicy this function is being called against.\n * @param {string} url The request url for polling\n * @param {WebResource} originalRequest The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @returns {Promise<boolean>} True if RP Registration is successful.\n */\n\n\nfunction getRegistrationStatus(policy, url, originalRequest) {\n  var reqOptions = getRequestEssentials(originalRequest);\n  reqOptions.url = url;\n  reqOptions.method = \"GET\";\n  return policy._nextPolicy.sendRequest(reqOptions).then(function (res) {\n    var obj = res.parsedBody;\n\n    if (res.parsedBody && obj.registrationState && obj.registrationState === \"Registered\") {\n      return true;\n    } else {\n      return utils.delay(policy._retryTimeout * 1000).then(function () {\n        return getRegistrationStatus(policy, url, originalRequest);\n      });\n    }\n  });\n}","map":{"version":3,"sources":["../../../lib/policies/rpRegistrationPolicy.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport * as utils from \"../util/utils\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nexport function rpRegistrationPolicy(retryTimeout) {\n    if (retryTimeout === void 0) { retryTimeout = 30; }\n    return {\n        create: function (nextPolicy, options) {\n            return new RPRegistrationPolicy(nextPolicy, options, retryTimeout);\n        }\n    };\n}\nvar RPRegistrationPolicy = /** @class */ (function (_super) {\n    tslib_1.__extends(RPRegistrationPolicy, _super);\n    function RPRegistrationPolicy(nextPolicy, options, _retryTimeout) {\n        if (_retryTimeout === void 0) { _retryTimeout = 30; }\n        var _this = _super.call(this, nextPolicy, options) || this;\n        _this._retryTimeout = _retryTimeout;\n        return _this;\n    }\n    RPRegistrationPolicy.prototype.sendRequest = function (request) {\n        var _this = this;\n        return this._nextPolicy.sendRequest(request.clone())\n            .then(function (response) { return registerIfNeeded(_this, request, response); });\n    };\n    return RPRegistrationPolicy;\n}(BaseRequestPolicy));\nexport { RPRegistrationPolicy };\nfunction registerIfNeeded(policy, request, response) {\n    if (response.status === 409) {\n        var rpName = checkRPNotRegisteredError(response.bodyAsText);\n        if (rpName) {\n            var urlPrefix = extractSubscriptionUrl(request.url);\n            return registerRP(policy, urlPrefix, rpName, request)\n                // Autoregistration of ${provider} failed for some reason. We will not return this error\n                // instead will return the initial response with 409 status code back to the user.\n                // do nothing here as we are returning the original response at the end of this method.\n                .catch(function () { return false; })\n                .then(function (registrationStatus) {\n                if (registrationStatus) {\n                    // Retry the original request. We have to change the x-ms-client-request-id\n                    // otherwise Azure endpoint will return the initial 409 (cached) response.\n                    request.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n                    return policy._nextPolicy.sendRequest(request.clone());\n                }\n                return response;\n            });\n        }\n    }\n    return Promise.resolve(response);\n}\n/**\n * Reuses the headers of the original request and url (if specified).\n * @param {WebResource} originalRequest The original request\n * @param {boolean} reuseUrlToo Should the url from the original request be reused as well. Default false.\n * @returns {object} A new request object with desired headers.\n */\nfunction getRequestEssentials(originalRequest, reuseUrlToo) {\n    if (reuseUrlToo === void 0) { reuseUrlToo = false; }\n    var reqOptions = originalRequest.clone();\n    if (reuseUrlToo) {\n        reqOptions.url = originalRequest.url;\n    }\n    // We have to change the x-ms-client-request-id otherwise Azure endpoint\n    // will return the initial 409 (cached) response.\n    reqOptions.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n    // Set content-type to application/json\n    reqOptions.headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n    return reqOptions;\n}\n/**\n * Validates the error code and message associated with 409 response status code. If it matches to that of\n * RP not registered then it returns the name of the RP else returns undefined.\n * @param {string} body The response body received after making the original request.\n * @returns {string} The name of the RP if condition is satisfied else undefined.\n */\nfunction checkRPNotRegisteredError(body) {\n    var result, responseBody;\n    if (body) {\n        try {\n            responseBody = JSON.parse(body);\n        }\n        catch (err) {\n            // do nothing;\n        }\n        if (responseBody && responseBody.error && responseBody.error.message &&\n            responseBody.error.code && responseBody.error.code === \"MissingSubscriptionRegistration\") {\n            var matchRes = responseBody.error.message.match(/.*'(.*)'/i);\n            if (matchRes) {\n                result = matchRes.pop();\n            }\n        }\n    }\n    return result;\n}\n/**\n * Extracts the first part of the URL, just after subscription:\n * https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param {string} url The original request url\n * @returns {string} The url prefix as explained above.\n */\nfunction extractSubscriptionUrl(url) {\n    var result;\n    var matchRes = url.match(/.*\\/subscriptions\\/[a-f0-9-]+\\//ig);\n    if (matchRes && matchRes[0]) {\n        result = matchRes[0];\n    }\n    else {\n        throw new Error(\"Unable to extract subscriptionId from the given url - \" + url + \".\");\n    }\n    return result;\n}\n/**\n * Registers the given provider.\n * @param {RPRegistrationPolicy} policy The RPRegistrationPolicy this function is being called against.\n * @param {string} urlPrefix https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param {string} provider The provider name to be registered.\n * @param {WebResource} originalRequest The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @param {registrationCallback} callback The callback that handles the RP registration\n */\nfunction registerRP(policy, urlPrefix, provider, originalRequest) {\n    var postUrl = urlPrefix + \"providers/\" + provider + \"/register?api-version=2016-02-01\";\n    var getUrl = urlPrefix + \"providers/\" + provider + \"?api-version=2016-02-01\";\n    var reqOptions = getRequestEssentials(originalRequest);\n    reqOptions.method = \"POST\";\n    reqOptions.url = postUrl;\n    return policy._nextPolicy.sendRequest(reqOptions)\n        .then(function (response) {\n        if (response.status !== 200) {\n            throw new Error(\"Autoregistration of \" + provider + \" failed. Please try registering manually.\");\n        }\n        return getRegistrationStatus(policy, getUrl, originalRequest);\n    });\n}\n/**\n * Polls the registration status of the provider that was registered. Polling happens at an interval of 30 seconds.\n * Polling will happen till the registrationState property of the response body is \"Registered\".\n * @param {RPRegistrationPolicy} policy The RPRegistrationPolicy this function is being called against.\n * @param {string} url The request url for polling\n * @param {WebResource} originalRequest The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @returns {Promise<boolean>} True if RP Registration is successful.\n */\nfunction getRegistrationStatus(policy, url, originalRequest) {\n    var reqOptions = getRequestEssentials(originalRequest);\n    reqOptions.url = url;\n    reqOptions.method = \"GET\";\n    return policy._nextPolicy.sendRequest(reqOptions).then(function (res) {\n        var obj = res.parsedBody;\n        if (res.parsedBody && obj.registrationState && obj.registrationState === \"Registered\") {\n            return true;\n        }\n        else {\n            return utils.delay(policy._retryTimeout * 1000).then(function () { return getRegistrationStatus(policy, url, originalRequest); });\n        }\n    });\n}\n//# sourceMappingURL=rpRegistrationPolicy.js.map"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst Text = {\n  id: 0x23,\n  type: 'TEXT',\n  name: 'Text',\n  hasTableName: true,\n  declaration: function declaration() {\n    return 'text';\n  },\n  resolveLength: function resolveLength(parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    if (value != null) {\n      return value.length;\n    } else {\n      return -1;\n    }\n  },\n  writeTypeInfo: function writeTypeInfo(buffer, parameter) {\n    buffer.writeUInt8(this.id);\n    buffer.writeInt32LE(parameter.length);\n  },\n  writeParameterData: function writeParameterData(buffer, parameter, options, cb) {\n    buffer.writeBuffer(Buffer.from([0x00, 0x00, 0x00, 0x00, 0x00]));\n\n    if (parameter.value != null) {\n      buffer.writeInt32LE(parameter.length);\n      buffer.writeString(parameter.value.toString(), 'ascii');\n    } else {\n      buffer.writeInt32LE(parameter.length);\n    }\n\n    cb();\n  },\n  validate: function validate(value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'string') {\n      if (typeof value.toString !== 'function') {\n        return TypeError('Invalid string.');\n      }\n\n      value = value.toString();\n    }\n\n    return value;\n  }\n};\nvar _default = Text;\nexports.default = _default;\nmodule.exports = Text;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/tedious/lib/data-types/text.js"],"names":["Object","defineProperty","exports","value","default","Text","id","type","name","hasTableName","declaration","resolveLength","parameter","length","writeTypeInfo","buffer","writeUInt8","writeInt32LE","writeParameterData","options","cb","writeBuffer","Buffer","from","writeString","toString","validate","TypeError","_default","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;AACA,MAAMC,IAAI,GAAG;AACXC,EAAAA,EAAE,EAAE,IADO;AAEXC,EAAAA,IAAI,EAAE,MAFK;AAGXC,EAAAA,IAAI,EAAE,MAHK;AAIXC,EAAAA,YAAY,EAAE,IAJH;AAKXC,EAAAA,WAAW,EAAE,SAASA,WAAT,GAAuB;AAClC,WAAO,MAAP;AACD,GAPU;AAQXC,EAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBC,SAAvB,EAAkC;AAC/C,UAAMT,KAAK,GAAGS,SAAS,CAACT,KAAxB,CAD+C,CAChB;;AAE/B,QAAIA,KAAK,IAAI,IAAb,EAAmB;AACjB,aAAOA,KAAK,CAACU,MAAb;AACD,KAFD,MAEO;AACL,aAAO,CAAC,CAAR;AACD;AACF,GAhBU;AAiBXC,EAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBC,MAAvB,EAA+BH,SAA/B,EAA0C;AACvDG,IAAAA,MAAM,CAACC,UAAP,CAAkB,KAAKV,EAAvB;AACAS,IAAAA,MAAM,CAACE,YAAP,CAAoBL,SAAS,CAACC,MAA9B;AACD,GApBU;AAqBXK,EAAAA,kBAAkB,EAAE,SAASA,kBAAT,CAA4BH,MAA5B,EAAoCH,SAApC,EAA+CO,OAA/C,EAAwDC,EAAxD,EAA4D;AAC9EL,IAAAA,MAAM,CAACM,WAAP,CAAmBC,MAAM,CAACC,IAAP,CAAY,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,CAAZ,CAAnB;;AAEA,QAAIX,SAAS,CAACT,KAAV,IAAmB,IAAvB,EAA6B;AAC3BY,MAAAA,MAAM,CAACE,YAAP,CAAoBL,SAAS,CAACC,MAA9B;AACAE,MAAAA,MAAM,CAACS,WAAP,CAAmBZ,SAAS,CAACT,KAAV,CAAgBsB,QAAhB,EAAnB,EAA+C,OAA/C;AACD,KAHD,MAGO;AACLV,MAAAA,MAAM,CAACE,YAAP,CAAoBL,SAAS,CAACC,MAA9B;AACD;;AAEDO,IAAAA,EAAE;AACH,GAhCU;AAiCXM,EAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBvB,KAAlB,EAAyB;AACjC,QAAIA,KAAK,IAAI,IAAb,EAAmB;AACjB,aAAO,IAAP;AACD;;AAED,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,UAAI,OAAOA,KAAK,CAACsB,QAAb,KAA0B,UAA9B,EAA0C;AACxC,eAAOE,SAAS,CAAC,iBAAD,CAAhB;AACD;;AAEDxB,MAAAA,KAAK,GAAGA,KAAK,CAACsB,QAAN,EAAR;AACD;;AAED,WAAOtB,KAAP;AACD;AA/CU,CAAb;AAiDA,IAAIyB,QAAQ,GAAGvB,IAAf;AACAH,OAAO,CAACE,OAAR,GAAkBwB,QAAlB;AACAC,MAAM,CAAC3B,OAAP,GAAiBG,IAAjB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst Text = {\n  id: 0x23,\n  type: 'TEXT',\n  name: 'Text',\n  hasTableName: true,\n  declaration: function declaration() {\n    return 'text';\n  },\n  resolveLength: function resolveLength(parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    if (value != null) {\n      return value.length;\n    } else {\n      return -1;\n    }\n  },\n  writeTypeInfo: function writeTypeInfo(buffer, parameter) {\n    buffer.writeUInt8(this.id);\n    buffer.writeInt32LE(parameter.length);\n  },\n  writeParameterData: function writeParameterData(buffer, parameter, options, cb) {\n    buffer.writeBuffer(Buffer.from([0x00, 0x00, 0x00, 0x00, 0x00]));\n\n    if (parameter.value != null) {\n      buffer.writeInt32LE(parameter.length);\n      buffer.writeString(parameter.value.toString(), 'ascii');\n    } else {\n      buffer.writeInt32LE(parameter.length);\n    }\n\n    cb();\n  },\n  validate: function validate(value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'string') {\n      if (typeof value.toString !== 'function') {\n        return TypeError('Invalid string.');\n      }\n\n      value = value.toString();\n    }\n\n    return value;\n  }\n};\nvar _default = Text;\nexports.default = _default;\nmodule.exports = Text;"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.doneParser = doneParser;\nexports.doneInProcParser = doneInProcParser;\nexports.doneProcParser = doneProcParser;\n\nvar _jsbi = _interopRequireDefault(require(\"jsbi\"));\n\nvar _token = require(\"./token\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // s2.2.7.5/6/7\n\n\nconst STATUS = {\n  MORE: 0x0001,\n  ERROR: 0x0002,\n  // This bit is not yet in use by SQL Server, so is not exposed in the returned token\n  INXACT: 0x0004,\n  COUNT: 0x0010,\n  ATTN: 0x0020,\n  SRVERROR: 0x0100\n};\n\nfunction parseToken(parser, options, callback) {\n  parser.readUInt16LE(status => {\n    const more = !!(status & STATUS.MORE);\n    const sqlError = !!(status & STATUS.ERROR);\n    const rowCountValid = !!(status & STATUS.COUNT);\n    const attention = !!(status & STATUS.ATTN);\n    const serverError = !!(status & STATUS.SRVERROR);\n    parser.readUInt16LE(curCmd => {\n      const next = rowCount => {\n        callback({\n          more: more,\n          sqlError: sqlError,\n          attention: attention,\n          serverError: serverError,\n          rowCount: rowCountValid ? rowCount : undefined,\n          curCmd: curCmd\n        });\n      };\n\n      if (options.tdsVersion < '7_2') {\n        parser.readUInt32LE(next);\n      } else {\n        parser.readBigUInt64LE(rowCount => {\n          next(_jsbi.default.toNumber(rowCount));\n        });\n      }\n    });\n  });\n}\n\nfunction doneParser(parser, _colMetadata, options, callback) {\n  parseToken(parser, options, data => {\n    callback(new _token.DoneToken(data));\n  });\n}\n\nfunction doneInProcParser(parser, _colMetadata, options, callback) {\n  parseToken(parser, options, data => {\n    callback(new _token.DoneInProcToken(data));\n  });\n}\n\nfunction doneProcParser(parser, _colMetadata, options, callback) {\n  parseToken(parser, options, data => {\n    callback(new _token.DoneProcToken(data));\n  });\n}","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/tedious/lib/token/done-token-parser.js"],"names":["Object","defineProperty","exports","value","doneParser","doneInProcParser","doneProcParser","_jsbi","_interopRequireDefault","require","_token","obj","__esModule","default","STATUS","MORE","ERROR","INXACT","COUNT","ATTN","SRVERROR","parseToken","parser","options","callback","readUInt16LE","status","more","sqlError","rowCountValid","attention","serverError","curCmd","next","rowCount","undefined","tdsVersion","readUInt32LE","readBigUInt64LE","toNumber","_colMetadata","data","DoneToken","DoneInProcToken","DoneProcToken"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.doneParser = doneParser;\nexports.doneInProcParser = doneInProcParser;\nexports.doneProcParser = doneProcParser;\n\nvar _jsbi = _interopRequireDefault(require(\"jsbi\"));\n\nvar _token = require(\"./token\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// s2.2.7.5/6/7\nconst STATUS = {\n  MORE: 0x0001,\n  ERROR: 0x0002,\n  // This bit is not yet in use by SQL Server, so is not exposed in the returned token\n  INXACT: 0x0004,\n  COUNT: 0x0010,\n  ATTN: 0x0020,\n  SRVERROR: 0x0100\n};\n\nfunction parseToken(parser, options, callback) {\n  parser.readUInt16LE(status => {\n    const more = !!(status & STATUS.MORE);\n    const sqlError = !!(status & STATUS.ERROR);\n    const rowCountValid = !!(status & STATUS.COUNT);\n    const attention = !!(status & STATUS.ATTN);\n    const serverError = !!(status & STATUS.SRVERROR);\n    parser.readUInt16LE(curCmd => {\n      const next = rowCount => {\n        callback({\n          more: more,\n          sqlError: sqlError,\n          attention: attention,\n          serverError: serverError,\n          rowCount: rowCountValid ? rowCount : undefined,\n          curCmd: curCmd\n        });\n      };\n\n      if (options.tdsVersion < '7_2') {\n        parser.readUInt32LE(next);\n      } else {\n        parser.readBigUInt64LE(rowCount => {\n          next(_jsbi.default.toNumber(rowCount));\n        });\n      }\n    });\n  });\n}\n\nfunction doneParser(parser, _colMetadata, options, callback) {\n  parseToken(parser, options, data => {\n    callback(new _token.DoneToken(data));\n  });\n}\n\nfunction doneInProcParser(parser, _colMetadata, options, callback) {\n  parseToken(parser, options, data => {\n    callback(new _token.DoneInProcToken(data));\n  });\n}\n\nfunction doneProcParser(parser, _colMetadata, options, callback) {\n  parseToken(parser, options, data => {\n    callback(new _token.DoneProcToken(data));\n  });\n}"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst NULL = (1 << 16) - 1;\nconst MAX = (1 << 16) - 1;\nconst NVarChar = {\n  id: 0xE7,\n  type: 'NVARCHAR',\n  name: 'NVarChar',\n  maximumLength: 4000,\n  declaration: function declaration(parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    let length;\n\n    if (parameter.length) {\n      length = parameter.length;\n    } else if (value != null) {\n      length = value.toString().length || 1;\n    } else if (value === null && !parameter.output) {\n      length = 1;\n    } else {\n      length = this.maximumLength;\n    }\n\n    if (length <= this.maximumLength) {\n      return 'nvarchar(' + length + ')';\n    } else {\n      return 'nvarchar(max)';\n    }\n  },\n  resolveLength: function resolveLength(parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    if (parameter.length != null) {\n      return parameter.length;\n    } else if (value != null) {\n      if (Buffer.isBuffer(value)) {\n        return value.length / 2 || 1;\n      } else {\n        return value.toString().length || 1;\n      }\n    } else {\n      return this.maximumLength;\n    }\n  },\n  writeTypeInfo: function writeTypeInfo(buffer, parameter) {\n    buffer.writeUInt8(this.id);\n\n    if (parameter.length <= this.maximumLength) {\n      buffer.writeUInt16LE(parameter.length * 2);\n    } else {\n      buffer.writeUInt16LE(MAX);\n    }\n\n    buffer.writeBuffer(Buffer.from([0x00, 0x00, 0x00, 0x00, 0x00]));\n  },\n  writeParameterData: function writeParameterData(buffer, parameter, options, cb) {\n    if (parameter.value != null) {\n      if (parameter.length <= this.maximumLength) {\n        buffer.writeUsVarbyte(parameter.value, 'ucs2');\n      } else {\n        buffer.writePLPBody(parameter.value, 'ucs2');\n      }\n    } else if (parameter.length <= this.maximumLength) {\n      buffer.writeUInt16LE(NULL);\n    } else {\n      buffer.writeUInt32LE(0xFFFFFFFF);\n      buffer.writeUInt32LE(0xFFFFFFFF);\n    }\n\n    cb();\n  },\n  validate: function validate(value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'string') {\n      if (typeof value.toString !== 'function') {\n        return TypeError('Invalid string.');\n      }\n\n      value = value.toString();\n    }\n\n    return value;\n  }\n};\nvar _default = NVarChar;\nexports.default = _default;\nmodule.exports = NVarChar;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/tedious/lib/data-types/nvarchar.js"],"names":["Object","defineProperty","exports","value","default","NULL","MAX","NVarChar","id","type","name","maximumLength","declaration","parameter","length","toString","output","resolveLength","Buffer","isBuffer","writeTypeInfo","buffer","writeUInt8","writeUInt16LE","writeBuffer","from","writeParameterData","options","cb","writeUsVarbyte","writePLPBody","writeUInt32LE","validate","TypeError","_default","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;AACA,MAAMC,IAAI,GAAG,CAAC,KAAK,EAAN,IAAY,CAAzB;AACA,MAAMC,GAAG,GAAG,CAAC,KAAK,EAAN,IAAY,CAAxB;AACA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,EAAE,EAAE,IADW;AAEfC,EAAAA,IAAI,EAAE,UAFS;AAGfC,EAAAA,IAAI,EAAE,UAHS;AAIfC,EAAAA,aAAa,EAAE,IAJA;AAKfC,EAAAA,WAAW,EAAE,SAASA,WAAT,CAAqBC,SAArB,EAAgC;AAC3C,UAAMV,KAAK,GAAGU,SAAS,CAACV,KAAxB,CAD2C,CACZ;;AAE/B,QAAIW,MAAJ;;AAEA,QAAID,SAAS,CAACC,MAAd,EAAsB;AACpBA,MAAAA,MAAM,GAAGD,SAAS,CAACC,MAAnB;AACD,KAFD,MAEO,IAAIX,KAAK,IAAI,IAAb,EAAmB;AACxBW,MAAAA,MAAM,GAAGX,KAAK,CAACY,QAAN,GAAiBD,MAAjB,IAA2B,CAApC;AACD,KAFM,MAEA,IAAIX,KAAK,KAAK,IAAV,IAAkB,CAACU,SAAS,CAACG,MAAjC,EAAyC;AAC9CF,MAAAA,MAAM,GAAG,CAAT;AACD,KAFM,MAEA;AACLA,MAAAA,MAAM,GAAG,KAAKH,aAAd;AACD;;AAED,QAAIG,MAAM,IAAI,KAAKH,aAAnB,EAAkC;AAChC,aAAO,cAAcG,MAAd,GAAuB,GAA9B;AACD,KAFD,MAEO;AACL,aAAO,eAAP;AACD;AACF,GAzBc;AA0BfG,EAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBJ,SAAvB,EAAkC;AAC/C,UAAMV,KAAK,GAAGU,SAAS,CAACV,KAAxB,CAD+C,CAChB;;AAE/B,QAAIU,SAAS,CAACC,MAAV,IAAoB,IAAxB,EAA8B;AAC5B,aAAOD,SAAS,CAACC,MAAjB;AACD,KAFD,MAEO,IAAIX,KAAK,IAAI,IAAb,EAAmB;AACxB,UAAIe,MAAM,CAACC,QAAP,CAAgBhB,KAAhB,CAAJ,EAA4B;AAC1B,eAAOA,KAAK,CAACW,MAAN,GAAe,CAAf,IAAoB,CAA3B;AACD,OAFD,MAEO;AACL,eAAOX,KAAK,CAACY,QAAN,GAAiBD,MAAjB,IAA2B,CAAlC;AACD;AACF,KANM,MAMA;AACL,aAAO,KAAKH,aAAZ;AACD;AACF,GAxCc;AAyCfS,EAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBC,MAAvB,EAA+BR,SAA/B,EAA0C;AACvDQ,IAAAA,MAAM,CAACC,UAAP,CAAkB,KAAKd,EAAvB;;AAEA,QAAIK,SAAS,CAACC,MAAV,IAAoB,KAAKH,aAA7B,EAA4C;AAC1CU,MAAAA,MAAM,CAACE,aAAP,CAAqBV,SAAS,CAACC,MAAV,GAAmB,CAAxC;AACD,KAFD,MAEO;AACLO,MAAAA,MAAM,CAACE,aAAP,CAAqBjB,GAArB;AACD;;AAEDe,IAAAA,MAAM,CAACG,WAAP,CAAmBN,MAAM,CAACO,IAAP,CAAY,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,CAAZ,CAAnB;AACD,GAnDc;AAoDfC,EAAAA,kBAAkB,EAAE,SAASA,kBAAT,CAA4BL,MAA5B,EAAoCR,SAApC,EAA+Cc,OAA/C,EAAwDC,EAAxD,EAA4D;AAC9E,QAAIf,SAAS,CAACV,KAAV,IAAmB,IAAvB,EAA6B;AAC3B,UAAIU,SAAS,CAACC,MAAV,IAAoB,KAAKH,aAA7B,EAA4C;AAC1CU,QAAAA,MAAM,CAACQ,cAAP,CAAsBhB,SAAS,CAACV,KAAhC,EAAuC,MAAvC;AACD,OAFD,MAEO;AACLkB,QAAAA,MAAM,CAACS,YAAP,CAAoBjB,SAAS,CAACV,KAA9B,EAAqC,MAArC;AACD;AACF,KAND,MAMO,IAAIU,SAAS,CAACC,MAAV,IAAoB,KAAKH,aAA7B,EAA4C;AACjDU,MAAAA,MAAM,CAACE,aAAP,CAAqBlB,IAArB;AACD,KAFM,MAEA;AACLgB,MAAAA,MAAM,CAACU,aAAP,CAAqB,UAArB;AACAV,MAAAA,MAAM,CAACU,aAAP,CAAqB,UAArB;AACD;;AAEDH,IAAAA,EAAE;AACH,GAnEc;AAoEfI,EAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkB7B,KAAlB,EAAyB;AACjC,QAAIA,KAAK,IAAI,IAAb,EAAmB;AACjB,aAAO,IAAP;AACD;;AAED,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,UAAI,OAAOA,KAAK,CAACY,QAAb,KAA0B,UAA9B,EAA0C;AACxC,eAAOkB,SAAS,CAAC,iBAAD,CAAhB;AACD;;AAED9B,MAAAA,KAAK,GAAGA,KAAK,CAACY,QAAN,EAAR;AACD;;AAED,WAAOZ,KAAP;AACD;AAlFc,CAAjB;AAoFA,IAAI+B,QAAQ,GAAG3B,QAAf;AACAL,OAAO,CAACE,OAAR,GAAkB8B,QAAlB;AACAC,MAAM,CAACjC,OAAP,GAAiBK,QAAjB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst NULL = (1 << 16) - 1;\nconst MAX = (1 << 16) - 1;\nconst NVarChar = {\n  id: 0xE7,\n  type: 'NVARCHAR',\n  name: 'NVarChar',\n  maximumLength: 4000,\n  declaration: function declaration(parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    let length;\n\n    if (parameter.length) {\n      length = parameter.length;\n    } else if (value != null) {\n      length = value.toString().length || 1;\n    } else if (value === null && !parameter.output) {\n      length = 1;\n    } else {\n      length = this.maximumLength;\n    }\n\n    if (length <= this.maximumLength) {\n      return 'nvarchar(' + length + ')';\n    } else {\n      return 'nvarchar(max)';\n    }\n  },\n  resolveLength: function resolveLength(parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    if (parameter.length != null) {\n      return parameter.length;\n    } else if (value != null) {\n      if (Buffer.isBuffer(value)) {\n        return value.length / 2 || 1;\n      } else {\n        return value.toString().length || 1;\n      }\n    } else {\n      return this.maximumLength;\n    }\n  },\n  writeTypeInfo: function writeTypeInfo(buffer, parameter) {\n    buffer.writeUInt8(this.id);\n\n    if (parameter.length <= this.maximumLength) {\n      buffer.writeUInt16LE(parameter.length * 2);\n    } else {\n      buffer.writeUInt16LE(MAX);\n    }\n\n    buffer.writeBuffer(Buffer.from([0x00, 0x00, 0x00, 0x00, 0x00]));\n  },\n  writeParameterData: function writeParameterData(buffer, parameter, options, cb) {\n    if (parameter.value != null) {\n      if (parameter.length <= this.maximumLength) {\n        buffer.writeUsVarbyte(parameter.value, 'ucs2');\n      } else {\n        buffer.writePLPBody(parameter.value, 'ucs2');\n      }\n    } else if (parameter.length <= this.maximumLength) {\n      buffer.writeUInt16LE(NULL);\n    } else {\n      buffer.writeUInt32LE(0xFFFFFFFF);\n      buffer.writeUInt32LE(0xFFFFFFFF);\n    }\n\n    cb();\n  },\n  validate: function validate(value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'string') {\n      if (typeof value.toString !== 'function') {\n        return TypeError('Invalid string.');\n      }\n\n      value = value.toString();\n    }\n\n    return value;\n  }\n};\nvar _default = NVarChar;\nexports.default = _default;\nmodule.exports = NVarChar;"]},"metadata":{},"sourceType":"script"}
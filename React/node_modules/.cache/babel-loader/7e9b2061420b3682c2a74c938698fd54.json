{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Queue = require(\"./util/Queue\");\n\nconst addToSet = (a, b) => {\n  let changed = false;\n\n  for (const item of b) {\n    if (!a.has(item)) {\n      a.add(item);\n      changed = true;\n    }\n  }\n\n  return changed;\n};\n\nclass FlagDependencyExportsPlugin {\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"FlagDependencyExportsPlugin\", compilation => {\n      compilation.hooks.finishModules.tap(\"FlagDependencyExportsPlugin\", modules => {\n        const dependencies = new Map();\n        const queue = new Queue();\n        let module;\n        let moduleWithExports;\n        let moduleProvidedExports;\n        let providedExportsAreTemporary;\n\n        const processDependenciesBlock = depBlock => {\n          for (const dep of depBlock.dependencies) {\n            if (processDependency(dep)) return true;\n          }\n\n          for (const variable of depBlock.variables) {\n            for (const dep of variable.dependencies) {\n              if (processDependency(dep)) return true;\n            }\n          }\n\n          for (const block of depBlock.blocks) {\n            if (processDependenciesBlock(block)) return true;\n          }\n\n          return false;\n        };\n\n        const processDependency = dep => {\n          const exportDesc = dep.getExports && dep.getExports();\n          if (!exportDesc) return;\n          moduleWithExports = true;\n          const exports = exportDesc.exports; // break early if it's only in the worst state\n\n          if (module.buildMeta.providedExports === true) {\n            return true;\n          } // break if it should move to the worst state\n\n\n          if (exports === true) {\n            module.buildMeta.providedExports = true;\n            notifyDependencies();\n            return true;\n          } // merge in new exports\n\n\n          if (Array.isArray(exports)) {\n            if (addToSet(moduleProvidedExports, exports)) {\n              notifyDependencies();\n            }\n          } // store dependencies\n\n\n          const exportDeps = exportDesc.dependencies;\n\n          if (exportDeps) {\n            providedExportsAreTemporary = true;\n\n            for (const exportDependency of exportDeps) {\n              // add dependency for this module\n              const set = dependencies.get(exportDependency);\n\n              if (set === undefined) {\n                dependencies.set(exportDependency, new Set([module]));\n              } else {\n                set.add(module);\n              }\n            }\n          }\n\n          return false;\n        };\n\n        const notifyDependencies = () => {\n          const deps = dependencies.get(module);\n\n          if (deps !== undefined) {\n            for (const dep of deps) {\n              queue.enqueue(dep);\n            }\n          }\n        }; // Start with all modules without provided exports\n\n\n        for (const module of modules) {\n          if (module.buildInfo.temporaryProvidedExports) {\n            // Clear exports when they are temporary\n            // and recreate them\n            module.buildMeta.providedExports = null;\n            queue.enqueue(module);\n          } else if (!module.buildMeta.providedExports) {\n            queue.enqueue(module);\n          }\n        }\n\n        while (queue.length > 0) {\n          module = queue.dequeue();\n\n          if (module.buildMeta.providedExports !== true) {\n            moduleWithExports = module.buildMeta && module.buildMeta.exportsType;\n            moduleProvidedExports = Array.isArray(module.buildMeta.providedExports) ? new Set(module.buildMeta.providedExports) : new Set();\n            providedExportsAreTemporary = false;\n            processDependenciesBlock(module);\n            module.buildInfo.temporaryProvidedExports = providedExportsAreTemporary;\n\n            if (!moduleWithExports) {\n              module.buildMeta.providedExports = true;\n              notifyDependencies();\n            } else if (module.buildMeta.providedExports !== true) {\n              module.buildMeta.providedExports = Array.from(moduleProvidedExports);\n            }\n          }\n        }\n      });\n      const providedExportsCache = new WeakMap();\n      compilation.hooks.rebuildModule.tap(\"FlagDependencyExportsPlugin\", module => {\n        providedExportsCache.set(module, module.buildMeta.providedExports);\n      });\n      compilation.hooks.finishRebuildingModule.tap(\"FlagDependencyExportsPlugin\", module => {\n        module.buildMeta.providedExports = providedExportsCache.get(module);\n      });\n    });\n  }\n\n}\n\nmodule.exports = FlagDependencyExportsPlugin;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/webpack/lib/FlagDependencyExportsPlugin.js"],"names":["Queue","require","addToSet","a","b","changed","item","has","add","FlagDependencyExportsPlugin","apply","compiler","hooks","compilation","tap","finishModules","modules","dependencies","Map","queue","module","moduleWithExports","moduleProvidedExports","providedExportsAreTemporary","processDependenciesBlock","depBlock","dep","processDependency","variable","variables","block","blocks","exportDesc","getExports","exports","buildMeta","providedExports","notifyDependencies","Array","isArray","exportDeps","exportDependency","set","get","undefined","Set","deps","enqueue","buildInfo","temporaryProvidedExports","length","dequeue","exportsType","from","providedExportsCache","WeakMap","rebuildModule","finishRebuildingModule"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Queue = require(\"./util/Queue\");\n\nconst addToSet = (a, b) => {\n\tlet changed = false;\n\tfor (const item of b) {\n\t\tif (!a.has(item)) {\n\t\t\ta.add(item);\n\t\t\tchanged = true;\n\t\t}\n\t}\n\treturn changed;\n};\n\nclass FlagDependencyExportsPlugin {\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"FlagDependencyExportsPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tcompilation.hooks.finishModules.tap(\n\t\t\t\t\t\"FlagDependencyExportsPlugin\",\n\t\t\t\t\tmodules => {\n\t\t\t\t\t\tconst dependencies = new Map();\n\n\t\t\t\t\t\tconst queue = new Queue();\n\n\t\t\t\t\t\tlet module;\n\t\t\t\t\t\tlet moduleWithExports;\n\t\t\t\t\t\tlet moduleProvidedExports;\n\t\t\t\t\t\tlet providedExportsAreTemporary;\n\n\t\t\t\t\t\tconst processDependenciesBlock = depBlock => {\n\t\t\t\t\t\t\tfor (const dep of depBlock.dependencies) {\n\t\t\t\t\t\t\t\tif (processDependency(dep)) return true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor (const variable of depBlock.variables) {\n\t\t\t\t\t\t\t\tfor (const dep of variable.dependencies) {\n\t\t\t\t\t\t\t\t\tif (processDependency(dep)) return true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor (const block of depBlock.blocks) {\n\t\t\t\t\t\t\t\tif (processDependenciesBlock(block)) return true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst processDependency = dep => {\n\t\t\t\t\t\t\tconst exportDesc = dep.getExports && dep.getExports();\n\t\t\t\t\t\t\tif (!exportDesc) return;\n\t\t\t\t\t\t\tmoduleWithExports = true;\n\t\t\t\t\t\t\tconst exports = exportDesc.exports;\n\t\t\t\t\t\t\t// break early if it's only in the worst state\n\t\t\t\t\t\t\tif (module.buildMeta.providedExports === true) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// break if it should move to the worst state\n\t\t\t\t\t\t\tif (exports === true) {\n\t\t\t\t\t\t\t\tmodule.buildMeta.providedExports = true;\n\t\t\t\t\t\t\t\tnotifyDependencies();\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// merge in new exports\n\t\t\t\t\t\t\tif (Array.isArray(exports)) {\n\t\t\t\t\t\t\t\tif (addToSet(moduleProvidedExports, exports)) {\n\t\t\t\t\t\t\t\t\tnotifyDependencies();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// store dependencies\n\t\t\t\t\t\t\tconst exportDeps = exportDesc.dependencies;\n\t\t\t\t\t\t\tif (exportDeps) {\n\t\t\t\t\t\t\t\tprovidedExportsAreTemporary = true;\n\t\t\t\t\t\t\t\tfor (const exportDependency of exportDeps) {\n\t\t\t\t\t\t\t\t\t// add dependency for this module\n\t\t\t\t\t\t\t\t\tconst set = dependencies.get(exportDependency);\n\t\t\t\t\t\t\t\t\tif (set === undefined) {\n\t\t\t\t\t\t\t\t\t\tdependencies.set(exportDependency, new Set([module]));\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tset.add(module);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst notifyDependencies = () => {\n\t\t\t\t\t\t\tconst deps = dependencies.get(module);\n\t\t\t\t\t\t\tif (deps !== undefined) {\n\t\t\t\t\t\t\t\tfor (const dep of deps) {\n\t\t\t\t\t\t\t\t\tqueue.enqueue(dep);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// Start with all modules without provided exports\n\t\t\t\t\t\tfor (const module of modules) {\n\t\t\t\t\t\t\tif (module.buildInfo.temporaryProvidedExports) {\n\t\t\t\t\t\t\t\t// Clear exports when they are temporary\n\t\t\t\t\t\t\t\t// and recreate them\n\t\t\t\t\t\t\t\tmodule.buildMeta.providedExports = null;\n\t\t\t\t\t\t\t\tqueue.enqueue(module);\n\t\t\t\t\t\t\t} else if (!module.buildMeta.providedExports) {\n\t\t\t\t\t\t\t\tqueue.enqueue(module);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\twhile (queue.length > 0) {\n\t\t\t\t\t\t\tmodule = queue.dequeue();\n\n\t\t\t\t\t\t\tif (module.buildMeta.providedExports !== true) {\n\t\t\t\t\t\t\t\tmoduleWithExports =\n\t\t\t\t\t\t\t\t\tmodule.buildMeta && module.buildMeta.exportsType;\n\t\t\t\t\t\t\t\tmoduleProvidedExports = Array.isArray(\n\t\t\t\t\t\t\t\t\tmodule.buildMeta.providedExports\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t? new Set(module.buildMeta.providedExports)\n\t\t\t\t\t\t\t\t\t: new Set();\n\t\t\t\t\t\t\t\tprovidedExportsAreTemporary = false;\n\t\t\t\t\t\t\t\tprocessDependenciesBlock(module);\n\t\t\t\t\t\t\t\tmodule.buildInfo.temporaryProvidedExports = providedExportsAreTemporary;\n\t\t\t\t\t\t\t\tif (!moduleWithExports) {\n\t\t\t\t\t\t\t\t\tmodule.buildMeta.providedExports = true;\n\t\t\t\t\t\t\t\t\tnotifyDependencies();\n\t\t\t\t\t\t\t\t} else if (module.buildMeta.providedExports !== true) {\n\t\t\t\t\t\t\t\t\tmodule.buildMeta.providedExports = Array.from(\n\t\t\t\t\t\t\t\t\t\tmoduleProvidedExports\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tconst providedExportsCache = new WeakMap();\n\t\t\t\tcompilation.hooks.rebuildModule.tap(\n\t\t\t\t\t\"FlagDependencyExportsPlugin\",\n\t\t\t\t\tmodule => {\n\t\t\t\t\t\tprovidedExportsCache.set(module, module.buildMeta.providedExports);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tcompilation.hooks.finishRebuildingModule.tap(\n\t\t\t\t\t\"FlagDependencyExportsPlugin\",\n\t\t\t\t\tmodule => {\n\t\t\t\t\t\tmodule.buildMeta.providedExports = providedExportsCache.get(module);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = FlagDependencyExportsPlugin;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport * as tslib_1 from \"tslib\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { Constants } from \"../util/constants\";\nimport { delay } from \"../util/utils\";\nvar StatusCodes = Constants.HttpConstants.StatusCodes;\nexport function throttlingRetryPolicy() {\n  return {\n    create: function (nextPolicy, options) {\n      return new ThrottlingRetryPolicy(nextPolicy, options);\n    }\n  };\n}\n/**\n * To learn more, please refer to\n * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,\n * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and\n * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors\n */\n\nvar ThrottlingRetryPolicy =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ThrottlingRetryPolicy, _super);\n\n  function ThrottlingRetryPolicy(nextPolicy, options, _handleResponse) {\n    var _this = _super.call(this, nextPolicy, options) || this;\n\n    _this._handleResponse = _handleResponse || _this._defaultResponseHandler;\n    return _this;\n  }\n\n  ThrottlingRetryPolicy.prototype.sendRequest = function (httpRequest) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return tslib_1.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this._nextPolicy.sendRequest(httpRequest.clone()).then(function (response) {\n          if (response.status !== StatusCodes.TooManyRequests) {\n            return response;\n          } else {\n            return _this._handleResponse(httpRequest, response);\n          }\n        })];\n      });\n    });\n  };\n\n  ThrottlingRetryPolicy.prototype._defaultResponseHandler = function (httpRequest, httpResponse) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var retryAfterHeader, delayInMs;\n\n      var _this = this;\n\n      return tslib_1.__generator(this, function (_a) {\n        retryAfterHeader = httpResponse.headers.get(Constants.HeaderConstants.RETRY_AFTER);\n\n        if (retryAfterHeader) {\n          delayInMs = ThrottlingRetryPolicy.parseRetryAfterHeader(retryAfterHeader);\n\n          if (delayInMs) {\n            return [2\n            /*return*/\n            , delay(delayInMs).then(function (_) {\n              return _this._nextPolicy.sendRequest(httpRequest);\n            })];\n          }\n        }\n\n        return [2\n        /*return*/\n        , httpResponse];\n      });\n    });\n  };\n\n  ThrottlingRetryPolicy.parseRetryAfterHeader = function (headerValue) {\n    var retryAfterInSeconds = Number(headerValue);\n\n    if (Number.isNaN(retryAfterInSeconds)) {\n      return ThrottlingRetryPolicy.parseDateRetryAfterHeader(headerValue);\n    } else {\n      return retryAfterInSeconds * 1000;\n    }\n  };\n\n  ThrottlingRetryPolicy.parseDateRetryAfterHeader = function (headerValue) {\n    try {\n      var now = Date.now();\n      var date = Date.parse(headerValue);\n      var diff = date - now;\n      return Number.isNaN(diff) ? undefined : diff;\n    } catch (error) {\n      return undefined;\n    }\n  };\n\n  return ThrottlingRetryPolicy;\n}(BaseRequestPolicy);\n\nexport { ThrottlingRetryPolicy };","map":{"version":3,"sources":["../../../lib/policies/throttlingRetryPolicy.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport * as tslib_1 from \"tslib\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { Constants } from \"../util/constants\";\nimport { delay } from \"../util/utils\";\nvar StatusCodes = Constants.HttpConstants.StatusCodes;\nexport function throttlingRetryPolicy() {\n    return {\n        create: function (nextPolicy, options) {\n            return new ThrottlingRetryPolicy(nextPolicy, options);\n        }\n    };\n}\n/**\n * To learn more, please refer to\n * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,\n * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and\n * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors\n */\nvar ThrottlingRetryPolicy = /** @class */ (function (_super) {\n    tslib_1.__extends(ThrottlingRetryPolicy, _super);\n    function ThrottlingRetryPolicy(nextPolicy, options, _handleResponse) {\n        var _this = _super.call(this, nextPolicy, options) || this;\n        _this._handleResponse = _handleResponse || _this._defaultResponseHandler;\n        return _this;\n    }\n    ThrottlingRetryPolicy.prototype.sendRequest = function (httpRequest) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, this._nextPolicy.sendRequest(httpRequest.clone()).then(function (response) {\n                        if (response.status !== StatusCodes.TooManyRequests) {\n                            return response;\n                        }\n                        else {\n                            return _this._handleResponse(httpRequest, response);\n                        }\n                    })];\n            });\n        });\n    };\n    ThrottlingRetryPolicy.prototype._defaultResponseHandler = function (httpRequest, httpResponse) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var retryAfterHeader, delayInMs;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                retryAfterHeader = httpResponse.headers.get(Constants.HeaderConstants.RETRY_AFTER);\n                if (retryAfterHeader) {\n                    delayInMs = ThrottlingRetryPolicy.parseRetryAfterHeader(retryAfterHeader);\n                    if (delayInMs) {\n                        return [2 /*return*/, delay(delayInMs).then(function (_) { return _this._nextPolicy.sendRequest(httpRequest); })];\n                    }\n                }\n                return [2 /*return*/, httpResponse];\n            });\n        });\n    };\n    ThrottlingRetryPolicy.parseRetryAfterHeader = function (headerValue) {\n        var retryAfterInSeconds = Number(headerValue);\n        if (Number.isNaN(retryAfterInSeconds)) {\n            return ThrottlingRetryPolicy.parseDateRetryAfterHeader(headerValue);\n        }\n        else {\n            return retryAfterInSeconds * 1000;\n        }\n    };\n    ThrottlingRetryPolicy.parseDateRetryAfterHeader = function (headerValue) {\n        try {\n            var now = Date.now();\n            var date = Date.parse(headerValue);\n            var diff = date - now;\n            return Number.isNaN(diff) ? undefined : diff;\n        }\n        catch (error) {\n            return undefined;\n        }\n    };\n    return ThrottlingRetryPolicy;\n}(BaseRequestPolicy));\nexport { ThrottlingRetryPolicy };\n//# sourceMappingURL=throttlingRetryPolicy.js.map"]},"metadata":{},"sourceType":"module"}
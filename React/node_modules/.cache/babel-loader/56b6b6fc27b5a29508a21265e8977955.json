{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\n\nconst path = require('path');\n/* istanbul ignore next */\n\n\nconst LCHOWN = fs.lchown ? 'lchown' : 'chown';\n/* istanbul ignore next */\n\nconst LCHOWNSYNC = fs.lchownSync ? 'lchownSync' : 'chownSync'; // fs.readdir could only accept an options object as of node v6\n\nconst nodeVersion = process.version;\n\nlet readdir = (path, options, cb) => fs.readdir(path, options, cb);\n\nlet readdirSync = (path, options) => fs.readdirSync(path, options);\n/* istanbul ignore next */\n\n\nif (/^v4\\./.test(nodeVersion)) readdir = (path, options, cb) => fs.readdir(path, cb);\n\nconst chownrKid = (p, child, uid, gid, cb) => {\n  if (typeof child === 'string') return fs.lstat(path.resolve(p, child), (er, stats) => {\n    if (er) return cb(er);\n    stats.name = child;\n    chownrKid(p, stats, uid, gid, cb);\n  });\n\n  if (child.isDirectory()) {\n    chownr(path.resolve(p, child.name), uid, gid, er => {\n      if (er) return cb(er);\n      fs[LCHOWN](path.resolve(p, child.name), uid, gid, cb);\n    });\n  } else fs[LCHOWN](path.resolve(p, child.name), uid, gid, cb);\n};\n\nconst chownr = (p, uid, gid, cb) => {\n  readdir(p, {\n    withFileTypes: true\n  }, (er, children) => {\n    // any error other than ENOTDIR or ENOTSUP means it's not readable,\n    // or doesn't exist.  give up.\n    if (er && er.code !== 'ENOTDIR' && er.code !== 'ENOTSUP') return cb(er);\n    if (er || !children.length) return fs[LCHOWN](p, uid, gid, cb);\n    let len = children.length;\n    let errState = null;\n\n    const then = er => {\n      if (errState) return;\n      if (er) return cb(errState = er);\n      if (--len === 0) return fs[LCHOWN](p, uid, gid, cb);\n    };\n\n    children.forEach(child => chownrKid(p, child, uid, gid, then));\n  });\n};\n\nconst chownrKidSync = (p, child, uid, gid) => {\n  if (typeof child === 'string') {\n    const stats = fs.lstatSync(path.resolve(p, child));\n    stats.name = child;\n    child = stats;\n  }\n\n  if (child.isDirectory()) chownrSync(path.resolve(p, child.name), uid, gid);\n  fs[LCHOWNSYNC](path.resolve(p, child.name), uid, gid);\n};\n\nconst chownrSync = (p, uid, gid) => {\n  let children;\n\n  try {\n    children = readdirSync(p, {\n      withFileTypes: true\n    });\n  } catch (er) {\n    if (er && er.code === 'ENOTDIR' && er.code !== 'ENOTSUP') return fs[LCHOWNSYNC](p, uid, gid);\n    throw er;\n  }\n\n  if (children.length) children.forEach(child => chownrKidSync(p, child, uid, gid));\n  return fs[LCHOWNSYNC](p, uid, gid);\n};\n\nmodule.exports = chownr;\nchownr.sync = chownrSync;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/chokidar/node_modules/fsevents/node_modules/chownr/chownr.js"],"names":["fs","require","path","LCHOWN","lchown","LCHOWNSYNC","lchownSync","nodeVersion","process","version","readdir","options","cb","readdirSync","test","chownrKid","p","child","uid","gid","lstat","resolve","er","stats","name","isDirectory","chownr","withFileTypes","children","code","length","len","errState","then","forEach","chownrKidSync","lstatSync","chownrSync","module","exports","sync"],"mappings":"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","sourcesContent":["'use strict'\nconst fs = require('fs')\nconst path = require('path')\n\n/* istanbul ignore next */\nconst LCHOWN = fs.lchown ? 'lchown' : 'chown'\n/* istanbul ignore next */\nconst LCHOWNSYNC = fs.lchownSync ? 'lchownSync' : 'chownSync'\n\n// fs.readdir could only accept an options object as of node v6\nconst nodeVersion = process.version\nlet readdir = (path, options, cb) => fs.readdir(path, options, cb)\nlet readdirSync = (path, options) => fs.readdirSync(path, options)\n/* istanbul ignore next */\nif (/^v4\\./.test(nodeVersion))\n  readdir = (path, options, cb) => fs.readdir(path, cb)\n\nconst chownrKid = (p, child, uid, gid, cb) => {\n  if (typeof child === 'string')\n    return fs.lstat(path.resolve(p, child), (er, stats) => {\n      if (er)\n        return cb(er)\n      stats.name = child\n      chownrKid(p, stats, uid, gid, cb)\n    })\n\n  if (child.isDirectory()) {\n    chownr(path.resolve(p, child.name), uid, gid, er => {\n      if (er)\n        return cb(er)\n      fs[LCHOWN](path.resolve(p, child.name), uid, gid, cb)\n    })\n  } else\n    fs[LCHOWN](path.resolve(p, child.name), uid, gid, cb)\n}\n\n\nconst chownr = (p, uid, gid, cb) => {\n  readdir(p, { withFileTypes: true }, (er, children) => {\n    // any error other than ENOTDIR or ENOTSUP means it's not readable,\n    // or doesn't exist.  give up.\n    if (er && er.code !== 'ENOTDIR' && er.code !== 'ENOTSUP')\n      return cb(er)\n    if (er || !children.length) return fs[LCHOWN](p, uid, gid, cb)\n\n    let len = children.length\n    let errState = null\n    const then = er => {\n      if (errState) return\n      if (er) return cb(errState = er)\n      if (-- len === 0) return fs[LCHOWN](p, uid, gid, cb)\n    }\n\n    children.forEach(child => chownrKid(p, child, uid, gid, then))\n  })\n}\n\nconst chownrKidSync = (p, child, uid, gid) => {\n  if (typeof child === 'string') {\n    const stats = fs.lstatSync(path.resolve(p, child))\n    stats.name = child\n    child = stats\n  }\n\n  if (child.isDirectory())\n    chownrSync(path.resolve(p, child.name), uid, gid)\n\n  fs[LCHOWNSYNC](path.resolve(p, child.name), uid, gid)\n}\n\nconst chownrSync = (p, uid, gid) => {\n  let children\n  try {\n    children = readdirSync(p, { withFileTypes: true })\n  } catch (er) {\n    if (er && er.code === 'ENOTDIR' && er.code !== 'ENOTSUP')\n      return fs[LCHOWNSYNC](p, uid, gid)\n    throw er\n  }\n\n  if (children.length)\n    children.forEach(child => chownrKidSync(p, child, uid, gid))\n\n  return fs[LCHOWNSYNC](p, uid, gid)\n}\n\nmodule.exports = chownr\nchownr.sync = chownrSync\n"]},"metadata":{},"sourceType":"script"}
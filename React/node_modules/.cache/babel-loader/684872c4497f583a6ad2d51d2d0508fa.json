{"ast":null,"code":"'use strict';\n\nconst Packet = require('../packets/packet');\n\nconst StringParser = require('../parsers/string');\n\nconst CharsetToEncoding = require('../constants/charset_encodings.js');\n\nconst fields = ['catalog', 'schema', 'table', 'orgTable', 'name', 'orgName']; // creating JS string is relatively expensive (compared to\n// reading few bytes from buffer) because all string properties\n// except for name are unlikely to be used we postpone\n// string conversion until property access\n//\n// TODO: watch for integration benchmarks (one with real network buffer)\n// there could be bad side effect as keeping reference to a buffer makes it\n// sit in the memory longer (usually until final .query() callback)\n// Latest v8 perform much better in regard to bufferer -> string conversion,\n// at some point of time this optimisation might become unnecessary\n// see https://github.com/sidorares/node-mysql2/pull/137\n//\n\nclass ColumnDefinition {\n  constructor(packet, clientEncoding) {\n    this._buf = packet.buffer;\n    this._clientEncoding = clientEncoding;\n    this._catalogLength = packet.readLengthCodedNumber();\n    this._catalogStart = packet.offset;\n    packet.offset += this._catalogLength;\n    this._schemaLength = packet.readLengthCodedNumber();\n    this._schemaStart = packet.offset;\n    packet.offset += this._schemaLength;\n    this._tableLength = packet.readLengthCodedNumber();\n    this._tableStart = packet.offset;\n    packet.offset += this._tableLength;\n    this._orgTableLength = packet.readLengthCodedNumber();\n    this._orgTableStart = packet.offset;\n    packet.offset += this._orgTableLength; // name is always used, don't make it lazy\n\n    const _nameLength = packet.readLengthCodedNumber();\n\n    const _nameStart = packet.offset;\n    packet.offset += _nameLength;\n    this._orgNameLength = packet.readLengthCodedNumber();\n    this._orgNameStart = packet.offset;\n    packet.offset += this._orgNameLength;\n    packet.skip(1); //  length of the following fields (always 0x0c)\n\n    this.characterSet = packet.readInt16();\n    this.encoding = CharsetToEncoding[this.characterSet];\n    this.name = StringParser.decode(this._buf.slice(_nameStart, _nameStart + _nameLength), this.encoding === 'binary' ? this._clientEncoding : this.encoding);\n    this.columnLength = packet.readInt32();\n    this.columnType = packet.readInt8();\n    this.flags = packet.readInt16();\n    this.decimals = packet.readInt8();\n  }\n\n  inspect() {\n    return {\n      catalog: this.catalog,\n      schema: this.schema,\n      name: this.name,\n      orgName: this.orgName,\n      table: this.table,\n      orgTable: this.orgTable,\n      characterSet: this.characterSet,\n      columnLength: this.columnLength,\n      columnType: this.columnType,\n      flags: this.flags,\n      decimals: this.decimals\n    };\n  }\n\n  static toPacket(column, sequenceId) {\n    let length = 17; // = 4 padding + 1 + 12 for the rest\n\n    fields.forEach(field => {\n      length += Packet.lengthCodedStringLength(column[field], CharsetToEncoding[column.characterSet]);\n    });\n    const buffer = Buffer.allocUnsafe(length);\n    const packet = new Packet(sequenceId, buffer, 0, length);\n\n    function writeField(name) {\n      packet.writeLengthCodedString(column[name], CharsetToEncoding[column.characterSet]);\n    }\n\n    packet.offset = 4;\n    fields.forEach(writeField);\n    packet.writeInt8(0x0c);\n    packet.writeInt16(column.characterSet);\n    packet.writeInt32(column.columnLength);\n    packet.writeInt8(column.columnType);\n    packet.writeInt16(column.flags);\n    packet.writeInt8(column.decimals);\n    packet.writeInt16(0); // filler\n\n    return packet;\n  } // node-mysql compatibility: alias \"db\" to \"schema\"\n\n\n  get db() {\n    const start = this._schemaStart;\n    const end = start._shemaLength;\n    return this._buf.utf8Slice(start, end);\n  }\n\n}\n\nconst addString = function (name) {\n  Object.defineProperty(ColumnDefinition.prototype, name, {\n    get: function () {\n      const start = this[`_${name}Start`];\n      const end = start + this[`_${name}Length`];\n      return StringParser.decode(this._buf.slice(start, end), this.encoding === 'binary' ? this._clientEncoding : this.encoding);\n    }\n  });\n};\n\naddString('catalog');\naddString('schema');\naddString('table');\naddString('orgTable');\naddString('orgName');\nmodule.exports = ColumnDefinition;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/mysql2/lib/packets/column_definition.js"],"names":["Packet","require","StringParser","CharsetToEncoding","fields","ColumnDefinition","constructor","packet","clientEncoding","_buf","buffer","_clientEncoding","_catalogLength","readLengthCodedNumber","_catalogStart","offset","_schemaLength","_schemaStart","_tableLength","_tableStart","_orgTableLength","_orgTableStart","_nameLength","_nameStart","_orgNameLength","_orgNameStart","skip","characterSet","readInt16","encoding","name","decode","slice","columnLength","readInt32","columnType","readInt8","flags","decimals","inspect","catalog","schema","orgName","table","orgTable","toPacket","column","sequenceId","length","forEach","field","lengthCodedStringLength","Buffer","allocUnsafe","writeField","writeLengthCodedString","writeInt8","writeInt16","writeInt32","db","start","end","_shemaLength","utf8Slice","addString","Object","defineProperty","prototype","get","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Packet = require('../packets/packet');\nconst StringParser = require('../parsers/string');\nconst CharsetToEncoding = require('../constants/charset_encodings.js');\n\nconst fields = ['catalog', 'schema', 'table', 'orgTable', 'name', 'orgName'];\n\n// creating JS string is relatively expensive (compared to\n// reading few bytes from buffer) because all string properties\n// except for name are unlikely to be used we postpone\n// string conversion until property access\n//\n// TODO: watch for integration benchmarks (one with real network buffer)\n// there could be bad side effect as keeping reference to a buffer makes it\n// sit in the memory longer (usually until final .query() callback)\n// Latest v8 perform much better in regard to bufferer -> string conversion,\n// at some point of time this optimisation might become unnecessary\n// see https://github.com/sidorares/node-mysql2/pull/137\n//\nclass ColumnDefinition {\n  constructor(packet, clientEncoding) {\n    this._buf = packet.buffer;\n    this._clientEncoding = clientEncoding;\n    this._catalogLength = packet.readLengthCodedNumber();\n    this._catalogStart = packet.offset;\n    packet.offset += this._catalogLength;\n    this._schemaLength = packet.readLengthCodedNumber();\n    this._schemaStart = packet.offset;\n    packet.offset += this._schemaLength;\n    this._tableLength = packet.readLengthCodedNumber();\n    this._tableStart = packet.offset;\n    packet.offset += this._tableLength;\n    this._orgTableLength = packet.readLengthCodedNumber();\n    this._orgTableStart = packet.offset;\n    packet.offset += this._orgTableLength;\n    // name is always used, don't make it lazy\n    const _nameLength = packet.readLengthCodedNumber();\n    const _nameStart = packet.offset;\n    packet.offset += _nameLength;\n    this._orgNameLength = packet.readLengthCodedNumber();\n    this._orgNameStart = packet.offset;\n    packet.offset += this._orgNameLength;\n    packet.skip(1); //  length of the following fields (always 0x0c)\n    this.characterSet = packet.readInt16();\n    this.encoding = CharsetToEncoding[this.characterSet];\n    this.name = StringParser.decode(\n      this._buf.slice(_nameStart, _nameStart + _nameLength),\n      this.encoding === 'binary' ? this._clientEncoding : this.encoding\n    );\n    this.columnLength = packet.readInt32();\n    this.columnType = packet.readInt8();\n    this.flags = packet.readInt16();\n    this.decimals = packet.readInt8();\n  }\n\n  inspect() {\n    return {\n      catalog: this.catalog,\n      schema: this.schema,\n      name: this.name,\n      orgName: this.orgName,\n      table: this.table,\n      orgTable: this.orgTable,\n      characterSet: this.characterSet,\n      columnLength: this.columnLength,\n      columnType: this.columnType,\n      flags: this.flags,\n      decimals: this.decimals\n    };\n  }\n\n  static toPacket(column, sequenceId) {\n    let length = 17; // = 4 padding + 1 + 12 for the rest\n    fields.forEach(field => {\n      length += Packet.lengthCodedStringLength(\n        column[field],\n        CharsetToEncoding[column.characterSet]\n      );\n    });\n    const buffer = Buffer.allocUnsafe(length);\n\n    const packet = new Packet(sequenceId, buffer, 0, length);\n    function writeField(name) {\n      packet.writeLengthCodedString(\n        column[name],\n        CharsetToEncoding[column.characterSet]\n      );\n    }\n    packet.offset = 4;\n    fields.forEach(writeField);\n    packet.writeInt8(0x0c);\n    packet.writeInt16(column.characterSet);\n    packet.writeInt32(column.columnLength);\n    packet.writeInt8(column.columnType);\n    packet.writeInt16(column.flags);\n    packet.writeInt8(column.decimals);\n    packet.writeInt16(0); // filler\n    return packet;\n  }\n\n  // node-mysql compatibility: alias \"db\" to \"schema\"\n  get db() {\n    const start = this._schemaStart;\n    const end = start._shemaLength;\n    return this._buf.utf8Slice(start, end);\n  }\n}\n\nconst addString = function(name) {\n  Object.defineProperty(ColumnDefinition.prototype, name, {\n    get: function() {\n      const start = this[`_${name}Start`];\n      const end = start + this[`_${name}Length`];\n      return StringParser.decode(\n        this._buf.slice(start, end),\n        this.encoding === 'binary' ? this._clientEncoding : this.encoding\n      );\n    }\n  });\n};\n\naddString('catalog');\naddString('schema');\naddString('table');\naddString('orgTable');\naddString('orgName');\n\nmodule.exports = ColumnDefinition;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"/*\r\n * @copyright\r\n * Copyright Â© Microsoft Open Technologies, Inc.\r\n *\r\n * All Rights Reserved\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http: *www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS\r\n * OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION\r\n * ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A\r\n * PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.\r\n *\r\n * See the Apache License, Version 2.0 for the specific language\r\n * governing permissions and limitations under the License.\r\n */\n'use strict';\n\nvar _ = require('underscore');\n\nrequire('date-utils'); // Adds a number of convenience methods to the builtin Date object.\n\n\nvar querystring = require('querystring');\n\nvar uuid = require('uuid');\n\nvar request = require('request');\n\nvar url = require('url');\n\nvar async = require('async');\n\nvar constants = require('./constants');\n\nvar Logger = require('./log').Logger;\n\nvar util = require('./util');\n\nvar OAuth2Parameters = constants.OAuth2.Parameters;\nvar OAuth2ResponseParameters = constants.OAuth2.ResponseParameters;\nvar DeviceCodeResponseParameters = constants.OAuth2.DeviceCodeResponseParameters;\nvar IdTokenMap = constants.OAuth2.IdTokenMap;\nvar TokenResponseFields = constants.TokenResponseFields;\nvar UserCodeResponseFields = constants.UserCodeResponseFields;\nvar IdTokenFields = constants.IdTokenFields;\nvar TOKEN_RESPONSE_MAP = {};\nTOKEN_RESPONSE_MAP[OAuth2ResponseParameters.TOKEN_TYPE] = TokenResponseFields.TOKEN_TYPE;\nTOKEN_RESPONSE_MAP[OAuth2ResponseParameters.ACCESS_TOKEN] = TokenResponseFields.ACCESS_TOKEN;\nTOKEN_RESPONSE_MAP[OAuth2ResponseParameters.REFRESH_TOKEN] = TokenResponseFields.REFRESH_TOKEN;\nTOKEN_RESPONSE_MAP[OAuth2ResponseParameters.CREATED_ON] = TokenResponseFields.CREATED_ON;\nTOKEN_RESPONSE_MAP[OAuth2ResponseParameters.EXPIRES_ON] = TokenResponseFields.EXPIRES_ON;\nTOKEN_RESPONSE_MAP[OAuth2ResponseParameters.EXPIRES_IN] = TokenResponseFields.EXPIRES_IN;\nTOKEN_RESPONSE_MAP[OAuth2ResponseParameters.RESOURCE] = TokenResponseFields.RESOURCE;\nTOKEN_RESPONSE_MAP[OAuth2ResponseParameters.ERROR] = TokenResponseFields.ERROR;\nTOKEN_RESPONSE_MAP[OAuth2ResponseParameters.ERROR_DESCRIPTION] = TokenResponseFields.ERROR_DESCRIPTION;\nvar DEVICE_CODE_RESPONSE_MAP = {};\nDEVICE_CODE_RESPONSE_MAP[DeviceCodeResponseParameters.DEVICE_CODE] = UserCodeResponseFields.DEVICE_CODE;\nDEVICE_CODE_RESPONSE_MAP[DeviceCodeResponseParameters.USER_CODE] = UserCodeResponseFields.USER_CODE;\nDEVICE_CODE_RESPONSE_MAP[DeviceCodeResponseParameters.VERIFICATION_URL] = UserCodeResponseFields.VERIFICATION_URL;\nDEVICE_CODE_RESPONSE_MAP[DeviceCodeResponseParameters.INTERVAL] = UserCodeResponseFields.INTERVAL;\nDEVICE_CODE_RESPONSE_MAP[DeviceCodeResponseParameters.EXPIRES_IN] = UserCodeResponseFields.EXPIRES_IN;\nDEVICE_CODE_RESPONSE_MAP[DeviceCodeResponseParameters.MESSAGE] = UserCodeResponseFields.MESSAGE;\nDEVICE_CODE_RESPONSE_MAP[DeviceCodeResponseParameters.ERROR] = UserCodeResponseFields.ERROR;\nDEVICE_CODE_RESPONSE_MAP[DeviceCodeResponseParameters.ERROR_DESCRIPTION] = UserCodeResponseFields.ERROR_DESCRIPTION;\n/**\r\n * Constructs an instances of OAuth2Client\r\n * @constructor\r\n * @private\r\n * @param {object} callContext Contains any context information that applies to the request.\r\n * @param {string|url} authority  An url that points to an authority.\r\n */\n\nfunction OAuth2Client(callContext, authority) {\n  this._tokenEndpoint = authority.tokenEndpoint;\n  this._deviceCodeEndpoint = authority.deviceCodeEndpoint;\n  this._log = new Logger('OAuth2Client', callContext._logContext);\n  this._callContext = callContext;\n  this._cancelPollingRequest = false;\n}\n/**\r\n * Constructs an OAuth 2.0 token request url.\r\n * @private\r\n * @return {URL}\r\n */\n\n\nOAuth2Client.prototype._createTokenUrl = function () {\n  var tokenUrl = url.parse(this._tokenEndpoint);\n  var parameters = {};\n  parameters[OAuth2Parameters.AAD_API_VERSION] = '1.0';\n  tokenUrl.search = querystring.stringify(parameters);\n  return tokenUrl;\n};\n/**\r\n * Constructs the user code info request url. \r\n * @private \r\n * @return {URL}\r\n */\n\n\nOAuth2Client.prototype._createDeviceCodeUrl = function () {\n  var deviceCodeUrl = url.parse(this._deviceCodeEndpoint);\n  var parameters = {};\n  parameters[OAuth2Parameters.AAD_API_VERSION] = '1.0';\n  deviceCodeUrl.search = querystring.stringify(parameters);\n  return deviceCodeUrl;\n};\n/**\r\n * @private\r\n * @param {object}   obj         An object in which integer values may reside.\r\n * @param {array}    keys        An array of strings that specify keys in which integers may need parsing.\r\n */\n\n\nOAuth2Client.prototype._parseOptionalInts = function (obj, keys) {\n  var self = this;\n  keys.forEach(function (element) {\n    if (_.has(obj, element)) {\n      obj[element] = parseInt(obj[element], 10);\n\n      if (isNaN(obj[element])) {\n        throw self._log.createError(element + ' could not be parsed as an int.');\n      }\n    }\n  });\n};\n/**\r\n * Parses a JWS encoded JWT into it's three parts.\r\n * @param  {string} jwtToken The token to parse.\r\n * @return {object}          The three JWS parts, header, JWSPayload, and JWSSig, or undefined.\r\n */\n\n\nOAuth2Client.prototype._crackJwt = function (jwtToken) {\n  var idTokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\n  var matches = idTokenPartsRegex.exec(jwtToken);\n\n  if (!matches || matches.length < 4) {\n    this._log.warn('The returned id_token is not parseable.');\n\n    return;\n  }\n\n  var crackedToken = {\n    header: matches[1],\n    JWSPayload: matches[2],\n    JWSSig: matches[3]\n  };\n  return crackedToken;\n};\n/**\r\n * Finds the value that should be used as the userId value.\r\n * @param {object} idToken The id token that parsed.\r\n * @returns {object} An object with a userId field and maybe a userIdIsDisplayable field.\r\n */\n\n\nOAuth2Client.prototype._getUserId = function (idToken) {\n  var userId;\n  var isDisplayable;\n\n  if (idToken.upn) {\n    userId = idToken.upn;\n    isDisplayable = true;\n  } else if (idToken.email) {\n    userId = idToken.email;\n    isDisplayable = true;\n  } else if (idToken.sub) {\n    userId = idToken.sub;\n  }\n\n  if (!userId) {\n    // generate a random GUID.\n    userId = uuid.v4();\n  }\n\n  var userIdVals = {};\n  userIdVals[IdTokenFields.USER_ID] = userId;\n\n  if (isDisplayable) {\n    userIdVals[IdTokenFields.IS_USER_ID_DISPLAYABLE] = true;\n  }\n\n  return userIdVals;\n};\n\nfunction mapFields(inObj, outObj, map) {\n  for (var key in inObj) {\n    if (map[key]) {\n      var mappedKey = map[key];\n      outObj[mappedKey] = inObj[key];\n    }\n  }\n}\n/**\r\n * Given a decoded id token off the wire, this function extracts the values that\r\n * ADAL commonly returns to callers and translates the names to more user\r\n * friendly names.\r\n * @param  {Object} idToken A decoded id token.\r\n * @return {Object}         The set of extracted values with their new names.\r\n */\n\n\nOAuth2Client.prototype._extractIdTokenValues = function (idToken) {\n  var extractedValues = {};\n\n  _.extend(extractedValues, this._getUserId(idToken));\n\n  mapFields(idToken, extractedValues, IdTokenMap);\n  return extractedValues;\n};\n/**\r\n * Parses the value of the id_token OAuth 2 Reponse.\r\n * @param  {string} encodedIdToken An unencrypted JWT token.\r\n * @return {object}                 returns the decoded id_token or undefined.\r\n */\n\n\nOAuth2Client.prototype._parseIdToken = function (encodedIdToken) {\n  var crackedToken = this._crackJwt(encodedIdToken);\n\n  if (!crackedToken) {\n    return;\n  }\n\n  var idToken;\n\n  try {\n    var base64IdToken = crackedToken.JWSPayload;\n    var base64Decoded = util.base64DecodeStringUrlSafe(base64IdToken);\n\n    if (!base64Decoded) {\n      this._log.warn('The returned id_token could not be base64 url safe decoded.');\n\n      return;\n    }\n\n    idToken = JSON.parse(base64Decoded);\n  } catch (err) {\n    this._log.warn('the returned id_token could not be decoded');\n\n    this._log.warn('The returned id_token could not be decoded: ' + err.stack, true);\n\n    return;\n  }\n\n  return this._extractIdTokenValues(idToken);\n};\n/**\r\n * Validates the response returned from an OAuth 2.0 token request.\r\n * @private\r\n * @param  {string} body  The response as a string encoded JSON object.\r\n * @return {object}       The parsed response.\r\n */\n\n\nOAuth2Client.prototype._validateTokenResponse = function (body) {\n  var wireResponse;\n  var tokenResponse = {};\n\n  try {\n    wireResponse = JSON.parse(body);\n  } catch (e) {\n    throw new Error('The token response returned from the server is unparseable as JSON');\n  }\n\n  var intKeys = [OAuth2ResponseParameters.EXPIRES_ON, OAuth2ResponseParameters.EXPIRES_IN, OAuth2ResponseParameters.CREATED_ON];\n\n  this._parseOptionalInts(wireResponse, intKeys);\n\n  if (wireResponse[OAuth2ResponseParameters.EXPIRES_IN]) {\n    var expiresIn = wireResponse[OAuth2ResponseParameters.EXPIRES_IN];\n    var now = new Date();\n    wireResponse[OAuth2ResponseParameters.EXPIRES_ON] = now.add({\n      seconds: expiresIn\n    });\n  }\n\n  if (wireResponse[OAuth2ResponseParameters.CREATED_ON]) {\n    var tempDate = new Date();\n    var createdOn = wireResponse[OAuth2ResponseParameters.CREATED_ON];\n    tempDate.setTime(createdOn);\n    wireResponse[OAuth2ResponseParameters.CREATED_ON] = tempDate;\n  }\n\n  if (!wireResponse[OAuth2ResponseParameters.TOKEN_TYPE]) {\n    throw this._log.createError('wireResponse is missing token_type');\n  }\n\n  if (!wireResponse[OAuth2ResponseParameters.ACCESS_TOKEN]) {\n    throw this._log.createError('wireResponse missing access_token');\n  }\n\n  mapFields(wireResponse, tokenResponse, TOKEN_RESPONSE_MAP);\n\n  if (wireResponse[OAuth2ResponseParameters.ID_TOKEN]) {\n    var idToken = this._parseIdToken(wireResponse[OAuth2ResponseParameters.ID_TOKEN]);\n\n    if (idToken) {\n      _.extend(tokenResponse, idToken);\n    }\n  }\n\n  return tokenResponse;\n};\n/**\r\n * Validates the response returned from an OAuth 2.0 device code request.\r\n * @private\r\n * @param  {string} body  The response as a string encoded JSON object.\r\n * @return {object}       The parsed response.\r\n */\n\n\nOAuth2Client.prototype._validateDeviceCodeResponse = function (body) {\n  var wireResponse;\n  var deviceCodeResponse = {};\n\n  try {\n    wireResponse = JSON.parse(body);\n  } catch (e) {\n    throw new Error('The device code response returned from the server is unparseable as JSON.');\n  }\n\n  var intKeys = [DeviceCodeResponseParameters.EXPIRES_IN, DeviceCodeResponseParameters.INTERVAL];\n\n  this._parseOptionalInts(wireResponse, intKeys);\n\n  if (!wireResponse[DeviceCodeResponseParameters.EXPIRES_IN]) {\n    throw this._log.createError('wireResponse is missing expires_in');\n  }\n\n  if (!wireResponse[DeviceCodeResponseParameters.DEVICE_CODE]) {\n    throw this._log.createError('wireResponse is missing device code');\n  }\n\n  if (!wireResponse[DeviceCodeResponseParameters.USER_CODE]) {\n    throw this._log.createError('wireResponse is missing user code');\n  }\n\n  mapFields(wireResponse, deviceCodeResponse, DEVICE_CODE_RESPONSE_MAP);\n  return deviceCodeResponse;\n};\n/**\r\n * @private\r\n * @param {string}                   body        The body of a http token response.\r\n */\n\n\nOAuth2Client.prototype._handlePollingResponse = function (body) {\n  //handle token error response\n  var tokenResponse = this._handlePollingRequestErrorResponse(body);\n\n  if (_.isEmpty(tokenResponse)) {\n    tokenResponse = this._validateTokenResponse(body);\n  }\n\n  return tokenResponse;\n};\n/**\r\n * @private\r\n * @param {string}                   body        The body of a http token response.\r\n */\n\n\nOAuth2Client.prototype._handlePollingRequestErrorResponse = function (body) {\n  var wireResponse;\n  var tokenResponse = {};\n\n  try {\n    wireResponse = JSON.parse(body);\n  } catch (e) {\n    throw new Error('The token response returned from the server is unparsable as JSON');\n  }\n\n  if (wireResponse[OAuth2ResponseParameters.ERROR]) {\n    mapFields(wireResponse, tokenResponse, TOKEN_RESPONSE_MAP);\n  }\n\n  return tokenResponse;\n};\n/**\r\n * @private\r\n * @param {object}                   response    An http response object.\r\n * @param {string}                   body        The body of a http token response.\r\n * @param {OAuth2Client.GetTokenCallback}    callback    A call back function.  The body parameter is the body parameter passed\r\n *                                               into this function.\r\n */\n\n\nOAuth2Client.prototype._handleGetTokenResponse = function (response, body, callback) {\n  var tokenResponse;\n\n  try {\n    tokenResponse = this._validateTokenResponse(body);\n  } catch (e) {\n    this._log.error('Error validating get token response', e, true);\n\n    callback(e);\n    return;\n  }\n\n  callback(null, tokenResponse);\n};\n\nOAuth2Client.prototype._handleGetDeviceCodeResponse = function (response, body, callback) {\n  var deviceCodeResponse;\n\n  try {\n    deviceCodeResponse = this._validateDeviceCodeResponse(body);\n  } catch (e) {\n    this._log.error('Error validating get user code response', e, true);\n\n    callback(e);\n    return;\n  }\n\n  callback(null, deviceCodeResponse);\n};\n\nOAuth2Client.prototype._getTokenWithPolling = function (postOptions, callback) {\n  var self = this;\n\n  if (self._cancelPollingRequest === true) {\n    callback(null, new Error('Polling_Request_Cancelled'));\n    return;\n  }\n\n  request.post(postOptions, util.createRequestHandler('Get Token', this._log, function (response, body) {\n    //error response callback, for error response, it's already parsed as Json. \n    if (body && body.hasOwnProperty(TokenResponseFields.ERROR) && body[TokenResponseFields.ERROR] === 'authorization_pending') {\n      callback(new Error(body[TokenResponseFields.ERROR]), body);\n    } else {\n      callback(null, body);\n    }\n  }, // success response callback\n  function (response, body) {\n    var tokenResponse;\n\n    try {\n      tokenResponse = self._handlePollingResponse(body);\n    } catch (e) {\n      self._log.error('Error validating get token response', e, true);\n\n      callback(null, e);\n      return;\n    }\n\n    callback(null, tokenResponse);\n  }));\n};\n\nOAuth2Client.prototype._createPostOption = function (postUrl, urlEncodedRequestForm) {\n  var postOptions = util.createRequestOptions(this, {\n    'url': url.format(postUrl),\n    body: urlEncodedRequestForm,\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    followRedirect: false,\n    encoding: 'utf8'\n  });\n  return postOptions;\n};\n/**\r\n * @callback GetTokenCallback\r\n * @memberOf OAuth2Client\r\n * @param {Error} [error] In case of an error this will hold the associated Error object.\r\n * @param {TokenResponse} tokenResponse Contains the parsed result of a get token request.\r\n */\n\n/**\r\n* @param {object}                           oauthParameters     An object whose keys come from\r\n*                                                               Constants.OAuth2.Parameters\r\n* @param {OAuth2Client.GetTokenCallback}   callback            The callback function.\r\n*/\n\n\nOAuth2Client.prototype.getToken = function (oauthParameters, callback) {\n  var self = this;\n\n  var tokenUrl = self._createTokenUrl();\n\n  var urlEncodedTokenRequestForm = querystring.stringify(oauthParameters);\n\n  var postOptions = self._createPostOption(tokenUrl, urlEncodedTokenRequestForm);\n\n  request.post(postOptions, util.createRequestHandler('Get Token', this._log, callback, function (response, body) {\n    self._handleGetTokenResponse(response, body, callback);\n  }));\n};\n/**\r\n * @param {object}                          oauthParameters     An object whose keys come from\r\n *                                                               Constants.OAuth2.Parameters\r\n * @param {integer}                         refresh_interval    The interval for polling request. \r\n * @param {integer}                         exipres_in          The timeout for polling request. \r\n * @param {OAuth2Client.GetTokenCallback}   callback            The callback function.\r\n */\n\n\nOAuth2Client.prototype.getTokenWithPolling = function (oauthParameters, refresh_interval, expires_in, callback) {\n  var self = this;\n  var maxTimesForRetry = Math.floor(expires_in / refresh_interval);\n\n  var tokenUrl = self._createTokenUrl();\n\n  var urlEncodedTokenRequestForm = querystring.stringify(oauthParameters);\n\n  var postOptions = self._createPostOption(tokenUrl, urlEncodedTokenRequestForm);\n\n  var optionsForRetry = {\n    times: maxTimesForRetry,\n    interval: refresh_interval * 1000\n  };\n  async.retry(optionsForRetry, function (retryCallback, response) {\n    self._getTokenWithPolling(postOptions, retryCallback);\n  }, function (err, response) {\n    if (response && response instanceof Error) {\n      callback(response);\n      return;\n    } else if (response && response.hasOwnProperty(DeviceCodeResponseParameters.ERROR)) {\n      callback(response);\n      return;\n    }\n\n    callback(err, response);\n  });\n};\n\nOAuth2Client.prototype.getUserCodeInfo = function (oauthParameters, callback) {\n  // for now make it as a post request\n  var self = this;\n\n  var deviceCodeUrl = self._createDeviceCodeUrl();\n\n  var urlEncodedDeviceCodeRequestForm = querystring.stringify(oauthParameters);\n\n  var postOptions = self._createPostOption(deviceCodeUrl, urlEncodedDeviceCodeRequestForm);\n\n  request.post(postOptions, util.createRequestHandler('Get Device Code ', this._log, callback, function (response, body) {\n    self._handleGetDeviceCodeResponse(response, body, callback);\n  }));\n};\n/**\r\n * Cancel the polling request made for acquiring token by device code. \r\n */\n\n\nOAuth2Client.prototype.cancelPollingRequest = function () {\n  this._cancelPollingRequest = true;\n};\n\nmodule.exports = OAuth2Client;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/adal-node/lib/oauth2client.js"],"names":["_","require","querystring","uuid","request","url","async","constants","Logger","util","OAuth2Parameters","OAuth2","Parameters","OAuth2ResponseParameters","ResponseParameters","DeviceCodeResponseParameters","IdTokenMap","TokenResponseFields","UserCodeResponseFields","IdTokenFields","TOKEN_RESPONSE_MAP","TOKEN_TYPE","ACCESS_TOKEN","REFRESH_TOKEN","CREATED_ON","EXPIRES_ON","EXPIRES_IN","RESOURCE","ERROR","ERROR_DESCRIPTION","DEVICE_CODE_RESPONSE_MAP","DEVICE_CODE","USER_CODE","VERIFICATION_URL","INTERVAL","MESSAGE","OAuth2Client","callContext","authority","_tokenEndpoint","tokenEndpoint","_deviceCodeEndpoint","deviceCodeEndpoint","_log","_logContext","_callContext","_cancelPollingRequest","prototype","_createTokenUrl","tokenUrl","parse","parameters","AAD_API_VERSION","search","stringify","_createDeviceCodeUrl","deviceCodeUrl","_parseOptionalInts","obj","keys","self","forEach","element","has","parseInt","isNaN","createError","_crackJwt","jwtToken","idTokenPartsRegex","matches","exec","length","warn","crackedToken","header","JWSPayload","JWSSig","_getUserId","idToken","userId","isDisplayable","upn","email","sub","v4","userIdVals","USER_ID","IS_USER_ID_DISPLAYABLE","mapFields","inObj","outObj","map","key","mappedKey","_extractIdTokenValues","extractedValues","extend","_parseIdToken","encodedIdToken","base64IdToken","base64Decoded","base64DecodeStringUrlSafe","JSON","err","stack","_validateTokenResponse","body","wireResponse","tokenResponse","e","Error","intKeys","expiresIn","now","Date","add","seconds","tempDate","createdOn","setTime","ID_TOKEN","_validateDeviceCodeResponse","deviceCodeResponse","_handlePollingResponse","_handlePollingRequestErrorResponse","isEmpty","_handleGetTokenResponse","response","callback","error","_handleGetDeviceCodeResponse","_getTokenWithPolling","postOptions","post","createRequestHandler","hasOwnProperty","_createPostOption","postUrl","urlEncodedRequestForm","createRequestOptions","format","headers","followRedirect","encoding","getToken","oauthParameters","urlEncodedTokenRequestForm","getTokenWithPolling","refresh_interval","expires_in","maxTimesForRetry","Math","floor","optionsForRetry","times","interval","retry","retryCallback","getUserCodeInfo","urlEncodedDeviceCodeRequestForm","cancelPollingRequest","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * @copyright\r\n * Copyright Â© Microsoft Open Technologies, Inc.\r\n *\r\n * All Rights Reserved\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http: *www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS\r\n * OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION\r\n * ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A\r\n * PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.\r\n *\r\n * See the Apache License, Version 2.0 for the specific language\r\n * governing permissions and limitations under the License.\r\n */\r\n'use strict';\r\n\r\nvar _ = require('underscore');\r\nrequire('date-utils');  // Adds a number of convenience methods to the builtin Date object.\r\nvar querystring = require('querystring');\r\nvar uuid = require('uuid');\r\nvar request = require('request');\r\nvar url = require('url');\r\nvar async = require('async');\r\n\r\nvar constants = require('./constants');\r\nvar Logger = require('./log').Logger;\r\nvar util = require('./util');\r\n\r\nvar OAuth2Parameters = constants.OAuth2.Parameters;\r\nvar OAuth2ResponseParameters = constants.OAuth2.ResponseParameters;\r\nvar DeviceCodeResponseParameters = constants.OAuth2.DeviceCodeResponseParameters;\r\nvar IdTokenMap = constants.OAuth2.IdTokenMap;\r\nvar TokenResponseFields = constants.TokenResponseFields;\r\nvar UserCodeResponseFields = constants.UserCodeResponseFields;\r\nvar IdTokenFields = constants.IdTokenFields;\r\n\r\nvar TOKEN_RESPONSE_MAP = {};\r\nTOKEN_RESPONSE_MAP[OAuth2ResponseParameters.TOKEN_TYPE] = TokenResponseFields.TOKEN_TYPE;\r\nTOKEN_RESPONSE_MAP[OAuth2ResponseParameters.ACCESS_TOKEN] = TokenResponseFields.ACCESS_TOKEN;\r\nTOKEN_RESPONSE_MAP[OAuth2ResponseParameters.REFRESH_TOKEN] = TokenResponseFields.REFRESH_TOKEN;\r\nTOKEN_RESPONSE_MAP[OAuth2ResponseParameters.CREATED_ON] = TokenResponseFields.CREATED_ON;\r\nTOKEN_RESPONSE_MAP[OAuth2ResponseParameters.EXPIRES_ON] = TokenResponseFields.EXPIRES_ON;\r\nTOKEN_RESPONSE_MAP[OAuth2ResponseParameters.EXPIRES_IN] = TokenResponseFields.EXPIRES_IN;\r\nTOKEN_RESPONSE_MAP[OAuth2ResponseParameters.RESOURCE] = TokenResponseFields.RESOURCE;\r\nTOKEN_RESPONSE_MAP[OAuth2ResponseParameters.ERROR] = TokenResponseFields.ERROR;\r\nTOKEN_RESPONSE_MAP[OAuth2ResponseParameters.ERROR_DESCRIPTION] = TokenResponseFields.ERROR_DESCRIPTION;\r\n\r\n\r\nvar DEVICE_CODE_RESPONSE_MAP = {};\r\nDEVICE_CODE_RESPONSE_MAP[DeviceCodeResponseParameters.DEVICE_CODE] = UserCodeResponseFields.DEVICE_CODE;\r\nDEVICE_CODE_RESPONSE_MAP[DeviceCodeResponseParameters.USER_CODE] = UserCodeResponseFields.USER_CODE;\r\nDEVICE_CODE_RESPONSE_MAP[DeviceCodeResponseParameters.VERIFICATION_URL] = UserCodeResponseFields.VERIFICATION_URL;\r\nDEVICE_CODE_RESPONSE_MAP[DeviceCodeResponseParameters.INTERVAL] = UserCodeResponseFields.INTERVAL;\r\nDEVICE_CODE_RESPONSE_MAP[DeviceCodeResponseParameters.EXPIRES_IN] = UserCodeResponseFields.EXPIRES_IN;\r\nDEVICE_CODE_RESPONSE_MAP[DeviceCodeResponseParameters.MESSAGE] = UserCodeResponseFields.MESSAGE;\r\nDEVICE_CODE_RESPONSE_MAP[DeviceCodeResponseParameters.ERROR] = UserCodeResponseFields.ERROR;\r\nDEVICE_CODE_RESPONSE_MAP[DeviceCodeResponseParameters.ERROR_DESCRIPTION] = UserCodeResponseFields.ERROR_DESCRIPTION;\r\n\r\n/**\r\n * Constructs an instances of OAuth2Client\r\n * @constructor\r\n * @private\r\n * @param {object} callContext Contains any context information that applies to the request.\r\n * @param {string|url} authority  An url that points to an authority.\r\n */\r\nfunction OAuth2Client(callContext, authority) {\r\n  this._tokenEndpoint = authority.tokenEndpoint;\r\n  this._deviceCodeEndpoint = authority.deviceCodeEndpoint;\r\n\r\n  this._log = new Logger('OAuth2Client', callContext._logContext);\r\n  this._callContext = callContext;\r\n  this._cancelPollingRequest = false;\r\n}\r\n\r\n/**\r\n * Constructs an OAuth 2.0 token request url.\r\n * @private\r\n * @return {URL}\r\n */\r\nOAuth2Client.prototype._createTokenUrl = function () {\r\n  var tokenUrl = url.parse(this._tokenEndpoint);\r\n\r\n  var parameters = {};\r\n  parameters[OAuth2Parameters.AAD_API_VERSION] = '1.0';\r\n\r\n  tokenUrl.search = querystring.stringify(parameters);\r\n  return tokenUrl;\r\n};\r\n\r\n/**\r\n * Constructs the user code info request url. \r\n * @private \r\n * @return {URL}\r\n */\r\nOAuth2Client.prototype._createDeviceCodeUrl = function () {\r\n   var deviceCodeUrl = url.parse(this._deviceCodeEndpoint);\r\n\r\n   var parameters = {};\r\n   parameters[OAuth2Parameters.AAD_API_VERSION] = '1.0';\r\n\r\n   deviceCodeUrl.search = querystring.stringify(parameters);\r\n\r\n   return deviceCodeUrl;\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {object}   obj         An object in which integer values may reside.\r\n * @param {array}    keys        An array of strings that specify keys in which integers may need parsing.\r\n */\r\nOAuth2Client.prototype._parseOptionalInts = function (obj, keys) {\r\n  var self = this;\r\n  keys.forEach(function(element) {\r\n    if (_.has(obj, element)) {\r\n      obj[element] = parseInt(obj[element], 10);\r\n      if (isNaN(obj[element])) {\r\n        throw self._log.createError(element + ' could not be parsed as an int.');\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Parses a JWS encoded JWT into it's three parts.\r\n * @param  {string} jwtToken The token to parse.\r\n * @return {object}          The three JWS parts, header, JWSPayload, and JWSSig, or undefined.\r\n */\r\nOAuth2Client.prototype._crackJwt = function(jwtToken) {\r\n  var idTokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\r\n\r\n  var matches = idTokenPartsRegex.exec(jwtToken);\r\n  if (!matches || matches.length < 4) {\r\n    this._log.warn('The returned id_token is not parseable.');\r\n    return;\r\n  }\r\n\r\n  var crackedToken = {\r\n    header : matches[1],\r\n    JWSPayload : matches[2],\r\n    JWSSig : matches[3]\r\n  };\r\n\r\n  return crackedToken;\r\n};\r\n\r\n/**\r\n * Finds the value that should be used as the userId value.\r\n * @param {object} idToken The id token that parsed.\r\n * @returns {object} An object with a userId field and maybe a userIdIsDisplayable field.\r\n */\r\nOAuth2Client.prototype._getUserId = function(idToken) {\r\n  var userId;\r\n  var isDisplayable;\r\n\r\n  if (idToken.upn) {\r\n    userId = idToken.upn;\r\n    isDisplayable = true;\r\n  } else if (idToken.email) {\r\n    userId = idToken.email;\r\n    isDisplayable = true;\r\n  } else if (idToken.sub) {\r\n    userId = idToken.sub;\r\n  }\r\n\r\n  if (!userId) {\r\n    // generate a random GUID.\r\n    userId = uuid.v4();\r\n  }\r\n\r\n  var userIdVals = {};\r\n  userIdVals[IdTokenFields.USER_ID] = userId;\r\n  if (isDisplayable) {\r\n    userIdVals[IdTokenFields.IS_USER_ID_DISPLAYABLE] = true;\r\n  }\r\n\r\n  return userIdVals;\r\n};\r\n\r\nfunction mapFields(inObj, outObj, map) {\r\n  for (var key in inObj) {\r\n    if (map[key]) {\r\n      var mappedKey = map[key];\r\n      outObj[mappedKey] = inObj[key];\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Given a decoded id token off the wire, this function extracts the values that\r\n * ADAL commonly returns to callers and translates the names to more user\r\n * friendly names.\r\n * @param  {Object} idToken A decoded id token.\r\n * @return {Object}         The set of extracted values with their new names.\r\n */\r\nOAuth2Client.prototype._extractIdTokenValues = function(idToken) {\r\n  var extractedValues = {};\r\n  _.extend(extractedValues, this._getUserId(idToken));\r\n\r\n  mapFields(idToken, extractedValues, IdTokenMap);\r\n\r\n  return extractedValues;\r\n};\r\n\r\n/**\r\n * Parses the value of the id_token OAuth 2 Reponse.\r\n * @param  {string} encodedIdToken An unencrypted JWT token.\r\n * @return {object}                 returns the decoded id_token or undefined.\r\n */\r\nOAuth2Client.prototype._parseIdToken = function(encodedIdToken) {\r\n  var crackedToken = this._crackJwt(encodedIdToken);\r\n  if (!crackedToken) {\r\n    return;\r\n  }\r\n\r\n  var idToken;\r\n  try {\r\n    var base64IdToken = crackedToken.JWSPayload;\r\n    var base64Decoded = util.base64DecodeStringUrlSafe(base64IdToken);\r\n    if (!base64Decoded) {\r\n      this._log.warn('The returned id_token could not be base64 url safe decoded.');\r\n      return;\r\n    }\r\n\r\n    idToken = JSON.parse(base64Decoded);\r\n  } catch (err) {\r\n    this._log.warn('the returned id_token could not be decoded');\r\n    this._log.warn('The returned id_token could not be decoded: ' + err.stack, true);\r\n    return;\r\n  }\r\n\r\n  return this._extractIdTokenValues(idToken);\r\n};\r\n\r\n/**\r\n * Validates the response returned from an OAuth 2.0 token request.\r\n * @private\r\n * @param  {string} body  The response as a string encoded JSON object.\r\n * @return {object}       The parsed response.\r\n */\r\nOAuth2Client.prototype._validateTokenResponse = function(body) {\r\n  var wireResponse;\r\n  var tokenResponse = {};\r\n\r\n  try {\r\n    wireResponse = JSON.parse(body);\r\n  } catch(e) {\r\n    throw new Error('The token response returned from the server is unparseable as JSON');\r\n  }\r\n\r\n  var intKeys = [\r\n    OAuth2ResponseParameters.EXPIRES_ON,\r\n    OAuth2ResponseParameters.EXPIRES_IN,\r\n    OAuth2ResponseParameters.CREATED_ON\r\n  ];\r\n\r\n  this._parseOptionalInts(wireResponse, intKeys);\r\n\r\n  if (wireResponse[OAuth2ResponseParameters.EXPIRES_IN]) {\r\n    var expiresIn = wireResponse[OAuth2ResponseParameters.EXPIRES_IN];\r\n    var now = new Date();\r\n    wireResponse[OAuth2ResponseParameters.EXPIRES_ON] = now.add( { seconds : expiresIn });\r\n  }\r\n\r\n  if (wireResponse[OAuth2ResponseParameters.CREATED_ON]) {\r\n    var tempDate = new Date();\r\n    var createdOn = wireResponse[OAuth2ResponseParameters.CREATED_ON];\r\n    tempDate.setTime(createdOn);\r\n    wireResponse[OAuth2ResponseParameters.CREATED_ON] = tempDate;\r\n  }\r\n\r\n  if (!wireResponse[OAuth2ResponseParameters.TOKEN_TYPE]) {\r\n    throw this._log.createError('wireResponse is missing token_type');\r\n  }\r\n  if (!wireResponse[OAuth2ResponseParameters.ACCESS_TOKEN]) {\r\n    throw this._log.createError('wireResponse missing access_token');\r\n  }\r\n  \r\n  mapFields(wireResponse, tokenResponse, TOKEN_RESPONSE_MAP);\r\n\r\n  if (wireResponse[OAuth2ResponseParameters.ID_TOKEN]) {\r\n    var idToken = this._parseIdToken(wireResponse[OAuth2ResponseParameters.ID_TOKEN]);\r\n    if (idToken) {\r\n      _.extend(tokenResponse, idToken);\r\n    }\r\n  }\r\n\r\n  return tokenResponse;\r\n};\r\n\r\n/**\r\n * Validates the response returned from an OAuth 2.0 device code request.\r\n * @private\r\n * @param  {string} body  The response as a string encoded JSON object.\r\n * @return {object}       The parsed response.\r\n */\r\nOAuth2Client.prototype._validateDeviceCodeResponse = function(body) {\r\n   var wireResponse;\r\n   var deviceCodeResponse = {};\r\n\r\n   try {\r\n      wireResponse = JSON.parse(body);\r\n   } catch(e) {\r\n      throw new Error('The device code response returned from the server is unparseable as JSON.');\r\n   }\r\n\r\n   var intKeys = [\r\n        DeviceCodeResponseParameters.EXPIRES_IN, \r\n        DeviceCodeResponseParameters.INTERVAL\r\n   ];\r\n\r\n   this._parseOptionalInts(wireResponse, intKeys);\r\n  \r\n   if (!wireResponse[DeviceCodeResponseParameters.EXPIRES_IN]){\r\n      throw this._log.createError('wireResponse is missing expires_in');\r\n   }\r\n\r\n   if (!wireResponse[DeviceCodeResponseParameters.DEVICE_CODE]) {\r\n      throw this._log.createError('wireResponse is missing device code');\r\n   }\r\n\r\n   if (!wireResponse[DeviceCodeResponseParameters.USER_CODE]) {\r\n      throw this._log.createError('wireResponse is missing user code');\r\n   }\r\n\r\n   mapFields(wireResponse, deviceCodeResponse, DEVICE_CODE_RESPONSE_MAP);\r\n\r\n   return deviceCodeResponse;\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {string}                   body        The body of a http token response.\r\n */\r\nOAuth2Client.prototype._handlePollingResponse = function(body) {\r\n    //handle token error response\r\n    var tokenResponse = this._handlePollingRequestErrorResponse(body);\r\n    if (_.isEmpty(tokenResponse)){\r\n       tokenResponse = this._validateTokenResponse(body);\r\n    }\r\n\r\n    return tokenResponse;\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {string}                   body        The body of a http token response.\r\n */\r\nOAuth2Client.prototype._handlePollingRequestErrorResponse = function(body) {\r\n   var wireResponse;\r\n   var tokenResponse = {};\r\n\r\n   try {\r\n      wireResponse = JSON.parse(body);\r\n   } catch (e) {\r\n      throw new Error ('The token response returned from the server is unparsable as JSON');\r\n   }\r\n\r\n   if (wireResponse[OAuth2ResponseParameters.ERROR]) {\r\n      mapFields(wireResponse, tokenResponse, TOKEN_RESPONSE_MAP);\r\n   }\r\n\r\n   return tokenResponse;\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {object}                   response    An http response object.\r\n * @param {string}                   body        The body of a http token response.\r\n * @param {OAuth2Client.GetTokenCallback}    callback    A call back function.  The body parameter is the body parameter passed\r\n *                                               into this function.\r\n */\r\nOAuth2Client.prototype._handleGetTokenResponse = function(response, body, callback) {\r\n  var tokenResponse;\r\n  try {\r\n    tokenResponse = this._validateTokenResponse(body);\r\n  } catch (e) {\r\n    this._log.error('Error validating get token response', e, true);\r\n    callback(e);\r\n    return;\r\n  }\r\n  callback(null, tokenResponse);\r\n};\r\n\r\nOAuth2Client.prototype._handleGetDeviceCodeResponse = function(response, body, callback) {\r\n   var deviceCodeResponse;\r\n   try {\r\n      deviceCodeResponse = this._validateDeviceCodeResponse(body);\r\n   } catch (e) {\r\n      this._log.error('Error validating get user code response', e, true);\r\n      callback(e);\r\n      return;\r\n   }\r\n\r\n   callback(null, deviceCodeResponse);\r\n};\r\n\r\nOAuth2Client.prototype._getTokenWithPolling = function (postOptions, callback) {\r\n    var self = this;\r\n    if (self._cancelPollingRequest === true) {\r\n        callback(null, new Error('Polling_Request_Cancelled'));\r\n        return;\r\n    }\r\n    \r\n    request.post(postOptions, util.createRequestHandler('Get Token', this._log, function(response, body) {\r\n        //error response callback, for error response, it's already parsed as Json. \r\n        if (body && body.hasOwnProperty(TokenResponseFields.ERROR) && body[TokenResponseFields.ERROR] === 'authorization_pending') {\r\n            callback(new Error(body[TokenResponseFields.ERROR]), body);\r\n        }\r\n        else {\r\n            callback(null, body);\r\n        }\r\n       }, \r\n       // success response callback\r\n       function (response, body) {\r\n          var tokenResponse;\r\n          try {\r\n             tokenResponse = self._handlePollingResponse(body);\r\n          } catch (e) {\r\n             self._log.error('Error validating get token response', e, true);\r\n             callback(null, e);\r\n             return;\r\n          }\r\n        \r\n          callback(null, tokenResponse);\r\n       })\r\n    );\r\n};\r\n\r\nOAuth2Client.prototype._createPostOption = function (postUrl, urlEncodedRequestForm) {\r\n    var postOptions = util.createRequestOptions(\r\n        this,\r\n    {\r\n            'url' : url.format(postUrl),\r\n            body : urlEncodedRequestForm,\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded'\r\n            },\r\n            followRedirect : false,\r\n            encoding : 'utf8'\r\n        }\r\n    );\r\n    \r\n    return postOptions;\r\n};\r\n\r\n/**\r\n * @callback GetTokenCallback\r\n * @memberOf OAuth2Client\r\n * @param {Error} [error] In case of an error this will hold the associated Error object.\r\n * @param {TokenResponse} tokenResponse Contains the parsed result of a get token request.\r\n */\r\n\r\n/**\r\n* @param {object}                           oauthParameters     An object whose keys come from\r\n*                                                               Constants.OAuth2.Parameters\r\n* @param {OAuth2Client.GetTokenCallback}   callback            The callback function.\r\n*/\r\nOAuth2Client.prototype.getToken = function(oauthParameters, callback) {\r\n  var self = this;\r\n  var tokenUrl = self._createTokenUrl();\r\n\r\n  var urlEncodedTokenRequestForm = querystring.stringify(oauthParameters);\r\n\r\n  var postOptions = self._createPostOption(tokenUrl, urlEncodedTokenRequestForm);\r\n\r\n  request.post(postOptions, util.createRequestHandler('Get Token', this._log, callback,\r\n    function (response, body) {\r\n      self._handleGetTokenResponse(response, body, callback);\r\n    })\r\n  );\r\n};\r\n\r\n/**\r\n * @param {object}                          oauthParameters     An object whose keys come from\r\n *                                                               Constants.OAuth2.Parameters\r\n * @param {integer}                         refresh_interval    The interval for polling request. \r\n * @param {integer}                         exipres_in          The timeout for polling request. \r\n * @param {OAuth2Client.GetTokenCallback}   callback            The callback function.\r\n */\r\nOAuth2Client.prototype.getTokenWithPolling = function(oauthParameters, refresh_interval, expires_in, callback){\r\n   var self = this; \r\n   var maxTimesForRetry = Math.floor(expires_in / refresh_interval);\r\n  \r\n   var tokenUrl = self._createTokenUrl();\r\n   var urlEncodedTokenRequestForm = querystring.stringify(oauthParameters);\r\n   var postOptions = self._createPostOption(tokenUrl, urlEncodedTokenRequestForm);\r\n\r\n   var optionsForRetry = {times: maxTimesForRetry, interval: refresh_interval * 1000};\r\n\r\n   async.retry(optionsForRetry, function(retryCallback, response) {\r\n      self._getTokenWithPolling(postOptions, retryCallback);\r\n   }, function(err, response) {\r\n      if (response && response instanceof Error) {\r\n         callback(response);\r\n         return;\r\n      }\r\n      else if (response && response.hasOwnProperty(DeviceCodeResponseParameters.ERROR)) {\r\n         callback(response);\r\n         return;\r\n      }\r\n      callback(err, response);\r\n   });\r\n};\r\n\r\nOAuth2Client.prototype.getUserCodeInfo = function(oauthParameters, callback) {\r\n    // for now make it as a post request\r\n    var self = this;\r\n    var deviceCodeUrl = self._createDeviceCodeUrl();\r\n\r\n    var urlEncodedDeviceCodeRequestForm = querystring.stringify(oauthParameters);\r\n    \r\n    var postOptions = self._createPostOption(deviceCodeUrl, urlEncodedDeviceCodeRequestForm);\r\n\r\n    request.post(postOptions, util.createRequestHandler('Get Device Code ', this._log, callback,\r\n       function (response, body) {\r\n          self._handleGetDeviceCodeResponse(response, body, callback);\r\n       })\r\n    );\r\n};\r\n\r\n/**\r\n * Cancel the polling request made for acquiring token by device code. \r\n */\r\nOAuth2Client.prototype.cancelPollingRequest = function() {\r\n   this._cancelPollingRequest = true;\r\n};\r\n\r\nmodule.exports = OAuth2Client;\r\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst path = require(\"path\");\n\nconst _require = require(\"webpack-sources\"),\n      ConcatSource = _require.ConcatSource,\n      RawSource = _require.RawSource;\n\nconst ModuleFilenameHelpers = require(\"./ModuleFilenameHelpers\");\n\nconst SourceMapDevToolModuleOptionsPlugin = require(\"./SourceMapDevToolModuleOptionsPlugin\");\n\nconst createHash = require(\"./util/createHash\");\n\nconst validateOptions = require(\"schema-utils\");\n\nconst schema = require(\"../schemas/plugins/SourceMapDevToolPlugin.json\");\n/** @typedef {import(\"../declarations/plugins/SourceMapDevToolPlugin\").SourceMapDevToolPluginOptions} SourceMapDevToolPluginOptions */\n\n/** @typedef {import(\"./Chunk\")} Chunk */\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/** @typedef {import(\"source-map\").RawSourceMap} SourceMap */\n\n/** @typedef {import(\"./Module\")} Module */\n\n/** @typedef {import(\"./Compilation\")} Compilation */\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n/** @typedef {import(\"./Compilation\")} SourceMapDefinition */\n\n/**\n * @typedef {object} SourceMapTask\n * @property {Source} asset\n * @property {Array<string | Module>} [modules]\n * @property {string} source\n * @property {string} file\n * @property {SourceMap} sourceMap\n * @property {Chunk} chunk\n */\n\n/**\n * @param {string} name file path\n * @returns {string} file name\n */\n\n\nconst basename = name => {\n  if (!name.includes(\"/\")) return name;\n  return name.substr(name.lastIndexOf(\"/\") + 1);\n};\n/**\n * @type {WeakMap<Source, {file: string, assets: {[k: string]: ConcatSource | RawSource}}>}\n */\n\n\nconst assetsCache = new WeakMap();\n/**\n * Creating {@link SourceMapTask} for given file\n * @param {string} file current compiled file\n * @param {Source} asset the asset\n * @param {Chunk} chunk related chunk\n * @param {SourceMapDevToolPluginOptions} options source map options\n * @param {Compilation} compilation compilation instance\n * @returns {SourceMapTask | undefined} created task instance or `undefined`\n */\n\nconst getTaskForFile = (file, asset, chunk, options, compilation) => {\n  let source, sourceMap;\n  /**\n   * Check if asset can build source map\n   */\n\n  if (asset.sourceAndMap) {\n    const sourceAndMap = asset.sourceAndMap(options);\n    sourceMap = sourceAndMap.map;\n    source = sourceAndMap.source;\n  } else {\n    sourceMap = asset.map(options);\n    source = asset.source();\n  }\n\n  if (sourceMap) {\n    return {\n      chunk,\n      file,\n      asset,\n      source,\n      sourceMap,\n      modules: undefined\n    };\n  }\n};\n\nclass SourceMapDevToolPlugin {\n  /**\n   * @param {SourceMapDevToolPluginOptions} [options] options object\n   * @throws {Error} throws error, if got more than 1 arguments\n   */\n  constructor(options) {\n    if (arguments.length > 1) {\n      throw new Error(\"SourceMapDevToolPlugin only takes one argument (pass an options object)\");\n    }\n\n    if (!options) options = {};\n    validateOptions(schema, options, \"SourceMap DevTool Plugin\");\n    /** @type {string | false} */\n\n    this.sourceMapFilename = options.filename;\n    /** @type {string | false} */\n\n    this.sourceMappingURLComment = options.append === false ? false : options.append || \"\\n//# sourceMappingURL=[url]\";\n    /** @type {string | Function} */\n\n    this.moduleFilenameTemplate = options.moduleFilenameTemplate || \"webpack://[namespace]/[resourcePath]\";\n    /** @type {string | Function} */\n\n    this.fallbackModuleFilenameTemplate = options.fallbackModuleFilenameTemplate || \"webpack://[namespace]/[resourcePath]?[hash]\";\n    /** @type {string} */\n\n    this.namespace = options.namespace || \"\";\n    /** @type {SourceMapDevToolPluginOptions} */\n\n    this.options = options;\n  }\n  /**\n   * Apply compiler\n   * @param {Compiler} compiler compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    const sourceMapFilename = this.sourceMapFilename;\n    const sourceMappingURLComment = this.sourceMappingURLComment;\n    const moduleFilenameTemplate = this.moduleFilenameTemplate;\n    const namespace = this.namespace;\n    const fallbackModuleFilenameTemplate = this.fallbackModuleFilenameTemplate;\n    const requestShortener = compiler.requestShortener;\n    const options = this.options;\n    options.test = options.test || /\\.(m?js|css)($|\\?)/i;\n    const matchObject = ModuleFilenameHelpers.matchObject.bind(undefined, options);\n    compiler.hooks.compilation.tap(\"SourceMapDevToolPlugin\", compilation => {\n      new SourceMapDevToolModuleOptionsPlugin(options).apply(compilation);\n      compilation.hooks.afterOptimizeChunkAssets.tap(\n      /** @type {TODO} */\n      {\n        name: \"SourceMapDevToolPlugin\",\n        context: true\n      },\n      /**\n       * @param {object} context hook context\n       * @param {Array<Chunk>} chunks resulted chunks\n       * @throws {Error} throws error, if `sourceMapFilename === false && sourceMappingURLComment === false`\n       * @returns {void}\n       */\n      (context, chunks) => {\n        /** @type {Map<string | Module, string>} */\n        const moduleToSourceNameMapping = new Map();\n        /**\n         * @type {Function}\n         * @returns {void}\n         */\n\n        const reportProgress = context && context.reportProgress ? context.reportProgress : () => {};\n        const files = [];\n\n        for (const chunk of chunks) {\n          for (const file of chunk.files) {\n            if (matchObject(file)) {\n              files.push({\n                file,\n                chunk\n              });\n            }\n          }\n        }\n\n        reportProgress(0.0);\n        const tasks = [];\n        files.forEach(({\n          file,\n          chunk\n        }, idx) => {\n          const asset = compilation.getAsset(file).source;\n          const cache = assetsCache.get(asset);\n          /**\n           * If presented in cache, reassigns assets. Cache assets already have source maps.\n           */\n\n          if (cache && cache.file === file) {\n            for (const cachedFile in cache.assets) {\n              if (cachedFile === file) {\n                compilation.updateAsset(cachedFile, cache.assets[cachedFile]);\n              } else {\n                compilation.emitAsset(cachedFile, cache.assets[cachedFile], {\n                  development: true\n                });\n              }\n              /**\n               * Add file to chunk, if not presented there\n               */\n\n\n              if (cachedFile !== file) chunk.files.push(cachedFile);\n            }\n\n            return;\n          }\n\n          reportProgress(0.5 * idx / files.length, file, \"generate SourceMap\");\n          /** @type {SourceMapTask | undefined} */\n\n          const task = getTaskForFile(file, asset, chunk, options, compilation);\n\n          if (task) {\n            const modules = task.sourceMap.sources.map(source => {\n              const module = compilation.findModule(source);\n              return module || source;\n            });\n\n            for (let idx = 0; idx < modules.length; idx++) {\n              const module = modules[idx];\n\n              if (!moduleToSourceNameMapping.get(module)) {\n                moduleToSourceNameMapping.set(module, ModuleFilenameHelpers.createFilename(module, {\n                  moduleFilenameTemplate: moduleFilenameTemplate,\n                  namespace: namespace\n                }, requestShortener));\n              }\n            }\n\n            task.modules = modules;\n            tasks.push(task);\n          }\n        });\n        reportProgress(0.5, \"resolve sources\");\n        /** @type {Set<string>} */\n\n        const usedNamesSet = new Set(moduleToSourceNameMapping.values());\n        /** @type {Set<string>} */\n\n        const conflictDetectionSet = new Set();\n        /**\n         * all modules in defined order (longest identifier first)\n         * @type {Array<string | Module>}\n         */\n\n        const allModules = Array.from(moduleToSourceNameMapping.keys()).sort((a, b) => {\n          const ai = typeof a === \"string\" ? a : a.identifier();\n          const bi = typeof b === \"string\" ? b : b.identifier();\n          return ai.length - bi.length;\n        }); // find modules with conflicting source names\n\n        for (let idx = 0; idx < allModules.length; idx++) {\n          const module = allModules[idx];\n          let sourceName = moduleToSourceNameMapping.get(module);\n          let hasName = conflictDetectionSet.has(sourceName);\n\n          if (!hasName) {\n            conflictDetectionSet.add(sourceName);\n            continue;\n          } // try the fallback name first\n\n\n          sourceName = ModuleFilenameHelpers.createFilename(module, {\n            moduleFilenameTemplate: fallbackModuleFilenameTemplate,\n            namespace: namespace\n          }, requestShortener);\n          hasName = usedNamesSet.has(sourceName);\n\n          if (!hasName) {\n            moduleToSourceNameMapping.set(module, sourceName);\n            usedNamesSet.add(sourceName);\n            continue;\n          } // elsewise just append stars until we have a valid name\n\n\n          while (hasName) {\n            sourceName += \"*\";\n            hasName = usedNamesSet.has(sourceName);\n          }\n\n          moduleToSourceNameMapping.set(module, sourceName);\n          usedNamesSet.add(sourceName);\n        }\n\n        tasks.forEach((task, index) => {\n          reportProgress(0.5 + 0.5 * index / tasks.length, task.file, \"attach SourceMap\");\n          const assets = Object.create(null);\n          const chunk = task.chunk;\n          const file = task.file;\n          const asset = task.asset;\n          const sourceMap = task.sourceMap;\n          const source = task.source;\n          const modules = task.modules;\n          const moduleFilenames = modules.map(m => moduleToSourceNameMapping.get(m));\n          sourceMap.sources = moduleFilenames;\n\n          if (options.noSources) {\n            sourceMap.sourcesContent = undefined;\n          }\n\n          sourceMap.sourceRoot = options.sourceRoot || \"\";\n          sourceMap.file = file;\n          assetsCache.set(asset, {\n            file,\n            assets\n          });\n          /** @type {string | false} */\n\n          let currentSourceMappingURLComment = sourceMappingURLComment;\n\n          if (currentSourceMappingURLComment !== false && /\\.css($|\\?)/i.test(file)) {\n            currentSourceMappingURLComment = currentSourceMappingURLComment.replace(/^\\n\\/\\/(.*)$/, \"\\n/*$1*/\");\n          }\n\n          const sourceMapString = JSON.stringify(sourceMap);\n\n          if (sourceMapFilename) {\n            let filename = file;\n            let query = \"\";\n            const idx = filename.indexOf(\"?\");\n\n            if (idx >= 0) {\n              query = filename.substr(idx);\n              filename = filename.substr(0, idx);\n            }\n\n            const pathParams = {\n              chunk,\n              filename: options.fileContext ? path.relative(options.fileContext, filename) : filename,\n              query,\n              basename: basename(filename),\n              contentHash: createHash(\"md4\").update(sourceMapString).digest(\"hex\")\n            };\n            let sourceMapFile = compilation.getPath(sourceMapFilename, pathParams);\n            const sourceMapUrl = options.publicPath ? options.publicPath + sourceMapFile.replace(/\\\\/g, \"/\") : path.relative(path.dirname(file), sourceMapFile).replace(/\\\\/g, \"/\");\n            /**\n             * Add source map url to compilation asset, if {@link currentSourceMappingURLComment} presented\n             */\n\n            if (currentSourceMappingURLComment !== false) {\n              const asset = new ConcatSource(new RawSource(source), compilation.getPath(currentSourceMappingURLComment, Object.assign({\n                url: sourceMapUrl\n              }, pathParams)));\n              assets[file] = asset;\n              compilation.updateAsset(file, asset);\n            }\n            /**\n             * Add source map file to compilation assets and chunk files\n             */\n\n\n            const asset = new RawSource(sourceMapString);\n            assets[sourceMapFile] = asset;\n            compilation.emitAsset(sourceMapFile, asset, {\n              development: true\n            });\n            chunk.files.push(sourceMapFile);\n          } else {\n            if (currentSourceMappingURLComment === false) {\n              throw new Error(\"SourceMapDevToolPlugin: append can't be false when no filename is provided\");\n            }\n            /**\n             * Add source map as data url to asset\n             */\n\n\n            const asset = new ConcatSource(new RawSource(source), currentSourceMappingURLComment.replace(/\\[map\\]/g, () => sourceMapString).replace(/\\[url\\]/g, () => `data:application/json;charset=utf-8;base64,${Buffer.from(sourceMapString, \"utf-8\").toString(\"base64\")}`));\n            assets[file] = asset;\n            compilation.updateAsset(file, asset);\n          }\n        });\n        reportProgress(1.0);\n      });\n    });\n  }\n\n}\n\nmodule.exports = SourceMapDevToolPlugin;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/webpack/lib/SourceMapDevToolPlugin.js"],"names":["path","require","ConcatSource","RawSource","ModuleFilenameHelpers","SourceMapDevToolModuleOptionsPlugin","createHash","validateOptions","schema","basename","name","includes","substr","lastIndexOf","assetsCache","WeakMap","getTaskForFile","file","asset","chunk","options","compilation","source","sourceMap","sourceAndMap","map","modules","undefined","SourceMapDevToolPlugin","constructor","arguments","length","Error","sourceMapFilename","filename","sourceMappingURLComment","append","moduleFilenameTemplate","fallbackModuleFilenameTemplate","namespace","apply","compiler","requestShortener","test","matchObject","bind","hooks","tap","afterOptimizeChunkAssets","context","chunks","moduleToSourceNameMapping","Map","reportProgress","files","push","tasks","forEach","idx","getAsset","cache","get","cachedFile","assets","updateAsset","emitAsset","development","task","sources","module","findModule","set","createFilename","usedNamesSet","Set","values","conflictDetectionSet","allModules","Array","from","keys","sort","a","b","ai","identifier","bi","sourceName","hasName","has","add","index","Object","create","moduleFilenames","m","noSources","sourcesContent","sourceRoot","currentSourceMappingURLComment","replace","sourceMapString","JSON","stringify","query","indexOf","pathParams","fileContext","relative","contentHash","update","digest","sourceMapFile","getPath","sourceMapUrl","publicPath","dirname","assign","url","Buffer","toString","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst path = require(\"path\");\nconst { ConcatSource, RawSource } = require(\"webpack-sources\");\nconst ModuleFilenameHelpers = require(\"./ModuleFilenameHelpers\");\nconst SourceMapDevToolModuleOptionsPlugin = require(\"./SourceMapDevToolModuleOptionsPlugin\");\nconst createHash = require(\"./util/createHash\");\n\nconst validateOptions = require(\"schema-utils\");\nconst schema = require(\"../schemas/plugins/SourceMapDevToolPlugin.json\");\n\n/** @typedef {import(\"../declarations/plugins/SourceMapDevToolPlugin\").SourceMapDevToolPluginOptions} SourceMapDevToolPluginOptions */\n/** @typedef {import(\"./Chunk\")} Chunk */\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"source-map\").RawSourceMap} SourceMap */\n/** @typedef {import(\"./Module\")} Module */\n/** @typedef {import(\"./Compilation\")} Compilation */\n/** @typedef {import(\"./Compiler\")} Compiler */\n/** @typedef {import(\"./Compilation\")} SourceMapDefinition */\n\n/**\n * @typedef {object} SourceMapTask\n * @property {Source} asset\n * @property {Array<string | Module>} [modules]\n * @property {string} source\n * @property {string} file\n * @property {SourceMap} sourceMap\n * @property {Chunk} chunk\n */\n\n/**\n * @param {string} name file path\n * @returns {string} file name\n */\nconst basename = name => {\n\tif (!name.includes(\"/\")) return name;\n\treturn name.substr(name.lastIndexOf(\"/\") + 1);\n};\n\n/**\n * @type {WeakMap<Source, {file: string, assets: {[k: string]: ConcatSource | RawSource}}>}\n */\nconst assetsCache = new WeakMap();\n\n/**\n * Creating {@link SourceMapTask} for given file\n * @param {string} file current compiled file\n * @param {Source} asset the asset\n * @param {Chunk} chunk related chunk\n * @param {SourceMapDevToolPluginOptions} options source map options\n * @param {Compilation} compilation compilation instance\n * @returns {SourceMapTask | undefined} created task instance or `undefined`\n */\nconst getTaskForFile = (file, asset, chunk, options, compilation) => {\n\tlet source, sourceMap;\n\t/**\n\t * Check if asset can build source map\n\t */\n\tif (asset.sourceAndMap) {\n\t\tconst sourceAndMap = asset.sourceAndMap(options);\n\t\tsourceMap = sourceAndMap.map;\n\t\tsource = sourceAndMap.source;\n\t} else {\n\t\tsourceMap = asset.map(options);\n\t\tsource = asset.source();\n\t}\n\tif (sourceMap) {\n\t\treturn {\n\t\t\tchunk,\n\t\t\tfile,\n\t\t\tasset,\n\t\t\tsource,\n\t\t\tsourceMap,\n\t\t\tmodules: undefined\n\t\t};\n\t}\n};\n\nclass SourceMapDevToolPlugin {\n\t/**\n\t * @param {SourceMapDevToolPluginOptions} [options] options object\n\t * @throws {Error} throws error, if got more than 1 arguments\n\t */\n\tconstructor(options) {\n\t\tif (arguments.length > 1) {\n\t\t\tthrow new Error(\n\t\t\t\t\"SourceMapDevToolPlugin only takes one argument (pass an options object)\"\n\t\t\t);\n\t\t}\n\n\t\tif (!options) options = {};\n\n\t\tvalidateOptions(schema, options, \"SourceMap DevTool Plugin\");\n\n\t\t/** @type {string | false} */\n\t\tthis.sourceMapFilename = options.filename;\n\t\t/** @type {string | false} */\n\t\tthis.sourceMappingURLComment =\n\t\t\toptions.append === false\n\t\t\t\t? false\n\t\t\t\t: options.append || \"\\n//# sourceMappingURL=[url]\";\n\t\t/** @type {string | Function} */\n\t\tthis.moduleFilenameTemplate =\n\t\t\toptions.moduleFilenameTemplate || \"webpack://[namespace]/[resourcePath]\";\n\t\t/** @type {string | Function} */\n\t\tthis.fallbackModuleFilenameTemplate =\n\t\t\toptions.fallbackModuleFilenameTemplate ||\n\t\t\t\"webpack://[namespace]/[resourcePath]?[hash]\";\n\t\t/** @type {string} */\n\t\tthis.namespace = options.namespace || \"\";\n\t\t/** @type {SourceMapDevToolPluginOptions} */\n\t\tthis.options = options;\n\t}\n\n\t/**\n\t * Apply compiler\n\t * @param {Compiler} compiler compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst sourceMapFilename = this.sourceMapFilename;\n\t\tconst sourceMappingURLComment = this.sourceMappingURLComment;\n\t\tconst moduleFilenameTemplate = this.moduleFilenameTemplate;\n\t\tconst namespace = this.namespace;\n\t\tconst fallbackModuleFilenameTemplate = this.fallbackModuleFilenameTemplate;\n\t\tconst requestShortener = compiler.requestShortener;\n\t\tconst options = this.options;\n\t\toptions.test = options.test || /\\.(m?js|css)($|\\?)/i;\n\n\t\tconst matchObject = ModuleFilenameHelpers.matchObject.bind(\n\t\t\tundefined,\n\t\t\toptions\n\t\t);\n\n\t\tcompiler.hooks.compilation.tap(\"SourceMapDevToolPlugin\", compilation => {\n\t\t\tnew SourceMapDevToolModuleOptionsPlugin(options).apply(compilation);\n\n\t\t\tcompilation.hooks.afterOptimizeChunkAssets.tap(\n\t\t\t\t/** @type {TODO} */\n\t\t\t\t({ name: \"SourceMapDevToolPlugin\", context: true }),\n\t\t\t\t/**\n\t\t\t\t * @param {object} context hook context\n\t\t\t\t * @param {Array<Chunk>} chunks resulted chunks\n\t\t\t\t * @throws {Error} throws error, if `sourceMapFilename === false && sourceMappingURLComment === false`\n\t\t\t\t * @returns {void}\n\t\t\t\t */\n\t\t\t\t(context, chunks) => {\n\t\t\t\t\t/** @type {Map<string | Module, string>} */\n\t\t\t\t\tconst moduleToSourceNameMapping = new Map();\n\t\t\t\t\t/**\n\t\t\t\t\t * @type {Function}\n\t\t\t\t\t * @returns {void}\n\t\t\t\t\t */\n\t\t\t\t\tconst reportProgress =\n\t\t\t\t\t\tcontext && context.reportProgress\n\t\t\t\t\t\t\t? context.reportProgress\n\t\t\t\t\t\t\t: () => {};\n\n\t\t\t\t\tconst files = [];\n\t\t\t\t\tfor (const chunk of chunks) {\n\t\t\t\t\t\tfor (const file of chunk.files) {\n\t\t\t\t\t\t\tif (matchObject(file)) {\n\t\t\t\t\t\t\t\tfiles.push({\n\t\t\t\t\t\t\t\t\tfile,\n\t\t\t\t\t\t\t\t\tchunk\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treportProgress(0.0);\n\t\t\t\t\tconst tasks = [];\n\t\t\t\t\tfiles.forEach(({ file, chunk }, idx) => {\n\t\t\t\t\t\tconst asset = compilation.getAsset(file).source;\n\t\t\t\t\t\tconst cache = assetsCache.get(asset);\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * If presented in cache, reassigns assets. Cache assets already have source maps.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tif (cache && cache.file === file) {\n\t\t\t\t\t\t\tfor (const cachedFile in cache.assets) {\n\t\t\t\t\t\t\t\tif (cachedFile === file) {\n\t\t\t\t\t\t\t\t\tcompilation.updateAsset(cachedFile, cache.assets[cachedFile]);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcompilation.emitAsset(cachedFile, cache.assets[cachedFile], {\n\t\t\t\t\t\t\t\t\t\tdevelopment: true\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t\t * Add file to chunk, if not presented there\n\t\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\t\tif (cachedFile !== file) chunk.files.push(cachedFile);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treportProgress(\n\t\t\t\t\t\t\t(0.5 * idx) / files.length,\n\t\t\t\t\t\t\tfile,\n\t\t\t\t\t\t\t\"generate SourceMap\"\n\t\t\t\t\t\t);\n\t\t\t\t\t\t/** @type {SourceMapTask | undefined} */\n\t\t\t\t\t\tconst task = getTaskForFile(\n\t\t\t\t\t\t\tfile,\n\t\t\t\t\t\t\tasset,\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\tcompilation\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (task) {\n\t\t\t\t\t\t\tconst modules = task.sourceMap.sources.map(source => {\n\t\t\t\t\t\t\t\tconst module = compilation.findModule(source);\n\t\t\t\t\t\t\t\treturn module || source;\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tfor (let idx = 0; idx < modules.length; idx++) {\n\t\t\t\t\t\t\t\tconst module = modules[idx];\n\t\t\t\t\t\t\t\tif (!moduleToSourceNameMapping.get(module)) {\n\t\t\t\t\t\t\t\t\tmoduleToSourceNameMapping.set(\n\t\t\t\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t\t\t\tModuleFilenameHelpers.createFilename(\n\t\t\t\t\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tmoduleFilenameTemplate: moduleFilenameTemplate,\n\t\t\t\t\t\t\t\t\t\t\t\tnamespace: namespace\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\trequestShortener\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\ttask.modules = modules;\n\n\t\t\t\t\t\t\ttasks.push(task);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\treportProgress(0.5, \"resolve sources\");\n\t\t\t\t\t/** @type {Set<string>} */\n\t\t\t\t\tconst usedNamesSet = new Set(moduleToSourceNameMapping.values());\n\t\t\t\t\t/** @type {Set<string>} */\n\t\t\t\t\tconst conflictDetectionSet = new Set();\n\n\t\t\t\t\t/**\n\t\t\t\t\t * all modules in defined order (longest identifier first)\n\t\t\t\t\t * @type {Array<string | Module>}\n\t\t\t\t\t */\n\t\t\t\t\tconst allModules = Array.from(moduleToSourceNameMapping.keys()).sort(\n\t\t\t\t\t\t(a, b) => {\n\t\t\t\t\t\t\tconst ai = typeof a === \"string\" ? a : a.identifier();\n\t\t\t\t\t\t\tconst bi = typeof b === \"string\" ? b : b.identifier();\n\t\t\t\t\t\t\treturn ai.length - bi.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\n\t\t\t\t\t// find modules with conflicting source names\n\t\t\t\t\tfor (let idx = 0; idx < allModules.length; idx++) {\n\t\t\t\t\t\tconst module = allModules[idx];\n\t\t\t\t\t\tlet sourceName = moduleToSourceNameMapping.get(module);\n\t\t\t\t\t\tlet hasName = conflictDetectionSet.has(sourceName);\n\t\t\t\t\t\tif (!hasName) {\n\t\t\t\t\t\t\tconflictDetectionSet.add(sourceName);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// try the fallback name first\n\t\t\t\t\t\tsourceName = ModuleFilenameHelpers.createFilename(\n\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmoduleFilenameTemplate: fallbackModuleFilenameTemplate,\n\t\t\t\t\t\t\t\tnamespace: namespace\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\trequestShortener\n\t\t\t\t\t\t);\n\t\t\t\t\t\thasName = usedNamesSet.has(sourceName);\n\t\t\t\t\t\tif (!hasName) {\n\t\t\t\t\t\t\tmoduleToSourceNameMapping.set(module, sourceName);\n\t\t\t\t\t\t\tusedNamesSet.add(sourceName);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// elsewise just append stars until we have a valid name\n\t\t\t\t\t\twhile (hasName) {\n\t\t\t\t\t\t\tsourceName += \"*\";\n\t\t\t\t\t\t\thasName = usedNamesSet.has(sourceName);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmoduleToSourceNameMapping.set(module, sourceName);\n\t\t\t\t\t\tusedNamesSet.add(sourceName);\n\t\t\t\t\t}\n\t\t\t\t\ttasks.forEach((task, index) => {\n\t\t\t\t\t\treportProgress(\n\t\t\t\t\t\t\t0.5 + (0.5 * index) / tasks.length,\n\t\t\t\t\t\t\ttask.file,\n\t\t\t\t\t\t\t\"attach SourceMap\"\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst assets = Object.create(null);\n\t\t\t\t\t\tconst chunk = task.chunk;\n\t\t\t\t\t\tconst file = task.file;\n\t\t\t\t\t\tconst asset = task.asset;\n\t\t\t\t\t\tconst sourceMap = task.sourceMap;\n\t\t\t\t\t\tconst source = task.source;\n\t\t\t\t\t\tconst modules = task.modules;\n\t\t\t\t\t\tconst moduleFilenames = modules.map(m =>\n\t\t\t\t\t\t\tmoduleToSourceNameMapping.get(m)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tsourceMap.sources = moduleFilenames;\n\t\t\t\t\t\tif (options.noSources) {\n\t\t\t\t\t\t\tsourceMap.sourcesContent = undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsourceMap.sourceRoot = options.sourceRoot || \"\";\n\t\t\t\t\t\tsourceMap.file = file;\n\t\t\t\t\t\tassetsCache.set(asset, { file, assets });\n\t\t\t\t\t\t/** @type {string | false} */\n\t\t\t\t\t\tlet currentSourceMappingURLComment = sourceMappingURLComment;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tcurrentSourceMappingURLComment !== false &&\n\t\t\t\t\t\t\t/\\.css($|\\?)/i.test(file)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcurrentSourceMappingURLComment = currentSourceMappingURLComment.replace(\n\t\t\t\t\t\t\t\t/^\\n\\/\\/(.*)$/,\n\t\t\t\t\t\t\t\t\"\\n/*$1*/\"\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst sourceMapString = JSON.stringify(sourceMap);\n\t\t\t\t\t\tif (sourceMapFilename) {\n\t\t\t\t\t\t\tlet filename = file;\n\t\t\t\t\t\t\tlet query = \"\";\n\t\t\t\t\t\t\tconst idx = filename.indexOf(\"?\");\n\t\t\t\t\t\t\tif (idx >= 0) {\n\t\t\t\t\t\t\t\tquery = filename.substr(idx);\n\t\t\t\t\t\t\t\tfilename = filename.substr(0, idx);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst pathParams = {\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tfilename: options.fileContext\n\t\t\t\t\t\t\t\t\t? path.relative(options.fileContext, filename)\n\t\t\t\t\t\t\t\t\t: filename,\n\t\t\t\t\t\t\t\tquery,\n\t\t\t\t\t\t\t\tbasename: basename(filename),\n\t\t\t\t\t\t\t\tcontentHash: createHash(\"md4\")\n\t\t\t\t\t\t\t\t\t.update(sourceMapString)\n\t\t\t\t\t\t\t\t\t.digest(\"hex\")\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tlet sourceMapFile = compilation.getPath(\n\t\t\t\t\t\t\t\tsourceMapFilename,\n\t\t\t\t\t\t\t\tpathParams\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst sourceMapUrl = options.publicPath\n\t\t\t\t\t\t\t\t? options.publicPath + sourceMapFile.replace(/\\\\/g, \"/\")\n\t\t\t\t\t\t\t\t: path\n\t\t\t\t\t\t\t\t\t\t.relative(path.dirname(file), sourceMapFile)\n\t\t\t\t\t\t\t\t\t\t.replace(/\\\\/g, \"/\");\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * Add source map url to compilation asset, if {@link currentSourceMappingURLComment} presented\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tif (currentSourceMappingURLComment !== false) {\n\t\t\t\t\t\t\t\tconst asset = new ConcatSource(\n\t\t\t\t\t\t\t\t\tnew RawSource(source),\n\t\t\t\t\t\t\t\t\tcompilation.getPath(\n\t\t\t\t\t\t\t\t\t\tcurrentSourceMappingURLComment,\n\t\t\t\t\t\t\t\t\t\tObject.assign({ url: sourceMapUrl }, pathParams)\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tassets[file] = asset;\n\t\t\t\t\t\t\t\tcompilation.updateAsset(file, asset);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * Add source map file to compilation assets and chunk files\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tconst asset = new RawSource(sourceMapString);\n\t\t\t\t\t\t\tassets[sourceMapFile] = asset;\n\t\t\t\t\t\t\tcompilation.emitAsset(sourceMapFile, asset, {\n\t\t\t\t\t\t\t\tdevelopment: true\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tchunk.files.push(sourceMapFile);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (currentSourceMappingURLComment === false) {\n\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\t\"SourceMapDevToolPlugin: append can't be false when no filename is provided\"\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * Add source map as data url to asset\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tconst asset = new ConcatSource(\n\t\t\t\t\t\t\t\tnew RawSource(source),\n\t\t\t\t\t\t\t\tcurrentSourceMappingURLComment\n\t\t\t\t\t\t\t\t\t.replace(/\\[map\\]/g, () => sourceMapString)\n\t\t\t\t\t\t\t\t\t.replace(\n\t\t\t\t\t\t\t\t\t\t/\\[url\\]/g,\n\t\t\t\t\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\t\t\t\t\t`data:application/json;charset=utf-8;base64,${Buffer.from(\n\t\t\t\t\t\t\t\t\t\t\t\tsourceMapString,\n\t\t\t\t\t\t\t\t\t\t\t\t\"utf-8\"\n\t\t\t\t\t\t\t\t\t\t\t).toString(\"base64\")}`\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tassets[file] = asset;\n\t\t\t\t\t\t\tcompilation.updateAsset(file, asset);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\treportProgress(1.0);\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\n\nmodule.exports = SourceMapDevToolPlugin;\n"]},"metadata":{},"sourceType":"script"}
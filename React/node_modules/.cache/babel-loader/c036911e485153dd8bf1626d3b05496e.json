{"ast":null,"code":"\"use strict\";\n\nconst DoublyLinkedList = require(\"./DoublyLinkedList\");\n\nconst DequeIterator = require(\"./DequeIterator\");\n/**\n * DoublyLinkedList backed double ended queue\n * implements just enough to keep the Pool\n */\n\n\nclass Deque {\n  constructor() {\n    this._list = new DoublyLinkedList();\n  }\n  /**\n   * removes and returns the first element from the queue\n   * @return {any} [description]\n   */\n\n\n  shift() {\n    if (this.length === 0) {\n      return undefined;\n    }\n\n    const node = this._list.head;\n\n    this._list.remove(node);\n\n    return node.data;\n  }\n  /**\n   * adds one elemts to the beginning of the queue\n   * @param  {any} element [description]\n   * @return {any}         [description]\n   */\n\n\n  unshift(element) {\n    const node = DoublyLinkedList.createNode(element);\n\n    this._list.insertBeginning(node);\n  }\n  /**\n   * adds one to the end of the queue\n   * @param  {any} element [description]\n   * @return {any}         [description]\n   */\n\n\n  push(element) {\n    const node = DoublyLinkedList.createNode(element);\n\n    this._list.insertEnd(node);\n  }\n  /**\n   * removes and returns the last element from the queue\n   */\n\n\n  pop() {\n    if (this.length === 0) {\n      return undefined;\n    }\n\n    const node = this._list.tail;\n\n    this._list.remove(node);\n\n    return node.data;\n  }\n\n  [Symbol.iterator]() {\n    return new DequeIterator(this._list);\n  }\n\n  iterator() {\n    return new DequeIterator(this._list);\n  }\n\n  reverseIterator() {\n    return new DequeIterator(this._list, true);\n  }\n  /**\n   * get a reference to the item at the head of the queue\n   * @return {any} [description]\n   */\n\n\n  get head() {\n    if (this.length === 0) {\n      return undefined;\n    }\n\n    const node = this._list.head;\n    return node.data;\n  }\n  /**\n   * get a reference to the item at the tail of the queue\n   * @return {any} [description]\n   */\n\n\n  get tail() {\n    if (this.length === 0) {\n      return undefined;\n    }\n\n    const node = this._list.tail;\n    return node.data;\n  }\n\n  get length() {\n    return this._list.length;\n  }\n\n}\n\nmodule.exports = Deque;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/generic-pool/lib/Deque.js"],"names":["DoublyLinkedList","require","DequeIterator","Deque","constructor","_list","shift","length","undefined","node","head","remove","data","unshift","element","createNode","insertBeginning","push","insertEnd","pop","tail","Symbol","iterator","reverseIterator","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,oBAAD,CAAhC;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,iBAAD,CAA7B;AACA;;;;;;AAIA,MAAME,KAAN,CAAY;AACVC,EAAAA,WAAW,GAAG;AACZ,SAAKC,KAAL,GAAa,IAAIL,gBAAJ,EAAb;AACD;AAED;;;;;;AAIAM,EAAAA,KAAK,GAAG;AACN,QAAI,KAAKC,MAAL,KAAgB,CAApB,EAAuB;AACrB,aAAOC,SAAP;AACD;;AAED,UAAMC,IAAI,GAAG,KAAKJ,KAAL,CAAWK,IAAxB;;AACA,SAAKL,KAAL,CAAWM,MAAX,CAAkBF,IAAlB;;AAEA,WAAOA,IAAI,CAACG,IAAZ;AACD;AAED;;;;;;;AAKAC,EAAAA,OAAO,CAACC,OAAD,EAAU;AACf,UAAML,IAAI,GAAGT,gBAAgB,CAACe,UAAjB,CAA4BD,OAA5B,CAAb;;AAEA,SAAKT,KAAL,CAAWW,eAAX,CAA2BP,IAA3B;AACD;AAED;;;;;;;AAKAQ,EAAAA,IAAI,CAACH,OAAD,EAAU;AACZ,UAAML,IAAI,GAAGT,gBAAgB,CAACe,UAAjB,CAA4BD,OAA5B,CAAb;;AAEA,SAAKT,KAAL,CAAWa,SAAX,CAAqBT,IAArB;AACD;AAED;;;;;AAGAU,EAAAA,GAAG,GAAG;AACJ,QAAI,KAAKZ,MAAL,KAAgB,CAApB,EAAuB;AACrB,aAAOC,SAAP;AACD;;AAED,UAAMC,IAAI,GAAG,KAAKJ,KAAL,CAAWe,IAAxB;;AACA,SAAKf,KAAL,CAAWM,MAAX,CAAkBF,IAAlB;;AAEA,WAAOA,IAAI,CAACG,IAAZ;AACD;;AAED,GAACS,MAAM,CAACC,QAAR,IAAoB;AAClB,WAAO,IAAIpB,aAAJ,CAAkB,KAAKG,KAAvB,CAAP;AACD;;AAEDiB,EAAAA,QAAQ,GAAG;AACT,WAAO,IAAIpB,aAAJ,CAAkB,KAAKG,KAAvB,CAAP;AACD;;AAEDkB,EAAAA,eAAe,GAAG;AAChB,WAAO,IAAIrB,aAAJ,CAAkB,KAAKG,KAAvB,EAA8B,IAA9B,CAAP;AACD;AAED;;;;;;AAIA,MAAIK,IAAJ,GAAW;AACT,QAAI,KAAKH,MAAL,KAAgB,CAApB,EAAuB;AACrB,aAAOC,SAAP;AACD;;AACD,UAAMC,IAAI,GAAG,KAAKJ,KAAL,CAAWK,IAAxB;AACA,WAAOD,IAAI,CAACG,IAAZ;AACD;AAED;;;;;;AAIA,MAAIQ,IAAJ,GAAW;AACT,QAAI,KAAKb,MAAL,KAAgB,CAApB,EAAuB;AACrB,aAAOC,SAAP;AACD;;AACD,UAAMC,IAAI,GAAG,KAAKJ,KAAL,CAAWe,IAAxB;AACA,WAAOX,IAAI,CAACG,IAAZ;AACD;;AAED,MAAIL,MAAJ,GAAa;AACX,WAAO,KAAKF,KAAL,CAAWE,MAAlB;AACD;;AA9FS;;AAiGZiB,MAAM,CAACC,OAAP,GAAiBtB,KAAjB","sourcesContent":["\"use strict\";\n\nconst DoublyLinkedList = require(\"./DoublyLinkedList\");\nconst DequeIterator = require(\"./DequeIterator\");\n/**\n * DoublyLinkedList backed double ended queue\n * implements just enough to keep the Pool\n */\nclass Deque {\n  constructor() {\n    this._list = new DoublyLinkedList();\n  }\n\n  /**\n   * removes and returns the first element from the queue\n   * @return {any} [description]\n   */\n  shift() {\n    if (this.length === 0) {\n      return undefined;\n    }\n\n    const node = this._list.head;\n    this._list.remove(node);\n\n    return node.data;\n  }\n\n  /**\n   * adds one elemts to the beginning of the queue\n   * @param  {any} element [description]\n   * @return {any}         [description]\n   */\n  unshift(element) {\n    const node = DoublyLinkedList.createNode(element);\n\n    this._list.insertBeginning(node);\n  }\n\n  /**\n   * adds one to the end of the queue\n   * @param  {any} element [description]\n   * @return {any}         [description]\n   */\n  push(element) {\n    const node = DoublyLinkedList.createNode(element);\n\n    this._list.insertEnd(node);\n  }\n\n  /**\n   * removes and returns the last element from the queue\n   */\n  pop() {\n    if (this.length === 0) {\n      return undefined;\n    }\n\n    const node = this._list.tail;\n    this._list.remove(node);\n\n    return node.data;\n  }\n\n  [Symbol.iterator]() {\n    return new DequeIterator(this._list);\n  }\n\n  iterator() {\n    return new DequeIterator(this._list);\n  }\n\n  reverseIterator() {\n    return new DequeIterator(this._list, true);\n  }\n\n  /**\n   * get a reference to the item at the head of the queue\n   * @return {any} [description]\n   */\n  get head() {\n    if (this.length === 0) {\n      return undefined;\n    }\n    const node = this._list.head;\n    return node.data;\n  }\n\n  /**\n   * get a reference to the item at the tail of the queue\n   * @return {any} [description]\n   */\n  get tail() {\n    if (this.length === 0) {\n      return undefined;\n    }\n    const node = this._list.tail;\n    return node.data;\n  }\n\n  get length() {\n    return this._list.length;\n  }\n}\n\nmodule.exports = Deque;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nconst wkx = require('wkx');\n\nconst _ = require('lodash');\n\nconst moment = require('moment-timezone');\n\nmodule.exports = BaseTypes => {\n  BaseTypes.ABSTRACT.prototype.dialectTypes = 'https://dev.mysql.com/doc/refman/5.7/en/data-types.html';\n  /**\n   * types: [buffer_type, ...]\n   * @see buffer_type here https://dev.mysql.com/doc/refman/5.7/en/c-api-prepared-statement-type-codes.html\n   * @see hex here https://github.com/sidorares/node-mysql2/blob/master/lib/constants/types.js\n   */\n\n  BaseTypes.DATE.types.mysql = ['DATETIME'];\n  BaseTypes.STRING.types.mysql = ['VAR_STRING'];\n  BaseTypes.CHAR.types.mysql = ['STRING'];\n  BaseTypes.TEXT.types.mysql = ['BLOB'];\n  BaseTypes.TINYINT.types.mysql = ['TINY'];\n  BaseTypes.SMALLINT.types.mysql = ['SHORT'];\n  BaseTypes.MEDIUMINT.types.mysql = ['INT24'];\n  BaseTypes.INTEGER.types.mysql = ['LONG'];\n  BaseTypes.BIGINT.types.mysql = ['LONGLONG'];\n  BaseTypes.FLOAT.types.mysql = ['FLOAT'];\n  BaseTypes.TIME.types.mysql = ['TIME'];\n  BaseTypes.DATEONLY.types.mysql = ['DATE'];\n  BaseTypes.BOOLEAN.types.mysql = ['TINY'];\n  BaseTypes.BLOB.types.mysql = ['TINYBLOB', 'BLOB', 'LONGBLOB'];\n  BaseTypes.DECIMAL.types.mysql = ['NEWDECIMAL'];\n  BaseTypes.UUID.types.mysql = false;\n  BaseTypes.ENUM.types.mysql = false;\n  BaseTypes.REAL.types.mysql = ['DOUBLE'];\n  BaseTypes.DOUBLE.types.mysql = ['DOUBLE'];\n  BaseTypes.GEOMETRY.types.mysql = ['GEOMETRY'];\n  BaseTypes.JSON.types.mysql = ['JSON'];\n\n  class DECIMAL extends BaseTypes.DECIMAL {\n    toSql() {\n      let definition = super.toSql();\n\n      if (this._unsigned) {\n        definition += ' UNSIGNED';\n      }\n\n      if (this._zerofill) {\n        definition += ' ZEROFILL';\n      }\n\n      return definition;\n    }\n\n  }\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return `DATETIME${this._length ? `(${this._length})` : ''}`;\n    }\n\n    _stringify(date, options) {\n      date = this._applyTimezone(date, options); // Fractional DATETIMEs only supported on MySQL 5.6.4+\n\n      if (this._length) {\n        return date.format('YYYY-MM-DD HH:mm:ss.SSS');\n      }\n\n      return date.format('YYYY-MM-DD HH:mm:ss');\n    }\n\n    static parse(value, options) {\n      value = value.string();\n\n      if (value === null) {\n        return value;\n      }\n\n      if (moment.tz.zone(options.timezone)) {\n        value = moment.tz(value, options.timezone).toDate();\n      } else {\n        value = new Date(`${value} ${options.timezone}`);\n      }\n\n      return value;\n    }\n\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return value.string();\n    }\n\n  }\n\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return 'CHAR(36) BINARY';\n    }\n\n  }\n\n  const SUPPORTED_GEOMETRY_TYPES = ['POINT', 'LINESTRING', 'POLYGON'];\n\n  class GEOMETRY extends BaseTypes.GEOMETRY {\n    constructor(type, srid) {\n      super(type, srid);\n\n      if (_.isEmpty(this.type)) {\n        this.sqlType = this.key;\n        return;\n      }\n\n      if (SUPPORTED_GEOMETRY_TYPES.includes(this.type)) {\n        this.sqlType = this.type;\n        return;\n      }\n\n      throw new Error(`Supported geometry types are: ${SUPPORTED_GEOMETRY_TYPES.join(', ')}`);\n    }\n\n    static parse(value) {\n      value = value.buffer(); // Empty buffer, MySQL doesn't support POINT EMPTY\n      // check, https://dev.mysql.com/worklog/task/?id=2381\n\n      if (!value || value.length === 0) {\n        return null;\n      } // For some reason, discard the first 4 bytes\n\n\n      value = value.slice(4);\n      return wkx.Geometry.parse(value).toGeoJSON();\n    }\n\n    toSql() {\n      return this.sqlType;\n    }\n\n  }\n\n  class ENUM extends BaseTypes.ENUM {\n    toSql(options) {\n      return `ENUM(${this.values.map(value => options.escape(value)).join(', ')})`;\n    }\n\n  }\n\n  class JSONTYPE extends BaseTypes.JSON {\n    _stringify(value, options) {\n      return options.operation === 'where' && typeof value === 'string' ? value : JSON.stringify(value);\n    }\n\n  }\n\n  return {\n    ENUM,\n    DATE,\n    DATEONLY,\n    UUID,\n    GEOMETRY,\n    DECIMAL,\n    JSON: JSONTYPE\n  };\n};","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/sequelize/lib/dialects/mysql/data-types.js"],"names":["wkx","require","_","moment","module","exports","BaseTypes","ABSTRACT","prototype","dialectTypes","DATE","types","mysql","STRING","CHAR","TEXT","TINYINT","SMALLINT","MEDIUMINT","INTEGER","BIGINT","FLOAT","TIME","DATEONLY","BOOLEAN","BLOB","DECIMAL","UUID","ENUM","REAL","DOUBLE","GEOMETRY","JSON","toSql","definition","_unsigned","_zerofill","_length","_stringify","date","options","_applyTimezone","format","parse","value","string","tz","zone","timezone","toDate","Date","SUPPORTED_GEOMETRY_TYPES","constructor","type","srid","isEmpty","sqlType","key","includes","Error","join","buffer","length","slice","Geometry","toGeoJSON","values","map","escape","JSONTYPE","operation","stringify"],"mappings":"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","sourcesContent":["'use strict';\n\nconst wkx = require('wkx');\nconst _ = require('lodash');\nconst moment = require('moment-timezone');\nmodule.exports = BaseTypes => {\n  BaseTypes.ABSTRACT.prototype.dialectTypes = 'https://dev.mysql.com/doc/refman/5.7/en/data-types.html';\n\n  /**\n   * types: [buffer_type, ...]\n   * @see buffer_type here https://dev.mysql.com/doc/refman/5.7/en/c-api-prepared-statement-type-codes.html\n   * @see hex here https://github.com/sidorares/node-mysql2/blob/master/lib/constants/types.js\n   */\n\n  BaseTypes.DATE.types.mysql = ['DATETIME'];\n  BaseTypes.STRING.types.mysql = ['VAR_STRING'];\n  BaseTypes.CHAR.types.mysql = ['STRING'];\n  BaseTypes.TEXT.types.mysql = ['BLOB'];\n  BaseTypes.TINYINT.types.mysql = ['TINY'];\n  BaseTypes.SMALLINT.types.mysql = ['SHORT'];\n  BaseTypes.MEDIUMINT.types.mysql = ['INT24'];\n  BaseTypes.INTEGER.types.mysql = ['LONG'];\n  BaseTypes.BIGINT.types.mysql = ['LONGLONG'];\n  BaseTypes.FLOAT.types.mysql = ['FLOAT'];\n  BaseTypes.TIME.types.mysql = ['TIME'];\n  BaseTypes.DATEONLY.types.mysql = ['DATE'];\n  BaseTypes.BOOLEAN.types.mysql = ['TINY'];\n  BaseTypes.BLOB.types.mysql = ['TINYBLOB', 'BLOB', 'LONGBLOB'];\n  BaseTypes.DECIMAL.types.mysql = ['NEWDECIMAL'];\n  BaseTypes.UUID.types.mysql = false;\n  BaseTypes.ENUM.types.mysql = false;\n  BaseTypes.REAL.types.mysql = ['DOUBLE'];\n  BaseTypes.DOUBLE.types.mysql = ['DOUBLE'];\n  BaseTypes.GEOMETRY.types.mysql = ['GEOMETRY'];\n  BaseTypes.JSON.types.mysql = ['JSON'];\n\n  class DECIMAL extends BaseTypes.DECIMAL {\n    toSql() {\n      let definition = super.toSql();\n      if (this._unsigned) {\n        definition += ' UNSIGNED';\n      }\n      if (this._zerofill) {\n        definition += ' ZEROFILL';\n      }\n      return definition;\n    }\n  }\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return `DATETIME${this._length ? `(${this._length})` : ''}`;\n    }\n    _stringify(date, options) {\n      date = this._applyTimezone(date, options);\n      // Fractional DATETIMEs only supported on MySQL 5.6.4+\n      if (this._length) {\n        return date.format('YYYY-MM-DD HH:mm:ss.SSS');\n      }\n      return date.format('YYYY-MM-DD HH:mm:ss');\n    }\n    static parse(value, options) {\n      value = value.string();\n      if (value === null) {\n        return value;\n      }\n      if (moment.tz.zone(options.timezone)) {\n        value = moment.tz(value, options.timezone).toDate();\n      }\n      else {\n        value = new Date(`${value} ${options.timezone}`);\n      }\n      return value;\n    }\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return value.string();\n    }\n  }\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return 'CHAR(36) BINARY';\n    }\n  }\n\n  const SUPPORTED_GEOMETRY_TYPES = ['POINT', 'LINESTRING', 'POLYGON'];\n\n  class GEOMETRY extends BaseTypes.GEOMETRY {\n    constructor(type, srid) {\n      super(type, srid);\n      if (_.isEmpty(this.type)) {\n        this.sqlType = this.key;\n        return;\n      }\n      if (SUPPORTED_GEOMETRY_TYPES.includes(this.type)) {\n        this.sqlType = this.type;\n        return;\n      }\n      throw new Error(`Supported geometry types are: ${SUPPORTED_GEOMETRY_TYPES.join(', ')}`);\n    }\n    static parse(value) {\n      value = value.buffer();\n      // Empty buffer, MySQL doesn't support POINT EMPTY\n      // check, https://dev.mysql.com/worklog/task/?id=2381\n      if (!value || value.length === 0) {\n        return null;\n      }\n      // For some reason, discard the first 4 bytes\n      value = value.slice(4);\n      return wkx.Geometry.parse(value).toGeoJSON();\n    }\n    toSql() {\n      return this.sqlType;\n    }\n  }\n\n  class ENUM extends BaseTypes.ENUM {\n    toSql(options) {\n      return `ENUM(${this.values.map(value => options.escape(value)).join(', ')})`;\n    }\n  }\n\n  class JSONTYPE extends BaseTypes.JSON {\n    _stringify(value, options) {\n      return options.operation === 'where' && typeof value === 'string' ? value : JSON.stringify(value);\n    }\n  }\n\n  return {\n    ENUM,\n    DATE,\n    DATEONLY,\n    UUID,\n    GEOMETRY,\n    DECIMAL,\n    JSON: JSONTYPE\n  };\n};\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"/*\r\n * @copyright\r\n * Copyright Â© Microsoft Open Technologies, Inc.\r\n *\r\n * All Rights Reserved\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http: *www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS\r\n * OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION\r\n * ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A\r\n * PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.\r\n *\r\n * See the Apache License, Version 2.0 for the specific language\r\n * governing permissions and limitations under the License.\r\n */\n'use strict';\n\nvar _ = require('underscore');\n\nvar uuid = require('uuid'); // want to replace with this in the future: https://gist.github.com/jed/982883\n\n\nvar LEVEL_STRING_MAP = {\n  0: 'ERROR:',\n  1: 'WARNING:',\n  2: 'INFO:',\n  3: 'VERBOSE:'\n};\n/**\r\n * Methods for controling global logging options for ADAL\r\n * @namespace\r\n */\n\nvar Logging = {\n  /**\r\n   * @callback LoggingCallback\r\n   * @memberOf Logging\r\n   * @param {Logging.LOGGING_LEVEL} level The level of this log entry.\r\n   * @param {string} message The text content of the log entry.\r\n   * @param {Error}  [error] An Error object if this is an {@link Logging.LOGGING_LEVEL.ERROR|ERROR} level log entry.\r\n   */\n\n  /**\r\n   * @typedef LoggingOptions\r\n   * @memberOf Logging\r\n   * @property {LoggingCallback} [log] The function to call when ADAL generates a log entry.\r\n   * @property {Logging.LOGGING_LEVEL} [level] The maximum level of log entries to generate.\r\n   */\n\n  /**\r\n   * Describes the available logging levels.\r\n   * @enum\r\n   * @type {Number}\r\n   */\n  LOGGING_LEVEL: {\n    ERROR: 0,\n    WARN: 1,\n    INFO: 2,\n    VERBOSE: 3\n  },\n\n  /**\r\n   * Sets global logging options for ADAL.\r\n   * @param {LoggingOptions} options\r\n   */\n  setLoggingOptions: function (options) {\n    if (!options) {\n      options = {};\n    }\n\n    if (options.log) {\n      if (!_.isFunction(options.log)) {\n        throw new Error('setLogOptions expects the log key in the options parameter to be a function');\n      }\n    } else {\n      // if no log function was passed set it to a default no op function.\n      options.log = function () {};\n    }\n\n    if (options.level) {\n      var level = options.level;\n\n      if (level < 0 || level > 3) {\n        throw new Error('setLogOptions expects the level key to be in the range 0 to 3 inclusive');\n      }\n    } else {\n      options.level = this.LOGGING_LEVEL.ERROR;\n    }\n\n    if (options.loggingWithPII != true) {\n      options.loggingWithPII = false;\n    }\n\n    this.LogOptions = options;\n  },\n\n  /**\r\n   * Get's the current global logging options.\r\n   * @return {LoggingOptions}\r\n   */\n  getLoggingOptions: function () {\n    return this.LogOptions;\n  },\n\n  /**\r\n   * Stores the current global logging options.\r\n   * @private\r\n   * @type {LoggingOptions}\r\n   */\n  LogOptions: {\n    log: function () {},\n    level: 0,\n    loggingWithPII: false\n  }\n};\n/**\r\n * An internal logging object.\r\n * @class\r\n * @private\r\n * @param {string} componentName The name of the component that created this instance.  This name will be\r\n *                               prepended to the beginning of all log entries generated by this instance.\r\n */\n\nfunction Logger(componentName, logContext) {\n  if (!logContext) {\n    throw new Error('Logger: logContext is a required parameter');\n  }\n\n  this._componentName = componentName;\n  this._logContext = logContext;\n}\n\nObject.defineProperty(Logger.prototype, 'context', {\n  get: function () {\n    return this._logContext;\n  }\n});\n/**\r\n * Generates a log entry\r\n * @param  {Logging.LOGGING_LEVEL} level The level of this log entry\r\n * @param  {string|function} message A message string, or a function that returns a message string, to log.\r\n * @param  {Error} [error] If this is a {@link Logging.LOGGING_LEVEL.ERROR|ERROR} level log entry then the caller\r\n *                       should pass an error object in this parameter.\r\n * @param  {boolean} [containsPII] Determines if the log message contains personal information. Default value is false.\r\n */\n\nLogger.prototype.log = function (level, message, error, containsPII) {\n  if (containsPII == true && !Logging.LogOptions.loggingWithPII) {\n    return;\n  }\n\n  if (level <= Logging.LogOptions.level) {\n    if (_.isFunction(message)) {\n      message = message();\n    }\n\n    var correlationId = this._logContext.correlationId || '<no correlation id>';\n    var timeStamp = new Date().toUTCString();\n    var formattedMessage = timeStamp + ':' + correlationId + ' - ' + this._componentName + ': ' + LEVEL_STRING_MAP[level] + ' ' + message;\n\n    if (error) {\n      formattedMessage += '\\nStack:\\n' + error.stack;\n    }\n\n    Logging.LogOptions.log(level, formattedMessage, error);\n  }\n};\n/**\r\n * Generate an {@link Logging.LOGGING_LEVEL.ERROR|ERROR} level log entry.\r\n * @param  {string} message A message to log\r\n * @param  {Error} error The Error object associated with this log entry\r\n * @param  {boolean} [containsPII] Determines if the log message contains personal information. Default value is false.\r\n */\n\n\nLogger.prototype.error = function (message, error, containsPII) {\n  this.log(Logging.LOGGING_LEVEL.ERROR, message, error, containsPII);\n};\n/**\r\n * Generate an {@link Logging.LOGGING_LEVEL.WARN|WARN} level log entry.\r\n * @param  {string} message A message to log\r\n * @param  {boolean} [containsPII] Determines if the log message contains personal information. Default value is false.\r\n */\n\n\nLogger.prototype.warn = function (message, containsPII) {\n  this.log(Logging.LOGGING_LEVEL.WARN, message, null, containsPII);\n};\n/**\r\n * Generate an {@link Logging.LOGGING_LEVEL.INFO|INFO} level log entry.\r\n * @param  {string} message A message to log\r\n * @param  {boolean} [containsPII] Determines if the log message contains personal information. Default value is false.\r\n */\n\n\nLogger.prototype.info = function (message, containsPII) {\n  this.log(Logging.LOGGING_LEVEL.INFO, message, null, containsPII);\n};\n/**\r\n * Generate an {@link Logging.LOGGING_LEVEL.VERBOSE|VERBOSE} level log entry.\r\n * @param  {string} message A message to log\r\n * @param  {boolean} [containsPII] Determines if the log message contains personal information. Default value is false.\r\n */\n\n\nLogger.prototype.verbose = function (message, containsPII) {\n  this.log(Logging.LOGGING_LEVEL.VERBOSE, message, null, containsPII);\n};\n/**\r\n * Generate a {@link Logging.LOGGING_LEVEL.ERROR|ERROR} level log entry, as well as an\r\n * Error object to go with it.  This is a convenience method for throwing logged errors.\r\n * @param  {string} message A message to log\r\n * @param  {boolean} [containsPII] Determines if the log message contains personal information. Default value is false.\r\n */\n\n\nLogger.prototype.createError = function (message, containsPII) {\n  var err = new Error(message);\n  this.error(message, err, containsPII);\n  return err;\n};\n/**\r\n * Creates a new log context based on the correlationId passed in.  If no correlationId is passed in\r\n * then one is generated, by the function uuid.v4()\r\n * @private\r\n */\n\n\nfunction createLogContext(correlationId) {\n  var id = correlationId || uuid.v4();\n  return {\n    correlationId: id\n  };\n}\n\nvar exports = {\n  Logging: Logging,\n  Logger: Logger,\n  createLogContext: createLogContext\n};\nmodule.exports = exports;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/adal-node/lib/log.js"],"names":["_","require","uuid","LEVEL_STRING_MAP","Logging","LOGGING_LEVEL","ERROR","WARN","INFO","VERBOSE","setLoggingOptions","options","log","isFunction","Error","level","loggingWithPII","LogOptions","getLoggingOptions","Logger","componentName","logContext","_componentName","_logContext","Object","defineProperty","prototype","get","message","error","containsPII","correlationId","timeStamp","Date","toUTCString","formattedMessage","stack","warn","info","verbose","createError","err","createLogContext","id","v4","exports","module"],"mappings":"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","sourcesContent":["/*\r\n * @copyright\r\n * Copyright Â© Microsoft Open Technologies, Inc.\r\n *\r\n * All Rights Reserved\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http: *www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS\r\n * OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION\r\n * ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A\r\n * PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.\r\n *\r\n * See the Apache License, Version 2.0 for the specific language\r\n * governing permissions and limitations under the License.\r\n */\r\n'use strict';\r\n\r\nvar _ = require('underscore');\r\nvar uuid = require('uuid');  // want to replace with this in the future: https://gist.github.com/jed/982883\r\n\r\n\r\n\r\nvar LEVEL_STRING_MAP = {\r\n  0 : 'ERROR:',\r\n  1 : 'WARNING:',\r\n  2 : 'INFO:',\r\n  3 : 'VERBOSE:'\r\n};\r\n\r\n/**\r\n * Methods for controling global logging options for ADAL\r\n * @namespace\r\n */\r\nvar Logging = {\r\n\r\n  /**\r\n   * @callback LoggingCallback\r\n   * @memberOf Logging\r\n   * @param {Logging.LOGGING_LEVEL} level The level of this log entry.\r\n   * @param {string} message The text content of the log entry.\r\n   * @param {Error}  [error] An Error object if this is an {@link Logging.LOGGING_LEVEL.ERROR|ERROR} level log entry.\r\n   */\r\n\r\n  /**\r\n   * @typedef LoggingOptions\r\n   * @memberOf Logging\r\n   * @property {LoggingCallback} [log] The function to call when ADAL generates a log entry.\r\n   * @property {Logging.LOGGING_LEVEL} [level] The maximum level of log entries to generate.\r\n   */\r\n\r\n  /**\r\n   * Describes the available logging levels.\r\n   * @enum\r\n   * @type {Number}\r\n   */\r\n  LOGGING_LEVEL : {\r\n    ERROR    : 0,\r\n    WARN     : 1,\r\n    INFO     : 2,\r\n    VERBOSE  : 3\r\n  },\r\n\r\n  /**\r\n   * Sets global logging options for ADAL.\r\n   * @param {LoggingOptions} options\r\n   */\r\n  setLoggingOptions : function(options) {\r\n    if (!options) {\r\n      options = {};\r\n    }\r\n\r\n    if (options.log) {\r\n      if (!_.isFunction(options.log)) {\r\n        throw new Error('setLogOptions expects the log key in the options parameter to be a function');\r\n      }\r\n    } else {\r\n      // if no log function was passed set it to a default no op function.\r\n      options.log = function() {};\r\n    }\r\n\r\n    if (options.level) {\r\n      var level = options.level;\r\n      if (level < 0 || level > 3) {\r\n        throw new Error('setLogOptions expects the level key to be in the range 0 to 3 inclusive');\r\n      }\r\n    } else {\r\n      options.level = this.LOGGING_LEVEL.ERROR;\r\n    }\r\n\r\n    if (options.loggingWithPII != true) {\r\n      options.loggingWithPII = false;\r\n    }\r\n    \r\n    this.LogOptions = options;\r\n  },\r\n\r\n  /**\r\n   * Get's the current global logging options.\r\n   * @return {LoggingOptions}\r\n   */\r\n  getLoggingOptions : function() {\r\n    return this.LogOptions;\r\n  },\r\n\r\n  /**\r\n   * Stores the current global logging options.\r\n   * @private\r\n   * @type {LoggingOptions}\r\n   */\r\n  LogOptions : {\r\n    log : function() {},\r\n    level : 0,\r\n    loggingWithPII: false\r\n  }\r\n};\r\n\r\n/**\r\n * An internal logging object.\r\n * @class\r\n * @private\r\n * @param {string} componentName The name of the component that created this instance.  This name will be\r\n *                               prepended to the beginning of all log entries generated by this instance.\r\n */\r\nfunction Logger(componentName, logContext) {\r\n  if (!logContext) {\r\n    throw new Error('Logger: logContext is a required parameter');\r\n  }\r\n  this._componentName = componentName;\r\n  this._logContext = logContext;\r\n}\r\n\r\nObject.defineProperty(Logger.prototype, 'context', {\r\n  get: function () {\r\n    return this._logContext;\r\n  }\r\n});\r\n\r\n/**\r\n * Generates a log entry\r\n * @param  {Logging.LOGGING_LEVEL} level The level of this log entry\r\n * @param  {string|function} message A message string, or a function that returns a message string, to log.\r\n * @param  {Error} [error] If this is a {@link Logging.LOGGING_LEVEL.ERROR|ERROR} level log entry then the caller\r\n *                       should pass an error object in this parameter.\r\n * @param  {boolean} [containsPII] Determines if the log message contains personal information. Default value is false.\r\n */\r\nLogger.prototype.log = function (level, message, error, containsPII) {\r\n  if (containsPII == true && !Logging.LogOptions.loggingWithPII) {\r\n    return;\r\n  }\r\n\r\n  if (level <= Logging.LogOptions.level) {\r\n    if (_.isFunction(message)) {\r\n      message = message();\r\n    }\r\n\r\n    var correlationId = this._logContext.correlationId || '<no correlation id>';\r\n    var timeStamp = new Date().toUTCString();\r\n\r\n    var formattedMessage = timeStamp + ':' + correlationId + ' - ' + this._componentName + ': ' + LEVEL_STRING_MAP[level] + ' ' + message;\r\n    if (error) {\r\n      formattedMessage += '\\nStack:\\n' + error.stack;\r\n    }\r\n    Logging.LogOptions.log(level, formattedMessage, error);\r\n  }\r\n};\r\n\r\n/**\r\n * Generate an {@link Logging.LOGGING_LEVEL.ERROR|ERROR} level log entry.\r\n * @param  {string} message A message to log\r\n * @param  {Error} error The Error object associated with this log entry\r\n * @param  {boolean} [containsPII] Determines if the log message contains personal information. Default value is false.\r\n */\r\nLogger.prototype.error = function (message, error, containsPII) {\r\n  this.log(Logging.LOGGING_LEVEL.ERROR, message, error, containsPII);\r\n};\r\n\r\n/**\r\n * Generate an {@link Logging.LOGGING_LEVEL.WARN|WARN} level log entry.\r\n * @param  {string} message A message to log\r\n * @param  {boolean} [containsPII] Determines if the log message contains personal information. Default value is false.\r\n */\r\nLogger.prototype.warn = function (message, containsPII) {\r\n  this.log(Logging.LOGGING_LEVEL.WARN, message, null, containsPII);\r\n};\r\n\r\n/**\r\n * Generate an {@link Logging.LOGGING_LEVEL.INFO|INFO} level log entry.\r\n * @param  {string} message A message to log\r\n * @param  {boolean} [containsPII] Determines if the log message contains personal information. Default value is false.\r\n */\r\nLogger.prototype.info = function (message, containsPII) {\r\n  this.log(Logging.LOGGING_LEVEL.INFO, message, null, containsPII);\r\n};\r\n\r\n/**\r\n * Generate an {@link Logging.LOGGING_LEVEL.VERBOSE|VERBOSE} level log entry.\r\n * @param  {string} message A message to log\r\n * @param  {boolean} [containsPII] Determines if the log message contains personal information. Default value is false.\r\n */\r\nLogger.prototype.verbose = function (message, containsPII) {\r\n  this.log(Logging.LOGGING_LEVEL.VERBOSE, message, null, containsPII);\r\n};\r\n\r\n/**\r\n * Generate a {@link Logging.LOGGING_LEVEL.ERROR|ERROR} level log entry, as well as an\r\n * Error object to go with it.  This is a convenience method for throwing logged errors.\r\n * @param  {string} message A message to log\r\n * @param  {boolean} [containsPII] Determines if the log message contains personal information. Default value is false.\r\n */\r\nLogger.prototype.createError = function(message, containsPII) {\r\n  var err = new Error(message);\r\n  this.error(message, err, containsPII);\r\n  return err;\r\n};\r\n\r\n/**\r\n * Creates a new log context based on the correlationId passed in.  If no correlationId is passed in\r\n * then one is generated, by the function uuid.v4()\r\n * @private\r\n */\r\nfunction createLogContext(correlationId) {\r\n  var id = correlationId || uuid.v4();\r\n  return { correlationId : id };\r\n}\r\n\r\nvar exports = {\r\n  Logging : Logging,\r\n  Logger : Logger,\r\n  createLogContext : createLogContext\r\n};\r\n\r\nmodule.exports = exports;"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nconst util = require('util');\n\nconst inherits = require('./utils/inherits');\n\nconst _ = require('lodash');\n\nconst Wkt = require('terraformer-wkt-parser');\n\nconst sequelizeErrors = require('./errors');\n\nconst warnings = {};\n\nconst Validator = require('./utils/validator-extras').validator;\n\nconst momentTz = require('moment-timezone');\n\nconst moment = require('moment');\n\nconst Utils = require('./utils');\n\nfunction ABSTRACT() {}\n\nABSTRACT.prototype.dialectTypes = '';\n\nABSTRACT.prototype.toString = function toString(options) {\n  return this.toSql(options);\n};\n\nABSTRACT.prototype.toSql = function toSql() {\n  return this.key;\n};\n\nABSTRACT.warn = function warn(link, text) {\n  if (!warnings[text]) {\n    warnings[text] = true;\n    Utils.warn(`${text}, '\\n>> Check:', ${link}`);\n  }\n};\n\nABSTRACT.prototype.stringify = function stringify(value, options) {\n  if (this._stringify) {\n    return this._stringify(value, options);\n  }\n\n  return value;\n};\n\nfunction STRING(length, binary) {\n  const options = typeof length === 'object' && length || {\n    length,\n    binary\n  };\n  if (!(this instanceof STRING)) return new STRING(options);\n  this.options = options;\n  this._binary = options.binary;\n  this._length = options.length || 255;\n}\n\ninherits(STRING, ABSTRACT);\nSTRING.prototype.key = STRING.key = 'STRING';\n\nSTRING.prototype.toSql = function toSql() {\n  return 'VARCHAR(' + this._length + ')' + (this._binary ? ' BINARY' : '');\n};\n\nSTRING.prototype.validate = function validate(value) {\n  if (Object.prototype.toString.call(value) !== '[object String]') {\n    if (this.options.binary && Buffer.isBuffer(value) || _.isNumber(value)) {\n      return true;\n    }\n\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid string', value));\n  }\n\n  return true;\n};\n\nObject.defineProperty(STRING.prototype, 'BINARY', {\n  get() {\n    this._binary = true;\n    this.options.binary = true;\n    return this;\n  }\n\n});\n\nfunction CHAR(length, binary) {\n  const options = typeof length === 'object' && length || {\n    length,\n    binary\n  };\n  if (!(this instanceof CHAR)) return new CHAR(options);\n  STRING.apply(this, arguments);\n}\n\ninherits(CHAR, STRING);\nCHAR.prototype.key = CHAR.key = 'CHAR';\n\nCHAR.prototype.toSql = function toSql() {\n  return 'CHAR(' + this._length + ')' + (this._binary ? ' BINARY' : '');\n};\n\nfunction TEXT(length) {\n  const options = typeof length === 'object' && length || {\n    length\n  };\n  if (!(this instanceof TEXT)) return new TEXT(options);\n  this.options = options;\n  this._length = options.length || '';\n}\n\ninherits(TEXT, ABSTRACT);\nTEXT.prototype.key = TEXT.key = 'TEXT';\n\nTEXT.prototype.toSql = function toSql() {\n  switch (this._length.toLowerCase()) {\n    case 'tiny':\n      return 'TINYTEXT';\n\n    case 'medium':\n      return 'MEDIUMTEXT';\n\n    case 'long':\n      return 'LONGTEXT';\n\n    default:\n      return this.key;\n  }\n};\n\nTEXT.prototype.validate = function validate(value) {\n  if (!_.isString(value)) {\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid string', value));\n  }\n\n  return true;\n};\n\nfunction NUMBER(options) {\n  this.options = options;\n  this._length = options.length;\n  this._zerofill = options.zerofill;\n  this._decimals = options.decimals;\n  this._precision = options.precision;\n  this._scale = options.scale;\n  this._unsigned = options.unsigned;\n}\n\ninherits(NUMBER, ABSTRACT);\nNUMBER.prototype.key = NUMBER.key = 'NUMBER';\n\nNUMBER.prototype.toSql = function toSql() {\n  let result = this.key;\n\n  if (this._length) {\n    result += '(' + this._length;\n\n    if (typeof this._decimals === 'number') {\n      result += ',' + this._decimals;\n    }\n\n    result += ')';\n  }\n\n  if (this._unsigned) {\n    result += ' UNSIGNED';\n  }\n\n  if (this._zerofill) {\n    result += ' ZEROFILL';\n  }\n\n  return result;\n};\n\nNUMBER.prototype.validate = function (value) {\n  if (!Validator.isFloat(String(value))) {\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid ' + _.toLower(this.key), value));\n  }\n\n  return true;\n};\n\nObject.defineProperty(NUMBER.prototype, 'UNSIGNED', {\n  get() {\n    this._unsigned = true;\n    this.options.unsigned = true;\n    return this;\n  }\n\n});\nObject.defineProperty(NUMBER.prototype, 'ZEROFILL', {\n  get() {\n    this._zerofill = true;\n    this.options.zerofill = true;\n    return this;\n  }\n\n});\n\nfunction INTEGER(length) {\n  const options = typeof length === 'object' && length || {\n    length\n  };\n  if (!(this instanceof INTEGER)) return new INTEGER(options);\n  NUMBER.call(this, options);\n}\n\ninherits(INTEGER, NUMBER);\nINTEGER.prototype.key = INTEGER.key = 'INTEGER';\n\nINTEGER.prototype.validate = function validate(value) {\n  if (!Validator.isInt(String(value))) {\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid ' + _.toLower(this.key), value));\n  }\n\n  return true;\n};\n\nfunction TINYINT(length) {\n  const options = typeof length === 'object' && length || {\n    length\n  };\n  if (!(this instanceof TINYINT)) return new TINYINT(options);\n  NUMBER.call(this, options);\n}\n\ninherits(TINYINT, INTEGER);\nTINYINT.prototype.key = TINYINT.key = 'TINYINT';\n\nfunction SMALLINT(length) {\n  const options = typeof length === 'object' && length || {\n    length\n  };\n  if (!(this instanceof SMALLINT)) return new SMALLINT(options);\n  NUMBER.call(this, options);\n}\n\ninherits(SMALLINT, INTEGER);\nSMALLINT.prototype.key = SMALLINT.key = 'SMALLINT';\n\nfunction MEDIUMINT(length) {\n  const options = typeof length === 'object' && length || {\n    length\n  };\n  if (!(this instanceof MEDIUMINT)) return new MEDIUMINT(options);\n  NUMBER.call(this, options);\n}\n\ninherits(MEDIUMINT, INTEGER);\nMEDIUMINT.prototype.key = MEDIUMINT.key = 'MEDIUMINT';\n\nfunction BIGINT(length) {\n  const options = typeof length === 'object' && length || {\n    length\n  };\n  if (!(this instanceof BIGINT)) return new BIGINT(options);\n  NUMBER.call(this, options);\n}\n\ninherits(BIGINT, INTEGER);\nBIGINT.prototype.key = BIGINT.key = 'BIGINT';\n\nfunction FLOAT(length, decimals) {\n  const options = typeof length === 'object' && length || {\n    length,\n    decimals\n  };\n  if (!(this instanceof FLOAT)) return new FLOAT(options);\n  NUMBER.call(this, options);\n}\n\ninherits(FLOAT, NUMBER);\nFLOAT.prototype.key = FLOAT.key = 'FLOAT';\n\nFLOAT.prototype.validate = function validate(value) {\n  if (!Validator.isFloat(String(value))) {\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid float', value));\n  }\n\n  return true;\n};\n\nfunction REAL(length, decimals) {\n  const options = typeof length === 'object' && length || {\n    length,\n    decimals\n  };\n  if (!(this instanceof REAL)) return new REAL(options);\n  NUMBER.call(this, options);\n}\n\ninherits(REAL, NUMBER);\nREAL.prototype.key = REAL.key = 'REAL';\n\nfunction DOUBLE(length, decimals) {\n  const options = typeof length === 'object' && length || {\n    length,\n    decimals\n  };\n  if (!(this instanceof DOUBLE)) return new DOUBLE(options);\n  NUMBER.call(this, options);\n}\n\ninherits(DOUBLE, NUMBER);\nDOUBLE.prototype.key = DOUBLE.key = 'DOUBLE PRECISION';\n\nfunction DECIMAL(precision, scale) {\n  const options = typeof precision === 'object' && precision || {\n    precision,\n    scale\n  };\n  if (!(this instanceof DECIMAL)) return new DECIMAL(options);\n  NUMBER.call(this, options);\n}\n\ninherits(DECIMAL, NUMBER);\nDECIMAL.prototype.key = DECIMAL.key = 'DECIMAL';\n\nDECIMAL.prototype.toSql = function toSql() {\n  if (this._precision || this._scale) {\n    return 'DECIMAL(' + [this._precision, this._scale].filter(_.identity).join(',') + ')';\n  }\n\n  return 'DECIMAL';\n};\n\nDECIMAL.prototype.validate = function validate(value) {\n  if (!Validator.isDecimal(String(value))) {\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid decimal', value));\n  }\n\n  return true;\n};\n\nfor (const floating of [FLOAT, DOUBLE, REAL]) {\n  floating.prototype.escape = false;\n\n  floating.prototype._stringify = function _stringify(value) {\n    if (isNaN(value)) {\n      return \"'NaN'\";\n    } else if (!isFinite(value)) {\n      const sign = value < 0 ? '-' : '';\n      return \"'\" + sign + \"Infinity'\";\n    }\n\n    return value;\n  };\n}\n\nfunction BOOLEAN() {\n  if (!(this instanceof BOOLEAN)) return new BOOLEAN();\n}\n\ninherits(BOOLEAN, ABSTRACT);\nBOOLEAN.prototype.key = BOOLEAN.key = 'BOOLEAN';\n\nBOOLEAN.prototype.toSql = function toSql() {\n  return 'TINYINT(1)';\n};\n\nBOOLEAN.prototype.validate = function validate(value) {\n  if (!Validator.isBoolean(String(value))) {\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid boolean', value));\n  }\n\n  return true;\n};\n\nBOOLEAN.prototype._sanitize = function _sanitize(value) {\n  if (value !== null && value !== undefined) {\n    if (Buffer.isBuffer(value) && value.length === 1) {\n      // Bit fields are returned as buffers\n      value = value[0];\n    }\n\n    if (_.isString(value)) {\n      // Only take action on valid boolean strings.\n      value = value === 'true' ? true : value === 'false' ? false : value;\n    } else if (_.isNumber(value)) {\n      // Only take action on valid boolean integers.\n      value = value === 1 ? true : value === 0 ? false : value;\n    }\n  }\n\n  return value;\n};\n\nBOOLEAN.parse = BOOLEAN.prototype._sanitize;\n\nfunction TIME() {\n  if (!(this instanceof TIME)) return new TIME();\n}\n\ninherits(TIME, ABSTRACT);\nTIME.prototype.key = TIME.key = 'TIME';\n\nTIME.prototype.toSql = function toSql() {\n  return 'TIME';\n};\n\nfunction DATE(length) {\n  const options = typeof length === 'object' && length || {\n    length\n  };\n  if (!(this instanceof DATE)) return new DATE(options);\n  this.options = options;\n  this._length = options.length || '';\n}\n\ninherits(DATE, ABSTRACT);\nDATE.prototype.key = DATE.key = 'DATE';\n\nDATE.prototype.toSql = function toSql() {\n  return 'DATETIME';\n};\n\nDATE.prototype.validate = function validate(value) {\n  if (!Validator.isDate(String(value))) {\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid date', value));\n  }\n\n  return true;\n};\n\nDATE.prototype._sanitize = function _sanitize(value, options) {\n  if ((!options || options && !options.raw) && !(value instanceof Date) && !!value) {\n    return new Date(value);\n  }\n\n  return value;\n};\n\nDATE.prototype._isChanged = function _isChanged(value, originalValue) {\n  if (originalValue && !!value && (value === originalValue || value instanceof Date && originalValue instanceof Date && value.getTime() === originalValue.getTime())) {\n    return false;\n  } // not changed when set to same empty value\n\n\n  if (!originalValue && !value && originalValue === value) {\n    return false;\n  }\n\n  return true;\n};\n\nDATE.prototype._applyTimezone = function _applyTimezone(date, options) {\n  if (options.timezone) {\n    if (momentTz.tz.zone(options.timezone)) {\n      date = momentTz(date).tz(options.timezone);\n    } else {\n      date = moment(date).utcOffset(options.timezone);\n    }\n  } else {\n    date = momentTz(date);\n  }\n\n  return date;\n};\n\nDATE.prototype._stringify = function _stringify(date, options) {\n  date = this._applyTimezone(date, options); // Z here means current timezone, _not_ UTC\n\n  return date.format('YYYY-MM-DD HH:mm:ss.SSS Z');\n};\n\nfunction DATEONLY() {\n  if (!(this instanceof DATEONLY)) return new DATEONLY();\n}\n\nutil.inherits(DATEONLY, ABSTRACT);\nDATEONLY.prototype.key = DATEONLY.key = 'DATEONLY';\n\nDATEONLY.prototype.toSql = function () {\n  return 'DATE';\n};\n\nDATEONLY.prototype._stringify = function _stringify(date) {\n  return moment(date).format('YYYY-MM-DD');\n};\n\nDATEONLY.prototype._sanitize = function _sanitize(value, options) {\n  if ((!options || options && !options.raw) && !!value) {\n    return moment(value).format('YYYY-MM-DD');\n  }\n\n  return value;\n};\n\nDATEONLY.prototype._isChanged = function _isChanged(value, originalValue) {\n  if (originalValue && !!value && originalValue === value) {\n    return false;\n  } // not changed when set to same empty value\n\n\n  if (!originalValue && !value && originalValue === value) {\n    return false;\n  }\n\n  return true;\n};\n\nfunction HSTORE() {\n  if (!(this instanceof HSTORE)) return new HSTORE();\n}\n\ninherits(HSTORE, ABSTRACT);\nHSTORE.prototype.key = HSTORE.key = 'HSTORE';\n\nHSTORE.prototype.validate = function validate(value) {\n  if (!_.isPlainObject(value)) {\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid hstore', value));\n  }\n\n  return true;\n};\n\nfunction JSONTYPE() {\n  if (!(this instanceof JSONTYPE)) return new JSONTYPE();\n}\n\ninherits(JSONTYPE, ABSTRACT);\nJSONTYPE.prototype.key = JSONTYPE.key = 'JSON';\n\nJSONTYPE.prototype.validate = function validate() {\n  return true;\n};\n\nJSONTYPE.prototype._stringify = function _stringify(value) {\n  return JSON.stringify(value);\n};\n\nfunction JSONB() {\n  if (!(this instanceof JSONB)) return new JSONB();\n  JSONTYPE.call(this);\n}\n\ninherits(JSONB, JSONTYPE);\nJSONB.prototype.key = JSONB.key = 'JSONB';\n\nfunction NOW() {\n  if (!(this instanceof NOW)) return new NOW();\n}\n\ninherits(NOW, ABSTRACT);\nNOW.prototype.key = NOW.key = 'NOW';\n\nfunction BLOB(length) {\n  const options = typeof length === 'object' && length || {\n    length\n  };\n  if (!(this instanceof BLOB)) return new BLOB(options);\n  this.options = options;\n  this._length = options.length || '';\n}\n\ninherits(BLOB, ABSTRACT);\nBLOB.prototype.key = BLOB.key = 'BLOB';\n\nBLOB.prototype.toSql = function toSql() {\n  switch (this._length.toLowerCase()) {\n    case 'tiny':\n      return 'TINYBLOB';\n\n    case 'medium':\n      return 'MEDIUMBLOB';\n\n    case 'long':\n      return 'LONGBLOB';\n\n    default:\n      return this.key;\n  }\n};\n\nBLOB.prototype.validate = function validate(value) {\n  if (!_.isString(value) && !Buffer.isBuffer(value)) {\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid blob', value));\n  }\n\n  return true;\n};\n\nBLOB.prototype.escape = false;\n\nBLOB.prototype._stringify = function _stringify(value) {\n  if (!Buffer.isBuffer(value)) {\n    if (Array.isArray(value)) {\n      value = new Buffer(value);\n    } else {\n      value = new Buffer(value.toString());\n    }\n  }\n\n  const hex = value.toString('hex');\n  return this._hexify(hex);\n};\n\nBLOB.prototype._hexify = function _hexify(hex) {\n  return \"X'\" + hex + \"'\";\n};\n\nfunction RANGE(subtype) {\n  const options = _.isPlainObject(subtype) ? subtype : {\n    subtype\n  };\n  if (!options.subtype) options.subtype = new INTEGER();\n\n  if (_.isFunction(options.subtype)) {\n    options.subtype = new options.subtype();\n  }\n\n  if (!(this instanceof RANGE)) return new RANGE(options);\n  this._subtype = options.subtype.key;\n  this.options = options;\n}\n\ninherits(RANGE, ABSTRACT);\nconst pgRangeSubtypes = {\n  integer: 'int4range',\n  bigint: 'int8range',\n  decimal: 'numrange',\n  dateonly: 'daterange',\n  date: 'tstzrange',\n  datenotz: 'tsrange'\n};\nconst pgRangeCastTypes = {\n  integer: 'integer',\n  bigint: 'bigint',\n  decimal: 'numeric',\n  dateonly: 'date',\n  date: 'timestamptz',\n  datenotz: 'timestamp'\n};\nRANGE.prototype.key = RANGE.key = 'RANGE';\n\nRANGE.prototype.toSql = function toSql() {\n  return pgRangeSubtypes[this._subtype.toLowerCase()];\n};\n\nRANGE.prototype.toCastType = function toCastType() {\n  return pgRangeCastTypes[this._subtype.toLowerCase()];\n};\n\nRANGE.prototype.validate = function validate(value) {\n  if (_.isPlainObject(value) && value.inclusive) {\n    value = value.inclusive;\n  }\n\n  if (!_.isArray(value)) {\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid range', value));\n  }\n\n  if (value.length !== 2) {\n    throw new sequelizeErrors.ValidationError('A range must be an array with two elements');\n  }\n\n  return true;\n};\n\nfunction UUID() {\n  if (!(this instanceof UUID)) return new UUID();\n}\n\ninherits(UUID, ABSTRACT);\nUUID.prototype.key = UUID.key = 'UUID';\n\nUUID.prototype.validate = function validate(value, options) {\n  if (!_.isString(value) || !Validator.isUUID(value) && (!options || !options.acceptStrings)) {\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid uuid', value));\n  }\n\n  return true;\n};\n\nfunction UUIDV1() {\n  if (!(this instanceof UUIDV1)) return new UUIDV1();\n}\n\ninherits(UUIDV1, ABSTRACT);\nUUIDV1.prototype.key = UUIDV1.key = 'UUIDV1';\n\nUUIDV1.prototype.validate = function validate(value, options) {\n  if (!_.isString(value) || !Validator.isUUID(value) && (!options || !options.acceptStrings)) {\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid uuid', value));\n  }\n\n  return true;\n};\n\nfunction UUIDV4() {\n  if (!(this instanceof UUIDV4)) return new UUIDV4();\n}\n\ninherits(UUIDV4, ABSTRACT);\nUUIDV4.prototype.key = UUIDV4.key = 'UUIDV4';\n\nUUIDV4.prototype.validate = function validate(value, options) {\n  if (!_.isString(value) || !Validator.isUUID(value, 4) && (!options || !options.acceptStrings)) {\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid uuidv4', value));\n  }\n\n  return true;\n};\n\nfunction VIRTUAL(ReturnType, fields) {\n  if (!(this instanceof VIRTUAL)) return new VIRTUAL(ReturnType, fields);\n  if (typeof ReturnType === 'function') ReturnType = new ReturnType();\n  this.returnType = ReturnType;\n  this.fields = fields;\n}\n\ninherits(VIRTUAL, ABSTRACT);\nVIRTUAL.prototype.key = VIRTUAL.key = 'VIRTUAL';\n\nfunction ENUM(value) {\n  const options = typeof value === 'object' && !Array.isArray(value) && value || {\n    values: Array.prototype.slice.call(arguments).reduce((result, element) => {\n      return result.concat(Array.isArray(element) ? element : [element]);\n    }, [])\n  };\n  if (!(this instanceof ENUM)) return new ENUM(options);\n  this.values = options.values;\n  this.options = options;\n}\n\ninherits(ENUM, ABSTRACT);\nENUM.prototype.key = ENUM.key = 'ENUM';\n\nENUM.prototype.validate = function validate(value) {\n  if (!_.includes(this.values, value)) {\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid choice in %j', value, this.values));\n  }\n\n  return true;\n};\n\nfunction ARRAY(type) {\n  const options = _.isPlainObject(type) ? type : {\n    type\n  };\n  if (!(this instanceof ARRAY)) return new ARRAY(options);\n  this.type = typeof options.type === 'function' ? new options.type() : options.type;\n}\n\ninherits(ARRAY, ABSTRACT);\nARRAY.prototype.key = ARRAY.key = 'ARRAY';\n\nARRAY.prototype.toSql = function toSql() {\n  return this.type.toSql() + '[]';\n};\n\nARRAY.prototype.validate = function validate(value) {\n  if (!_.isArray(value)) {\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid array', value));\n  }\n\n  return true;\n};\n\nARRAY.is = function is(obj, type) {\n  return obj instanceof ARRAY && obj.type instanceof type;\n};\n\nconst helpers = {\n  BINARY: [STRING, CHAR],\n  UNSIGNED: [NUMBER, TINYINT, SMALLINT, MEDIUMINT, INTEGER, BIGINT, FLOAT, DOUBLE, REAL, DECIMAL],\n  ZEROFILL: [NUMBER, TINYINT, SMALLINT, MEDIUMINT, INTEGER, BIGINT, FLOAT, DOUBLE, REAL, DECIMAL],\n  PRECISION: [DECIMAL],\n  SCALE: [DECIMAL]\n};\n\nfunction GEOMETRY(type, srid) {\n  const options = _.isPlainObject(type) ? type : {\n    type,\n    srid\n  };\n  if (!(this instanceof GEOMETRY)) return new GEOMETRY(options);\n  this.options = options;\n  this.type = options.type;\n  this.srid = options.srid;\n}\n\ninherits(GEOMETRY, ABSTRACT);\nGEOMETRY.prototype.key = GEOMETRY.key = 'GEOMETRY';\nGEOMETRY.prototype.escape = false;\n\nGEOMETRY.prototype._stringify = function _stringify(value, options) {\n  return 'GeomFromText(' + options.escape(Wkt.convert(value)) + ')';\n};\n\nfunction GEOGRAPHY(type, srid) {\n  const options = _.isPlainObject(type) ? type : {\n    type,\n    srid\n  };\n  if (!(this instanceof GEOGRAPHY)) return new GEOGRAPHY(options);\n  this.options = options;\n  this.type = options.type;\n  this.srid = options.srid;\n}\n\ninherits(GEOGRAPHY, ABSTRACT);\nGEOGRAPHY.prototype.key = GEOGRAPHY.key = 'GEOGRAPHY';\nGEOGRAPHY.prototype.escape = false;\n\nGEOGRAPHY.prototype._stringify = function _stringify(value, options) {\n  return 'GeomFromText(' + options.escape(Wkt.convert(value)) + ')';\n};\n\nfunction CIDR() {\n  if (!(this instanceof CIDR)) return new CIDR();\n}\n\ninherits(CIDR, ABSTRACT);\nCIDR.prototype.key = CIDR.key = 'CIDR';\n\nCIDR.prototype.validate = function validate(value) {\n  if (!_.isString(value) || !Validator.isIPRange(value)) {\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid CIDR', value));\n  }\n\n  return true;\n};\n\nfunction INET() {\n  if (!(this instanceof INET)) return new INET();\n}\n\ninherits(INET, ABSTRACT);\nINET.prototype.key = INET.key = 'INET';\n\nINET.prototype.validate = function validate(value) {\n  if (!_.isString(value) || !Validator.isIP(value)) {\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid INET', value));\n  }\n\n  return true;\n};\n\nfunction MACADDR() {\n  if (!(this instanceof MACADDR)) return new MACADDR();\n}\n\ninherits(MACADDR, ABSTRACT);\nMACADDR.prototype.key = MACADDR.key = 'MACADDR';\n\nMACADDR.prototype.validate = function validate(value) {\n  if (!_.isString(value) || !Validator.isMACAddress(value)) {\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid MACADDR', value));\n  }\n\n  return true;\n};\n\nfor (const helper of Object.keys(helpers)) {\n  for (const DataType of helpers[helper]) {\n    if (!DataType[helper]) {\n      Object.defineProperty(DataType, helper, {\n        get() {\n          const dataType = new DataType();\n\n          if (typeof dataType[helper] === 'object') {\n            return dataType;\n          }\n\n          return dataType[helper].apply(dataType, arguments);\n        }\n\n      });\n    }\n  }\n}\n/**\n * A convenience class holding commonly used data types. The datatypes are used when defining a new model using `Sequelize.define`, like this:\n * ```js\n * sequelize.define('model', {\n *   column: DataTypes.INTEGER\n * })\n * ```\n * When defining a model you can just as easily pass a string as type, but often using the types defined here is beneficial. For example, using `DataTypes.BLOB`, mean\n * that that column will be returned as an instance of `Buffer` when being fetched by sequelize.\n *\n * To provide a length for the data type, you can invoke it like a function: `INTEGER(2)`\n *\n * Some data types have special properties that can be accessed in order to change the data type.\n * For example, to get an unsigned integer with zerofill you can do `DataTypes.INTEGER.UNSIGNED.ZEROFILL`.\n * The order you access the properties in do not matter, so `DataTypes.INTEGER.ZEROFILL.UNSIGNED` is fine as well.\n *\n * * All number types (`INTEGER`, `BIGINT`, `FLOAT`, `DOUBLE`, `REAL`, `DECIMAL`) expose the properties `UNSIGNED` and `ZEROFILL`\n * * The `CHAR` and `STRING` types expose the `BINARY` property\n *\n *\n * Three of the values provided here (`NOW`, `UUIDV1` and `UUIDV4`) are special default values, that should not be used to define types. Instead they are used as shorthands for\n * defining default values. For example, to get a uuid field with a default value generated following v1 of the UUID standard:\n * ```js`\n * sequelize.define('model',` {\n *   uuid: {\n *     type: DataTypes.UUID,\n *     defaultValue: DataTypes.UUIDV1,\n *     primaryKey: true\n *   }\n * })\n * ```\n * There may be times when you want to generate your own UUID conforming to some other algorithm. This is accomplished\n * using the defaultValue property as well, but instead of specifying one of the supplied UUID types, you return a value\n * from a function.\n * ```js\n * sequelize.define('model', {\n *   uuid: {\n *     type: DataTypes.UUID,\n *     defaultValue: function() {\n *       return generateMyId()\n *     },\n *     primaryKey: true\n *   }\n * })\n * ```\n *\n * @property {function(length=255: integer)} STRING A variable length string\n * @property {function(length=255: integer)} CHAR A fixed length string.\n * @property {function(length: string)} TEXT An unlimited length text column. Available lengths: `tiny`, `medium`, `long`\n * @property {function(length: integer)} TINYINT A 8 bit integer.\n * @property {function(length: integer)} SMALLINT A 16 bit integer.\n * @property {function(length: integer)} MEDIUMINT A 24 bit integer.\n * @property {function(length=255: integer)} INTEGER A 32 bit integer.\n * @property {function(length: integer)} BIGINT A 64 bit integer. Note: an attribute defined as `BIGINT` will be treated like a `string` due this [feature from node-postgres](https://github.com/brianc/node-postgres/pull/353) to prevent precision loss. To have this attribute as a `number`, this is a possible [workaround](https://github.com/sequelize/sequelize/issues/2383#issuecomment-58006083).\n * @property {function(length: integer, decimals: integer)} FLOAT Floating point number (4-byte precision).\n * @property {function(length: integer, decimals: integer)} DOUBLE Floating point number (8-byte precision).\n * @property {function(precision: integer, scale: integer)} DECIMAL Decimal number.\n * @property {function(length: integer, decimals: integer)} REAL Floating point number (4-byte precision).\n * @property {function} BOOLEAN A boolean / tinyint column, depending on dialect\n * @property {function(length: string)} BLOB Binary storage. Available lengths: `tiny`, `medium`, `long`\n * @property {function(values: string[])} ENUM An enumeration. `DataTypes.ENUM('value', 'another value')`.\n * @property {function(length: integer)} DATE A datetime column\n * @property {function} DATEONLY A date only column (no timestamp)\n * @property {function} TIME A time column\n * @property {function} NOW A default value of the current timestamp\n * @property {function} UUID A column storing a unique universal identifier. Use with `UUIDV1` or `UUIDV4` for default values.\n * @property {function} UUIDV1 A default unique universal identifier generated following the UUID v1 standard\n * @property {function} UUIDV4 A default unique universal identifier generated following the UUID v4 standard\n * @property {function} HSTORE A key / value store column. Only available in Postgres.\n * @property {function} JSON A JSON string column. Available in MySQL, Postgres and SQLite\n * @property {function} JSONB A binary storage JSON column. Only available in Postgres.\n * @property {function(type: DataTypes)} ARRAY An array of `type`, e.g. `DataTypes.ARRAY(DataTypes.DECIMAL)`. Only available in Postgres.\n * @property {function(type: DataTypes)} RANGE Range types are data types representing a range of values of some element type (called the range's subtype).\n * Only available in Postgres. See [the Postgres documentation](http://www.postgresql.org/docs/9.4/static/rangetypes.html) for more details\n * @property {function(type: string, srid: string)} GEOMETRY A column storing Geometry information. It is only available in PostgreSQL (with PostGIS) or MySQL.\n * In MySQL, allowable Geometry types are `POINT`, `LINESTRING`, `POLYGON`.\n *\n * GeoJSON is accepted as input and returned as output.\n * In PostGIS, the GeoJSON is parsed using the PostGIS function `ST_GeomFromGeoJSON`.\n * In MySQL it is parsed using the function `GeomFromText`.\n * Therefore, one can just follow the [GeoJSON spec](http://geojson.org/geojson-spec.html) for handling geometry objects.  See the following examples:\n *\n * ```js\n * // Create a new point:\n * const point = { type: 'Point', coordinates: [39.807222,-76.984722]};\n *\n * User.create({username: 'username', geometry: point });\n *\n * // Create a new linestring:\n * const line = { type: 'LineString', 'coordinates': [ [100.0, 0.0], [101.0, 1.0] ] };\n *\n * User.create({username: 'username', geometry: line });\n *\n * // Create a new polygon:\n * const polygon = { type: 'Polygon', coordinates: [\n *                 [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0],\n *                   [100.0, 1.0], [100.0, 0.0] ]\n *                 ]};\n *\n * User.create({username: 'username', geometry: polygon });\n\n * // Create a new point with a custom SRID:\n * const point = {\n *   type: 'Point',\n *   coordinates: [39.807222,-76.984722],\n *   crs: { type: 'name', properties: { name: 'EPSG:4326'} }\n * };\n *\n * User.create({username: 'username', geometry: point })\n * ```\n * @property {function(type: string, srid: string)} GEOGRAPHY A geography datatype represents two dimensional spacial objects in an elliptic coord system.\n * @property {function(returnType: DataTypes, fields: string[])} VIRTUAL A virtual value that is not stored in the DB. This could for example be useful if you want to provide a default value in your model that is returned to the user but not stored in the DB.\n *\n * You could also use it to validate a value before permuting and storing it. Checking password length before hashing it for example:\n * ```js\n * sequelize.define('user', {\n *   password_hash: DataTypes.STRING,\n *   password: {\n *     type: DataTypes.VIRTUAL,\n *     set: function (val) {\n *        // Remember to set the data value, otherwise it won't be validated\n *        this.setDataValue('password', val);\n *        this.setDataValue('password_hash', this.salt + val);\n *      },\n *      validate: {\n *         isLongEnough: function (val) {\n *           if (val.length < 7) {\n *             throw new Error(\"Please choose a longer password\")\n *          }\n *       }\n *     }\n *   }\n * })\n * ```\n * In the above code the password is stored plainly in the password field so it can be validated, but is never stored in the DB.\n *\n * VIRTUAL also takes a return type and dependency fields as arguments\n * If a virtual attribute is present in `attributes` it will automatically pull in the extra fields as well.\n * Return type is mostly useful for setups that rely on types like GraphQL.\n * ```js\n * {\n *   active: {\n *     type: new DataTypes.VIRTUAL(DataTypes.BOOLEAN, ['createdAt']),\n *     get: function() {\n *       return this.get('createdAt') > Date.now() - (7 * 24 * 60 * 60 * 1000)\n *     }\n *   }\n * }\n * ```\n */\n\n\nconst DataTypes = module.exports = {\n  ABSTRACT,\n  STRING,\n  CHAR,\n  TEXT,\n  NUMBER,\n  TINYINT,\n  SMALLINT,\n  MEDIUMINT,\n  INTEGER,\n  BIGINT,\n  FLOAT,\n  TIME,\n  DATE,\n  DATEONLY,\n  BOOLEAN,\n  NOW,\n  BLOB,\n  DECIMAL,\n  NUMERIC: DECIMAL,\n  UUID,\n  UUIDV1,\n  UUIDV4,\n  HSTORE,\n  JSON: JSONTYPE,\n  JSONB,\n  VIRTUAL,\n  ARRAY,\n  NONE: VIRTUAL,\n  ENUM,\n  RANGE,\n  REAL,\n  DOUBLE,\n  'DOUBLE PRECISION': DOUBLE,\n  GEOMETRY,\n  GEOGRAPHY,\n  CIDR,\n  INET,\n  MACADDR\n};\n\n_.each(DataTypes, dataType => {\n  dataType.types = {};\n});\n\nDataTypes.postgres = require('./dialects/postgres/data-types')(DataTypes);\nDataTypes.mysql = require('./dialects/mysql/data-types')(DataTypes);\nDataTypes.sqlite = require('./dialects/sqlite/data-types')(DataTypes);\nDataTypes.mssql = require('./dialects/mssql/data-types')(DataTypes);\nmodule.exports = DataTypes;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/sequelize/lib/data-types.js"],"names":["util","require","inherits","_","Wkt","sequelizeErrors","warnings","Validator","validator","momentTz","moment","Utils","ABSTRACT","prototype","dialectTypes","toString","options","toSql","key","warn","link","text","stringify","value","_stringify","STRING","length","binary","_binary","_length","validate","Object","call","Buffer","isBuffer","isNumber","ValidationError","format","defineProperty","get","CHAR","apply","arguments","TEXT","toLowerCase","isString","NUMBER","_zerofill","zerofill","_decimals","decimals","_precision","precision","_scale","scale","_unsigned","unsigned","result","isFloat","String","toLower","INTEGER","isInt","TINYINT","SMALLINT","MEDIUMINT","BIGINT","FLOAT","REAL","DOUBLE","DECIMAL","filter","identity","join","isDecimal","floating","escape","isNaN","isFinite","sign","BOOLEAN","isBoolean","_sanitize","undefined","parse","TIME","DATE","isDate","raw","Date","_isChanged","originalValue","getTime","_applyTimezone","date","timezone","tz","zone","utcOffset","DATEONLY","HSTORE","isPlainObject","JSONTYPE","JSON","JSONB","NOW","BLOB","Array","isArray","hex","_hexify","RANGE","subtype","isFunction","_subtype","pgRangeSubtypes","integer","bigint","decimal","dateonly","datenotz","pgRangeCastTypes","toCastType","inclusive","UUID","isUUID","acceptStrings","UUIDV1","UUIDV4","VIRTUAL","ReturnType","fields","returnType","ENUM","values","slice","reduce","element","concat","includes","ARRAY","type","is","obj","helpers","BINARY","UNSIGNED","ZEROFILL","PRECISION","SCALE","GEOMETRY","srid","convert","GEOGRAPHY","CIDR","isIPRange","INET","isIP","MACADDR","isMACAddress","helper","keys","DataType","dataType","DataTypes","module","exports","NUMERIC","NONE","each","types","postgres","mysql","sqlite","mssql"],"mappings":"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","sourcesContent":["'use strict';\n\nconst util = require('util');\nconst inherits = require('./utils/inherits');\nconst _ = require('lodash');\nconst Wkt = require('terraformer-wkt-parser');\nconst sequelizeErrors = require('./errors');\nconst warnings = {};\nconst Validator = require('./utils/validator-extras').validator;\nconst momentTz = require('moment-timezone');\nconst moment = require('moment');\nconst Utils = require('./utils');\n\nfunction ABSTRACT() {}\n\nABSTRACT.prototype.dialectTypes = '';\n\nABSTRACT.prototype.toString = function toString(options) {\n  return this.toSql(options);\n};\nABSTRACT.prototype.toSql = function toSql() {\n  return this.key;\n};\nABSTRACT.warn = function warn(link, text) {\n  if (!warnings[text]) {\n    warnings[text] = true;\n    Utils.warn(`${text}, '\\n>> Check:', ${link}`);\n  }\n};\nABSTRACT.prototype.stringify = function stringify(value, options) {\n  if (this._stringify) {\n    return this._stringify(value, options);\n  }\n  return value;\n};\n\nfunction STRING(length, binary) {\n  const options = typeof length === 'object' && length || {length, binary};\n\n  if (!(this instanceof STRING)) return new STRING(options);\n\n  this.options = options;\n  this._binary = options.binary;\n  this._length = options.length || 255;\n}\ninherits(STRING, ABSTRACT);\n\nSTRING.prototype.key = STRING.key = 'STRING';\nSTRING.prototype.toSql = function toSql() {\n  return 'VARCHAR(' + this._length + ')' + (this._binary ? ' BINARY' : '');\n};\nSTRING.prototype.validate = function validate(value) {\n  if (Object.prototype.toString.call(value) !== '[object String]') {\n    if (this.options.binary && Buffer.isBuffer(value) || _.isNumber(value)) {\n      return true;\n    }\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid string', value));\n  }\n\n  return true;\n};\nObject.defineProperty(STRING.prototype, 'BINARY', {\n  get() {\n    this._binary = true;\n    this.options.binary = true;\n    return this;\n  }\n});\n\nfunction CHAR(length, binary) {\n  const options = typeof length === 'object' && length || {length, binary};\n\n  if (!(this instanceof CHAR)) return new CHAR(options);\n  STRING.apply(this, arguments);\n}\ninherits(CHAR, STRING);\n\nCHAR.prototype.key = CHAR.key = 'CHAR';\nCHAR.prototype.toSql = function toSql() {\n  return 'CHAR(' + this._length + ')' + (this._binary ? ' BINARY' : '');\n};\n\nfunction TEXT(length) {\n  const options = typeof length === 'object' && length || {length};\n  if (!(this instanceof TEXT)) return new TEXT(options);\n  this.options = options;\n  this._length = options.length || '';\n}\ninherits(TEXT, ABSTRACT);\n\nTEXT.prototype.key = TEXT.key = 'TEXT';\nTEXT.prototype.toSql = function toSql() {\n  switch (this._length.toLowerCase()) {\n    case 'tiny':\n      return 'TINYTEXT';\n    case 'medium':\n      return 'MEDIUMTEXT';\n    case 'long':\n      return 'LONGTEXT';\n    default:\n      return this.key;\n  }\n};\nTEXT.prototype.validate = function validate(value) {\n  if (!_.isString(value)) {\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid string', value));\n  }\n\n  return true;\n};\n\nfunction NUMBER(options) {\n  this.options = options;\n  this._length = options.length;\n  this._zerofill = options.zerofill;\n  this._decimals = options.decimals;\n  this._precision = options.precision;\n  this._scale = options.scale;\n  this._unsigned = options.unsigned;\n}\ninherits(NUMBER, ABSTRACT);\n\nNUMBER.prototype.key = NUMBER.key = 'NUMBER';\nNUMBER.prototype.toSql = function toSql() {\n  let result = this.key;\n  if (this._length) {\n    result += '(' + this._length;\n    if (typeof this._decimals === 'number') {\n      result += ',' + this._decimals;\n    }\n    result += ')';\n  }\n  if (this._unsigned) {\n    result += ' UNSIGNED';\n  }\n  if (this._zerofill) {\n    result += ' ZEROFILL';\n  }\n  return result;\n};\n\nNUMBER.prototype.validate = function(value) {\n  if (!Validator.isFloat(String(value))) {\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid ' + _.toLower(this.key), value));\n  }\n\n  return true;\n};\n\nObject.defineProperty(NUMBER.prototype, 'UNSIGNED', {\n  get() {\n    this._unsigned = true;\n    this.options.unsigned = true;\n    return this;\n  }\n});\nObject.defineProperty(NUMBER.prototype, 'ZEROFILL', {\n  get() {\n    this._zerofill = true;\n    this.options.zerofill = true;\n    return this;\n  }\n});\n\nfunction INTEGER(length) {\n  const options = typeof length === 'object' && length || {length};\n  if (!(this instanceof INTEGER)) return new INTEGER(options);\n  NUMBER.call(this, options);\n}\ninherits(INTEGER, NUMBER);\n\nINTEGER.prototype.key = INTEGER.key = 'INTEGER';\nINTEGER.prototype.validate = function validate(value) {\n  if (!Validator.isInt(String(value))) {\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid ' + _.toLower(this.key), value));\n  }\n\n  return true;\n};\n\nfunction TINYINT(length) {\n  const options = typeof length === 'object' && length || {length};\n  if (!(this instanceof TINYINT)) return new TINYINT(options);\n  NUMBER.call(this, options);\n}\ninherits(TINYINT, INTEGER);\n\nTINYINT.prototype.key = TINYINT.key = 'TINYINT';\n\nfunction SMALLINT(length) {\n  const options = typeof length === 'object' && length || {length};\n  if (!(this instanceof SMALLINT)) return new SMALLINT(options);\n  NUMBER.call(this, options);\n}\ninherits(SMALLINT, INTEGER);\n\nSMALLINT.prototype.key = SMALLINT.key = 'SMALLINT';\n\nfunction MEDIUMINT(length) {\n  const options = typeof length === 'object' && length || {length};\n  if (!(this instanceof MEDIUMINT)) return new MEDIUMINT(options);\n  NUMBER.call(this, options);\n}\ninherits(MEDIUMINT, INTEGER);\n\nMEDIUMINT.prototype.key = MEDIUMINT.key = 'MEDIUMINT';\n\nfunction BIGINT(length) {\n  const options = typeof length === 'object' && length || {length};\n  if (!(this instanceof BIGINT)) return new BIGINT(options);\n  NUMBER.call(this, options);\n}\ninherits(BIGINT, INTEGER);\n\nBIGINT.prototype.key = BIGINT.key = 'BIGINT';\n\nfunction FLOAT(length, decimals) {\n  const options = typeof length === 'object' && length || {length, decimals};\n  if (!(this instanceof FLOAT)) return new FLOAT(options);\n  NUMBER.call(this, options);\n}\ninherits(FLOAT, NUMBER);\n\nFLOAT.prototype.key = FLOAT.key = 'FLOAT';\nFLOAT.prototype.validate = function validate(value) {\n  if (!Validator.isFloat(String(value))) {\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid float', value));\n  }\n\n  return true;\n};\n\nfunction REAL(length, decimals) {\n  const options = typeof length === 'object' && length || {length, decimals};\n  if (!(this instanceof REAL)) return new REAL(options);\n  NUMBER.call(this, options);\n}\ninherits(REAL, NUMBER);\n\nREAL.prototype.key = REAL.key = 'REAL';\n\nfunction DOUBLE(length, decimals) {\n  const options = typeof length === 'object' && length || {length, decimals};\n  if (!(this instanceof DOUBLE)) return new DOUBLE(options);\n  NUMBER.call(this, options);\n}\ninherits(DOUBLE, NUMBER);\n\nDOUBLE.prototype.key = DOUBLE.key = 'DOUBLE PRECISION';\n\nfunction DECIMAL(precision, scale) {\n  const options = typeof precision === 'object' && precision || {precision, scale};\n  if (!(this instanceof DECIMAL)) return new DECIMAL(options);\n  NUMBER.call(this, options);\n}\ninherits(DECIMAL, NUMBER);\n\nDECIMAL.prototype.key = DECIMAL.key = 'DECIMAL';\nDECIMAL.prototype.toSql = function toSql() {\n\n  if (this._precision || this._scale) {\n    return 'DECIMAL(' + [this._precision, this._scale].filter(_.identity).join(',') + ')';\n  }\n\n  return 'DECIMAL';\n};\nDECIMAL.prototype.validate = function validate(value) {\n  if (!Validator.isDecimal(String(value))) {\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid decimal', value));\n  }\n\n  return true;\n};\n\nfor (const floating of [FLOAT, DOUBLE, REAL]) {\n  floating.prototype.escape = false;\n  floating.prototype._stringify = function _stringify(value) {\n    if (isNaN(value)) {\n      return \"'NaN'\";\n    } else if (!isFinite(value)) {\n      const sign = value < 0 ? '-' : '';\n      return \"'\" + sign + \"Infinity'\";\n    }\n\n    return value;\n  };\n}\n\nfunction BOOLEAN() {\n  if (!(this instanceof BOOLEAN)) return new BOOLEAN();\n}\ninherits(BOOLEAN, ABSTRACT);\n\nBOOLEAN.prototype.key = BOOLEAN.key = 'BOOLEAN';\nBOOLEAN.prototype.toSql = function toSql() {\n  return 'TINYINT(1)';\n};\nBOOLEAN.prototype.validate = function validate(value) {\n  if (!Validator.isBoolean(String(value))) {\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid boolean', value));\n  }\n\n  return true;\n};\n\nBOOLEAN.prototype._sanitize = function _sanitize(value) {\n  if (value !== null && value !== undefined) {\n    if (Buffer.isBuffer(value) && value.length === 1) {\n      // Bit fields are returned as buffers\n      value = value[0];\n    }\n\n    if (_.isString(value)) {\n      // Only take action on valid boolean strings.\n      value = value === 'true' ? true : value === 'false' ? false : value;\n\n    } else if (_.isNumber(value)) {\n      // Only take action on valid boolean integers.\n      value = value === 1 ? true : value === 0 ? false : value;\n    }\n  }\n\n  return value;\n};\nBOOLEAN.parse = BOOLEAN.prototype._sanitize;\n\nfunction TIME() {\n  if (!(this instanceof TIME)) return new TIME();\n}\ninherits(TIME, ABSTRACT);\n\nTIME.prototype.key = TIME.key = 'TIME';\nTIME.prototype.toSql = function toSql() {\n  return 'TIME';\n};\n\nfunction DATE(length) {\n  const options = typeof length === 'object' && length || {length};\n\n  if (!(this instanceof DATE)) return new DATE(options);\n\n  this.options = options;\n  this._length = options.length || '';\n}\ninherits(DATE, ABSTRACT);\n\nDATE.prototype.key = DATE.key = 'DATE';\nDATE.prototype.toSql = function toSql() {\n  return 'DATETIME';\n};\nDATE.prototype.validate = function validate(value) {\n  if (!Validator.isDate(String(value))) {\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid date', value));\n  }\n\n  return true;\n};\n\nDATE.prototype._sanitize = function _sanitize(value, options) {\n  if ((!options || options && !options.raw) && !(value instanceof Date) && !!value) {\n    return new Date(value);\n  }\n\n  return value;\n};\n\nDATE.prototype._isChanged = function _isChanged(value, originalValue) {\n  if (\n    originalValue && !!value &&\n    (\n      value === originalValue ||\n      value instanceof Date && originalValue instanceof Date && value.getTime() === originalValue.getTime()\n    )\n  ) {\n    return false;\n  }\n\n  // not changed when set to same empty value\n  if (!originalValue && !value && originalValue === value) {\n    return false;\n  }\n\n  return true;\n};\n\nDATE.prototype._applyTimezone = function _applyTimezone(date, options) {\n  if (options.timezone) {\n    if (momentTz.tz.zone(options.timezone)) {\n      date = momentTz(date).tz(options.timezone);\n    } else {\n      date = moment(date).utcOffset(options.timezone);\n    }\n  } else {\n    date = momentTz(date);\n  }\n\n  return date;\n};\n\nDATE.prototype._stringify = function _stringify(date, options) {\n  date = this._applyTimezone(date, options);\n\n  // Z here means current timezone, _not_ UTC\n  return date.format('YYYY-MM-DD HH:mm:ss.SSS Z');\n};\n\nfunction DATEONLY() {\n  if (!(this instanceof DATEONLY)) return new DATEONLY();\n}\nutil.inherits(DATEONLY, ABSTRACT);\n\nDATEONLY.prototype.key = DATEONLY.key = 'DATEONLY';\nDATEONLY.prototype.toSql = function() {\n  return 'DATE';\n};\n\nDATEONLY.prototype._stringify = function _stringify(date) {\n  return moment(date).format('YYYY-MM-DD');\n};\n\nDATEONLY.prototype._sanitize = function _sanitize(value, options) {\n  if ((!options || options && !options.raw) && !!value) {\n    return moment(value).format('YYYY-MM-DD');\n  }\n\n  return value;\n};\n\nDATEONLY.prototype._isChanged = function _isChanged(value, originalValue) {\n  if (originalValue && !!value && originalValue === value) {\n    return false;\n  }\n\n  // not changed when set to same empty value\n  if (!originalValue && !value && originalValue === value) {\n    return false;\n  }\n\n  return true;\n};\n\nfunction HSTORE() {\n  if (!(this instanceof HSTORE)) return new HSTORE();\n}\ninherits(HSTORE, ABSTRACT);\n\nHSTORE.prototype.key = HSTORE.key = 'HSTORE';\nHSTORE.prototype.validate = function validate(value) {\n  if (!_.isPlainObject(value)) {\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid hstore', value));\n  }\n\n  return true;\n};\n\nfunction JSONTYPE() {\n  if (!(this instanceof JSONTYPE)) return new JSONTYPE();\n}\ninherits(JSONTYPE, ABSTRACT);\n\nJSONTYPE.prototype.key = JSONTYPE.key = 'JSON';\nJSONTYPE.prototype.validate = function validate() {\n  return true;\n};\n\nJSONTYPE.prototype._stringify = function _stringify(value) {\n  return JSON.stringify(value);\n};\n\nfunction JSONB() {\n  if (!(this instanceof JSONB)) return new JSONB();\n  JSONTYPE.call(this);\n}\ninherits(JSONB, JSONTYPE);\n\nJSONB.prototype.key = JSONB.key = 'JSONB';\n\nfunction NOW() {\n  if (!(this instanceof NOW)) return new NOW();\n}\ninherits(NOW, ABSTRACT);\n\nNOW.prototype.key = NOW.key = 'NOW';\n\nfunction BLOB(length) {\n  const options = typeof length === 'object' && length || {length};\n  if (!(this instanceof BLOB)) return new BLOB(options);\n  this.options = options;\n  this._length = options.length || '';\n}\ninherits(BLOB, ABSTRACT);\n\nBLOB.prototype.key = BLOB.key = 'BLOB';\nBLOB.prototype.toSql = function toSql() {\n  switch (this._length.toLowerCase()) {\n    case 'tiny':\n      return 'TINYBLOB';\n    case 'medium':\n      return 'MEDIUMBLOB';\n    case 'long':\n      return 'LONGBLOB';\n    default:\n      return this.key;\n  }\n};\nBLOB.prototype.validate = function validate(value) {\n  if (!_.isString(value) && !Buffer.isBuffer(value)) {\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid blob', value));\n  }\n\n  return true;\n};\n\nBLOB.prototype.escape = false;\nBLOB.prototype._stringify = function _stringify(value) {\n  if (!Buffer.isBuffer(value)) {\n    if (Array.isArray(value)) {\n      value = new Buffer(value);\n    } else {\n      value = new Buffer(value.toString());\n    }\n  }\n  const hex = value.toString('hex');\n\n  return this._hexify(hex);\n};\n\nBLOB.prototype._hexify = function _hexify(hex) {\n  return \"X'\" + hex + \"'\";\n};\n\nfunction RANGE(subtype) {\n  const options = _.isPlainObject(subtype) ? subtype : {subtype};\n\n  if (!options.subtype) options.subtype = new INTEGER();\n\n  if (_.isFunction(options.subtype)) {\n    options.subtype = new options.subtype();\n  }\n\n  if (!(this instanceof RANGE)) return new RANGE(options);\n\n  this._subtype = options.subtype.key;\n  this.options = options;\n}\ninherits(RANGE, ABSTRACT);\n\nconst pgRangeSubtypes = {\n  integer: 'int4range',\n  bigint: 'int8range',\n  decimal: 'numrange',\n  dateonly: 'daterange',\n  date: 'tstzrange',\n  datenotz: 'tsrange'\n};\n\nconst pgRangeCastTypes = {\n  integer: 'integer',\n  bigint: 'bigint',\n  decimal: 'numeric',\n  dateonly: 'date',\n  date: 'timestamptz',\n  datenotz: 'timestamp'\n};\n\nRANGE.prototype.key = RANGE.key = 'RANGE';\nRANGE.prototype.toSql = function toSql() {\n  return pgRangeSubtypes[this._subtype.toLowerCase()];\n};\nRANGE.prototype.toCastType = function toCastType() {\n  return pgRangeCastTypes[this._subtype.toLowerCase()];\n};\nRANGE.prototype.validate = function validate(value) {\n  if (_.isPlainObject(value) && value.inclusive) {\n    value = value.inclusive;\n  }\n\n  if (!_.isArray(value)) {\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid range', value));\n  }\n\n  if (value.length !== 2) {\n    throw new sequelizeErrors.ValidationError('A range must be an array with two elements');\n  }\n\n  return true;\n};\n\nfunction UUID() {\n  if (!(this instanceof UUID)) return new UUID();\n}\ninherits(UUID, ABSTRACT);\n\nUUID.prototype.key = UUID.key = 'UUID';\nUUID.prototype.validate = function validate(value, options) {\n  if (!_.isString(value) || !Validator.isUUID(value) && (!options || !options.acceptStrings)) {\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid uuid', value));\n  }\n\n  return true;\n};\n\nfunction UUIDV1() {\n  if (!(this instanceof UUIDV1)) return new UUIDV1();\n}\ninherits(UUIDV1, ABSTRACT);\n\nUUIDV1.prototype.key = UUIDV1.key = 'UUIDV1';\nUUIDV1.prototype.validate = function validate(value, options) {\n  if (!_.isString(value) || !Validator.isUUID(value) && (!options || !options.acceptStrings)) {\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid uuid', value));\n  }\n\n  return true;\n};\n\nfunction UUIDV4() {\n  if (!(this instanceof UUIDV4)) return new UUIDV4();\n}\ninherits(UUIDV4, ABSTRACT);\n\nUUIDV4.prototype.key = UUIDV4.key = 'UUIDV4';\nUUIDV4.prototype.validate = function validate(value, options) {\n  if (!_.isString(value) || !Validator.isUUID(value, 4) && (!options || !options.acceptStrings)) {\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid uuidv4', value));\n  }\n\n  return true;\n};\n\nfunction VIRTUAL(ReturnType, fields) {\n  if (!(this instanceof VIRTUAL)) return new VIRTUAL(ReturnType, fields);\n  if (typeof ReturnType === 'function') ReturnType = new ReturnType();\n\n  this.returnType = ReturnType;\n  this.fields = fields;\n}\ninherits(VIRTUAL, ABSTRACT);\n\nVIRTUAL.prototype.key = VIRTUAL.key = 'VIRTUAL';\n\nfunction ENUM(value) {\n  const options = typeof value === 'object' && !Array.isArray(value) && value || {\n    values: Array.prototype.slice.call(arguments).reduce((result, element) => {\n      return result.concat(Array.isArray(element) ? element : [element]);\n    }, [])\n  };\n  if (!(this instanceof ENUM)) return new ENUM(options);\n  this.values = options.values;\n  this.options = options;\n}\ninherits(ENUM, ABSTRACT);\n\nENUM.prototype.key = ENUM.key = 'ENUM';\nENUM.prototype.validate = function validate(value) {\n  if (!_.includes(this.values, value)) {\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid choice in %j', value, this.values));\n  }\n\n  return true;\n};\n\nfunction ARRAY(type) {\n  const options = _.isPlainObject(type) ? type : {type};\n  if (!(this instanceof ARRAY)) return new ARRAY(options);\n  this.type = typeof options.type === 'function' ? new options.type() : options.type;\n}\ninherits(ARRAY, ABSTRACT);\n\nARRAY.prototype.key = ARRAY.key = 'ARRAY';\nARRAY.prototype.toSql = function toSql() {\n  return this.type.toSql() + '[]';\n};\nARRAY.prototype.validate = function validate(value) {\n  if (!_.isArray(value)) {\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid array', value));\n  }\n\n  return true;\n};\nARRAY.is = function is(obj, type) {\n  return obj instanceof ARRAY && obj.type instanceof type;\n};\n\nconst helpers = {\n  BINARY: [STRING, CHAR],\n  UNSIGNED: [NUMBER, TINYINT, SMALLINT, MEDIUMINT, INTEGER, BIGINT, FLOAT, DOUBLE, REAL, DECIMAL],\n  ZEROFILL: [NUMBER, TINYINT, SMALLINT, MEDIUMINT, INTEGER, BIGINT, FLOAT, DOUBLE, REAL, DECIMAL],\n  PRECISION: [DECIMAL],\n  SCALE: [DECIMAL]\n};\n\nfunction GEOMETRY(type, srid) {\n  const options = _.isPlainObject(type) ? type : {type, srid};\n\n  if (!(this instanceof GEOMETRY)) return new GEOMETRY(options);\n\n  this.options = options;\n  this.type = options.type;\n  this.srid = options.srid;\n}\ninherits(GEOMETRY, ABSTRACT);\n\nGEOMETRY.prototype.key = GEOMETRY.key = 'GEOMETRY';\n\nGEOMETRY.prototype.escape = false;\nGEOMETRY.prototype._stringify = function _stringify(value, options) {\n  return 'GeomFromText(' + options.escape(Wkt.convert(value)) + ')';\n};\n\nfunction GEOGRAPHY(type, srid) {\n  const options = _.isPlainObject(type) ? type : {type, srid};\n\n  if (!(this instanceof GEOGRAPHY)) return new GEOGRAPHY(options);\n\n  this.options = options;\n  this.type = options.type;\n  this.srid = options.srid;\n}\ninherits(GEOGRAPHY, ABSTRACT);\n\nGEOGRAPHY.prototype.key = GEOGRAPHY.key = 'GEOGRAPHY';\n\nGEOGRAPHY.prototype.escape = false;\nGEOGRAPHY.prototype._stringify = function _stringify(value, options) {\n  return 'GeomFromText(' + options.escape(Wkt.convert(value)) + ')';\n};\n\nfunction CIDR() {\n  if (!(this instanceof CIDR)) return new CIDR();\n}\ninherits(CIDR, ABSTRACT);\n\nCIDR.prototype.key = CIDR.key = 'CIDR';\n\nCIDR.prototype.validate = function validate(value) {\n  if (!_.isString(value) || !Validator.isIPRange(value)) {\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid CIDR', value));\n  }\n\n  return true;\n};\n\nfunction INET() {\n  if (!(this instanceof INET)) return new INET();\n}\ninherits(INET, ABSTRACT);\n\nINET.prototype.key = INET.key = 'INET';\n\nINET.prototype.validate = function validate(value) {\n  if (!_.isString(value) || !Validator.isIP(value)) {\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid INET', value));\n  }\n\n  return true;\n};\n\nfunction MACADDR() {\n  if (!(this instanceof MACADDR)) return new MACADDR();\n}\ninherits(MACADDR, ABSTRACT);\n\nMACADDR.prototype.key = MACADDR.key = 'MACADDR';\n\nMACADDR.prototype.validate = function validate(value) {\n  if (!_.isString(value) || !Validator.isMACAddress(value)) {\n    throw new sequelizeErrors.ValidationError(util.format('%j is not a valid MACADDR', value));\n  }\n\n  return true;\n};\n\nfor (const helper of Object.keys(helpers)) {\n  for (const DataType of helpers[helper]) {\n    if (!DataType[helper]) {\n      Object.defineProperty(DataType, helper, {\n        get() {\n          const dataType = new DataType();\n          if (typeof dataType[helper] === 'object') {\n            return dataType;\n          }\n          return dataType[helper].apply(dataType, arguments);\n        }\n      });\n    }\n  }\n}\n\n/**\n * A convenience class holding commonly used data types. The datatypes are used when defining a new model using `Sequelize.define`, like this:\n * ```js\n * sequelize.define('model', {\n *   column: DataTypes.INTEGER\n * })\n * ```\n * When defining a model you can just as easily pass a string as type, but often using the types defined here is beneficial. For example, using `DataTypes.BLOB`, mean\n * that that column will be returned as an instance of `Buffer` when being fetched by sequelize.\n *\n * To provide a length for the data type, you can invoke it like a function: `INTEGER(2)`\n *\n * Some data types have special properties that can be accessed in order to change the data type.\n * For example, to get an unsigned integer with zerofill you can do `DataTypes.INTEGER.UNSIGNED.ZEROFILL`.\n * The order you access the properties in do not matter, so `DataTypes.INTEGER.ZEROFILL.UNSIGNED` is fine as well.\n *\n * * All number types (`INTEGER`, `BIGINT`, `FLOAT`, `DOUBLE`, `REAL`, `DECIMAL`) expose the properties `UNSIGNED` and `ZEROFILL`\n * * The `CHAR` and `STRING` types expose the `BINARY` property\n *\n *\n * Three of the values provided here (`NOW`, `UUIDV1` and `UUIDV4`) are special default values, that should not be used to define types. Instead they are used as shorthands for\n * defining default values. For example, to get a uuid field with a default value generated following v1 of the UUID standard:\n * ```js`\n * sequelize.define('model',` {\n *   uuid: {\n *     type: DataTypes.UUID,\n *     defaultValue: DataTypes.UUIDV1,\n *     primaryKey: true\n *   }\n * })\n * ```\n * There may be times when you want to generate your own UUID conforming to some other algorithm. This is accomplished\n * using the defaultValue property as well, but instead of specifying one of the supplied UUID types, you return a value\n * from a function.\n * ```js\n * sequelize.define('model', {\n *   uuid: {\n *     type: DataTypes.UUID,\n *     defaultValue: function() {\n *       return generateMyId()\n *     },\n *     primaryKey: true\n *   }\n * })\n * ```\n *\n * @property {function(length=255: integer)} STRING A variable length string\n * @property {function(length=255: integer)} CHAR A fixed length string.\n * @property {function(length: string)} TEXT An unlimited length text column. Available lengths: `tiny`, `medium`, `long`\n * @property {function(length: integer)} TINYINT A 8 bit integer.\n * @property {function(length: integer)} SMALLINT A 16 bit integer.\n * @property {function(length: integer)} MEDIUMINT A 24 bit integer.\n * @property {function(length=255: integer)} INTEGER A 32 bit integer.\n * @property {function(length: integer)} BIGINT A 64 bit integer. Note: an attribute defined as `BIGINT` will be treated like a `string` due this [feature from node-postgres](https://github.com/brianc/node-postgres/pull/353) to prevent precision loss. To have this attribute as a `number`, this is a possible [workaround](https://github.com/sequelize/sequelize/issues/2383#issuecomment-58006083).\n * @property {function(length: integer, decimals: integer)} FLOAT Floating point number (4-byte precision).\n * @property {function(length: integer, decimals: integer)} DOUBLE Floating point number (8-byte precision).\n * @property {function(precision: integer, scale: integer)} DECIMAL Decimal number.\n * @property {function(length: integer, decimals: integer)} REAL Floating point number (4-byte precision).\n * @property {function} BOOLEAN A boolean / tinyint column, depending on dialect\n * @property {function(length: string)} BLOB Binary storage. Available lengths: `tiny`, `medium`, `long`\n * @property {function(values: string[])} ENUM An enumeration. `DataTypes.ENUM('value', 'another value')`.\n * @property {function(length: integer)} DATE A datetime column\n * @property {function} DATEONLY A date only column (no timestamp)\n * @property {function} TIME A time column\n * @property {function} NOW A default value of the current timestamp\n * @property {function} UUID A column storing a unique universal identifier. Use with `UUIDV1` or `UUIDV4` for default values.\n * @property {function} UUIDV1 A default unique universal identifier generated following the UUID v1 standard\n * @property {function} UUIDV4 A default unique universal identifier generated following the UUID v4 standard\n * @property {function} HSTORE A key / value store column. Only available in Postgres.\n * @property {function} JSON A JSON string column. Available in MySQL, Postgres and SQLite\n * @property {function} JSONB A binary storage JSON column. Only available in Postgres.\n * @property {function(type: DataTypes)} ARRAY An array of `type`, e.g. `DataTypes.ARRAY(DataTypes.DECIMAL)`. Only available in Postgres.\n * @property {function(type: DataTypes)} RANGE Range types are data types representing a range of values of some element type (called the range's subtype).\n * Only available in Postgres. See [the Postgres documentation](http://www.postgresql.org/docs/9.4/static/rangetypes.html) for more details\n * @property {function(type: string, srid: string)} GEOMETRY A column storing Geometry information. It is only available in PostgreSQL (with PostGIS) or MySQL.\n * In MySQL, allowable Geometry types are `POINT`, `LINESTRING`, `POLYGON`.\n *\n * GeoJSON is accepted as input and returned as output.\n * In PostGIS, the GeoJSON is parsed using the PostGIS function `ST_GeomFromGeoJSON`.\n * In MySQL it is parsed using the function `GeomFromText`.\n * Therefore, one can just follow the [GeoJSON spec](http://geojson.org/geojson-spec.html) for handling geometry objects.  See the following examples:\n *\n * ```js\n * // Create a new point:\n * const point = { type: 'Point', coordinates: [39.807222,-76.984722]};\n *\n * User.create({username: 'username', geometry: point });\n *\n * // Create a new linestring:\n * const line = { type: 'LineString', 'coordinates': [ [100.0, 0.0], [101.0, 1.0] ] };\n *\n * User.create({username: 'username', geometry: line });\n *\n * // Create a new polygon:\n * const polygon = { type: 'Polygon', coordinates: [\n *                 [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0],\n *                   [100.0, 1.0], [100.0, 0.0] ]\n *                 ]};\n *\n * User.create({username: 'username', geometry: polygon });\n\n * // Create a new point with a custom SRID:\n * const point = {\n *   type: 'Point',\n *   coordinates: [39.807222,-76.984722],\n *   crs: { type: 'name', properties: { name: 'EPSG:4326'} }\n * };\n *\n * User.create({username: 'username', geometry: point })\n * ```\n * @property {function(type: string, srid: string)} GEOGRAPHY A geography datatype represents two dimensional spacial objects in an elliptic coord system.\n * @property {function(returnType: DataTypes, fields: string[])} VIRTUAL A virtual value that is not stored in the DB. This could for example be useful if you want to provide a default value in your model that is returned to the user but not stored in the DB.\n *\n * You could also use it to validate a value before permuting and storing it. Checking password length before hashing it for example:\n * ```js\n * sequelize.define('user', {\n *   password_hash: DataTypes.STRING,\n *   password: {\n *     type: DataTypes.VIRTUAL,\n *     set: function (val) {\n *        // Remember to set the data value, otherwise it won't be validated\n *        this.setDataValue('password', val);\n *        this.setDataValue('password_hash', this.salt + val);\n *      },\n *      validate: {\n *         isLongEnough: function (val) {\n *           if (val.length < 7) {\n *             throw new Error(\"Please choose a longer password\")\n *          }\n *       }\n *     }\n *   }\n * })\n * ```\n * In the above code the password is stored plainly in the password field so it can be validated, but is never stored in the DB.\n *\n * VIRTUAL also takes a return type and dependency fields as arguments\n * If a virtual attribute is present in `attributes` it will automatically pull in the extra fields as well.\n * Return type is mostly useful for setups that rely on types like GraphQL.\n * ```js\n * {\n *   active: {\n *     type: new DataTypes.VIRTUAL(DataTypes.BOOLEAN, ['createdAt']),\n *     get: function() {\n *       return this.get('createdAt') > Date.now() - (7 * 24 * 60 * 60 * 1000)\n *     }\n *   }\n * }\n * ```\n */\nconst DataTypes = module.exports = {\n  ABSTRACT,\n  STRING,\n  CHAR,\n  TEXT,\n  NUMBER,\n  TINYINT,\n  SMALLINT,\n  MEDIUMINT,\n  INTEGER,\n  BIGINT,\n  FLOAT,\n  TIME,\n  DATE,\n  DATEONLY,\n  BOOLEAN,\n  NOW,\n  BLOB,\n  DECIMAL,\n  NUMERIC: DECIMAL,\n  UUID,\n  UUIDV1,\n  UUIDV4,\n  HSTORE,\n  JSON: JSONTYPE,\n  JSONB,\n  VIRTUAL,\n  ARRAY,\n  NONE: VIRTUAL,\n  ENUM,\n  RANGE,\n  REAL,\n  DOUBLE,\n  'DOUBLE PRECISION': DOUBLE,\n  GEOMETRY,\n  GEOGRAPHY,\n  CIDR,\n  INET,\n  MACADDR\n};\n\n_.each(DataTypes, dataType => {\n  dataType.types = {};\n});\n\nDataTypes.postgres = require('./dialects/postgres/data-types')(DataTypes);\nDataTypes.mysql = require('./dialects/mysql/data-types')(DataTypes);\nDataTypes.sqlite = require('./dialects/sqlite/data-types')(DataTypes);\nDataTypes.mssql = require('./dialects/mssql/data-types')(DataTypes);\n\nmodule.exports = DataTypes;\n"]},"metadata":{},"sourceType":"script"}
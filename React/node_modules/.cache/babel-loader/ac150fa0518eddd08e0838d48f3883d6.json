{"ast":null,"code":"'use strict';\n\nconst Net = require('net');\n\nconst Tls = require('tls');\n\nconst Timers = require('timers');\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst Readable = require('stream').Readable;\n\nconst Queue = require('denque');\n\nconst SqlString = require('sqlstring');\n\nconst LRU = require('lru-cache');\n\nconst PacketParser = require('./packet_parser.js');\n\nconst Packets = require('./packets/index.js');\n\nconst Commands = require('./commands/index.js');\n\nconst ConnectionConfig = require('./connection_config.js');\n\nconst CharsetToEncoding = require('./constants/charset_encodings.js');\n\nlet _connectionId = 0;\nlet convertNamedPlaceholders = null;\n\nclass Connection extends EventEmitter {\n  constructor(opts) {\n    super();\n    this.config = opts.config; // TODO: fill defaults\n    // if no params, connect to /var/lib/mysql/mysql.sock ( /tmp/mysql.sock on OSX )\n    // if host is given, connect to host:3306\n    // TODO: use `/usr/local/mysql/bin/mysql_config --socket` output? as default socketPath\n    // if there is no host/port and no socketPath parameters?\n\n    if (!opts.config.stream) {\n      if (opts.config.socketPath) {\n        this.stream = Net.connect(opts.config.socketPath);\n      } else {\n        this.stream = Net.connect(opts.config.port, opts.config.host);\n      } // if stream is a function, treat it as \"stream agent / factory\"\n\n    } else if (typeof opts.config.stream === 'function') {\n      this.stream = opts.config.stream(opts);\n    } else {\n      this.stream = opts.config.stream;\n    }\n\n    this._internalId = _connectionId++;\n    this._commands = new Queue();\n    this._command = null;\n    this._paused = false;\n    this._paused_packets = new Queue();\n    this._statements = new LRU({\n      max: this.config.maxPreparedStatements,\n      dispose: function (key, statement) {\n        statement.close();\n      }\n    });\n    this.serverCapabilityFlags = 0;\n    this.authorized = false;\n    this.sequenceId = 0;\n    this.compressedSequenceId = 0;\n    this.threadId = null;\n    this._handshakePacket = null;\n    this._fatalError = null;\n    this._protocolError = null;\n    this._outOfOrderPackets = [];\n    this.clientEncoding = CharsetToEncoding[this.config.charsetNumber];\n    this.stream.on('error', this._handleNetworkError.bind(this)); // see https://gist.github.com/khoomeister/4985691#use-that-instead-of-bind\n\n    this.packetParser = new PacketParser(p => {\n      this.handlePacket(p);\n    });\n    this.stream.on('data', data => {\n      if (this.connectTimeout) {\n        Timers.clearTimeout(this.connectTimeout);\n        this.connectTimeout = null;\n      }\n\n      this.packetParser.execute(data);\n    });\n    this.stream.on('close', () => {\n      // we need to set this flag everywhere where we want connection to close\n      if (this._closing) {\n        return;\n      }\n\n      if (!this._protocolError) {\n        // no particular error message before disconnect\n        this._protocolError = new Error('Connection lost: The server closed the connection.');\n        this._protocolError.fatal = true;\n        this._protocolError.code = 'PROTOCOL_CONNECTION_LOST';\n      }\n\n      this._notifyError(this._protocolError);\n    });\n    let handshakeCommand;\n\n    if (!this.config.isServer) {\n      handshakeCommand = new Commands.ClientHandshake(this.config.clientFlags);\n      handshakeCommand.on('end', () => {\n        // this happens when handshake finishes early and first packet is error\n        // and not server hello ( for example, 'Too many connactions' error)\n        if (!handshakeCommand.handshake) {\n          return;\n        }\n\n        this._handshakePacket = handshakeCommand.handshake;\n        this.threadId = handshakeCommand.handshake.connectionId;\n        this.emit('connect', handshakeCommand.handshake);\n      });\n      handshakeCommand.on('error', err => {\n        this._closing = true;\n\n        this._notifyError(err);\n      });\n      this.addCommand(handshakeCommand);\n    } // in case there was no initiall handshake but we need to read sting, assume it utf-8\n    // most common example: \"Too many connections\" error ( packet is sent immediately on connection attempt, we don't know server encoding yet)\n    // will be overwrittedn with actial encoding value as soon as server handshake packet is received\n\n\n    this.serverEncoding = 'utf8';\n\n    if (this.config.connectTimeout) {\n      const timeoutHandler = this._handleTimeoutError.bind(this);\n\n      this.connectTimeout = Timers.setTimeout(timeoutHandler, this.config.connectTimeout);\n    }\n  }\n\n  promise(promiseImpl) {\n    const PromiseConnection = require('../promise').PromiseConnection;\n\n    return new PromiseConnection(this, promiseImpl);\n  }\n\n  _addCommandClosedState(cmd) {\n    const err = new Error(\"Can't add new command when connection is in closed state\");\n    err.fatal = true;\n\n    if (cmd.onResult) {\n      cmd.onResult(err);\n    } else {\n      this.emit('error', err);\n    }\n  }\n\n  _handleFatalError(err) {\n    err.fatal = true; // stop receiving packets\n\n    this.stream.removeAllListeners('data');\n    this.addCommand = this._addCommandClosedState;\n\n    this.write = () => {\n      this.emit('error', new Error(\"Can't write in closed state\"));\n    };\n\n    this._notifyError(err);\n\n    this._fatalError = err;\n  }\n\n  _handleNetworkError(err) {\n    if (this.connectTimeout) {\n      Timers.clearTimeout(this.connectTimeout);\n      this.connectTimeout = null;\n    } // Do not throw an error when a connection ends with a RST,ACK packet\n\n\n    if (err.errno === 'ECONNRESET' && this._closing) {\n      return;\n    }\n\n    this._handleFatalError(err);\n  }\n\n  _handleTimeoutError() {\n    if (this.connectTimeout) {\n      Timers.clearTimeout(this.connectTimeout);\n      this.connectTimeout = null;\n    }\n\n    this.stream.destroy && this.stream.destroy();\n    const err = new Error('connect ETIMEDOUT');\n    err.errorno = 'ETIMEDOUT';\n    err.code = 'ETIMEDOUT';\n    err.syscall = 'connect';\n\n    this._handleNetworkError(err);\n  } // notify all commands in the queue and bubble error as connection \"error\"\n  // called on stream error or unexpected termination\n\n\n  _notifyError(err) {\n    // prevent from emitting 'PROTOCOL_CONNECTION_LOST' after EPIPE or ECONNRESET\n    if (this._fatalError) {\n      return;\n    }\n\n    let command; // if there is no active command, notify connection\n    // if there are commands and all of them have callbacks, pass error via callback\n\n    let bubbleErrorToConnection = !this._command;\n\n    if (this._command && this._command.onResult) {\n      this._command.onResult(err);\n\n      this._command = null; // connection handshake is special because we allow it to be implicit\n      // if error happened during handshake, but there are others commands in queue\n      // then bubble error to other commands and not to connection\n    } else if (!(this._command && this._command.constructor === Commands.ClientHandshake && this._commands.length > 0)) {\n      bubbleErrorToConnection = true;\n    }\n\n    while (command = this._commands.shift()) {\n      if (command.onResult) {\n        command.onResult(err);\n      } else {\n        bubbleErrorToConnection = true;\n      }\n    } // notify connection if some comands in the queue did not have callbacks\n    // or if this is pool connection ( so it can be removed from pool )\n\n\n    if (bubbleErrorToConnection || this._pool) {\n      this.emit('error', err);\n    }\n  }\n\n  write(buffer) {\n    this.stream.write(buffer, err => {\n      if (err) {\n        this._handleNetworkError(err);\n      }\n    });\n  } // http://dev.mysql.com/doc/internals/en/sequence-id.html\n  //\n  // The sequence-id is incremented with each packet and may wrap around.\n  // It starts at 0 and is reset to 0 when a new command\n  // begins in the Command Phase.\n  // http://dev.mysql.com/doc/internals/en/example-several-mysql-packets.html\n\n\n  _resetSequenceId() {\n    this.sequenceId = 0;\n    this.compressedSequenceId = 0;\n  }\n\n  _bumpCompressedSequenceId(numPackets) {\n    this.compressedSequenceId += numPackets;\n    this.compressedSequenceId %= 256;\n  }\n\n  _bumpSequenceId(numPackets) {\n    this.sequenceId += numPackets;\n    this.sequenceId %= 256;\n  }\n\n  writePacket(packet) {\n    const MAX_PACKET_LENGTH = 16777215;\n    const length = packet.length();\n    let chunk, offset, header;\n\n    if (length < MAX_PACKET_LENGTH) {\n      packet.writeHeader(this.sequenceId);\n\n      if (this.config.debug) {\n        // eslint-disable-next-line no-console\n        console.log(`${this._internalId} ${this.connectionId} <== ${this._command._commandName}#${this._command.stateName()}(${[this.sequenceId, packet._name, packet.length()].join(',')})`); // eslint-disable-next-line no-console\n\n        console.log(`${this._internalId} ${this.connectionId} <== ${packet.buffer.toString('hex')}`);\n      }\n\n      this._bumpSequenceId(1);\n\n      this.write(packet.buffer);\n    } else {\n      if (this.config.debug) {\n        // eslint-disable-next-line no-console\n        console.log(`${this._internalId} ${this.connectionId} <== Writing large packet, raw content not written:`); // eslint-disable-next-line no-console\n\n        console.log(`${this._internalId} ${this.connectionId} <== ${this._command._commandName}#${this._command.stateName()}(${[this.sequenceId, packet._name, packet.length()].join(',')})`);\n      }\n\n      for (offset = 4; offset < 4 + length; offset += MAX_PACKET_LENGTH) {\n        chunk = packet.buffer.slice(offset, offset + MAX_PACKET_LENGTH);\n\n        if (chunk.length === MAX_PACKET_LENGTH) {\n          header = Buffer.from([0xff, 0xff, 0xff, this.sequenceId]);\n        } else {\n          header = Buffer.from([chunk.length & 0xff, chunk.length >> 8 & 0xff, chunk.length >> 16 & 0xff, this.sequenceId]);\n        }\n\n        this._bumpSequenceId(1);\n\n        this.write(header);\n        this.write(chunk);\n      }\n    }\n  } // 0.11+ environment\n\n\n  startTLS(onSecure) {\n    if (this.config.debug) {\n      // eslint-disable-next-line no-console\n      console.log('Upgrading connection to TLS');\n    }\n\n    const secureContext = Tls.createSecureContext({\n      ca: this.config.ssl.ca,\n      cert: this.config.ssl.cert,\n      ciphers: this.config.ssl.ciphers,\n      key: this.config.ssl.key,\n      passphrase: this.config.ssl.passphrase,\n      minVersion: this.config.ssl.minVersion\n    });\n    const rejectUnauthorized = this.config.ssl.rejectUnauthorized;\n    let secureEstablished = false;\n    const secureSocket = new Tls.TLSSocket(this.stream, {\n      rejectUnauthorized: rejectUnauthorized,\n      requestCert: true,\n      secureContext: secureContext,\n      isServer: false\n    }); // error handler for secure socket\n\n    secureSocket.on('_tlsError', err => {\n      if (secureEstablished) {\n        this._handleNetworkError(err);\n      } else {\n        onSecure(err);\n      }\n    });\n    secureSocket.on('secure', () => {\n      secureEstablished = true;\n      onSecure(rejectUnauthorized ? secureSocket.ssl.verifyError() : null);\n    });\n    secureSocket.on('data', data => {\n      this.packetParser.execute(data);\n    });\n\n    this.write = buffer => {\n      secureSocket.write(buffer);\n    }; // start TLS communications\n\n\n    secureSocket._start();\n  }\n\n  pipe() {\n    if (this.stream instanceof Net.Stream) {\n      this.stream.ondata = (data, start, end) => {\n        this.packetParser.execute(data, start, end);\n      };\n    } else {\n      this.stream.on('data', data => {\n        this.packetParser.execute(data.parent, data.offset, data.offset + data.length);\n      });\n    }\n  }\n\n  protocolError(message, code) {\n    const err = new Error(message);\n    err.fatal = true;\n    err.code = code || 'PROTOCOL_ERROR';\n    this.emit('error', err);\n  }\n\n  handlePacket(packet) {\n    if (this._paused) {\n      this._paused_packets.push(packet);\n\n      return;\n    }\n\n    if (packet) {\n      if (this.sequenceId !== packet.sequenceId) {\n        const err = new Error(`Warning: got packets out of order. Expected ${this.sequenceId} but received ${packet.sequenceId}`);\n        err.expected = this.sequenceId;\n        err.received = packet.sequenceId;\n        this.emit('warn', err); // REVIEW\n        // eslint-disable-next-line no-console\n\n        console.error(err.message);\n      }\n\n      this._bumpSequenceId(packet.numPackets);\n    }\n\n    if (this.config.debug) {\n      if (packet) {\n        // eslint-disable-next-line no-console\n        console.log(` raw: ${packet.buffer.slice(packet.offset, packet.offset + packet.length()).toString('hex')}`); // eslint-disable-next-line no-console\n\n        console.trace();\n        const commandName = this._command ? this._command._commandName : '(no command)';\n        const stateName = this._command ? this._command.stateName() : '(no command)'; // eslint-disable-next-line no-console\n\n        console.log(`${this._internalId} ${this.connectionId} ==> ${commandName}#${stateName}(${[packet.sequenceId, packet.type(), packet.length()].join(',')})`);\n      }\n    }\n\n    if (!this._command) {\n      this.protocolError('Unexpected packet while no commands in the queue', 'PROTOCOL_UNEXPECTED_PACKET');\n      this.close();\n      return;\n    }\n\n    const done = this._command.execute(packet, this);\n\n    if (done) {\n      this._command = this._commands.shift();\n\n      if (this._command) {\n        this.sequenceId = 0;\n        this.compressedSequenceId = 0;\n        this.handlePacket();\n      }\n    }\n  }\n\n  addCommand(cmd) {\n    // this.compressedSequenceId = 0;\n    // this.sequenceId = 0;\n    if (this.config.debug) {\n      const commandName = cmd.constructor.name; // eslint-disable-next-line no-console\n\n      console.log(`Add command: ${commandName}`);\n      cmd._commandName = commandName;\n    }\n\n    if (!this._command) {\n      this._command = cmd;\n      this.handlePacket();\n    } else {\n      this._commands.push(cmd);\n    }\n\n    return cmd;\n  }\n\n  format(sql, values) {\n    if (typeof this.config.queryFormat === 'function') {\n      return this.config.queryFormat.call(this, sql, values, this.config.timezone);\n    }\n\n    const opts = {\n      sql: sql,\n      values: values\n    };\n\n    this._resolveNamedPlaceholders(opts);\n\n    return SqlString.format(opts.sql, opts.values, this.config.stringifyObjects, this.config.timezone);\n  }\n\n  escape(value) {\n    return SqlString.escape(value, false, this.config.timezone);\n  }\n\n  escapeId(value) {\n    return SqlString.escapeId(value, false);\n  }\n\n  raw(sql) {\n    return SqlString.raw(sql);\n  }\n\n  _resolveNamedPlaceholders(options) {\n    let unnamed;\n\n    if (this.config.namedPlaceholders || options.namedPlaceholders) {\n      if (convertNamedPlaceholders === null) {\n        convertNamedPlaceholders = require('named-placeholders')();\n      }\n\n      unnamed = convertNamedPlaceholders(options.sql, options.values);\n      options.sql = unnamed[0];\n      options.values = unnamed[1];\n    }\n  }\n\n  query(sql, values, cb) {\n    let cmdQuery;\n\n    if (sql.constructor === Commands.Query) {\n      cmdQuery = sql;\n    } else {\n      cmdQuery = Connection.createQuery(sql, values, cb, this.config);\n    }\n\n    this._resolveNamedPlaceholders(cmdQuery);\n\n    const rawSql = this.format(cmdQuery.sql, cmdQuery.values || []);\n    cmdQuery.sql = rawSql;\n    return this.addCommand(cmdQuery);\n  }\n\n  pause() {\n    this._paused = true;\n    this.stream.pause();\n  }\n\n  resume() {\n    let packet;\n    this._paused = false;\n\n    while (packet = this._paused_packets.shift()) {\n      this.handlePacket(packet); // don't resume if packet hander paused connection\n\n      if (this._paused) {\n        return;\n      }\n    }\n\n    this.stream.resume();\n  } // TODO: named placeholders support\n\n\n  prepare(options, cb) {\n    if (typeof options === 'string') {\n      options = {\n        sql: options\n      };\n    }\n\n    return this.addCommand(new Commands.Prepare(options, cb));\n  }\n\n  unprepare(sql) {\n    let options = {};\n\n    if (typeof sql === 'object') {\n      options = sql;\n    } else {\n      options.sql = sql;\n    }\n\n    const key = Connection.statementKey(options);\n\n    const stmt = this._statements.get(key);\n\n    if (stmt) {\n      this._statements.del(key);\n\n      stmt.close();\n    }\n\n    return stmt;\n  }\n\n  execute(sql, values, cb) {\n    let options = {};\n\n    if (typeof sql === 'object') {\n      // execute(options, cb)\n      options = sql;\n\n      if (typeof values === 'function') {\n        cb = values;\n      } else {\n        options.values = options.values || values;\n      }\n    } else if (typeof values === 'function') {\n      // execute(sql, cb)\n      cb = values;\n      options.sql = sql;\n      options.values = undefined;\n    } else {\n      // execute(sql, values, cb)\n      options.sql = sql;\n      options.values = values;\n    }\n\n    this._resolveNamedPlaceholders(options); // check for values containing undefined\n\n\n    if (options.values) {\n      //If namedPlaceholder is not enabled and object is passed as bind parameters\n      if (!Array.isArray(options.values)) {\n        throw new TypeError('Bind parameters must be array if namedPlaceholders parameter is not enabled');\n      }\n\n      options.values.forEach(val => {\n        //If namedPlaceholder is not enabled and object is passed as bind parameters\n        if (!Array.isArray(options.values)) {\n          throw new TypeError('Bind parameters must be array if namedPlaceholders parameter is not enabled');\n        }\n\n        if (val === undefined) {\n          throw new TypeError('Bind parameters must not contain undefined. To pass SQL NULL specify JS null');\n        }\n\n        if (typeof val === 'function') {\n          throw new TypeError('Bind parameters must not contain function(s). To pass the body of a function as a string call .toString() first');\n        }\n      });\n    }\n\n    const executeCommand = new Commands.Execute(options, cb);\n    const prepareCommand = new Commands.Prepare(options, (err, stmt) => {\n      if (err) {\n        // skip execute command if prepare failed, we have main\n        // combined callback here\n        executeCommand.start = function () {\n          return null;\n        };\n\n        if (cb) {\n          cb(err);\n        } else {\n          executeCommand.emit('error', err);\n        }\n\n        executeCommand.emit('end');\n        return;\n      }\n\n      executeCommand.statement = stmt;\n    });\n    this.addCommand(prepareCommand);\n    this.addCommand(executeCommand);\n    return executeCommand;\n  }\n\n  changeUser(options, callback) {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    const charsetNumber = options.charset ? ConnectionConfig.getCharsetNumber(options.charset) : this.config.charsetNumber;\n    return this.addCommand(new Commands.ChangeUser({\n      user: options.user || this.config.user,\n      password: options.password || this.config.password,\n      passwordSha1: options.passwordSha1 || this.config.passwordSha1,\n      database: options.database || this.config.database,\n      timeout: options.timeout,\n      charsetNumber: charsetNumber,\n      currentConfig: this.config\n    }, err => {\n      if (err) {\n        err.fatal = true;\n      }\n\n      if (callback) {\n        callback(err);\n      }\n    }));\n  } // transaction helpers\n\n\n  beginTransaction(cb) {\n    return this.query('START TRANSACTION', cb);\n  }\n\n  commit(cb) {\n    return this.query('COMMIT', cb);\n  }\n\n  rollback(cb) {\n    return this.query('ROLLBACK', cb);\n  }\n\n  ping(cb) {\n    return this.addCommand(new Commands.Ping(cb));\n  }\n\n  _registerSlave(opts, cb) {\n    return this.addCommand(new Commands.RegisterSlave(opts, cb));\n  }\n\n  _binlogDump(opts, cb) {\n    return this.addCommand(new Commands.BinlogDump(opts, cb));\n  } // currently just alias to close\n\n\n  destroy() {\n    this.close();\n  }\n\n  close() {\n    if (this.connectTimeout) {\n      Timers.clearTimeout(this.connectTimeout);\n      this.connectTimeout = null;\n    }\n\n    this._closing = true;\n    this.stream.end();\n    this.addCommand = this._addCommandClosedState;\n  }\n\n  createBinlogStream(opts) {\n    // TODO: create proper stream class\n    // TODO: use through2\n    let test = 1;\n    const stream = new Readable({\n      objectMode: true\n    });\n\n    stream._read = function () {\n      return {\n        data: test++\n      };\n    };\n\n    this._registerSlave(opts, () => {\n      const dumpCmd = this._binlogDump(opts);\n\n      dumpCmd.on('event', ev => {\n        stream.push(ev);\n      });\n      dumpCmd.on('eof', () => {\n        stream.push(null); // if non-blocking, then close stream to prevent errors\n\n        if (opts.flags && opts.flags & 0x01) {\n          this.close();\n        }\n      }); // TODO: pipe errors as well\n    });\n\n    return stream;\n  }\n\n  connect(cb) {\n    if (!cb) {\n      return;\n    }\n\n    let connectCalled = 0;\n\n    function callbackOnce(isErrorHandler) {\n      return function (param) {\n        if (!connectCalled) {\n          if (isErrorHandler) {\n            cb(param);\n          } else {\n            cb(null, param);\n          }\n        }\n\n        connectCalled = 1;\n      };\n    }\n\n    this.once('error', callbackOnce(true));\n    this.once('connect', callbackOnce(false));\n  } // ===================================\n  // outgoing server connection methods\n  // ===================================\n\n\n  writeColumns(columns) {\n    this.writePacket(Packets.ResultSetHeader.toPacket(columns.length));\n    columns.forEach(column => {\n      this.writePacket(Packets.ColumnDefinition.toPacket(column, this.serverConfig.encoding));\n    });\n    this.writeEof();\n  } // row is array of columns, not hash\n\n\n  writeTextRow(column) {\n    this.writePacket(Packets.TextRow.toPacket(column, this.serverConfig.encoding));\n  }\n\n  writeTextResult(rows, columns) {\n    this.writeColumns(columns);\n    rows.forEach(row => {\n      const arrayRow = new Array(columns.length);\n      columns.forEach(column => {\n        arrayRow.push(row[column.name]);\n      });\n      this.writeTextRow(arrayRow);\n    });\n    this.writeEof();\n  }\n\n  writeEof(warnings, statusFlags) {\n    this.writePacket(Packets.EOF.toPacket(warnings, statusFlags));\n  }\n\n  writeOk(args) {\n    if (!args) {\n      args = {\n        affectedRows: 0\n      };\n    }\n\n    this.writePacket(Packets.OK.toPacket(args, this.serverConfig.encoding));\n  }\n\n  writeError(args) {\n    // if we want to send error before initial hello was sent, use default encoding\n    const encoding = this.serverConfig ? this.serverConfig.encoding : 'cesu8';\n    this.writePacket(Packets.Error.toPacket(args, encoding));\n  }\n\n  serverHandshake(args) {\n    this.serverConfig = args;\n    this.serverConfig.encoding = CharsetToEncoding[this.serverConfig.characterSet];\n    return this.addCommand(new Commands.ServerHandshake(args));\n  } // ===============================================================\n\n\n  end(callback) {\n    if (this.config.isServer) {\n      this._closing = true;\n      const quitCmd = new EventEmitter();\n      setImmediate(() => {\n        this.stream.end();\n        quitCmd.emit('end');\n      });\n      return quitCmd;\n    } // trigger error if more commands enqueued after end command\n\n\n    const quitCmd = this.addCommand(new Commands.Quit(callback));\n    this.addCommand = this._addCommandClosedState;\n    return quitCmd;\n  }\n\n  static createQuery(sql, values, cb, config) {\n    let options = {\n      rowsAsArray: config.rowsAsArray\n    };\n\n    if (typeof sql === 'object') {\n      // query(options, cb)\n      options = sql;\n\n      if (typeof values === 'function') {\n        cb = values;\n      } else if (values !== undefined) {\n        options.values = values;\n      }\n    } else if (typeof values === 'function') {\n      // query(sql, cb)\n      cb = values;\n      options.sql = sql;\n      options.values = undefined;\n    } else {\n      // query(sql, values, cb)\n      options.sql = sql;\n      options.values = values;\n    }\n\n    return new Commands.Query(options, cb);\n  }\n\n  static statementKey(options) {\n    return `${typeof options.nestTables}/${options.nestTables}/${options.rowsAsArray}${options.sql}`;\n  }\n\n}\n\nif (Tls.TLSSocket) {// not supported\n} else {\n  Connection.prototype.startTLS = function _startTLS(onSecure) {\n    if (this.config.debug) {\n      // eslint-disable-next-line no-console\n      console.log('Upgrading connection to TLS');\n    }\n\n    const crypto = require('crypto');\n\n    const config = this.config;\n    const stream = this.stream;\n    const rejectUnauthorized = this.config.ssl.rejectUnauthorized;\n    const credentials = crypto.createCredentials({\n      key: config.ssl.key,\n      cert: config.ssl.cert,\n      passphrase: config.ssl.passphrase,\n      ca: config.ssl.ca,\n      ciphers: config.ssl.ciphers\n    });\n    const securePair = Tls.createSecurePair(credentials, false, true, rejectUnauthorized);\n\n    if (stream.ondata) {\n      stream.ondata = null;\n    }\n\n    stream.removeAllListeners('data');\n    stream.pipe(securePair.encrypted);\n    securePair.encrypted.pipe(stream);\n    securePair.cleartext.on('data', data => {\n      this.packetParser.execute(data);\n    });\n\n    this.write = function (buffer) {\n      securePair.cleartext.write(buffer);\n    };\n\n    securePair.on('secure', () => {\n      onSecure(rejectUnauthorized ? securePair.ssl.verifyError() : null);\n    });\n  };\n}\n\nmodule.exports = Connection;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/mysql2/lib/connection.js"],"names":["Net","require","Tls","Timers","EventEmitter","Readable","Queue","SqlString","LRU","PacketParser","Packets","Commands","ConnectionConfig","CharsetToEncoding","_connectionId","convertNamedPlaceholders","Connection","constructor","opts","config","stream","socketPath","connect","port","host","_internalId","_commands","_command","_paused","_paused_packets","_statements","max","maxPreparedStatements","dispose","key","statement","close","serverCapabilityFlags","authorized","sequenceId","compressedSequenceId","threadId","_handshakePacket","_fatalError","_protocolError","_outOfOrderPackets","clientEncoding","charsetNumber","on","_handleNetworkError","bind","packetParser","p","handlePacket","data","connectTimeout","clearTimeout","execute","_closing","Error","fatal","code","_notifyError","handshakeCommand","isServer","ClientHandshake","clientFlags","handshake","connectionId","emit","err","addCommand","serverEncoding","timeoutHandler","_handleTimeoutError","setTimeout","promise","promiseImpl","PromiseConnection","_addCommandClosedState","cmd","onResult","_handleFatalError","removeAllListeners","write","errno","destroy","errorno","syscall","command","bubbleErrorToConnection","length","shift","_pool","buffer","_resetSequenceId","_bumpCompressedSequenceId","numPackets","_bumpSequenceId","writePacket","packet","MAX_PACKET_LENGTH","chunk","offset","header","writeHeader","debug","console","log","_commandName","stateName","_name","join","toString","slice","Buffer","from","startTLS","onSecure","secureContext","createSecureContext","ca","ssl","cert","ciphers","passphrase","minVersion","rejectUnauthorized","secureEstablished","secureSocket","TLSSocket","requestCert","verifyError","_start","pipe","Stream","ondata","start","end","parent","protocolError","message","push","expected","received","error","trace","commandName","type","done","name","format","sql","values","queryFormat","call","timezone","_resolveNamedPlaceholders","stringifyObjects","escape","value","escapeId","raw","options","unnamed","namedPlaceholders","query","cb","cmdQuery","Query","createQuery","rawSql","pause","resume","prepare","Prepare","unprepare","statementKey","stmt","get","del","undefined","Array","isArray","TypeError","forEach","val","executeCommand","Execute","prepareCommand","changeUser","callback","charset","getCharsetNumber","ChangeUser","user","password","passwordSha1","database","timeout","currentConfig","beginTransaction","commit","rollback","ping","Ping","_registerSlave","RegisterSlave","_binlogDump","BinlogDump","createBinlogStream","test","objectMode","_read","dumpCmd","ev","flags","connectCalled","callbackOnce","isErrorHandler","param","once","writeColumns","columns","ResultSetHeader","toPacket","column","ColumnDefinition","serverConfig","encoding","writeEof","writeTextRow","TextRow","writeTextResult","rows","row","arrayRow","warnings","statusFlags","EOF","writeOk","args","affectedRows","OK","writeError","serverHandshake","characterSet","ServerHandshake","quitCmd","setImmediate","Quit","rowsAsArray","nestTables","prototype","_startTLS","crypto","credentials","createCredentials","securePair","createSecurePair","encrypted","cleartext","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAnB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,KAAD,CAAnB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMG,YAAY,GAAGH,OAAO,CAAC,QAAD,CAAP,CAAkBG,YAAvC;;AACA,MAAMC,QAAQ,GAAGJ,OAAO,CAAC,QAAD,CAAP,CAAkBI,QAAnC;;AACA,MAAMC,KAAK,GAAGL,OAAO,CAAC,QAAD,CAArB;;AACA,MAAMM,SAAS,GAAGN,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMO,GAAG,GAAGP,OAAO,CAAC,WAAD,CAAnB;;AAEA,MAAMQ,YAAY,GAAGR,OAAO,CAAC,oBAAD,CAA5B;;AACA,MAAMS,OAAO,GAAGT,OAAO,CAAC,oBAAD,CAAvB;;AACA,MAAMU,QAAQ,GAAGV,OAAO,CAAC,qBAAD,CAAxB;;AACA,MAAMW,gBAAgB,GAAGX,OAAO,CAAC,wBAAD,CAAhC;;AACA,MAAMY,iBAAiB,GAAGZ,OAAO,CAAC,kCAAD,CAAjC;;AAEA,IAAIa,aAAa,GAAG,CAApB;AAEA,IAAIC,wBAAwB,GAAG,IAA/B;;AAEA,MAAMC,UAAN,SAAyBZ,YAAzB,CAAsC;AACpCa,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChB;AACA,SAAKC,MAAL,GAAcD,IAAI,CAACC,MAAnB,CAFgB,CAGhB;AACA;AACA;AACA;AACA;;AACA,QAAI,CAACD,IAAI,CAACC,MAAL,CAAYC,MAAjB,EAAyB;AACvB,UAAIF,IAAI,CAACC,MAAL,CAAYE,UAAhB,EAA4B;AAC1B,aAAKD,MAAL,GAAcpB,GAAG,CAACsB,OAAJ,CAAYJ,IAAI,CAACC,MAAL,CAAYE,UAAxB,CAAd;AACD,OAFD,MAEO;AACL,aAAKD,MAAL,GAAcpB,GAAG,CAACsB,OAAJ,CACZJ,IAAI,CAACC,MAAL,CAAYI,IADA,EAEZL,IAAI,CAACC,MAAL,CAAYK,IAFA,CAAd;AAID,OARsB,CASvB;;AACD,KAVD,MAUO,IAAI,OAAON,IAAI,CAACC,MAAL,CAAYC,MAAnB,KAA8B,UAAlC,EAA+C;AACpD,WAAKA,MAAL,GAAcF,IAAI,CAACC,MAAL,CAAYC,MAAZ,CAAmBF,IAAnB,CAAd;AACD,KAFM,MAEA;AACL,WAAKE,MAAL,GAAcF,IAAI,CAACC,MAAL,CAAYC,MAA1B;AACD;;AACD,SAAKK,WAAL,GAAmBX,aAAa,EAAhC;AACA,SAAKY,SAAL,GAAiB,IAAIpB,KAAJ,EAAjB;AACA,SAAKqB,QAAL,GAAgB,IAAhB;AACA,SAAKC,OAAL,GAAe,KAAf;AACA,SAAKC,eAAL,GAAuB,IAAIvB,KAAJ,EAAvB;AACA,SAAKwB,WAAL,GAAmB,IAAItB,GAAJ,CAAQ;AACzBuB,MAAAA,GAAG,EAAE,KAAKZ,MAAL,CAAYa,qBADQ;AAEzBC,MAAAA,OAAO,EAAE,UAASC,GAAT,EAAcC,SAAd,EAAyB;AAChCA,QAAAA,SAAS,CAACC,KAAV;AACD;AAJwB,KAAR,CAAnB;AAMA,SAAKC,qBAAL,GAA6B,CAA7B;AACA,SAAKC,UAAL,GAAkB,KAAlB;AACA,SAAKC,UAAL,GAAkB,CAAlB;AACA,SAAKC,oBAAL,GAA4B,CAA5B;AACA,SAAKC,QAAL,GAAgB,IAAhB;AACA,SAAKC,gBAAL,GAAwB,IAAxB;AACA,SAAKC,WAAL,GAAmB,IAAnB;AACA,SAAKC,cAAL,GAAsB,IAAtB;AACA,SAAKC,kBAAL,GAA0B,EAA1B;AACA,SAAKC,cAAL,GAAsBjC,iBAAiB,CAAC,KAAKM,MAAL,CAAY4B,aAAb,CAAvC;AACA,SAAK3B,MAAL,CAAY4B,EAAZ,CAAe,OAAf,EAAwB,KAAKC,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B,CAAxB,EA5CgB,CA6ChB;;AACA,SAAKC,YAAL,GAAoB,IAAI1C,YAAJ,CAAiB2C,CAAC,IAAI;AACxC,WAAKC,YAAL,CAAkBD,CAAlB;AACD,KAFmB,CAApB;AAGA,SAAKhC,MAAL,CAAY4B,EAAZ,CAAe,MAAf,EAAuBM,IAAI,IAAI;AAC7B,UAAI,KAAKC,cAAT,EAAyB;AACvBpD,QAAAA,MAAM,CAACqD,YAAP,CAAoB,KAAKD,cAAzB;AACA,aAAKA,cAAL,GAAsB,IAAtB;AACD;;AACD,WAAKJ,YAAL,CAAkBM,OAAlB,CAA0BH,IAA1B;AACD,KAND;AAOA,SAAKlC,MAAL,CAAY4B,EAAZ,CAAe,OAAf,EAAwB,MAAM;AAC5B;AACA,UAAI,KAAKU,QAAT,EAAmB;AACjB;AACD;;AACD,UAAI,CAAC,KAAKd,cAAV,EAA0B;AACxB;AACA,aAAKA,cAAL,GAAsB,IAAIe,KAAJ,CACpB,oDADoB,CAAtB;AAGA,aAAKf,cAAL,CAAoBgB,KAApB,GAA4B,IAA5B;AACA,aAAKhB,cAAL,CAAoBiB,IAApB,GAA2B,0BAA3B;AACD;;AACD,WAAKC,YAAL,CAAkB,KAAKlB,cAAvB;AACD,KAdD;AAeA,QAAImB,gBAAJ;;AACA,QAAI,CAAC,KAAK5C,MAAL,CAAY6C,QAAjB,EAA2B;AACzBD,MAAAA,gBAAgB,GAAG,IAAIpD,QAAQ,CAACsD,eAAb,CAA6B,KAAK9C,MAAL,CAAY+C,WAAzC,CAAnB;AACAH,MAAAA,gBAAgB,CAACf,EAAjB,CAAoB,KAApB,EAA2B,MAAM;AAC/B;AACA;AACA,YAAI,CAACe,gBAAgB,CAACI,SAAtB,EAAiC;AAC/B;AACD;;AACD,aAAKzB,gBAAL,GAAwBqB,gBAAgB,CAACI,SAAzC;AACA,aAAK1B,QAAL,GAAgBsB,gBAAgB,CAACI,SAAjB,CAA2BC,YAA3C;AACA,aAAKC,IAAL,CAAU,SAAV,EAAqBN,gBAAgB,CAACI,SAAtC;AACD,OATD;AAUAJ,MAAAA,gBAAgB,CAACf,EAAjB,CAAoB,OAApB,EAA6BsB,GAAG,IAAI;AAClC,aAAKZ,QAAL,GAAgB,IAAhB;;AACA,aAAKI,YAAL,CAAkBQ,GAAlB;AACD,OAHD;AAIA,WAAKC,UAAL,CAAgBR,gBAAhB;AACD,KAzFe,CA0FhB;AACA;AACA;;;AACA,SAAKS,cAAL,GAAsB,MAAtB;;AACA,QAAI,KAAKrD,MAAL,CAAYoC,cAAhB,EAAgC;AAC9B,YAAMkB,cAAc,GAAG,KAAKC,mBAAL,CAAyBxB,IAAzB,CAA8B,IAA9B,CAAvB;;AACA,WAAKK,cAAL,GAAsBpD,MAAM,CAACwE,UAAP,CACpBF,cADoB,EAEpB,KAAKtD,MAAL,CAAYoC,cAFQ,CAAtB;AAID;AACF;;AAEDqB,EAAAA,OAAO,CAACC,WAAD,EAAc;AACnB,UAAMC,iBAAiB,GAAG7E,OAAO,CAAC,YAAD,CAAP,CAAsB6E,iBAAhD;;AACA,WAAO,IAAIA,iBAAJ,CAAsB,IAAtB,EAA4BD,WAA5B,CAAP;AACD;;AAEDE,EAAAA,sBAAsB,CAACC,GAAD,EAAM;AAC1B,UAAMV,GAAG,GAAG,IAAIX,KAAJ,CACV,0DADU,CAAZ;AAGAW,IAAAA,GAAG,CAACV,KAAJ,GAAY,IAAZ;;AACA,QAAIoB,GAAG,CAACC,QAAR,EAAkB;AAChBD,MAAAA,GAAG,CAACC,QAAJ,CAAaX,GAAb;AACD,KAFD,MAEO;AACL,WAAKD,IAAL,CAAU,OAAV,EAAmBC,GAAnB;AACD;AACF;;AAEDY,EAAAA,iBAAiB,CAACZ,GAAD,EAAM;AACrBA,IAAAA,GAAG,CAACV,KAAJ,GAAY,IAAZ,CADqB,CAErB;;AACA,SAAKxC,MAAL,CAAY+D,kBAAZ,CAA+B,MAA/B;AACA,SAAKZ,UAAL,GAAkB,KAAKQ,sBAAvB;;AACA,SAAKK,KAAL,GAAa,MAAM;AACjB,WAAKf,IAAL,CAAU,OAAV,EAAmB,IAAIV,KAAJ,CAAU,6BAAV,CAAnB;AACD,KAFD;;AAGA,SAAKG,YAAL,CAAkBQ,GAAlB;;AACA,SAAK3B,WAAL,GAAmB2B,GAAnB;AACD;;AAEDrB,EAAAA,mBAAmB,CAACqB,GAAD,EAAM;AACvB,QAAI,KAAKf,cAAT,EAAyB;AACvBpD,MAAAA,MAAM,CAACqD,YAAP,CAAoB,KAAKD,cAAzB;AACA,WAAKA,cAAL,GAAsB,IAAtB;AACD,KAJsB,CAKvB;;;AACA,QAAIe,GAAG,CAACe,KAAJ,KAAc,YAAd,IAA8B,KAAK3B,QAAvC,EAAiD;AAC/C;AACD;;AACD,SAAKwB,iBAAL,CAAuBZ,GAAvB;AACD;;AAEDI,EAAAA,mBAAmB,GAAG;AACpB,QAAI,KAAKnB,cAAT,EAAyB;AACvBpD,MAAAA,MAAM,CAACqD,YAAP,CAAoB,KAAKD,cAAzB;AACA,WAAKA,cAAL,GAAsB,IAAtB;AACD;;AACD,SAAKnC,MAAL,CAAYkE,OAAZ,IAAuB,KAAKlE,MAAL,CAAYkE,OAAZ,EAAvB;AACA,UAAMhB,GAAG,GAAG,IAAIX,KAAJ,CAAU,mBAAV,CAAZ;AACAW,IAAAA,GAAG,CAACiB,OAAJ,GAAc,WAAd;AACAjB,IAAAA,GAAG,CAACT,IAAJ,GAAW,WAAX;AACAS,IAAAA,GAAG,CAACkB,OAAJ,GAAc,SAAd;;AACA,SAAKvC,mBAAL,CAAyBqB,GAAzB;AACD,GA5JmC,CA8JpC;AACA;;;AACAR,EAAAA,YAAY,CAACQ,GAAD,EAAM;AAChB;AACA,QAAI,KAAK3B,WAAT,EAAsB;AACpB;AACD;;AACD,QAAI8C,OAAJ,CALgB,CAMhB;AACA;;AACA,QAAIC,uBAAuB,GAAG,CAAC,KAAK/D,QAApC;;AACA,QAAI,KAAKA,QAAL,IAAiB,KAAKA,QAAL,CAAcsD,QAAnC,EAA6C;AAC3C,WAAKtD,QAAL,CAAcsD,QAAd,CAAuBX,GAAvB;;AACA,WAAK3C,QAAL,GAAgB,IAAhB,CAF2C,CAG3C;AACA;AACA;AACD,KAND,MAMO,IACL,EACE,KAAKA,QAAL,IACA,KAAKA,QAAL,CAAcV,WAAd,KAA8BN,QAAQ,CAACsD,eADvC,IAEA,KAAKvC,SAAL,CAAeiE,MAAf,GAAwB,CAH1B,CADK,EAML;AACAD,MAAAA,uBAAuB,GAAG,IAA1B;AACD;;AACD,WAAQD,OAAO,GAAG,KAAK/D,SAAL,CAAekE,KAAf,EAAlB,EAA2C;AACzC,UAAIH,OAAO,CAACR,QAAZ,EAAsB;AACpBQ,QAAAA,OAAO,CAACR,QAAR,CAAiBX,GAAjB;AACD,OAFD,MAEO;AACLoB,QAAAA,uBAAuB,GAAG,IAA1B;AACD;AACF,KA9Be,CA+BhB;AACA;;;AACA,QAAIA,uBAAuB,IAAI,KAAKG,KAApC,EAA2C;AACzC,WAAKxB,IAAL,CAAU,OAAV,EAAmBC,GAAnB;AACD;AACF;;AAEDc,EAAAA,KAAK,CAACU,MAAD,EAAS;AACZ,SAAK1E,MAAL,CAAYgE,KAAZ,CAAkBU,MAAlB,EAA0BxB,GAAG,IAAI;AAC/B,UAAIA,GAAJ,EAAS;AACP,aAAKrB,mBAAL,CAAyBqB,GAAzB;AACD;AACF,KAJD;AAKD,GA5MmC,CA8MpC;AACA;AACA;AACA;AACA;AACA;;;AACAyB,EAAAA,gBAAgB,GAAG;AACjB,SAAKxD,UAAL,GAAkB,CAAlB;AACA,SAAKC,oBAAL,GAA4B,CAA5B;AACD;;AAEDwD,EAAAA,yBAAyB,CAACC,UAAD,EAAa;AACpC,SAAKzD,oBAAL,IAA6ByD,UAA7B;AACA,SAAKzD,oBAAL,IAA6B,GAA7B;AACD;;AAED0D,EAAAA,eAAe,CAACD,UAAD,EAAa;AAC1B,SAAK1D,UAAL,IAAmB0D,UAAnB;AACA,SAAK1D,UAAL,IAAmB,GAAnB;AACD;;AAED4D,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB,UAAMC,iBAAiB,GAAG,QAA1B;AACA,UAAMV,MAAM,GAAGS,MAAM,CAACT,MAAP,EAAf;AACA,QAAIW,KAAJ,EAAWC,MAAX,EAAmBC,MAAnB;;AACA,QAAIb,MAAM,GAAGU,iBAAb,EAAgC;AAC9BD,MAAAA,MAAM,CAACK,WAAP,CAAmB,KAAKlE,UAAxB;;AACA,UAAI,KAAKpB,MAAL,CAAYuF,KAAhB,EAAuB;AACrB;AACAC,QAAAA,OAAO,CAACC,GAAR,CACG,GAAE,KAAKnF,WAAY,IAAG,KAAK2C,YAAa,QAAO,KAAKzC,QAAL,CAAckF,YAAa,IAAG,KAAKlF,QAAL,CAAcmF,SAAd,EAA0B,IAAG,CAAC,KAAKvE,UAAN,EAAkB6D,MAAM,CAACW,KAAzB,EAAgCX,MAAM,CAACT,MAAP,EAAhC,EAAiDqB,IAAjD,CAAsD,GAAtD,CAA2D,GADxK,EAFqB,CAKrB;;AACAL,QAAAA,OAAO,CAACC,GAAR,CACG,GAAE,KAAKnF,WAAY,IAAG,KAAK2C,YAAa,QAAOgC,MAAM,CAACN,MAAP,CAAcmB,QAAd,CAAuB,KAAvB,CAA8B,EADhF;AAGD;;AACD,WAAKf,eAAL,CAAqB,CAArB;;AACA,WAAKd,KAAL,CAAWgB,MAAM,CAACN,MAAlB;AACD,KAdD,MAcO;AACL,UAAI,KAAK3E,MAAL,CAAYuF,KAAhB,EAAuB;AACrB;AACAC,QAAAA,OAAO,CAACC,GAAR,CACG,GAAE,KAAKnF,WAAY,IAAG,KAAK2C,YAAa,qDAD3C,EAFqB,CAKrB;;AACAuC,QAAAA,OAAO,CAACC,GAAR,CACG,GAAE,KAAKnF,WAAY,IAAG,KAAK2C,YAAa,QAAO,KAAKzC,QAAL,CAAckF,YAAa,IAAG,KAAKlF,QAAL,CAAcmF,SAAd,EAA0B,IAAG,CAAC,KAAKvE,UAAN,EAAkB6D,MAAM,CAACW,KAAzB,EAAgCX,MAAM,CAACT,MAAP,EAAhC,EAAiDqB,IAAjD,CAAsD,GAAtD,CAA2D,GADxK;AAGD;;AACD,WAAKT,MAAM,GAAG,CAAd,EAAiBA,MAAM,GAAG,IAAIZ,MAA9B,EAAsCY,MAAM,IAAIF,iBAAhD,EAAmE;AACjEC,QAAAA,KAAK,GAAGF,MAAM,CAACN,MAAP,CAAcoB,KAAd,CAAoBX,MAApB,EAA4BA,MAAM,GAAGF,iBAArC,CAAR;;AACA,YAAIC,KAAK,CAACX,MAAN,KAAiBU,iBAArB,EAAwC;AACtCG,UAAAA,MAAM,GAAGW,MAAM,CAACC,IAAP,CAAY,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAK7E,UAAxB,CAAZ,CAAT;AACD,SAFD,MAEO;AACLiE,UAAAA,MAAM,GAAGW,MAAM,CAACC,IAAP,CAAY,CACnBd,KAAK,CAACX,MAAN,GAAe,IADI,EAElBW,KAAK,CAACX,MAAN,IAAgB,CAAjB,GAAsB,IAFH,EAGlBW,KAAK,CAACX,MAAN,IAAgB,EAAjB,GAAuB,IAHJ,EAInB,KAAKpD,UAJc,CAAZ,CAAT;AAMD;;AACD,aAAK2D,eAAL,CAAqB,CAArB;;AACA,aAAKd,KAAL,CAAWoB,MAAX;AACA,aAAKpB,KAAL,CAAWkB,KAAX;AACD;AACF;AACF,GAjRmC,CAmRpC;;;AACAe,EAAAA,QAAQ,CAACC,QAAD,EAAW;AACjB,QAAI,KAAKnG,MAAL,CAAYuF,KAAhB,EAAuB;AACrB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACD;;AACD,UAAMW,aAAa,GAAGrH,GAAG,CAACsH,mBAAJ,CAAwB;AAC5CC,MAAAA,EAAE,EAAE,KAAKtG,MAAL,CAAYuG,GAAZ,CAAgBD,EADwB;AAE5CE,MAAAA,IAAI,EAAE,KAAKxG,MAAL,CAAYuG,GAAZ,CAAgBC,IAFsB;AAG5CC,MAAAA,OAAO,EAAE,KAAKzG,MAAL,CAAYuG,GAAZ,CAAgBE,OAHmB;AAI5C1F,MAAAA,GAAG,EAAE,KAAKf,MAAL,CAAYuG,GAAZ,CAAgBxF,GAJuB;AAK5C2F,MAAAA,UAAU,EAAE,KAAK1G,MAAL,CAAYuG,GAAZ,CAAgBG,UALgB;AAM5CC,MAAAA,UAAU,EAAE,KAAK3G,MAAL,CAAYuG,GAAZ,CAAgBI;AANgB,KAAxB,CAAtB;AAQA,UAAMC,kBAAkB,GAAG,KAAK5G,MAAL,CAAYuG,GAAZ,CAAgBK,kBAA3C;AACA,QAAIC,iBAAiB,GAAG,KAAxB;AACA,UAAMC,YAAY,GAAG,IAAI/H,GAAG,CAACgI,SAAR,CAAkB,KAAK9G,MAAvB,EAA+B;AAClD2G,MAAAA,kBAAkB,EAAEA,kBAD8B;AAElDI,MAAAA,WAAW,EAAE,IAFqC;AAGlDZ,MAAAA,aAAa,EAAEA,aAHmC;AAIlDvD,MAAAA,QAAQ,EAAE;AAJwC,KAA/B,CAArB,CAfiB,CAqBjB;;AACAiE,IAAAA,YAAY,CAACjF,EAAb,CAAgB,WAAhB,EAA6BsB,GAAG,IAAI;AAClC,UAAI0D,iBAAJ,EAAuB;AACrB,aAAK/E,mBAAL,CAAyBqB,GAAzB;AACD,OAFD,MAEO;AACLgD,QAAAA,QAAQ,CAAChD,GAAD,CAAR;AACD;AACF,KAND;AAOA2D,IAAAA,YAAY,CAACjF,EAAb,CAAgB,QAAhB,EAA0B,MAAM;AAC9BgF,MAAAA,iBAAiB,GAAG,IAApB;AACAV,MAAAA,QAAQ,CAACS,kBAAkB,GAAGE,YAAY,CAACP,GAAb,CAAiBU,WAAjB,EAAH,GAAoC,IAAvD,CAAR;AACD,KAHD;AAIAH,IAAAA,YAAY,CAACjF,EAAb,CAAgB,MAAhB,EAAwBM,IAAI,IAAI;AAC9B,WAAKH,YAAL,CAAkBM,OAAlB,CAA0BH,IAA1B;AACD,KAFD;;AAGA,SAAK8B,KAAL,GAAaU,MAAM,IAAI;AACrBmC,MAAAA,YAAY,CAAC7C,KAAb,CAAmBU,MAAnB;AACD,KAFD,CApCiB,CAuCjB;;;AACAmC,IAAAA,YAAY,CAACI,MAAb;AACD;;AAEDC,EAAAA,IAAI,GAAG;AACL,QAAI,KAAKlH,MAAL,YAAuBpB,GAAG,CAACuI,MAA/B,EAAuC;AACrC,WAAKnH,MAAL,CAAYoH,MAAZ,GAAqB,CAAClF,IAAD,EAAOmF,KAAP,EAAcC,GAAd,KAAsB;AACzC,aAAKvF,YAAL,CAAkBM,OAAlB,CAA0BH,IAA1B,EAAgCmF,KAAhC,EAAuCC,GAAvC;AACD,OAFD;AAGD,KAJD,MAIO;AACL,WAAKtH,MAAL,CAAY4B,EAAZ,CAAe,MAAf,EAAuBM,IAAI,IAAI;AAC7B,aAAKH,YAAL,CAAkBM,OAAlB,CACEH,IAAI,CAACqF,MADP,EAEErF,IAAI,CAACiD,MAFP,EAGEjD,IAAI,CAACiD,MAAL,GAAcjD,IAAI,CAACqC,MAHrB;AAKD,OAND;AAOD;AACF;;AAEDiD,EAAAA,aAAa,CAACC,OAAD,EAAUhF,IAAV,EAAgB;AAC3B,UAAMS,GAAG,GAAG,IAAIX,KAAJ,CAAUkF,OAAV,CAAZ;AACAvE,IAAAA,GAAG,CAACV,KAAJ,GAAY,IAAZ;AACAU,IAAAA,GAAG,CAACT,IAAJ,GAAWA,IAAI,IAAI,gBAAnB;AACA,SAAKQ,IAAL,CAAU,OAAV,EAAmBC,GAAnB;AACD;;AAEDjB,EAAAA,YAAY,CAAC+C,MAAD,EAAS;AACnB,QAAI,KAAKxE,OAAT,EAAkB;AAChB,WAAKC,eAAL,CAAqBiH,IAArB,CAA0B1C,MAA1B;;AACA;AACD;;AACD,QAAIA,MAAJ,EAAY;AACV,UAAI,KAAK7D,UAAL,KAAoB6D,MAAM,CAAC7D,UAA/B,EAA2C;AACzC,cAAM+B,GAAG,GAAG,IAAIX,KAAJ,CACT,+CAA8C,KAAKpB,UAAW,iBAAgB6D,MAAM,CAAC7D,UAAW,EADvF,CAAZ;AAGA+B,QAAAA,GAAG,CAACyE,QAAJ,GAAe,KAAKxG,UAApB;AACA+B,QAAAA,GAAG,CAAC0E,QAAJ,GAAe5C,MAAM,CAAC7D,UAAtB;AACA,aAAK8B,IAAL,CAAU,MAAV,EAAkBC,GAAlB,EANyC,CAMjB;AACxB;;AACAqC,QAAAA,OAAO,CAACsC,KAAR,CAAc3E,GAAG,CAACuE,OAAlB;AACD;;AACD,WAAK3C,eAAL,CAAqBE,MAAM,CAACH,UAA5B;AACD;;AACD,QAAI,KAAK9E,MAAL,CAAYuF,KAAhB,EAAuB;AACrB,UAAIN,MAAJ,EAAY;AACV;AACAO,QAAAA,OAAO,CAACC,GAAR,CACG,SAAQR,MAAM,CAACN,MAAP,CACNoB,KADM,CACAd,MAAM,CAACG,MADP,EACeH,MAAM,CAACG,MAAP,GAAgBH,MAAM,CAACT,MAAP,EAD/B,EAENsB,QAFM,CAEG,KAFH,CAEU,EAHrB,EAFU,CAOV;;AACAN,QAAAA,OAAO,CAACuC,KAAR;AACA,cAAMC,WAAW,GAAG,KAAKxH,QAAL,GAChB,KAAKA,QAAL,CAAckF,YADE,GAEhB,cAFJ;AAGA,cAAMC,SAAS,GAAG,KAAKnF,QAAL,GACd,KAAKA,QAAL,CAAcmF,SAAd,EADc,GAEd,cAFJ,CAZU,CAeV;;AACAH,QAAAA,OAAO,CAACC,GAAR,CACG,GAAE,KAAKnF,WAAY,IAAG,KAAK2C,YAAa,QAAO+E,WAAY,IAAGrC,SAAU,IAAG,CAACV,MAAM,CAAC7D,UAAR,EAAoB6D,MAAM,CAACgD,IAAP,EAApB,EAAmChD,MAAM,CAACT,MAAP,EAAnC,EAAoDqB,IAApD,CAAyD,GAAzD,CAA8D,GAD5I;AAGD;AACF;;AACD,QAAI,CAAC,KAAKrF,QAAV,EAAoB;AAClB,WAAKiH,aAAL,CACE,kDADF,EAEE,4BAFF;AAIA,WAAKxG,KAAL;AACA;AACD;;AACD,UAAMiH,IAAI,GAAG,KAAK1H,QAAL,CAAc8B,OAAd,CAAsB2C,MAAtB,EAA8B,IAA9B,CAAb;;AACA,QAAIiD,IAAJ,EAAU;AACR,WAAK1H,QAAL,GAAgB,KAAKD,SAAL,CAAekE,KAAf,EAAhB;;AACA,UAAI,KAAKjE,QAAT,EAAmB;AACjB,aAAKY,UAAL,GAAkB,CAAlB;AACA,aAAKC,oBAAL,GAA4B,CAA5B;AACA,aAAKa,YAAL;AACD;AACF;AACF;;AAEDkB,EAAAA,UAAU,CAACS,GAAD,EAAM;AACd;AACA;AACA,QAAI,KAAK7D,MAAL,CAAYuF,KAAhB,EAAuB;AACrB,YAAMyC,WAAW,GAAGnE,GAAG,CAAC/D,WAAJ,CAAgBqI,IAApC,CADqB,CAErB;;AACA3C,MAAAA,OAAO,CAACC,GAAR,CAAa,gBAAeuC,WAAY,EAAxC;AACAnE,MAAAA,GAAG,CAAC6B,YAAJ,GAAmBsC,WAAnB;AACD;;AACD,QAAI,CAAC,KAAKxH,QAAV,EAAoB;AAClB,WAAKA,QAAL,GAAgBqD,GAAhB;AACA,WAAK3B,YAAL;AACD,KAHD,MAGO;AACL,WAAK3B,SAAL,CAAeoH,IAAf,CAAoB9D,GAApB;AACD;;AACD,WAAOA,GAAP;AACD;;AAEDuE,EAAAA,MAAM,CAACC,GAAD,EAAMC,MAAN,EAAc;AAClB,QAAI,OAAO,KAAKtI,MAAL,CAAYuI,WAAnB,KAAmC,UAAvC,EAAmD;AACjD,aAAO,KAAKvI,MAAL,CAAYuI,WAAZ,CAAwBC,IAAxB,CACL,IADK,EAELH,GAFK,EAGLC,MAHK,EAIL,KAAKtI,MAAL,CAAYyI,QAJP,CAAP;AAMD;;AACD,UAAM1I,IAAI,GAAG;AACXsI,MAAAA,GAAG,EAAEA,GADM;AAEXC,MAAAA,MAAM,EAAEA;AAFG,KAAb;;AAIA,SAAKI,yBAAL,CAA+B3I,IAA/B;;AACA,WAAOX,SAAS,CAACgJ,MAAV,CACLrI,IAAI,CAACsI,GADA,EAELtI,IAAI,CAACuI,MAFA,EAGL,KAAKtI,MAAL,CAAY2I,gBAHP,EAIL,KAAK3I,MAAL,CAAYyI,QAJP,CAAP;AAMD;;AAEDG,EAAAA,MAAM,CAACC,KAAD,EAAQ;AACZ,WAAOzJ,SAAS,CAACwJ,MAAV,CAAiBC,KAAjB,EAAwB,KAAxB,EAA+B,KAAK7I,MAAL,CAAYyI,QAA3C,CAAP;AACD;;AAEDK,EAAAA,QAAQ,CAACD,KAAD,EAAQ;AACd,WAAOzJ,SAAS,CAAC0J,QAAV,CAAmBD,KAAnB,EAA0B,KAA1B,CAAP;AACD;;AAEDE,EAAAA,GAAG,CAACV,GAAD,EAAM;AACP,WAAOjJ,SAAS,CAAC2J,GAAV,CAAcV,GAAd,CAAP;AACD;;AAEDK,EAAAA,yBAAyB,CAACM,OAAD,EAAU;AACjC,QAAIC,OAAJ;;AACA,QAAI,KAAKjJ,MAAL,CAAYkJ,iBAAZ,IAAiCF,OAAO,CAACE,iBAA7C,EAAgE;AAC9D,UAAItJ,wBAAwB,KAAK,IAAjC,EAAuC;AACrCA,QAAAA,wBAAwB,GAAGd,OAAO,CAAC,oBAAD,CAAP,EAA3B;AACD;;AACDmK,MAAAA,OAAO,GAAGrJ,wBAAwB,CAACoJ,OAAO,CAACX,GAAT,EAAcW,OAAO,CAACV,MAAtB,CAAlC;AACAU,MAAAA,OAAO,CAACX,GAAR,GAAcY,OAAO,CAAC,CAAD,CAArB;AACAD,MAAAA,OAAO,CAACV,MAAR,GAAiBW,OAAO,CAAC,CAAD,CAAxB;AACD;AACF;;AAEDE,EAAAA,KAAK,CAACd,GAAD,EAAMC,MAAN,EAAcc,EAAd,EAAkB;AACrB,QAAIC,QAAJ;;AACA,QAAIhB,GAAG,CAACvI,WAAJ,KAAoBN,QAAQ,CAAC8J,KAAjC,EAAwC;AACtCD,MAAAA,QAAQ,GAAGhB,GAAX;AACD,KAFD,MAEO;AACLgB,MAAAA,QAAQ,GAAGxJ,UAAU,CAAC0J,WAAX,CAAuBlB,GAAvB,EAA4BC,MAA5B,EAAoCc,EAApC,EAAwC,KAAKpJ,MAA7C,CAAX;AACD;;AACD,SAAK0I,yBAAL,CAA+BW,QAA/B;;AACA,UAAMG,MAAM,GAAG,KAAKpB,MAAL,CAAYiB,QAAQ,CAAChB,GAArB,EAA0BgB,QAAQ,CAACf,MAAT,IAAmB,EAA7C,CAAf;AACAe,IAAAA,QAAQ,CAAChB,GAAT,GAAemB,MAAf;AACA,WAAO,KAAKpG,UAAL,CAAgBiG,QAAhB,CAAP;AACD;;AAEDI,EAAAA,KAAK,GAAG;AACN,SAAKhJ,OAAL,GAAe,IAAf;AACA,SAAKR,MAAL,CAAYwJ,KAAZ;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,QAAIzE,MAAJ;AACA,SAAKxE,OAAL,GAAe,KAAf;;AACA,WAAQwE,MAAM,GAAG,KAAKvE,eAAL,CAAqB+D,KAArB,EAAjB,EAAgD;AAC9C,WAAKvC,YAAL,CAAkB+C,MAAlB,EAD8C,CAE9C;;AACA,UAAI,KAAKxE,OAAT,EAAkB;AAChB;AACD;AACF;;AACD,SAAKR,MAAL,CAAYyJ,MAAZ;AACD,GA9emC,CAgfpC;;;AACAC,EAAAA,OAAO,CAACX,OAAD,EAAUI,EAAV,EAAc;AACnB,QAAI,OAAOJ,OAAP,KAAmB,QAAvB,EAAiC;AAC/BA,MAAAA,OAAO,GAAG;AAAEX,QAAAA,GAAG,EAAEW;AAAP,OAAV;AACD;;AACD,WAAO,KAAK5F,UAAL,CAAgB,IAAI5D,QAAQ,CAACoK,OAAb,CAAqBZ,OAArB,EAA8BI,EAA9B,CAAhB,CAAP;AACD;;AAEDS,EAAAA,SAAS,CAACxB,GAAD,EAAM;AACb,QAAIW,OAAO,GAAG,EAAd;;AACA,QAAI,OAAOX,GAAP,KAAe,QAAnB,EAA6B;AAC3BW,MAAAA,OAAO,GAAGX,GAAV;AACD,KAFD,MAEO;AACLW,MAAAA,OAAO,CAACX,GAAR,GAAcA,GAAd;AACD;;AACD,UAAMtH,GAAG,GAAGlB,UAAU,CAACiK,YAAX,CAAwBd,OAAxB,CAAZ;;AACA,UAAMe,IAAI,GAAG,KAAKpJ,WAAL,CAAiBqJ,GAAjB,CAAqBjJ,GAArB,CAAb;;AACA,QAAIgJ,IAAJ,EAAU;AACR,WAAKpJ,WAAL,CAAiBsJ,GAAjB,CAAqBlJ,GAArB;;AACAgJ,MAAAA,IAAI,CAAC9I,KAAL;AACD;;AACD,WAAO8I,IAAP;AACD;;AAEDzH,EAAAA,OAAO,CAAC+F,GAAD,EAAMC,MAAN,EAAcc,EAAd,EAAkB;AACvB,QAAIJ,OAAO,GAAG,EAAd;;AACA,QAAI,OAAOX,GAAP,KAAe,QAAnB,EAA6B;AAC3B;AACAW,MAAAA,OAAO,GAAGX,GAAV;;AACA,UAAI,OAAOC,MAAP,KAAkB,UAAtB,EAAkC;AAChCc,QAAAA,EAAE,GAAGd,MAAL;AACD,OAFD,MAEO;AACLU,QAAAA,OAAO,CAACV,MAAR,GAAiBU,OAAO,CAACV,MAAR,IAAkBA,MAAnC;AACD;AACF,KARD,MAQO,IAAI,OAAOA,MAAP,KAAkB,UAAtB,EAAkC;AACvC;AACAc,MAAAA,EAAE,GAAGd,MAAL;AACAU,MAAAA,OAAO,CAACX,GAAR,GAAcA,GAAd;AACAW,MAAAA,OAAO,CAACV,MAAR,GAAiB4B,SAAjB;AACD,KALM,MAKA;AACL;AACAlB,MAAAA,OAAO,CAACX,GAAR,GAAcA,GAAd;AACAW,MAAAA,OAAO,CAACV,MAAR,GAAiBA,MAAjB;AACD;;AACD,SAAKI,yBAAL,CAA+BM,OAA/B,EApBuB,CAqBvB;;;AACA,QAAIA,OAAO,CAACV,MAAZ,EAAoB;AAClB;AACA,UAAI,CAAC6B,KAAK,CAACC,OAAN,CAAcpB,OAAO,CAACV,MAAtB,CAAL,EAAoC;AAClC,cAAM,IAAI+B,SAAJ,CACJ,6EADI,CAAN;AAGD;;AACDrB,MAAAA,OAAO,CAACV,MAAR,CAAegC,OAAf,CAAuBC,GAAG,IAAI;AAC5B;AACA,YAAI,CAACJ,KAAK,CAACC,OAAN,CAAcpB,OAAO,CAACV,MAAtB,CAAL,EAAoC;AAClC,gBAAM,IAAI+B,SAAJ,CACJ,6EADI,CAAN;AAGD;;AACD,YAAIE,GAAG,KAAKL,SAAZ,EAAuB;AACrB,gBAAM,IAAIG,SAAJ,CACJ,8EADI,CAAN;AAGD;;AACD,YAAI,OAAOE,GAAP,KAAe,UAAnB,EAA+B;AAC7B,gBAAM,IAAIF,SAAJ,CACJ,iHADI,CAAN;AAGD;AACF,OAjBD;AAkBD;;AACD,UAAMG,cAAc,GAAG,IAAIhL,QAAQ,CAACiL,OAAb,CAAqBzB,OAArB,EAA8BI,EAA9B,CAAvB;AACA,UAAMsB,cAAc,GAAG,IAAIlL,QAAQ,CAACoK,OAAb,CAAqBZ,OAArB,EAA8B,CAAC7F,GAAD,EAAM4G,IAAN,KAAe;AAClE,UAAI5G,GAAJ,EAAS;AACP;AACA;AACAqH,QAAAA,cAAc,CAAClD,KAAf,GAAuB,YAAW;AAChC,iBAAO,IAAP;AACD,SAFD;;AAGA,YAAI8B,EAAJ,EAAQ;AACNA,UAAAA,EAAE,CAACjG,GAAD,CAAF;AACD,SAFD,MAEO;AACLqH,UAAAA,cAAc,CAACtH,IAAf,CAAoB,OAApB,EAA6BC,GAA7B;AACD;;AACDqH,QAAAA,cAAc,CAACtH,IAAf,CAAoB,KAApB;AACA;AACD;;AACDsH,MAAAA,cAAc,CAACxJ,SAAf,GAA2B+I,IAA3B;AACD,KAhBsB,CAAvB;AAiBA,SAAK3G,UAAL,CAAgBsH,cAAhB;AACA,SAAKtH,UAAL,CAAgBoH,cAAhB;AACA,WAAOA,cAAP;AACD;;AAEDG,EAAAA,UAAU,CAAC3B,OAAD,EAAU4B,QAAV,EAAoB;AAC5B,QAAI,CAACA,QAAD,IAAa,OAAO5B,OAAP,KAAmB,UAApC,EAAgD;AAC9C4B,MAAAA,QAAQ,GAAG5B,OAAX;AACAA,MAAAA,OAAO,GAAG,EAAV;AACD;;AACD,UAAMpH,aAAa,GAAGoH,OAAO,CAAC6B,OAAR,GAClBpL,gBAAgB,CAACqL,gBAAjB,CAAkC9B,OAAO,CAAC6B,OAA1C,CADkB,GAElB,KAAK7K,MAAL,CAAY4B,aAFhB;AAGA,WAAO,KAAKwB,UAAL,CACL,IAAI5D,QAAQ,CAACuL,UAAb,CACE;AACEC,MAAAA,IAAI,EAAEhC,OAAO,CAACgC,IAAR,IAAgB,KAAKhL,MAAL,CAAYgL,IADpC;AAEEC,MAAAA,QAAQ,EAAEjC,OAAO,CAACiC,QAAR,IAAoB,KAAKjL,MAAL,CAAYiL,QAF5C;AAGEC,MAAAA,YAAY,EAAElC,OAAO,CAACkC,YAAR,IAAwB,KAAKlL,MAAL,CAAYkL,YAHpD;AAIEC,MAAAA,QAAQ,EAAEnC,OAAO,CAACmC,QAAR,IAAoB,KAAKnL,MAAL,CAAYmL,QAJ5C;AAKEC,MAAAA,OAAO,EAAEpC,OAAO,CAACoC,OALnB;AAMExJ,MAAAA,aAAa,EAAEA,aANjB;AAOEyJ,MAAAA,aAAa,EAAE,KAAKrL;AAPtB,KADF,EAUEmD,GAAG,IAAI;AACL,UAAIA,GAAJ,EAAS;AACPA,QAAAA,GAAG,CAACV,KAAJ,GAAY,IAAZ;AACD;;AACD,UAAImI,QAAJ,EAAc;AACZA,QAAAA,QAAQ,CAACzH,GAAD,CAAR;AACD;AACF,KAjBH,CADK,CAAP;AAqBD,GA5mBmC,CA8mBpC;;;AACAmI,EAAAA,gBAAgB,CAAClC,EAAD,EAAK;AACnB,WAAO,KAAKD,KAAL,CAAW,mBAAX,EAAgCC,EAAhC,CAAP;AACD;;AAEDmC,EAAAA,MAAM,CAACnC,EAAD,EAAK;AACT,WAAO,KAAKD,KAAL,CAAW,QAAX,EAAqBC,EAArB,CAAP;AACD;;AAEDoC,EAAAA,QAAQ,CAACpC,EAAD,EAAK;AACX,WAAO,KAAKD,KAAL,CAAW,UAAX,EAAuBC,EAAvB,CAAP;AACD;;AAEDqC,EAAAA,IAAI,CAACrC,EAAD,EAAK;AACP,WAAO,KAAKhG,UAAL,CAAgB,IAAI5D,QAAQ,CAACkM,IAAb,CAAkBtC,EAAlB,CAAhB,CAAP;AACD;;AAEDuC,EAAAA,cAAc,CAAC5L,IAAD,EAAOqJ,EAAP,EAAW;AACvB,WAAO,KAAKhG,UAAL,CAAgB,IAAI5D,QAAQ,CAACoM,aAAb,CAA2B7L,IAA3B,EAAiCqJ,EAAjC,CAAhB,CAAP;AACD;;AAEDyC,EAAAA,WAAW,CAAC9L,IAAD,EAAOqJ,EAAP,EAAW;AACpB,WAAO,KAAKhG,UAAL,CAAgB,IAAI5D,QAAQ,CAACsM,UAAb,CAAwB/L,IAAxB,EAA8BqJ,EAA9B,CAAhB,CAAP;AACD,GAroBmC,CAuoBpC;;;AACAjF,EAAAA,OAAO,GAAG;AACR,SAAKlD,KAAL;AACD;;AAEDA,EAAAA,KAAK,GAAG;AACN,QAAI,KAAKmB,cAAT,EAAyB;AACvBpD,MAAAA,MAAM,CAACqD,YAAP,CAAoB,KAAKD,cAAzB;AACA,WAAKA,cAAL,GAAsB,IAAtB;AACD;;AACD,SAAKG,QAAL,GAAgB,IAAhB;AACA,SAAKtC,MAAL,CAAYsH,GAAZ;AACA,SAAKnE,UAAL,GAAkB,KAAKQ,sBAAvB;AACD;;AAEDmI,EAAAA,kBAAkB,CAAChM,IAAD,EAAO;AACvB;AACA;AACA,QAAIiM,IAAI,GAAG,CAAX;AACA,UAAM/L,MAAM,GAAG,IAAIf,QAAJ,CAAa;AAAE+M,MAAAA,UAAU,EAAE;AAAd,KAAb,CAAf;;AACAhM,IAAAA,MAAM,CAACiM,KAAP,GAAe,YAAW;AACxB,aAAO;AACL/J,QAAAA,IAAI,EAAE6J,IAAI;AADL,OAAP;AAGD,KAJD;;AAKA,SAAKL,cAAL,CAAoB5L,IAApB,EAA0B,MAAM;AAC9B,YAAMoM,OAAO,GAAG,KAAKN,WAAL,CAAiB9L,IAAjB,CAAhB;;AACAoM,MAAAA,OAAO,CAACtK,EAAR,CAAW,OAAX,EAAoBuK,EAAE,IAAI;AACxBnM,QAAAA,MAAM,CAAC0H,IAAP,CAAYyE,EAAZ;AACD,OAFD;AAGAD,MAAAA,OAAO,CAACtK,EAAR,CAAW,KAAX,EAAkB,MAAM;AACtB5B,QAAAA,MAAM,CAAC0H,IAAP,CAAY,IAAZ,EADsB,CAEtB;;AACA,YAAI5H,IAAI,CAACsM,KAAL,IAActM,IAAI,CAACsM,KAAL,GAAa,IAA/B,EAAqC;AACnC,eAAKpL,KAAL;AACD;AACF,OAND,EAL8B,CAY9B;AACD,KAbD;;AAcA,WAAOhB,MAAP;AACD;;AAEDE,EAAAA,OAAO,CAACiJ,EAAD,EAAK;AACV,QAAI,CAACA,EAAL,EAAS;AACP;AACD;;AACD,QAAIkD,aAAa,GAAG,CAApB;;AACA,aAASC,YAAT,CAAsBC,cAAtB,EAAsC;AACpC,aAAO,UAASC,KAAT,EAAgB;AACrB,YAAI,CAACH,aAAL,EAAoB;AAClB,cAAIE,cAAJ,EAAoB;AAClBpD,YAAAA,EAAE,CAACqD,KAAD,CAAF;AACD,WAFD,MAEO;AACLrD,YAAAA,EAAE,CAAC,IAAD,EAAOqD,KAAP,CAAF;AACD;AACF;;AACDH,QAAAA,aAAa,GAAG,CAAhB;AACD,OATD;AAUD;;AACD,SAAKI,IAAL,CAAU,OAAV,EAAmBH,YAAY,CAAC,IAAD,CAA/B;AACA,SAAKG,IAAL,CAAU,SAAV,EAAqBH,YAAY,CAAC,KAAD,CAAjC;AACD,GApsBmC,CAssBpC;AACA;AACA;;;AACAI,EAAAA,YAAY,CAACC,OAAD,EAAU;AACpB,SAAK5H,WAAL,CAAiBzF,OAAO,CAACsN,eAAR,CAAwBC,QAAxB,CAAiCF,OAAO,CAACpI,MAAzC,CAAjB;AACAoI,IAAAA,OAAO,CAACtC,OAAR,CAAgByC,MAAM,IAAI;AACxB,WAAK/H,WAAL,CACEzF,OAAO,CAACyN,gBAAR,CAAyBF,QAAzB,CAAkCC,MAAlC,EAA0C,KAAKE,YAAL,CAAkBC,QAA5D,CADF;AAGD,KAJD;AAKA,SAAKC,QAAL;AACD,GAjtBmC,CAmtBpC;;;AACAC,EAAAA,YAAY,CAACL,MAAD,EAAS;AACnB,SAAK/H,WAAL,CACEzF,OAAO,CAAC8N,OAAR,CAAgBP,QAAhB,CAAyBC,MAAzB,EAAiC,KAAKE,YAAL,CAAkBC,QAAnD,CADF;AAGD;;AAEDI,EAAAA,eAAe,CAACC,IAAD,EAAOX,OAAP,EAAgB;AAC7B,SAAKD,YAAL,CAAkBC,OAAlB;AACAW,IAAAA,IAAI,CAACjD,OAAL,CAAakD,GAAG,IAAI;AAClB,YAAMC,QAAQ,GAAG,IAAItD,KAAJ,CAAUyC,OAAO,CAACpI,MAAlB,CAAjB;AACAoI,MAAAA,OAAO,CAACtC,OAAR,CAAgByC,MAAM,IAAI;AACxBU,QAAAA,QAAQ,CAAC9F,IAAT,CAAc6F,GAAG,CAACT,MAAM,CAAC5E,IAAR,CAAjB;AACD,OAFD;AAGA,WAAKiF,YAAL,CAAkBK,QAAlB;AACD,KAND;AAOA,SAAKN,QAAL;AACD;;AAEDA,EAAAA,QAAQ,CAACO,QAAD,EAAWC,WAAX,EAAwB;AAC9B,SAAK3I,WAAL,CAAiBzF,OAAO,CAACqO,GAAR,CAAYd,QAAZ,CAAqBY,QAArB,EAA+BC,WAA/B,CAAjB;AACD;;AAEDE,EAAAA,OAAO,CAACC,IAAD,EAAO;AACZ,QAAI,CAACA,IAAL,EAAW;AACTA,MAAAA,IAAI,GAAG;AAAEC,QAAAA,YAAY,EAAE;AAAhB,OAAP;AACD;;AACD,SAAK/I,WAAL,CAAiBzF,OAAO,CAACyO,EAAR,CAAWlB,QAAX,CAAoBgB,IAApB,EAA0B,KAAKb,YAAL,CAAkBC,QAA5C,CAAjB;AACD;;AAEDe,EAAAA,UAAU,CAACH,IAAD,EAAO;AACf;AACA,UAAMZ,QAAQ,GAAG,KAAKD,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,QAAtC,GAAiD,OAAlE;AACA,SAAKlI,WAAL,CAAiBzF,OAAO,CAACiD,KAAR,CAAcsK,QAAd,CAAuBgB,IAAvB,EAA6BZ,QAA7B,CAAjB;AACD;;AAEDgB,EAAAA,eAAe,CAACJ,IAAD,EAAO;AACpB,SAAKb,YAAL,GAAoBa,IAApB;AACA,SAAKb,YAAL,CAAkBC,QAAlB,GACExN,iBAAiB,CAAC,KAAKuN,YAAL,CAAkBkB,YAAnB,CADnB;AAEA,WAAO,KAAK/K,UAAL,CAAgB,IAAI5D,QAAQ,CAAC4O,eAAb,CAA6BN,IAA7B,CAAhB,CAAP;AACD,GA5vBmC,CA8vBpC;;;AACAvG,EAAAA,GAAG,CAACqD,QAAD,EAAW;AACZ,QAAI,KAAK5K,MAAL,CAAY6C,QAAhB,EAA0B;AACxB,WAAKN,QAAL,GAAgB,IAAhB;AACA,YAAM8L,OAAO,GAAG,IAAIpP,YAAJ,EAAhB;AACAqP,MAAAA,YAAY,CAAC,MAAM;AACjB,aAAKrO,MAAL,CAAYsH,GAAZ;AACA8G,QAAAA,OAAO,CAACnL,IAAR,CAAa,KAAb;AACD,OAHW,CAAZ;AAIA,aAAOmL,OAAP;AACD,KATW,CAUZ;;;AACA,UAAMA,OAAO,GAAG,KAAKjL,UAAL,CAAgB,IAAI5D,QAAQ,CAAC+O,IAAb,CAAkB3D,QAAlB,CAAhB,CAAhB;AACA,SAAKxH,UAAL,GAAkB,KAAKQ,sBAAvB;AACA,WAAOyK,OAAP;AACD;;AAED,SAAO9E,WAAP,CAAmBlB,GAAnB,EAAwBC,MAAxB,EAAgCc,EAAhC,EAAoCpJ,MAApC,EAA4C;AAC1C,QAAIgJ,OAAO,GAAG;AACZwF,MAAAA,WAAW,EAAExO,MAAM,CAACwO;AADR,KAAd;;AAGA,QAAI,OAAOnG,GAAP,KAAe,QAAnB,EAA6B;AAC3B;AACAW,MAAAA,OAAO,GAAGX,GAAV;;AACA,UAAI,OAAOC,MAAP,KAAkB,UAAtB,EAAkC;AAChCc,QAAAA,EAAE,GAAGd,MAAL;AACD,OAFD,MAEO,IAAIA,MAAM,KAAK4B,SAAf,EAA0B;AAC/BlB,QAAAA,OAAO,CAACV,MAAR,GAAiBA,MAAjB;AACD;AACF,KARD,MAQO,IAAI,OAAOA,MAAP,KAAkB,UAAtB,EAAkC;AACvC;AACAc,MAAAA,EAAE,GAAGd,MAAL;AACAU,MAAAA,OAAO,CAACX,GAAR,GAAcA,GAAd;AACAW,MAAAA,OAAO,CAACV,MAAR,GAAiB4B,SAAjB;AACD,KALM,MAKA;AACL;AACAlB,MAAAA,OAAO,CAACX,GAAR,GAAcA,GAAd;AACAW,MAAAA,OAAO,CAACV,MAAR,GAAiBA,MAAjB;AACD;;AACD,WAAO,IAAI9I,QAAQ,CAAC8J,KAAb,CAAmBN,OAAnB,EAA4BI,EAA5B,CAAP;AACD;;AAED,SAAOU,YAAP,CAAoBd,OAApB,EAA6B;AAC3B,WACG,GAAE,OAAOA,OAAO,CAACyF,UAAW,IAAGzF,OAAO,CAACyF,UAAW,IAAGzF,OAAO,CAACwF,WAAY,GAAExF,OAAO,CAACX,GAAI,EAD1F;AAGD;;AA5yBmC;;AA+yBtC,IAAItJ,GAAG,CAACgI,SAAR,EAAmB,CACjB;AACD,CAFD,MAEO;AACLlH,EAAAA,UAAU,CAAC6O,SAAX,CAAqBxI,QAArB,GAAgC,SAASyI,SAAT,CAAmBxI,QAAnB,EAA6B;AAC3D,QAAI,KAAKnG,MAAL,CAAYuF,KAAhB,EAAuB;AACrB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACD;;AACD,UAAMmJ,MAAM,GAAG9P,OAAO,CAAC,QAAD,CAAtB;;AACA,UAAMkB,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMC,MAAM,GAAG,KAAKA,MAApB;AACA,UAAM2G,kBAAkB,GAAG,KAAK5G,MAAL,CAAYuG,GAAZ,CAAgBK,kBAA3C;AACA,UAAMiI,WAAW,GAAGD,MAAM,CAACE,iBAAP,CAAyB;AAC3C/N,MAAAA,GAAG,EAAEf,MAAM,CAACuG,GAAP,CAAWxF,GAD2B;AAE3CyF,MAAAA,IAAI,EAAExG,MAAM,CAACuG,GAAP,CAAWC,IAF0B;AAG3CE,MAAAA,UAAU,EAAE1G,MAAM,CAACuG,GAAP,CAAWG,UAHoB;AAI3CJ,MAAAA,EAAE,EAAEtG,MAAM,CAACuG,GAAP,CAAWD,EAJ4B;AAK3CG,MAAAA,OAAO,EAAEzG,MAAM,CAACuG,GAAP,CAAWE;AALuB,KAAzB,CAApB;AAOA,UAAMsI,UAAU,GAAGhQ,GAAG,CAACiQ,gBAAJ,CACjBH,WADiB,EAEjB,KAFiB,EAGjB,IAHiB,EAIjBjI,kBAJiB,CAAnB;;AAOA,QAAI3G,MAAM,CAACoH,MAAX,EAAmB;AACjBpH,MAAAA,MAAM,CAACoH,MAAP,GAAgB,IAAhB;AACD;;AACDpH,IAAAA,MAAM,CAAC+D,kBAAP,CAA0B,MAA1B;AACA/D,IAAAA,MAAM,CAACkH,IAAP,CAAY4H,UAAU,CAACE,SAAvB;AACAF,IAAAA,UAAU,CAACE,SAAX,CAAqB9H,IAArB,CAA0BlH,MAA1B;AACA8O,IAAAA,UAAU,CAACG,SAAX,CAAqBrN,EAArB,CAAwB,MAAxB,EAAgCM,IAAI,IAAI;AACtC,WAAKH,YAAL,CAAkBM,OAAlB,CAA0BH,IAA1B;AACD,KAFD;;AAGA,SAAK8B,KAAL,GAAa,UAASU,MAAT,EAAiB;AAC5BoK,MAAAA,UAAU,CAACG,SAAX,CAAqBjL,KAArB,CAA2BU,MAA3B;AACD,KAFD;;AAGAoK,IAAAA,UAAU,CAAClN,EAAX,CAAc,QAAd,EAAwB,MAAM;AAC5BsE,MAAAA,QAAQ,CAACS,kBAAkB,GAAGmI,UAAU,CAACxI,GAAX,CAAeU,WAAf,EAAH,GAAkC,IAArD,CAAR;AACD,KAFD;AAGD,GAtCD;AAuCD;;AAEDkI,MAAM,CAACC,OAAP,GAAiBvP,UAAjB","sourcesContent":["'use strict';\n\nconst Net = require('net');\nconst Tls = require('tls');\nconst Timers = require('timers');\nconst EventEmitter = require('events').EventEmitter;\nconst Readable = require('stream').Readable;\nconst Queue = require('denque');\nconst SqlString = require('sqlstring');\nconst LRU = require('lru-cache');\n\nconst PacketParser = require('./packet_parser.js');\nconst Packets = require('./packets/index.js');\nconst Commands = require('./commands/index.js');\nconst ConnectionConfig = require('./connection_config.js');\nconst CharsetToEncoding = require('./constants/charset_encodings.js');\n\nlet _connectionId = 0;\n\nlet convertNamedPlaceholders = null;\n\nclass Connection extends EventEmitter {\n  constructor(opts) {\n    super();\n    this.config = opts.config;\n    // TODO: fill defaults\n    // if no params, connect to /var/lib/mysql/mysql.sock ( /tmp/mysql.sock on OSX )\n    // if host is given, connect to host:3306\n    // TODO: use `/usr/local/mysql/bin/mysql_config --socket` output? as default socketPath\n    // if there is no host/port and no socketPath parameters?\n    if (!opts.config.stream) {\n      if (opts.config.socketPath) {\n        this.stream = Net.connect(opts.config.socketPath);\n      } else {\n        this.stream = Net.connect(\n          opts.config.port,\n          opts.config.host\n        );\n      }\n      // if stream is a function, treat it as \"stream agent / factory\"\n    } else if (typeof opts.config.stream === 'function')  {\n      this.stream = opts.config.stream(opts);\n    } else {\n      this.stream = opts.config.stream;\n    }\n    this._internalId = _connectionId++;\n    this._commands = new Queue();\n    this._command = null;\n    this._paused = false;\n    this._paused_packets = new Queue();\n    this._statements = new LRU({\n      max: this.config.maxPreparedStatements,\n      dispose: function(key, statement) {\n        statement.close();\n      }\n    });\n    this.serverCapabilityFlags = 0;\n    this.authorized = false;\n    this.sequenceId = 0;\n    this.compressedSequenceId = 0;\n    this.threadId = null;\n    this._handshakePacket = null;\n    this._fatalError = null;\n    this._protocolError = null;\n    this._outOfOrderPackets = [];\n    this.clientEncoding = CharsetToEncoding[this.config.charsetNumber];\n    this.stream.on('error', this._handleNetworkError.bind(this));\n    // see https://gist.github.com/khoomeister/4985691#use-that-instead-of-bind\n    this.packetParser = new PacketParser(p => {\n      this.handlePacket(p);\n    });\n    this.stream.on('data', data => {\n      if (this.connectTimeout) {\n        Timers.clearTimeout(this.connectTimeout);\n        this.connectTimeout = null;\n      }\n      this.packetParser.execute(data);\n    });\n    this.stream.on('close', () => {\n      // we need to set this flag everywhere where we want connection to close\n      if (this._closing) {\n        return;\n      }\n      if (!this._protocolError) {\n        // no particular error message before disconnect\n        this._protocolError = new Error(\n          'Connection lost: The server closed the connection.'\n        );\n        this._protocolError.fatal = true;\n        this._protocolError.code = 'PROTOCOL_CONNECTION_LOST';\n      }\n      this._notifyError(this._protocolError);\n    });\n    let handshakeCommand;\n    if (!this.config.isServer) {\n      handshakeCommand = new Commands.ClientHandshake(this.config.clientFlags);\n      handshakeCommand.on('end', () => {\n        // this happens when handshake finishes early and first packet is error\n        // and not server hello ( for example, 'Too many connactions' error)\n        if (!handshakeCommand.handshake) {\n          return;\n        }\n        this._handshakePacket = handshakeCommand.handshake;\n        this.threadId = handshakeCommand.handshake.connectionId;\n        this.emit('connect', handshakeCommand.handshake);\n      });\n      handshakeCommand.on('error', err => {\n        this._closing = true;\n        this._notifyError(err);\n      });\n      this.addCommand(handshakeCommand);\n    }\n    // in case there was no initiall handshake but we need to read sting, assume it utf-8\n    // most common example: \"Too many connections\" error ( packet is sent immediately on connection attempt, we don't know server encoding yet)\n    // will be overwrittedn with actial encoding value as soon as server handshake packet is received\n    this.serverEncoding = 'utf8';\n    if (this.config.connectTimeout) {\n      const timeoutHandler = this._handleTimeoutError.bind(this);\n      this.connectTimeout = Timers.setTimeout(\n        timeoutHandler,\n        this.config.connectTimeout\n      );\n    }\n  }\n\n  promise(promiseImpl) {\n    const PromiseConnection = require('../promise').PromiseConnection;\n    return new PromiseConnection(this, promiseImpl);\n  }\n\n  _addCommandClosedState(cmd) {\n    const err = new Error(\n      \"Can't add new command when connection is in closed state\"\n    );\n    err.fatal = true;\n    if (cmd.onResult) {\n      cmd.onResult(err);\n    } else {\n      this.emit('error', err);\n    }\n  }\n\n  _handleFatalError(err) {\n    err.fatal = true;\n    // stop receiving packets\n    this.stream.removeAllListeners('data');\n    this.addCommand = this._addCommandClosedState;\n    this.write = () => {\n      this.emit('error', new Error(\"Can't write in closed state\"));\n    };\n    this._notifyError(err);\n    this._fatalError = err;\n  }\n\n  _handleNetworkError(err) {\n    if (this.connectTimeout) {\n      Timers.clearTimeout(this.connectTimeout);\n      this.connectTimeout = null;\n    }\n    // Do not throw an error when a connection ends with a RST,ACK packet\n    if (err.errno === 'ECONNRESET' && this._closing) {\n      return;\n    }\n    this._handleFatalError(err);\n  }\n\n  _handleTimeoutError() {\n    if (this.connectTimeout) {\n      Timers.clearTimeout(this.connectTimeout);\n      this.connectTimeout = null;\n    }\n    this.stream.destroy && this.stream.destroy();\n    const err = new Error('connect ETIMEDOUT');\n    err.errorno = 'ETIMEDOUT';\n    err.code = 'ETIMEDOUT';\n    err.syscall = 'connect';\n    this._handleNetworkError(err);\n  }\n\n  // notify all commands in the queue and bubble error as connection \"error\"\n  // called on stream error or unexpected termination\n  _notifyError(err) {\n    // prevent from emitting 'PROTOCOL_CONNECTION_LOST' after EPIPE or ECONNRESET\n    if (this._fatalError) {\n      return;\n    }\n    let command;\n    // if there is no active command, notify connection\n    // if there are commands and all of them have callbacks, pass error via callback\n    let bubbleErrorToConnection = !this._command;\n    if (this._command && this._command.onResult) {\n      this._command.onResult(err);\n      this._command = null;\n      // connection handshake is special because we allow it to be implicit\n      // if error happened during handshake, but there are others commands in queue\n      // then bubble error to other commands and not to connection\n    } else if (\n      !(\n        this._command &&\n        this._command.constructor === Commands.ClientHandshake &&\n        this._commands.length > 0\n      )\n    ) {\n      bubbleErrorToConnection = true;\n    }\n    while ((command = this._commands.shift())) {\n      if (command.onResult) {\n        command.onResult(err);\n      } else {\n        bubbleErrorToConnection = true;\n      }\n    }\n    // notify connection if some comands in the queue did not have callbacks\n    // or if this is pool connection ( so it can be removed from pool )\n    if (bubbleErrorToConnection || this._pool) {\n      this.emit('error', err);\n    }\n  }\n\n  write(buffer) {\n    this.stream.write(buffer, err => {\n      if (err) {\n        this._handleNetworkError(err);\n      }\n    });\n  }\n\n  // http://dev.mysql.com/doc/internals/en/sequence-id.html\n  //\n  // The sequence-id is incremented with each packet and may wrap around.\n  // It starts at 0 and is reset to 0 when a new command\n  // begins in the Command Phase.\n  // http://dev.mysql.com/doc/internals/en/example-several-mysql-packets.html\n  _resetSequenceId() {\n    this.sequenceId = 0;\n    this.compressedSequenceId = 0;\n  }\n\n  _bumpCompressedSequenceId(numPackets) {\n    this.compressedSequenceId += numPackets;\n    this.compressedSequenceId %= 256;\n  }\n\n  _bumpSequenceId(numPackets) {\n    this.sequenceId += numPackets;\n    this.sequenceId %= 256;\n  }\n\n  writePacket(packet) {\n    const MAX_PACKET_LENGTH = 16777215;\n    const length = packet.length();\n    let chunk, offset, header;\n    if (length < MAX_PACKET_LENGTH) {\n      packet.writeHeader(this.sequenceId);\n      if (this.config.debug) {\n        // eslint-disable-next-line no-console\n        console.log(\n          `${this._internalId} ${this.connectionId} <== ${this._command._commandName}#${this._command.stateName()}(${[this.sequenceId, packet._name, packet.length()].join(',')})`\n        );\n        // eslint-disable-next-line no-console\n        console.log(\n          `${this._internalId} ${this.connectionId} <== ${packet.buffer.toString('hex')}`\n        );\n      }\n      this._bumpSequenceId(1);\n      this.write(packet.buffer);\n    } else {\n      if (this.config.debug) {\n        // eslint-disable-next-line no-console\n        console.log(\n          `${this._internalId} ${this.connectionId} <== Writing large packet, raw content not written:`\n        );\n        // eslint-disable-next-line no-console\n        console.log(\n          `${this._internalId} ${this.connectionId} <== ${this._command._commandName}#${this._command.stateName()}(${[this.sequenceId, packet._name, packet.length()].join(',')})`\n        );\n      }\n      for (offset = 4; offset < 4 + length; offset += MAX_PACKET_LENGTH) {\n        chunk = packet.buffer.slice(offset, offset + MAX_PACKET_LENGTH);\n        if (chunk.length === MAX_PACKET_LENGTH) {\n          header = Buffer.from([0xff, 0xff, 0xff, this.sequenceId]);\n        } else {\n          header = Buffer.from([\n            chunk.length & 0xff,\n            (chunk.length >> 8) & 0xff,\n            (chunk.length >> 16) & 0xff,\n            this.sequenceId\n          ]);\n        }\n        this._bumpSequenceId(1);\n        this.write(header);\n        this.write(chunk);\n      }\n    }\n  }\n\n  // 0.11+ environment\n  startTLS(onSecure) {\n    if (this.config.debug) {\n      // eslint-disable-next-line no-console\n      console.log('Upgrading connection to TLS');\n    }\n    const secureContext = Tls.createSecureContext({\n      ca: this.config.ssl.ca,\n      cert: this.config.ssl.cert,\n      ciphers: this.config.ssl.ciphers,\n      key: this.config.ssl.key,\n      passphrase: this.config.ssl.passphrase,\n      minVersion: this.config.ssl.minVersion\n    });\n    const rejectUnauthorized = this.config.ssl.rejectUnauthorized;\n    let secureEstablished = false;\n    const secureSocket = new Tls.TLSSocket(this.stream, {\n      rejectUnauthorized: rejectUnauthorized,\n      requestCert: true,\n      secureContext: secureContext,\n      isServer: false\n    });\n    // error handler for secure socket\n    secureSocket.on('_tlsError', err => {\n      if (secureEstablished) {\n        this._handleNetworkError(err);\n      } else {\n        onSecure(err);\n      }\n    });\n    secureSocket.on('secure', () => {\n      secureEstablished = true;\n      onSecure(rejectUnauthorized ? secureSocket.ssl.verifyError() : null);\n    });\n    secureSocket.on('data', data => {\n      this.packetParser.execute(data);\n    });\n    this.write = buffer => {\n      secureSocket.write(buffer);\n    };\n    // start TLS communications\n    secureSocket._start();\n  }\n\n  pipe() {\n    if (this.stream instanceof Net.Stream) {\n      this.stream.ondata = (data, start, end) => {\n        this.packetParser.execute(data, start, end);\n      };\n    } else {\n      this.stream.on('data', data => {\n        this.packetParser.execute(\n          data.parent,\n          data.offset,\n          data.offset + data.length\n        );\n      });\n    }\n  }\n\n  protocolError(message, code) {\n    const err = new Error(message);\n    err.fatal = true;\n    err.code = code || 'PROTOCOL_ERROR';\n    this.emit('error', err);\n  }\n\n  handlePacket(packet) {\n    if (this._paused) {\n      this._paused_packets.push(packet);\n      return;\n    }\n    if (packet) {\n      if (this.sequenceId !== packet.sequenceId) {\n        const err = new Error(\n          `Warning: got packets out of order. Expected ${this.sequenceId} but received ${packet.sequenceId}`\n        );\n        err.expected = this.sequenceId;\n        err.received = packet.sequenceId;\n        this.emit('warn', err); // REVIEW\n        // eslint-disable-next-line no-console\n        console.error(err.message);\n      }\n      this._bumpSequenceId(packet.numPackets);\n    }\n    if (this.config.debug) {\n      if (packet) {\n        // eslint-disable-next-line no-console\n        console.log(\n          ` raw: ${packet.buffer\n            .slice(packet.offset, packet.offset + packet.length())\n            .toString('hex')}`\n        );\n        // eslint-disable-next-line no-console\n        console.trace();\n        const commandName = this._command\n          ? this._command._commandName\n          : '(no command)';\n        const stateName = this._command\n          ? this._command.stateName()\n          : '(no command)';\n        // eslint-disable-next-line no-console\n        console.log(\n          `${this._internalId} ${this.connectionId} ==> ${commandName}#${stateName}(${[packet.sequenceId, packet.type(), packet.length()].join(',')})`\n        );\n      }\n    }\n    if (!this._command) {\n      this.protocolError(\n        'Unexpected packet while no commands in the queue',\n        'PROTOCOL_UNEXPECTED_PACKET'\n      );\n      this.close();\n      return;\n    }\n    const done = this._command.execute(packet, this);\n    if (done) {\n      this._command = this._commands.shift();\n      if (this._command) {\n        this.sequenceId = 0;\n        this.compressedSequenceId = 0;\n        this.handlePacket();\n      }\n    }\n  }\n\n  addCommand(cmd) {\n    // this.compressedSequenceId = 0;\n    // this.sequenceId = 0;\n    if (this.config.debug) {\n      const commandName = cmd.constructor.name;\n      // eslint-disable-next-line no-console\n      console.log(`Add command: ${commandName}`);\n      cmd._commandName = commandName;\n    }\n    if (!this._command) {\n      this._command = cmd;\n      this.handlePacket();\n    } else {\n      this._commands.push(cmd);\n    }\n    return cmd;\n  }\n\n  format(sql, values) {\n    if (typeof this.config.queryFormat === 'function') {\n      return this.config.queryFormat.call(\n        this,\n        sql,\n        values,\n        this.config.timezone\n      );\n    }\n    const opts = {\n      sql: sql,\n      values: values\n    };\n    this._resolveNamedPlaceholders(opts);\n    return SqlString.format(\n      opts.sql,\n      opts.values,\n      this.config.stringifyObjects,\n      this.config.timezone\n    );\n  }\n\n  escape(value) {\n    return SqlString.escape(value, false, this.config.timezone);\n  }\n\n  escapeId(value) {\n    return SqlString.escapeId(value, false);\n  }\n\n  raw(sql) {\n    return SqlString.raw(sql);\n  }\n\n  _resolveNamedPlaceholders(options) {\n    let unnamed;\n    if (this.config.namedPlaceholders || options.namedPlaceholders) {\n      if (convertNamedPlaceholders === null) {\n        convertNamedPlaceholders = require('named-placeholders')();\n      }\n      unnamed = convertNamedPlaceholders(options.sql, options.values);\n      options.sql = unnamed[0];\n      options.values = unnamed[1];\n    }\n  }\n\n  query(sql, values, cb) {\n    let cmdQuery;\n    if (sql.constructor === Commands.Query) {\n      cmdQuery = sql;\n    } else {\n      cmdQuery = Connection.createQuery(sql, values, cb, this.config);\n    }\n    this._resolveNamedPlaceholders(cmdQuery);\n    const rawSql = this.format(cmdQuery.sql, cmdQuery.values || []);\n    cmdQuery.sql = rawSql;\n    return this.addCommand(cmdQuery);\n  }\n\n  pause() {\n    this._paused = true;\n    this.stream.pause();\n  }\n\n  resume() {\n    let packet;\n    this._paused = false;\n    while ((packet = this._paused_packets.shift())) {\n      this.handlePacket(packet);\n      // don't resume if packet hander paused connection\n      if (this._paused) {\n        return;\n      }\n    }\n    this.stream.resume();\n  }\n\n  // TODO: named placeholders support\n  prepare(options, cb) {\n    if (typeof options === 'string') {\n      options = { sql: options };\n    }\n    return this.addCommand(new Commands.Prepare(options, cb));\n  }\n\n  unprepare(sql) {\n    let options = {};\n    if (typeof sql === 'object') {\n      options = sql;\n    } else {\n      options.sql = sql;\n    }\n    const key = Connection.statementKey(options);\n    const stmt = this._statements.get(key);\n    if (stmt) {\n      this._statements.del(key);\n      stmt.close();\n    }\n    return stmt;\n  }\n\n  execute(sql, values, cb) {\n    let options = {};\n    if (typeof sql === 'object') {\n      // execute(options, cb)\n      options = sql;\n      if (typeof values === 'function') {\n        cb = values;\n      } else {\n        options.values = options.values || values;\n      }\n    } else if (typeof values === 'function') {\n      // execute(sql, cb)\n      cb = values;\n      options.sql = sql;\n      options.values = undefined;\n    } else {\n      // execute(sql, values, cb)\n      options.sql = sql;\n      options.values = values;\n    }\n    this._resolveNamedPlaceholders(options);\n    // check for values containing undefined\n    if (options.values) {\n      //If namedPlaceholder is not enabled and object is passed as bind parameters\n      if (!Array.isArray(options.values)) {\n        throw new TypeError(\n          'Bind parameters must be array if namedPlaceholders parameter is not enabled'\n        );\n      }\n      options.values.forEach(val => {\n        //If namedPlaceholder is not enabled and object is passed as bind parameters\n        if (!Array.isArray(options.values)) {\n          throw new TypeError(\n            'Bind parameters must be array if namedPlaceholders parameter is not enabled'\n          );\n        }\n        if (val === undefined) {\n          throw new TypeError(\n            'Bind parameters must not contain undefined. To pass SQL NULL specify JS null'\n          );\n        }\n        if (typeof val === 'function') {\n          throw new TypeError(\n            'Bind parameters must not contain function(s). To pass the body of a function as a string call .toString() first'\n          );\n        }\n      });\n    }\n    const executeCommand = new Commands.Execute(options, cb);\n    const prepareCommand = new Commands.Prepare(options, (err, stmt) => {\n      if (err) {\n        // skip execute command if prepare failed, we have main\n        // combined callback here\n        executeCommand.start = function() {\n          return null;\n        };\n        if (cb) {\n          cb(err);\n        } else {\n          executeCommand.emit('error', err);\n        }\n        executeCommand.emit('end');\n        return;\n      }\n      executeCommand.statement = stmt;\n    });\n    this.addCommand(prepareCommand);\n    this.addCommand(executeCommand);\n    return executeCommand;\n  }\n\n  changeUser(options, callback) {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    const charsetNumber = options.charset\n      ? ConnectionConfig.getCharsetNumber(options.charset)\n      : this.config.charsetNumber;\n    return this.addCommand(\n      new Commands.ChangeUser(\n        {\n          user: options.user || this.config.user,\n          password: options.password || this.config.password,\n          passwordSha1: options.passwordSha1 || this.config.passwordSha1,\n          database: options.database || this.config.database,\n          timeout: options.timeout,\n          charsetNumber: charsetNumber,\n          currentConfig: this.config\n        },\n        err => {\n          if (err) {\n            err.fatal = true;\n          }\n          if (callback) {\n            callback(err);\n          }\n        }\n      )\n    );\n  }\n\n  // transaction helpers\n  beginTransaction(cb) {\n    return this.query('START TRANSACTION', cb);\n  }\n\n  commit(cb) {\n    return this.query('COMMIT', cb);\n  }\n\n  rollback(cb) {\n    return this.query('ROLLBACK', cb);\n  }\n\n  ping(cb) {\n    return this.addCommand(new Commands.Ping(cb));\n  }\n\n  _registerSlave(opts, cb) {\n    return this.addCommand(new Commands.RegisterSlave(opts, cb));\n  }\n\n  _binlogDump(opts, cb) {\n    return this.addCommand(new Commands.BinlogDump(opts, cb));\n  }\n\n  // currently just alias to close\n  destroy() {\n    this.close();\n  }\n\n  close() {\n    if (this.connectTimeout) {\n      Timers.clearTimeout(this.connectTimeout);\n      this.connectTimeout = null;\n    }\n    this._closing = true;\n    this.stream.end();\n    this.addCommand = this._addCommandClosedState;\n  }\n\n  createBinlogStream(opts) {\n    // TODO: create proper stream class\n    // TODO: use through2\n    let test = 1;\n    const stream = new Readable({ objectMode: true });\n    stream._read = function() {\n      return {\n        data: test++\n      };\n    };\n    this._registerSlave(opts, () => {\n      const dumpCmd = this._binlogDump(opts);\n      dumpCmd.on('event', ev => {\n        stream.push(ev);\n      });\n      dumpCmd.on('eof', () => {\n        stream.push(null);\n        // if non-blocking, then close stream to prevent errors\n        if (opts.flags && opts.flags & 0x01) {\n          this.close();\n        }\n      });\n      // TODO: pipe errors as well\n    });\n    return stream;\n  }\n\n  connect(cb) {\n    if (!cb) {\n      return;\n    }\n    let connectCalled = 0;\n    function callbackOnce(isErrorHandler) {\n      return function(param) {\n        if (!connectCalled) {\n          if (isErrorHandler) {\n            cb(param);\n          } else {\n            cb(null, param);\n          }\n        }\n        connectCalled = 1;\n      };\n    }\n    this.once('error', callbackOnce(true));\n    this.once('connect', callbackOnce(false));\n  }\n\n  // ===================================\n  // outgoing server connection methods\n  // ===================================\n  writeColumns(columns) {\n    this.writePacket(Packets.ResultSetHeader.toPacket(columns.length));\n    columns.forEach(column => {\n      this.writePacket(\n        Packets.ColumnDefinition.toPacket(column, this.serverConfig.encoding)\n      );\n    });\n    this.writeEof();\n  }\n\n  // row is array of columns, not hash\n  writeTextRow(column) {\n    this.writePacket(\n      Packets.TextRow.toPacket(column, this.serverConfig.encoding)\n    );\n  }\n\n  writeTextResult(rows, columns) {\n    this.writeColumns(columns);\n    rows.forEach(row => {\n      const arrayRow = new Array(columns.length);\n      columns.forEach(column => {\n        arrayRow.push(row[column.name]);\n      });\n      this.writeTextRow(arrayRow);\n    });\n    this.writeEof();\n  }\n\n  writeEof(warnings, statusFlags) {\n    this.writePacket(Packets.EOF.toPacket(warnings, statusFlags));\n  }\n\n  writeOk(args) {\n    if (!args) {\n      args = { affectedRows: 0 };\n    }\n    this.writePacket(Packets.OK.toPacket(args, this.serverConfig.encoding));\n  }\n\n  writeError(args) {\n    // if we want to send error before initial hello was sent, use default encoding\n    const encoding = this.serverConfig ? this.serverConfig.encoding : 'cesu8';\n    this.writePacket(Packets.Error.toPacket(args, encoding));\n  }\n\n  serverHandshake(args) {\n    this.serverConfig = args;\n    this.serverConfig.encoding =\n      CharsetToEncoding[this.serverConfig.characterSet];\n    return this.addCommand(new Commands.ServerHandshake(args));\n  }\n\n  // ===============================================================\n  end(callback) {\n    if (this.config.isServer) {\n      this._closing = true;\n      const quitCmd = new EventEmitter();\n      setImmediate(() => {\n        this.stream.end();\n        quitCmd.emit('end');\n      });\n      return quitCmd;\n    }\n    // trigger error if more commands enqueued after end command\n    const quitCmd = this.addCommand(new Commands.Quit(callback));\n    this.addCommand = this._addCommandClosedState;\n    return quitCmd;\n  }\n\n  static createQuery(sql, values, cb, config) {\n    let options = {\n      rowsAsArray: config.rowsAsArray\n    };\n    if (typeof sql === 'object') {\n      // query(options, cb)\n      options = sql;\n      if (typeof values === 'function') {\n        cb = values;\n      } else if (values !== undefined) {\n        options.values = values;\n      }\n    } else if (typeof values === 'function') {\n      // query(sql, cb)\n      cb = values;\n      options.sql = sql;\n      options.values = undefined;\n    } else {\n      // query(sql, values, cb)\n      options.sql = sql;\n      options.values = values;\n    }\n    return new Commands.Query(options, cb);\n  }\n\n  static statementKey(options) {\n    return (\n      `${typeof options.nestTables}/${options.nestTables}/${options.rowsAsArray}${options.sql}`\n    );\n  }\n}\n\nif (Tls.TLSSocket) {\n  // not supported\n} else {\n  Connection.prototype.startTLS = function _startTLS(onSecure) {\n    if (this.config.debug) {\n      // eslint-disable-next-line no-console\n      console.log('Upgrading connection to TLS');\n    }\n    const crypto = require('crypto');\n    const config = this.config;\n    const stream = this.stream;\n    const rejectUnauthorized = this.config.ssl.rejectUnauthorized;\n    const credentials = crypto.createCredentials({\n      key: config.ssl.key,\n      cert: config.ssl.cert,\n      passphrase: config.ssl.passphrase,\n      ca: config.ssl.ca,\n      ciphers: config.ssl.ciphers\n    });\n    const securePair = Tls.createSecurePair(\n      credentials,\n      false,\n      true,\n      rejectUnauthorized\n    );\n\n    if (stream.ondata) {\n      stream.ondata = null;\n    }\n    stream.removeAllListeners('data');\n    stream.pipe(securePair.encrypted);\n    securePair.encrypted.pipe(stream);\n    securePair.cleartext.on('data', data => {\n      this.packetParser.execute(data);\n    });\n    this.write = function(buffer) {\n      securePair.cleartext.write(buffer);\n    };\n    securePair.on('secure', () => {\n      onSecure(rejectUnauthorized ? securePair.ssl.verifyError() : null);\n    });\n  };\n}\n\nmodule.exports = Connection;\n"]},"metadata":{},"sourceType":"script"}
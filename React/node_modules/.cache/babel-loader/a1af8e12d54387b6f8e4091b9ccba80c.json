{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst AbstractDialect = require('../abstract');\n\nconst ConnectionManager = require('./connection-manager');\n\nconst Query = require('./query');\n\nconst QueryGenerator = require('./query-generator');\n\nconst DataTypes = require('../../data-types').postgres;\n\nclass PostgresDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.QueryGenerator = _.extend({}, QueryGenerator, {\n      options: sequelize.options,\n      _dialect: this,\n      sequelize\n    });\n  }\n\n}\n\nPostgresDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  'DEFAULT VALUES': true,\n  'EXCEPTION': true,\n  'ON DUPLICATE KEY': false,\n  'ORDER NULLS': true,\n  returnValues: {\n    returning: true\n  },\n  bulkDefault: true,\n  schemas: true,\n  lock: true,\n  lockOf: true,\n  lockKey: true,\n  lockOuterJoinFailure: true,\n  forShare: 'FOR SHARE',\n  index: {\n    concurrently: true,\n    using: 2,\n    where: true\n  },\n  onConflictDoNothing: ' ON CONFLICT DO NOTHING',\n  NUMERIC: true,\n  ARRAY: true,\n  RANGE: true,\n  GEOMETRY: true,\n  REGEXP: true,\n  GEOGRAPHY: true,\n  JSON: true,\n  JSONB: true,\n  HSTORE: true,\n  deferrableConstraints: true,\n  searchPath: true\n});\nConnectionManager.prototype.defaultVersion = '9.4.0';\nPostgresDialect.prototype.Query = Query;\nPostgresDialect.prototype.DataTypes = DataTypes;\nPostgresDialect.prototype.name = 'postgres';\nPostgresDialect.prototype.TICK_CHAR = '\"';\nPostgresDialect.prototype.TICK_CHAR_LEFT = PostgresDialect.prototype.TICK_CHAR;\nPostgresDialect.prototype.TICK_CHAR_RIGHT = PostgresDialect.prototype.TICK_CHAR;\nmodule.exports = PostgresDialect;\nmodule.exports.default = PostgresDialect;\nmodule.exports.PostgresDialect = PostgresDialect;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/sequelize/lib/dialects/postgres/index.js"],"names":["_","require","AbstractDialect","ConnectionManager","Query","QueryGenerator","DataTypes","postgres","PostgresDialect","constructor","sequelize","connectionManager","extend","options","_dialect","prototype","supports","merge","cloneDeep","returnValues","returning","bulkDefault","schemas","lock","lockOf","lockKey","lockOuterJoinFailure","forShare","index","concurrently","using","where","onConflictDoNothing","NUMERIC","ARRAY","RANGE","GEOMETRY","REGEXP","GEOGRAPHY","JSON","JSONB","HSTORE","deferrableConstraints","searchPath","defaultVersion","name","TICK_CHAR","TICK_CHAR_LEFT","TICK_CHAR_RIGHT","module","exports","default"],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').postgres;\n\nclass PostgresDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.QueryGenerator = _.extend({}, QueryGenerator, {\n      options: sequelize.options,\n      _dialect: this,\n      sequelize\n    });\n  }\n}\n\nPostgresDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  'DEFAULT VALUES': true,\n  'EXCEPTION': true,\n  'ON DUPLICATE KEY': false,\n  'ORDER NULLS': true,\n  returnValues: {\n    returning: true\n  },\n  bulkDefault: true,\n  schemas: true,\n  lock: true,\n  lockOf: true,\n  lockKey: true,\n  lockOuterJoinFailure: true,\n  forShare: 'FOR SHARE',\n  index: {\n    concurrently: true,\n    using: 2,\n    where: true\n  },\n  onConflictDoNothing: ' ON CONFLICT DO NOTHING',\n  NUMERIC: true,\n  ARRAY: true,\n  RANGE: true,\n  GEOMETRY: true,\n  REGEXP: true,\n  GEOGRAPHY: true,\n  JSON: true,\n  JSONB: true,\n  HSTORE: true,\n  deferrableConstraints: true,\n  searchPath: true\n});\n\nConnectionManager.prototype.defaultVersion = '9.4.0';\nPostgresDialect.prototype.Query = Query;\nPostgresDialect.prototype.DataTypes = DataTypes;\nPostgresDialect.prototype.name = 'postgres';\nPostgresDialect.prototype.TICK_CHAR = '\"';\nPostgresDialect.prototype.TICK_CHAR_LEFT = PostgresDialect.prototype.TICK_CHAR;\nPostgresDialect.prototype.TICK_CHAR_RIGHT = PostgresDialect.prototype.TICK_CHAR;\n\nmodule.exports = PostgresDialect;\nmodule.exports.default = PostgresDialect;\nmodule.exports.PostgresDialect = PostgresDialect;\n"]},"metadata":{},"sourceType":"script"}
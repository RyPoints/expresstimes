{"ast":null,"code":"'use strict';\n\nconst Utils = require('../../utils');\n\nconst debug = Utils.getLogger().debugContext('sql:pg');\n\nconst AbstractQuery = require('../abstract/query');\n\nconst QueryTypes = require('../../query-types');\n\nconst Promise = require('../../promise');\n\nconst sequelizeErrors = require('../../errors.js');\n\nconst _ = require('lodash');\n\nclass Query extends AbstractQuery {\n  constructor(client, sequelize, options) {\n    super();\n    this.client = client;\n    this.sequelize = sequelize;\n    this.instance = options.instance;\n    this.model = options.model;\n    this.options = _.extend({\n      logging: console.log,\n      plain: false,\n      raw: false\n    }, options || {});\n    this.checkLoggingOption();\n  }\n  /**\n   * rewrite query with parameters\n   * @private\n   */\n\n\n  static formatBindParameters(sql, values, dialect) {\n    let bindParam = [];\n\n    if (Array.isArray(values)) {\n      bindParam = values;\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, {\n        skipValueReplace: true\n      })[0];\n    } else {\n      let i = 0;\n      const seen = {};\n\n      const replacementFunc = (match, key, values) => {\n        if (seen[key] !== undefined) {\n          return seen[key];\n        }\n\n        if (values[key] !== undefined) {\n          i = i + 1;\n          bindParam.push(values[key]);\n          seen[key] = '$' + i;\n          return '$' + i;\n        }\n\n        return undefined;\n      };\n\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    }\n\n    return [sql, bindParam];\n  }\n\n  run(sql, parameters) {\n    this.sql = sql;\n\n    if (!_.isEmpty(this.options.searchPath)) {\n      this.sql = this.sequelize.getQueryInterface().QueryGenerator.setSearchPath(this.options.searchPath) + sql;\n    }\n\n    const query = parameters && parameters.length ? new Promise((resolve, reject) => this.client.query(this.sql, parameters, (error, result) => error ? reject(error) : resolve(result))) : new Promise((resolve, reject) => this.client.query(this.sql, (error, result) => error ? reject(error) : resolve(result))); //do we need benchmark for this query execution\n\n    const benchmark = this.sequelize.options.benchmark || this.options.benchmark;\n    let queryBegin;\n\n    if (benchmark) {\n      queryBegin = Date.now();\n    } else {\n      this.sequelize.log('Executing (' + (this.client.uuid || 'default') + '): ' + this.sql, this.options);\n    }\n\n    debug(`executing(${this.client.uuid || 'default'}) : ${this.sql}`);\n    return query.catch(err => {\n      // set the client so that it will be reaped if the connection resets while executing\n      if (err.code === 'ECONNRESET') {\n        this.client._invalid = true;\n      }\n\n      err.sql = sql;\n      throw this.formatError(err);\n    }).then(queryResult => {\n      debug(`executed(${this.client.uuid || 'default'}) : ${this.sql}`);\n\n      if (benchmark) {\n        this.sequelize.log('Executed (' + (this.client.uuid || 'default') + '): ' + this.sql, Date.now() - queryBegin, this.options);\n      }\n\n      return queryResult;\n    }).then(queryResult => {\n      const rows = Array.isArray(queryResult) ? queryResult.reduce((allRows, r) => allRows.concat(r.rows || []), []) : queryResult.rows;\n      const rowCount = Array.isArray(queryResult) ? queryResult.reduce((count, r) => _.isFinite(r.rowCount) ? count + r.rowCount : count, 0) : queryResult.rowCount;\n      const isTableNameQuery = sql.indexOf('SELECT table_name FROM information_schema.tables') === 0;\n      const isRelNameQuery = sql.indexOf('SELECT relname FROM pg_class WHERE oid IN') === 0;\n\n      if (isRelNameQuery) {\n        return rows.map(row => ({\n          name: row.relname,\n          tableName: row.relname.split('_')[0]\n        }));\n      } else if (isTableNameQuery) {\n        return rows.map(row => _.values(row));\n      }\n\n      if (rows[0] && rows[0].sequelize_caught_exception !== undefined) {\n        if (rows[0].sequelize_caught_exception !== null) {\n          throw this.formatError({\n            code: '23505',\n            detail: rows[0].sequelize_caught_exception\n          });\n        } else {\n          for (const row of rows) {\n            delete row.sequelize_caught_exception;\n          }\n        }\n      }\n\n      if (this.isShowIndexesQuery()) {\n        for (const row of rows) {\n          const attributes = /ON .*? (?:USING .*?\\s)?\\(([^]*)\\)/gi.exec(row.definition)[1].split(','); // Map column index in table to column name\n\n          const columns = _.zipObject(row.column_indexes, this.sequelize.getQueryInterface().QueryGenerator.fromArray(row.column_names));\n\n          delete row.column_indexes;\n          delete row.column_names;\n          let field;\n          let attribute; // Indkey is the order of attributes in the index, specified by a string of attribute indexes\n\n          row.fields = row.indkey.split(' ').map((indKey, index) => {\n            field = columns[indKey]; // for functional indices indKey = 0\n\n            if (!field) {\n              return null;\n            }\n\n            attribute = attributes[index];\n            return {\n              attribute: field,\n              collate: attribute.match(/COLLATE \"(.*?)\"/) ? /COLLATE \"(.*?)\"/.exec(attribute)[1] : undefined,\n              order: attribute.indexOf('DESC') !== -1 ? 'DESC' : attribute.indexOf('ASC') !== -1 ? 'ASC' : undefined,\n              length: undefined\n            };\n          }).filter(n => n !== null);\n          delete row.columns;\n        }\n\n        return rows;\n      } else if (this.isForeignKeysQuery()) {\n        const result = [];\n\n        for (const row of rows) {\n          let defParts;\n\n          if (row.condef !== undefined && (defParts = row.condef.match(/FOREIGN KEY \\((.+)\\) REFERENCES (.+)\\((.+)\\)( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?/))) {\n            row.id = row.constraint_name;\n            row.table = defParts[2];\n            row.from = defParts[1];\n            row.to = defParts[3];\n            let i;\n\n            for (i = 5; i <= 8; i += 3) {\n              if (/(UPDATE|DELETE)/.test(defParts[i])) {\n                row['on_' + defParts[i].toLowerCase()] = defParts[i + 1];\n              }\n            }\n          }\n\n          result.push(row);\n        }\n\n        return result;\n      } else if (this.isSelectQuery()) {\n        let result = rows; // Postgres will treat tables as case-insensitive, so fix the case\n        // of the returned values to match attributes\n\n        if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {\n          const attrsMap = _.reduce(this.model.rawAttributes, (m, v, k) => {\n            m[k.toLowerCase()] = k;\n            return m;\n          }, {});\n\n          result = _.map(rows, row => {\n            return _.mapKeys(row, (value, key) => {\n              const targetAttr = attrsMap[key];\n\n              if (typeof targetAttr === 'string' && targetAttr !== key) {\n                return targetAttr;\n              } else {\n                return key;\n              }\n            });\n          });\n        }\n\n        return this.handleSelectQuery(result);\n      } else if (QueryTypes.DESCRIBE === this.options.type) {\n        const result = {};\n\n        for (const row of rows) {\n          result[row.Field] = {\n            type: row.Type.toUpperCase(),\n            allowNull: row.Null === 'YES',\n            defaultValue: row.Default,\n            special: row.special ? this.sequelize.getQueryInterface().QueryGenerator.fromArray(row.special) : [],\n            primaryKey: row.Constraint === 'PRIMARY KEY'\n          };\n\n          if (result[row.Field].type === 'BOOLEAN') {\n            result[row.Field].defaultValue = {\n              'false': false,\n              'true': true\n            }[result[row.Field].defaultValue];\n\n            if (result[row.Field].defaultValue === undefined) {\n              result[row.Field].defaultValue = null;\n            }\n          }\n\n          if (typeof result[row.Field].defaultValue === 'string') {\n            result[row.Field].defaultValue = result[row.Field].defaultValue.replace(/'/g, '');\n\n            if (result[row.Field].defaultValue.indexOf('::') > -1) {\n              const split = result[row.Field].defaultValue.split('::');\n\n              if (split[1].toLowerCase() !== 'regclass)') {\n                result[row.Field].defaultValue = split[0];\n              }\n            }\n          }\n        }\n\n        return result;\n      } else if (this.isVersionQuery()) {\n        return rows[0].server_version;\n      } else if (this.isShowOrDescribeQuery()) {\n        return rows;\n      } else if (QueryTypes.BULKUPDATE === this.options.type) {\n        if (!this.options.returning) {\n          return parseInt(rowCount, 10);\n        }\n\n        return this.handleSelectQuery(rows);\n      } else if (QueryTypes.BULKDELETE === this.options.type) {\n        return parseInt(rowCount, 10);\n      } else if (this.isUpsertQuery()) {\n        return rows[0];\n      } else if (this.isInsertQuery() || this.isUpdateQuery()) {\n        if (this.instance && this.instance.dataValues) {\n          for (const key in rows[0]) {\n            if (rows[0].hasOwnProperty(key)) {\n              const record = rows[0][key];\n\n              const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n\n              this.instance.dataValues[attr && attr.fieldName || key] = record;\n            }\n          }\n        }\n\n        return [this.instance || rows && (this.options.plain && rows[0] || rows) || undefined, rowCount];\n      } else if (this.isRawQuery()) {\n        return [rows, queryResult];\n      } else {\n        return rows;\n      }\n    });\n  }\n\n  formatError(err) {\n    let match;\n    let table;\n    let index;\n    let fields;\n    let errors;\n    let message;\n    const code = err.code || err.sqlState;\n    const errMessage = err.message || err.messagePrimary;\n    const errDetail = err.detail || err.messageDetail;\n\n    switch (code) {\n      case '23503':\n        index = errMessage.match(/violates foreign key constraint \\\"(.+?)\\\"/);\n        index = index ? index[1] : undefined;\n        table = errMessage.match(/on table \\\"(.+?)\\\"/);\n        table = table ? table[1] : undefined;\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          message: errMessage,\n          fields: null,\n          index,\n          table,\n          parent: err\n        });\n\n      case '23505':\n        // there are multiple different formats of error messages for this error code\n        // this regex should check at least two\n        if (errDetail && (match = errDetail.replace(/\"/g, '').match(/Key \\((.*?)\\)=\\((.*?)\\)/))) {\n          fields = _.zipObject(match[1].split(', '), match[2].split(', '));\n          errors = [];\n          message = 'Validation error';\n\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), 'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field, value, this.instance, 'not_unique'));\n          });\n\n          if (this.model && this.model.uniqueKeys) {\n            _.forOwn(this.model.uniqueKeys, constraint => {\n              if (_.isEqual(constraint.fields, Object.keys(fields)) && !!constraint.msg) {\n                message = constraint.msg;\n                return false;\n              }\n            });\n          }\n\n          return new sequelizeErrors.UniqueConstraintError({\n            message,\n            errors,\n            parent: err,\n            fields\n          });\n        }\n\n        return new sequelizeErrors.UniqueConstraintError({\n          message: errMessage,\n          parent: err\n        });\n\n      case '23P01':\n        match = errDetail.match(/Key \\((.*?)\\)=\\((.*?)\\)/);\n\n        if (match) {\n          fields = _.zipObject(match[1].split(', '), match[2].split(', '));\n        }\n\n        message = 'Exclusion constraint error';\n        return new sequelizeErrors.ExclusionConstraintError({\n          message,\n          constraint: err.constraint,\n          fields,\n          table: err.table,\n          parent: err\n        });\n\n      case '42704':\n        if (err.sql && /CONSTRAINT/gi.test(err.sql)) {\n          message = 'Unknown constraint error';\n          throw new sequelizeErrors.UnknownConstraintError({\n            message,\n            constraint: err.constraint,\n            fields,\n            table: err.table,\n            parent: err\n          });\n        }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err);\n    }\n  }\n\n  isForeignKeysQuery() {\n    return /SELECT conname as constraint_name, pg_catalog\\.pg_get_constraintdef\\(r\\.oid, true\\) as condef FROM pg_catalog\\.pg_constraint r WHERE r\\.conrelid = \\(SELECT oid FROM pg_class WHERE relname = '.*' LIMIT 1\\) AND r\\.contype = 'f' ORDER BY 1;/.test(this.sql);\n  }\n\n  getInsertIdField() {\n    return 'id';\n  }\n\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/sequelize/lib/dialects/postgres/query.js"],"names":["Utils","require","debug","getLogger","debugContext","AbstractQuery","QueryTypes","Promise","sequelizeErrors","_","Query","constructor","client","sequelize","options","instance","model","extend","logging","console","log","plain","raw","checkLoggingOption","formatBindParameters","sql","values","dialect","bindParam","Array","isArray","skipValueReplace","i","seen","replacementFunc","match","key","undefined","push","run","parameters","isEmpty","searchPath","getQueryInterface","QueryGenerator","setSearchPath","query","length","resolve","reject","error","result","benchmark","queryBegin","Date","now","uuid","catch","err","code","_invalid","formatError","then","queryResult","rows","reduce","allRows","r","concat","rowCount","count","isFinite","isTableNameQuery","indexOf","isRelNameQuery","map","row","name","relname","tableName","split","sequelize_caught_exception","detail","isShowIndexesQuery","attributes","exec","definition","columns","zipObject","column_indexes","fromArray","column_names","field","attribute","fields","indkey","indKey","index","collate","order","filter","n","isForeignKeysQuery","defParts","condef","id","constraint_name","table","from","to","test","toLowerCase","isSelectQuery","quoteIdentifiers","attrsMap","rawAttributes","m","v","k","mapKeys","value","targetAttr","handleSelectQuery","DESCRIBE","type","Field","Type","toUpperCase","allowNull","Null","defaultValue","Default","special","primaryKey","Constraint","replace","isVersionQuery","server_version","isShowOrDescribeQuery","BULKUPDATE","returning","parseInt","BULKDELETE","isUpsertQuery","isInsertQuery","isUpdateQuery","dataValues","hasOwnProperty","record","attr","find","fieldName","isRawQuery","errors","message","sqlState","errMessage","messagePrimary","errDetail","messageDetail","ForeignKeyConstraintError","parent","forOwn","ValidationErrorItem","getUniqueConstraintErrorMessage","uniqueKeys","constraint","isEqual","Object","keys","msg","UniqueConstraintError","ExclusionConstraintError","UnknownConstraintError","DatabaseError","getInsertIdField","module","exports","default"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Utils = require('../../utils');\nconst debug = Utils.getLogger().debugContext('sql:pg');\nconst AbstractQuery = require('../abstract/query');\nconst QueryTypes = require('../../query-types');\nconst Promise = require('../../promise');\nconst sequelizeErrors = require('../../errors.js');\nconst _ = require('lodash');\n\nclass Query extends AbstractQuery {\n  constructor(client, sequelize, options) {\n    super();\n    this.client = client;\n    this.sequelize = sequelize;\n    this.instance = options.instance;\n    this.model = options.model;\n    this.options = _.extend({\n      logging: console.log,\n      plain: false,\n      raw: false\n    }, options || {});\n\n    this.checkLoggingOption();\n  }\n\n  /**\n   * rewrite query with parameters\n   * @private\n   */\n  static formatBindParameters(sql, values, dialect) {\n    let bindParam = [];\n    if (Array.isArray(values)) {\n      bindParam = values;\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, { skipValueReplace: true })[0];\n    } else {\n      let i = 0;\n      const seen = {};\n      const replacementFunc = (match, key, values) => {\n        if (seen[key] !== undefined) {\n          return seen[key];\n        }\n        if (values[key] !== undefined) {\n          i = i + 1;\n          bindParam.push(values[key]);\n          seen[key] = '$'+i;\n          return '$'+i;\n        }\n        return undefined;\n      };\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    }\n    return [sql, bindParam];\n  }\n\n  run(sql, parameters) {\n    this.sql = sql;\n\n    if (!_.isEmpty(this.options.searchPath)) {\n      this.sql = this.sequelize.getQueryInterface().QueryGenerator.setSearchPath(this.options.searchPath) + sql;\n    }\n\n    const query = parameters && parameters.length\n      ? new Promise((resolve, reject) => this.client.query(this.sql, parameters, (error, result) => error ? reject(error) : resolve(result)))\n      : new Promise((resolve, reject) => this.client.query(this.sql, (error, result) => error ? reject(error) : resolve(result)));\n\n    //do we need benchmark for this query execution\n    const benchmark = this.sequelize.options.benchmark || this.options.benchmark;\n\n    let queryBegin;\n    if (benchmark) {\n      queryBegin = Date.now();\n    } else {\n      this.sequelize.log('Executing (' + (this.client.uuid || 'default') + '): ' + this.sql, this.options);\n    }\n\n    debug(`executing(${this.client.uuid || 'default'}) : ${this.sql}`);\n\n    return query.catch(err => {\n      // set the client so that it will be reaped if the connection resets while executing\n      if (err.code === 'ECONNRESET') {\n        this.client._invalid = true;\n      }\n\n      err.sql = sql;\n      throw this.formatError(err);\n    })\n      .then(queryResult => {\n        debug(`executed(${this.client.uuid || 'default'}) : ${this.sql}`);\n\n        if (benchmark) {\n          this.sequelize.log('Executed (' + (this.client.uuid || 'default') + '): ' + this.sql, Date.now() - queryBegin, this.options);\n        }\n\n        return queryResult;\n      })\n      .then(queryResult => {\n        const rows = Array.isArray(queryResult)\n          ? queryResult.reduce((allRows, r) => allRows.concat(r.rows || []), [])\n          : queryResult.rows;\n        const rowCount = Array.isArray(queryResult)\n          ? queryResult.reduce(\n            (count, r) => _.isFinite(r.rowCount) ? count + r.rowCount : count,\n            0\n          )\n          : queryResult.rowCount;\n\n        const isTableNameQuery = sql.indexOf('SELECT table_name FROM information_schema.tables') === 0;\n        const isRelNameQuery = sql.indexOf('SELECT relname FROM pg_class WHERE oid IN') === 0;\n\n        if (isRelNameQuery) {\n          return rows.map(row => ({\n            name: row.relname,\n            tableName: row.relname.split('_')[0]\n          }));\n        } else if (isTableNameQuery) {\n          return rows.map(row => _.values(row));\n        }\n\n        if (rows[0] && rows[0].sequelize_caught_exception !== undefined) {\n          if (rows[0].sequelize_caught_exception !== null) {\n            throw this.formatError({\n              code: '23505',\n              detail: rows[0].sequelize_caught_exception\n            });\n          } else {\n            for (const row of rows) {\n              delete row.sequelize_caught_exception;\n            }\n          }\n        }\n\n        if (this.isShowIndexesQuery()) {\n          for (const row of rows) {\n            const attributes = /ON .*? (?:USING .*?\\s)?\\(([^]*)\\)/gi.exec(row.definition)[1].split(',');\n\n            // Map column index in table to column name\n            const columns = _.zipObject(\n              row.column_indexes,\n              this.sequelize.getQueryInterface().QueryGenerator.fromArray(row.column_names)\n            );\n            delete row.column_indexes;\n            delete row.column_names;\n\n            let field;\n            let attribute;\n\n            // Indkey is the order of attributes in the index, specified by a string of attribute indexes\n            row.fields = row.indkey.split(' ').map((indKey, index) => {\n              field = columns[indKey];\n              // for functional indices indKey = 0\n              if (!field) {\n                return null;\n              }\n              attribute = attributes[index];\n              return {\n                attribute: field,\n                collate: attribute.match(/COLLATE \"(.*?)\"/) ? /COLLATE \"(.*?)\"/.exec(attribute)[1] : undefined,\n                order: attribute.indexOf('DESC') !== -1 ? 'DESC' : attribute.indexOf('ASC') !== -1 ? 'ASC': undefined,\n                length: undefined\n              };\n            }).filter(n => n !== null);\n            delete row.columns;\n          }\n          return rows;\n        } else if (this.isForeignKeysQuery()) {\n          const result = [];\n          for (const row of rows) {\n            let defParts;\n            if (row.condef !== undefined && (defParts = row.condef.match(/FOREIGN KEY \\((.+)\\) REFERENCES (.+)\\((.+)\\)( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?/))) {\n              row.id = row.constraint_name;\n              row.table = defParts[2];\n              row.from = defParts[1];\n              row.to = defParts[3];\n              let i;\n              for (i=5;i<=8;i+=3) {\n                if (/(UPDATE|DELETE)/.test(defParts[i])) {\n                  row['on_'+defParts[i].toLowerCase()] = defParts[i+1];\n                }\n              }\n            }\n            result.push(row);\n          }\n          return result;\n        } else if (this.isSelectQuery()) {\n          let result = rows;\n          // Postgres will treat tables as case-insensitive, so fix the case\n          // of the returned values to match attributes\n          if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {\n            const attrsMap = _.reduce(this.model.rawAttributes, (m, v, k) => {\n              m[k.toLowerCase()] = k;\n              return m;\n            }, {});\n            result = _.map(rows, row=> {\n              return _.mapKeys(row, (value, key)=> {\n                const targetAttr = attrsMap[key];\n                if (typeof targetAttr === 'string' && targetAttr !== key) {\n                  return targetAttr;\n                } else {\n                  return key;\n                }\n              });\n            });\n          }\n          return this.handleSelectQuery(result);\n        } else if (QueryTypes.DESCRIBE === this.options.type) {\n          const result = {};\n\n          for (const row of rows) {\n            result[row.Field] = {\n              type: row.Type.toUpperCase(),\n              allowNull: row.Null === 'YES',\n              defaultValue: row.Default,\n              special: row.special ? this.sequelize.getQueryInterface().QueryGenerator.fromArray(row.special) : [],\n              primaryKey: row.Constraint === 'PRIMARY KEY'\n            };\n\n            if (result[row.Field].type === 'BOOLEAN') {\n              result[row.Field].defaultValue = { 'false': false, 'true': true }[result[row.Field].defaultValue];\n\n              if (result[row.Field].defaultValue === undefined) {\n                result[row.Field].defaultValue = null;\n              }\n            }\n\n            if (typeof result[row.Field].defaultValue === 'string') {\n              result[row.Field].defaultValue = result[row.Field].defaultValue.replace(/'/g, '');\n\n              if (result[row.Field].defaultValue.indexOf('::') > -1) {\n                const split = result[row.Field].defaultValue.split('::');\n                if (split[1].toLowerCase() !== 'regclass)') {\n                  result[row.Field].defaultValue = split[0];\n                }\n              }\n            }\n          }\n\n          return result;\n        } else if (this.isVersionQuery()) {\n          return rows[0].server_version;\n        } else if (this.isShowOrDescribeQuery()) {\n          return rows;\n        } else if (QueryTypes.BULKUPDATE === this.options.type) {\n          if (!this.options.returning) {\n            return parseInt(rowCount, 10);\n          }\n          return this.handleSelectQuery(rows);\n        } else if (QueryTypes.BULKDELETE === this.options.type) {\n          return parseInt(rowCount, 10);\n        } else if (this.isUpsertQuery()) {\n          return rows[0];\n        } else if (this.isInsertQuery() || this.isUpdateQuery()) {\n          if (this.instance && this.instance.dataValues) {\n            for (const key in rows[0]) {\n              if (rows[0].hasOwnProperty(key)) {\n                const record = rows[0][key];\n\n                const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n\n                this.instance.dataValues[attr && attr.fieldName || key] = record;\n              }\n            }\n          }\n\n          return [\n            this.instance || rows && (this.options.plain && rows[0] || rows) || undefined,\n            rowCount\n          ];\n        } else if (this.isRawQuery()) {\n          return [rows, queryResult];\n        } else {\n          return rows;\n        }\n      });\n  }\n\n  formatError(err) {\n    let match;\n    let table;\n    let index;\n    let fields;\n    let errors;\n    let message;\n\n    const code = err.code || err.sqlState;\n    const errMessage = err.message || err.messagePrimary;\n    const errDetail = err.detail || err.messageDetail;\n\n    switch (code) {\n      case '23503':\n        index = errMessage.match(/violates foreign key constraint \\\"(.+?)\\\"/);\n        index = index ? index[1] : undefined;\n        table = errMessage.match(/on table \\\"(.+?)\\\"/);\n        table = table ? table[1] : undefined;\n\n        return new sequelizeErrors.ForeignKeyConstraintError({message: errMessage, fields: null, index, table, parent: err});\n      case '23505':\n        // there are multiple different formats of error messages for this error code\n        // this regex should check at least two\n        if (errDetail && (match = errDetail.replace(/\"/g, '').match(/Key \\((.*?)\\)=\\((.*?)\\)/))) {\n          fields = _.zipObject(match[1].split(', '), match[2].split(', '));\n          errors = [];\n          message = 'Validation error';\n\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(\n              this.getUniqueConstraintErrorMessage(field),\n              'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n              field,\n              value,\n              this.instance,\n              'not_unique'\n            ));\n          });\n\n          if (this.model && this.model.uniqueKeys) {\n            _.forOwn(this.model.uniqueKeys, constraint => {\n              if (_.isEqual(constraint.fields, Object.keys(fields)) && !!constraint.msg) {\n                message = constraint.msg;\n                return false;\n              }\n            });\n          }\n\n          return new sequelizeErrors.UniqueConstraintError({message, errors, parent: err, fields});\n        }\n\n        return new sequelizeErrors.UniqueConstraintError({\n          message: errMessage,\n          parent: err\n        });\n\n      case '23P01':\n        match = errDetail.match(/Key \\((.*?)\\)=\\((.*?)\\)/);\n\n        if (match) {\n          fields = _.zipObject(match[1].split(', '), match[2].split(', '));\n        }\n        message = 'Exclusion constraint error';\n\n        return new sequelizeErrors.ExclusionConstraintError({\n          message,\n          constraint: err.constraint,\n          fields,\n          table: err.table,\n          parent: err\n        });\n\n      case '42704':\n        if (err.sql && /CONSTRAINT/gi.test(err.sql)) {\n          message = 'Unknown constraint error';\n\n          throw new sequelizeErrors.UnknownConstraintError({\n            message,\n            constraint: err.constraint,\n            fields,\n            table: err.table,\n            parent: err\n          });\n        }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err);\n    }\n  }\n\n  isForeignKeysQuery() {\n    return /SELECT conname as constraint_name, pg_catalog\\.pg_get_constraintdef\\(r\\.oid, true\\) as condef FROM pg_catalog\\.pg_constraint r WHERE r\\.conrelid = \\(SELECT oid FROM pg_class WHERE relname = '.*' LIMIT 1\\) AND r\\.contype = 'f' ORDER BY 1;/.test(this.sql);\n  }\n\n  getInsertIdField() {\n    return 'id';\n  }\n}\n\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"]},"metadata":{},"sourceType":"script"}
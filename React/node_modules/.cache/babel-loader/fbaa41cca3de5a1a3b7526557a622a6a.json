{"ast":null,"code":"'use strict';\n\nconst Packets = require('../packets/index.js');\n\nconst Command = require('./command.js');\n\nconst CloseStatement = require('./close_statement.js');\n\nconst Execute = require('./execute.js');\n\nclass PreparedStatementInfo {\n  constructor(query, id, columns, parameters, connection) {\n    this.query = query;\n    this.id = id;\n    this.columns = columns;\n    this.parameters = parameters;\n    this.rowParser = null;\n    this._connection = connection;\n  }\n\n  close() {\n    return this._connection.addCommand(new CloseStatement(this.id));\n  }\n\n  execute(parameters, callback) {\n    if (typeof parameters === 'function') {\n      callback = parameters;\n      parameters = [];\n    }\n\n    return this._connection.addCommand(new Execute({\n      statement: this,\n      values: parameters\n    }, callback));\n  }\n\n}\n\nclass Prepare extends Command {\n  constructor(options, callback) {\n    super();\n    this.query = options.sql;\n    this.onResult = callback;\n    this.id = 0;\n    this.fieldCount = 0;\n    this.parameterCount = 0;\n    this.fields = [];\n    this.parameterDefinitions = [];\n    this.options = options;\n  }\n\n  start(packet, connection) {\n    const Connection = connection.constructor;\n    this.key = Connection.statementKey(this.options);\n\n    const statement = connection._statements.get(this.key);\n\n    if (statement) {\n      if (this.onResult) {\n        this.onResult(null, statement);\n      }\n\n      return null;\n    }\n\n    const cmdPacket = new Packets.PrepareStatement(this.query, connection.config.charsetNumber);\n    connection.writePacket(cmdPacket.toPacket(1));\n    return Prepare.prototype.prepareHeader;\n  }\n\n  prepareHeader(packet, connection) {\n    const header = new Packets.PreparedStatementHeader(packet);\n    this.id = header.id;\n    this.fieldCount = header.fieldCount;\n    this.parameterCount = header.parameterCount;\n\n    if (this.parameterCount > 0) {\n      return Prepare.prototype.readParameter;\n    }\n\n    if (this.fieldCount > 0) {\n      return Prepare.prototype.readField;\n    }\n\n    return this.prepareDone(connection);\n  }\n\n  readParameter(packet, connection) {\n    const def = new Packets.ColumnDefinition(packet, connection.clientEncoding);\n    this.parameterDefinitions.push(def);\n\n    if (this.parameterDefinitions.length === this.parameterCount) {\n      return Prepare.prototype.parametersEOF;\n    }\n\n    return this.readParameter;\n  }\n\n  readField(packet, connection) {\n    const def = new Packets.ColumnDefinition(packet, connection.clientEncoding);\n    this.fields.push(def);\n\n    if (this.fields.length === this.fieldCount) {\n      return Prepare.prototype.fieldsEOF;\n    }\n\n    return Prepare.prototype.readField;\n  }\n\n  parametersEOF(packet, connection) {\n    if (!packet.isEOF()) {\n      return connection.protocolError('Expected EOF packet after parameters');\n    }\n\n    if (this.fieldCount > 0) {\n      return Prepare.prototype.readField;\n    }\n\n    return this.prepareDone(connection);\n  }\n\n  fieldsEOF(packet, connection) {\n    if (!packet.isEOF()) {\n      return connection.protocolError('Expected EOF packet after fields');\n    }\n\n    return this.prepareDone(connection);\n  }\n\n  prepareDone(connection) {\n    const statement = new PreparedStatementInfo(this.query, this.id, this.fields, this.parameterDefinitions, connection);\n\n    connection._statements.set(this.key, statement);\n\n    if (this.onResult) {\n      this.onResult(null, statement);\n    }\n\n    return null;\n  }\n\n}\n\nmodule.exports = Prepare;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/mysql2/lib/commands/prepare.js"],"names":["Packets","require","Command","CloseStatement","Execute","PreparedStatementInfo","constructor","query","id","columns","parameters","connection","rowParser","_connection","close","addCommand","execute","callback","statement","values","Prepare","options","sql","onResult","fieldCount","parameterCount","fields","parameterDefinitions","start","packet","Connection","key","statementKey","_statements","get","cmdPacket","PrepareStatement","config","charsetNumber","writePacket","toPacket","prototype","prepareHeader","header","PreparedStatementHeader","readParameter","readField","prepareDone","def","ColumnDefinition","clientEncoding","push","length","parametersEOF","fieldsEOF","isEOF","protocolError","set","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Packets = require('../packets/index.js');\nconst Command = require('./command.js');\nconst CloseStatement = require('./close_statement.js');\nconst Execute = require('./execute.js');\n\nclass PreparedStatementInfo {\n  constructor(query, id, columns, parameters, connection) {\n    this.query = query;\n    this.id = id;\n    this.columns = columns;\n    this.parameters = parameters;\n    this.rowParser = null;\n    this._connection = connection;\n  }\n\n  close() {\n    return this._connection.addCommand(new CloseStatement(this.id));\n  }\n\n  execute(parameters, callback) {\n    if (typeof parameters === 'function') {\n      callback = parameters;\n      parameters = [];\n    }\n    return this._connection.addCommand(\n      new Execute({ statement: this, values: parameters }, callback)\n    );\n  }\n}\n\nclass Prepare extends Command {\n  constructor(options, callback) {\n    super();\n    this.query = options.sql;\n    this.onResult = callback;\n    this.id = 0;\n    this.fieldCount = 0;\n    this.parameterCount = 0;\n    this.fields = [];\n    this.parameterDefinitions = [];\n    this.options = options;\n  }\n\n  start(packet, connection) {\n    const Connection = connection.constructor;\n    this.key = Connection.statementKey(this.options);\n    const statement = connection._statements.get(this.key);\n    if (statement) {\n      if (this.onResult) {\n        this.onResult(null, statement);\n      }\n      return null;\n    }\n    const cmdPacket = new Packets.PrepareStatement(\n      this.query,\n      connection.config.charsetNumber\n    );\n    connection.writePacket(cmdPacket.toPacket(1));\n    return Prepare.prototype.prepareHeader;\n  }\n\n  prepareHeader(packet, connection) {\n    const header = new Packets.PreparedStatementHeader(packet);\n    this.id = header.id;\n    this.fieldCount = header.fieldCount;\n    this.parameterCount = header.parameterCount;\n    if (this.parameterCount > 0) {\n      return Prepare.prototype.readParameter;\n    } if (this.fieldCount > 0) {\n      return Prepare.prototype.readField;\n    } \n    return this.prepareDone(connection);\n    \n  }\n\n  readParameter(packet, connection) {\n    const def = new Packets.ColumnDefinition(packet, connection.clientEncoding);\n    this.parameterDefinitions.push(def);\n    if (this.parameterDefinitions.length === this.parameterCount) {\n      return Prepare.prototype.parametersEOF;\n    }\n    return this.readParameter;\n  }\n\n  readField(packet, connection) {\n    const def = new Packets.ColumnDefinition(packet, connection.clientEncoding);\n    this.fields.push(def);\n    if (this.fields.length === this.fieldCount) {\n      return Prepare.prototype.fieldsEOF;\n    }\n    return Prepare.prototype.readField;\n  }\n\n  parametersEOF(packet, connection) {\n    if (!packet.isEOF()) {\n      return connection.protocolError('Expected EOF packet after parameters');\n    }\n    if (this.fieldCount > 0) {\n      return Prepare.prototype.readField;\n    } \n    return this.prepareDone(connection);\n    \n  }\n\n  fieldsEOF(packet, connection) {\n    if (!packet.isEOF()) {\n      return connection.protocolError('Expected EOF packet after fields');\n    }\n    return this.prepareDone(connection);\n  }\n\n  prepareDone(connection) {\n    const statement = new PreparedStatementInfo(\n      this.query,\n      this.id,\n      this.fields,\n      this.parameterDefinitions,\n      connection\n    );\n    connection._statements.set(this.key, statement);\n    if (this.onResult) {\n      this.onResult(null, statement);\n    }\n    return null;\n  }\n}\n\nmodule.exports = Prepare;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nconst wkx = require('wkx');\n\nconst _ = require('lodash');\n\nconst moment = require('moment-timezone');\n\nconst inherits = require('../../utils/inherits');\n\nmodule.exports = BaseTypes => {\n  BaseTypes.ABSTRACT.prototype.dialectTypes = 'https://dev.mysql.com/doc/refman/5.7/en/data-types.html';\n  /**\n   * types: [buffer_type, ...]\n   * @see buffer_type here https://dev.mysql.com/doc/refman/5.7/en/c-api-prepared-statement-type-codes.html\n   * @see hex here https://github.com/sidorares/node-mysql2/blob/master/lib/constants/types.js\n   */\n\n  BaseTypes.DATE.types.mysql = ['DATETIME'];\n  BaseTypes.STRING.types.mysql = ['VAR_STRING'];\n  BaseTypes.CHAR.types.mysql = ['STRING'];\n  BaseTypes.TEXT.types.mysql = ['BLOB'];\n  BaseTypes.TINYINT.types.mysql = ['TINY'];\n  BaseTypes.SMALLINT.types.mysql = ['SHORT'];\n  BaseTypes.MEDIUMINT.types.mysql = ['INT24'];\n  BaseTypes.INTEGER.types.mysql = ['LONG'];\n  BaseTypes.BIGINT.types.mysql = ['LONGLONG'];\n  BaseTypes.FLOAT.types.mysql = ['FLOAT'];\n  BaseTypes.TIME.types.mysql = ['TIME'];\n  BaseTypes.DATEONLY.types.mysql = ['DATE'];\n  BaseTypes.BOOLEAN.types.mysql = ['TINY'];\n  BaseTypes.BLOB.types.mysql = ['TINYBLOB', 'BLOB', 'LONGBLOB'];\n  BaseTypes.DECIMAL.types.mysql = ['NEWDECIMAL'];\n  BaseTypes.UUID.types.mysql = false;\n  BaseTypes.ENUM.types.mysql = false;\n  BaseTypes.REAL.types.mysql = ['DOUBLE'];\n  BaseTypes.DOUBLE.types.mysql = ['DOUBLE'];\n  BaseTypes.GEOMETRY.types.mysql = ['GEOMETRY'];\n  BaseTypes.JSON.types.mysql = ['JSON'];\n\n  function BLOB(length) {\n    if (!(this instanceof BLOB)) return new BLOB(length);\n    BaseTypes.BLOB.apply(this, arguments);\n  }\n\n  inherits(BLOB, BaseTypes.BLOB);\n\n  BLOB.parse = function (value, options, next) {\n    const data = next();\n\n    if (Buffer.isBuffer(data) && data.length === 0) {\n      return null;\n    }\n\n    return data;\n  };\n\n  function DECIMAL(precision, scale) {\n    if (!(this instanceof DECIMAL)) return new DECIMAL(precision, scale);\n    BaseTypes.DECIMAL.apply(this, arguments);\n  }\n\n  inherits(DECIMAL, BaseTypes.DECIMAL);\n\n  DECIMAL.prototype.toSql = function toSql() {\n    let definition = BaseTypes.DECIMAL.prototype.toSql.apply(this);\n\n    if (this._unsigned) {\n      definition += ' UNSIGNED';\n    }\n\n    if (this._zerofill) {\n      definition += ' ZEROFILL';\n    }\n\n    return definition;\n  };\n\n  function DATE(length) {\n    if (!(this instanceof DATE)) return new DATE(length);\n    BaseTypes.DATE.apply(this, arguments);\n  }\n\n  inherits(DATE, BaseTypes.DATE);\n\n  DATE.prototype.toSql = function toSql() {\n    return 'DATETIME' + (this._length ? '(' + this._length + ')' : '');\n  };\n\n  DATE.prototype._stringify = function _stringify(date, options) {\n    date = BaseTypes.DATE.prototype._applyTimezone(date, options); // Fractional DATETIMEs only supported on MySQL 5.6.4+\n\n    if (this._length) {\n      return date.format('YYYY-MM-DD HH:mm:ss.SSS');\n    }\n\n    return date.format('YYYY-MM-DD HH:mm:ss');\n  };\n\n  DATE.parse = function parse(value, options) {\n    value = value.string();\n\n    if (value === null) {\n      return value;\n    }\n\n    if (moment.tz.zone(options.timezone)) {\n      value = moment.tz(value, options.timezone).toDate();\n    } else {\n      value = new Date(value + ' ' + options.timezone);\n    }\n\n    return value;\n  };\n\n  function DATEONLY() {\n    if (!(this instanceof DATEONLY)) return new DATEONLY();\n    BaseTypes.DATEONLY.apply(this, arguments);\n  }\n\n  inherits(DATEONLY, BaseTypes.DATEONLY);\n\n  DATEONLY.parse = function parse(value) {\n    return value.string();\n  };\n\n  function UUID() {\n    if (!(this instanceof UUID)) return new UUID();\n    BaseTypes.UUID.apply(this, arguments);\n  }\n\n  inherits(UUID, BaseTypes.UUID);\n\n  UUID.prototype.toSql = function toSql() {\n    return 'CHAR(36) BINARY';\n  };\n\n  const SUPPORTED_GEOMETRY_TYPES = ['POINT', 'LINESTRING', 'POLYGON'];\n\n  function GEOMETRY(type, srid) {\n    if (!(this instanceof GEOMETRY)) return new GEOMETRY(type, srid);\n    BaseTypes.GEOMETRY.apply(this, arguments);\n\n    if (_.isEmpty(this.type)) {\n      this.sqlType = this.key;\n    } else if (_.includes(SUPPORTED_GEOMETRY_TYPES, this.type)) {\n      this.sqlType = this.type;\n    } else {\n      throw new Error('Supported geometry types are: ' + SUPPORTED_GEOMETRY_TYPES.join(', '));\n    }\n  }\n\n  inherits(GEOMETRY, BaseTypes.GEOMETRY);\n\n  GEOMETRY.parse = GEOMETRY.prototype.parse = function parse(value) {\n    value = value.buffer(); // Empty buffer, MySQL doesn't support POINT EMPTY\n    // check, https://dev.mysql.com/worklog/task/?id=2381\n\n    if (!value || value.length === 0) {\n      return null;\n    } // For some reason, discard the first 4 bytes\n\n\n    value = value.slice(4);\n    return wkx.Geometry.parse(value).toGeoJSON();\n  };\n\n  GEOMETRY.prototype.toSql = function toSql() {\n    return this.sqlType;\n  };\n\n  function ENUM() {\n    if (!(this instanceof ENUM)) {\n      const obj = Object.create(ENUM.prototype);\n      ENUM.apply(obj, arguments);\n      return obj;\n    }\n\n    BaseTypes.ENUM.apply(this, arguments);\n  }\n\n  inherits(ENUM, BaseTypes.ENUM);\n\n  ENUM.prototype.toSql = function toSql(options) {\n    return 'ENUM(' + _.map(this.values, value => options.escape(value)).join(', ') + ')';\n  };\n\n  function JSONTYPE() {\n    if (!(this instanceof JSONTYPE)) return new JSONTYPE();\n    BaseTypes.JSON.apply(this, arguments);\n  }\n\n  inherits(JSONTYPE, BaseTypes.JSON);\n\n  JSONTYPE.prototype._stringify = function _stringify(value, options) {\n    return options.operation === 'where' && typeof value === 'string' ? value : JSON.stringify(value);\n  };\n\n  const exports = {\n    ENUM,\n    DATE,\n    DATEONLY,\n    UUID,\n    GEOMETRY,\n    DECIMAL,\n    BLOB,\n    JSON: JSONTYPE\n  };\n\n  _.forIn(exports, (DataType, key) => {\n    if (!DataType.key) DataType.key = key;\n\n    if (!DataType.extend) {\n      DataType.extend = function extend(oldType) {\n        return new DataType(oldType.options);\n      };\n    }\n  });\n\n  return exports;\n};","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/sequelize/lib/dialects/mysql/data-types.js"],"names":["wkx","require","_","moment","inherits","module","exports","BaseTypes","ABSTRACT","prototype","dialectTypes","DATE","types","mysql","STRING","CHAR","TEXT","TINYINT","SMALLINT","MEDIUMINT","INTEGER","BIGINT","FLOAT","TIME","DATEONLY","BOOLEAN","BLOB","DECIMAL","UUID","ENUM","REAL","DOUBLE","GEOMETRY","JSON","length","apply","arguments","parse","value","options","next","data","Buffer","isBuffer","precision","scale","toSql","definition","_unsigned","_zerofill","_length","_stringify","date","_applyTimezone","format","string","tz","zone","timezone","toDate","Date","SUPPORTED_GEOMETRY_TYPES","type","srid","isEmpty","sqlType","key","includes","Error","join","buffer","slice","Geometry","toGeoJSON","obj","Object","create","map","values","escape","JSONTYPE","operation","stringify","forIn","DataType","extend","oldType"],"mappings":"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","sourcesContent":["'use strict';\n\nconst wkx = require('wkx');\nconst _ = require('lodash');\nconst moment = require('moment-timezone');\nconst inherits = require('../../utils/inherits');\n\nmodule.exports = BaseTypes => {\n  BaseTypes.ABSTRACT.prototype.dialectTypes = 'https://dev.mysql.com/doc/refman/5.7/en/data-types.html';\n\n  /**\n   * types: [buffer_type, ...]\n   * @see buffer_type here https://dev.mysql.com/doc/refman/5.7/en/c-api-prepared-statement-type-codes.html\n   * @see hex here https://github.com/sidorares/node-mysql2/blob/master/lib/constants/types.js\n   */\n\n  BaseTypes.DATE.types.mysql = ['DATETIME'];\n  BaseTypes.STRING.types.mysql = ['VAR_STRING'];\n  BaseTypes.CHAR.types.mysql = ['STRING'];\n  BaseTypes.TEXT.types.mysql = ['BLOB'];\n  BaseTypes.TINYINT.types.mysql = ['TINY'];\n  BaseTypes.SMALLINT.types.mysql = ['SHORT'];\n  BaseTypes.MEDIUMINT.types.mysql = ['INT24'];\n  BaseTypes.INTEGER.types.mysql = ['LONG'];\n  BaseTypes.BIGINT.types.mysql = ['LONGLONG'];\n  BaseTypes.FLOAT.types.mysql = ['FLOAT'];\n  BaseTypes.TIME.types.mysql = ['TIME'];\n  BaseTypes.DATEONLY.types.mysql = ['DATE'];\n  BaseTypes.BOOLEAN.types.mysql = ['TINY'];\n  BaseTypes.BLOB.types.mysql = ['TINYBLOB', 'BLOB', 'LONGBLOB'];\n  BaseTypes.DECIMAL.types.mysql = ['NEWDECIMAL'];\n  BaseTypes.UUID.types.mysql = false;\n  BaseTypes.ENUM.types.mysql = false;\n  BaseTypes.REAL.types.mysql = ['DOUBLE'];\n  BaseTypes.DOUBLE.types.mysql = ['DOUBLE'];\n  BaseTypes.GEOMETRY.types.mysql = ['GEOMETRY'];\n  BaseTypes.JSON.types.mysql = ['JSON'];\n\n  function BLOB(length) {\n    if (!(this instanceof BLOB)) return new BLOB(length);\n    BaseTypes.BLOB.apply(this, arguments);\n  }\n  inherits(BLOB, BaseTypes.BLOB);\n\n  BLOB.parse = function(value, options, next) {\n    const data = next();\n\n    if (Buffer.isBuffer(data) && data.length === 0) {\n      return null;\n    }\n\n    return data;\n  };\n\n  function DECIMAL(precision, scale) {\n    if (!(this instanceof DECIMAL)) return new DECIMAL(precision, scale);\n    BaseTypes.DECIMAL.apply(this, arguments);\n  }\n  inherits(DECIMAL, BaseTypes.DECIMAL);\n\n  DECIMAL.prototype.toSql = function toSql() {\n    let definition = BaseTypes.DECIMAL.prototype.toSql.apply(this);\n\n    if (this._unsigned) {\n      definition += ' UNSIGNED';\n    }\n\n    if (this._zerofill) {\n      definition += ' ZEROFILL';\n    }\n\n    return definition;\n  };\n\n  function DATE(length) {\n    if (!(this instanceof DATE)) return new DATE(length);\n    BaseTypes.DATE.apply(this, arguments);\n  }\n  inherits(DATE, BaseTypes.DATE);\n\n  DATE.prototype.toSql = function toSql() {\n    return 'DATETIME' + (this._length ? '(' + this._length + ')' : '');\n  };\n\n  DATE.prototype._stringify = function _stringify(date, options) {\n    date = BaseTypes.DATE.prototype._applyTimezone(date, options);\n    // Fractional DATETIMEs only supported on MySQL 5.6.4+\n    if (this._length) {\n      return date.format('YYYY-MM-DD HH:mm:ss.SSS');\n    }\n\n    return date.format('YYYY-MM-DD HH:mm:ss');\n  };\n\n  DATE.parse = function parse(value, options) {\n    value = value.string();\n\n    if (value === null) {\n      return value;\n    }\n\n    if (moment.tz.zone(options.timezone)) {\n      value = moment.tz(value, options.timezone).toDate();\n    } else {\n      value = new Date(value + ' ' + options.timezone);\n    }\n\n    return value;\n  };\n\n  function DATEONLY() {\n    if (!(this instanceof DATEONLY)) return new DATEONLY();\n    BaseTypes.DATEONLY.apply(this, arguments);\n  }\n  inherits(DATEONLY, BaseTypes.DATEONLY);\n\n  DATEONLY.parse = function parse(value) {\n    return value.string();\n  };\n\n  function UUID() {\n    if (!(this instanceof UUID)) return new UUID();\n    BaseTypes.UUID.apply(this, arguments);\n  }\n  inherits(UUID, BaseTypes.UUID);\n\n  UUID.prototype.toSql = function toSql() {\n    return 'CHAR(36) BINARY';\n  };\n\n\n  const SUPPORTED_GEOMETRY_TYPES = ['POINT', 'LINESTRING', 'POLYGON'];\n\n  function GEOMETRY(type, srid) {\n    if (!(this instanceof GEOMETRY)) return new GEOMETRY(type, srid);\n    BaseTypes.GEOMETRY.apply(this, arguments);\n\n    if (_.isEmpty(this.type)) {\n      this.sqlType = this.key;\n    } else if (_.includes(SUPPORTED_GEOMETRY_TYPES, this.type)) {\n      this.sqlType = this.type;\n    } else {\n      throw new Error('Supported geometry types are: ' + SUPPORTED_GEOMETRY_TYPES.join(', '));\n    }\n  }\n  inherits(GEOMETRY, BaseTypes.GEOMETRY);\n\n  GEOMETRY.parse = GEOMETRY.prototype.parse = function parse(value) {\n    value = value.buffer();\n\n    // Empty buffer, MySQL doesn't support POINT EMPTY\n    // check, https://dev.mysql.com/worklog/task/?id=2381\n    if (!value || value.length === 0) {\n      return null;\n    }\n\n    // For some reason, discard the first 4 bytes\n    value = value.slice(4);\n\n    return wkx.Geometry.parse(value).toGeoJSON();\n  };\n\n  GEOMETRY.prototype.toSql = function toSql() {\n    return this.sqlType;\n  };\n\n  function ENUM() {\n    if (!(this instanceof ENUM)) {\n      const obj = Object.create(ENUM.prototype);\n      ENUM.apply(obj, arguments);\n      return obj;\n    }\n    BaseTypes.ENUM.apply(this, arguments);\n  }\n  inherits(ENUM, BaseTypes.ENUM);\n\n  ENUM.prototype.toSql = function toSql(options) {\n    return 'ENUM(' + _.map(this.values, value => options.escape(value)).join(', ') + ')';\n  };\n\n  function JSONTYPE() {\n    if (!(this instanceof JSONTYPE)) return new JSONTYPE();\n    BaseTypes.JSON.apply(this, arguments);\n  }\n  inherits(JSONTYPE, BaseTypes.JSON);\n\n  JSONTYPE.prototype._stringify = function _stringify(value, options) {\n    return options.operation === 'where' && typeof value === 'string' ? value : JSON.stringify(value);\n  };\n\n  const exports = {\n    ENUM,\n    DATE,\n    DATEONLY,\n    UUID,\n    GEOMETRY,\n    DECIMAL,\n    BLOB,\n    JSON: JSONTYPE\n  };\n\n  _.forIn(exports, (DataType, key) => {\n    if (!DataType.key) DataType.key = key;\n    if (!DataType.extend) {\n      DataType.extend = function extend(oldType) {\n        return new DataType(oldType.options);\n      };\n    }\n  });\n\n  return exports;\n};\n"]},"metadata":{},"sourceType":"script"}
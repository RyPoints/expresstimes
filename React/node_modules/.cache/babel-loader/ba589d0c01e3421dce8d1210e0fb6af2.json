{"ast":null,"code":"'use strict';\n\nconst Utils = require('./utils');\n\nconst _ = require('lodash');\n\nconst DataTypes = require('./data-types');\n\nconst SQLiteQueryInterface = require('./dialects/sqlite/query-interface');\n\nconst MSSSQLQueryInterface = require('./dialects/mssql/query-interface');\n\nconst MySQLQueryInterface = require('./dialects/mysql/query-interface');\n\nconst Transaction = require('./transaction');\n\nconst Promise = require('./promise');\n\nconst QueryTypes = require('./query-types');\n\nconst Op = require('./operators');\n/**\n * The interface that Sequelize uses to talk to all databases\n *\n * @class QueryInterface\n */\n\n\nclass QueryInterface {\n  constructor(sequelize) {\n    this.sequelize = sequelize;\n    this.QueryGenerator = this.sequelize.dialect.QueryGenerator;\n  }\n  /**\n   * Creates a schema\n   *\n   * @param {String} schema    Schema name to create\n   * @param {Object} [options] Query options\n   *\n   * @return {Promise}\n   */\n\n\n  createSchema(schema, options) {\n    options = options || {};\n    const sql = this.QueryGenerator.createSchema(schema);\n    return this.sequelize.query(sql, options);\n  }\n  /**\n   * Drops a schema\n   *\n   * @param {String} schema    Schema name to create\n   * @param {Object} [options] Query options\n   *\n   * @return {Promise}\n   */\n\n\n  dropSchema(schema, options) {\n    options = options || {};\n    const sql = this.QueryGenerator.dropSchema(schema);\n    return this.sequelize.query(sql, options);\n  }\n  /**\n   * Drop all schemas\n   *\n   * @param {Object} [options] Query options\n   *\n   * @return {Promise}\n   */\n\n\n  dropAllSchemas(options) {\n    options = options || {};\n\n    if (!this.QueryGenerator._dialect.supports.schemas) {\n      return this.sequelize.drop(options);\n    } else {\n      return this.showAllSchemas(options).map(schemaName => this.dropSchema(schemaName, options));\n    }\n  }\n  /**\n   * Show all schemas\n   *\n   * @param {Object} [options] Query options\n   *\n   * @return {Promise<Array>}\n   */\n\n\n  showAllSchemas(options) {\n    options = _.assign({}, options, {\n      raw: true,\n      type: this.sequelize.QueryTypes.SELECT\n    });\n    const showSchemasSql = this.QueryGenerator.showSchemasQuery();\n    return this.sequelize.query(showSchemasSql, options).then(schemaNames => _.flatten(_.map(schemaNames, value => value.schema_name ? value.schema_name : value)));\n  }\n  /**\n   * Returns database version\n   *\n   * @param {Object}    [options]      Query options\n   * @param {QueryType} [options.type] Query type\n   *\n   * @returns {Promise}\n   * @private\n   */\n\n\n  databaseVersion(options) {\n    return this.sequelize.query(this.QueryGenerator.versionQuery(), _.assign({}, options, {\n      type: QueryTypes.VERSION\n    }));\n  }\n  /**\n   * Create a table with given set of attributes\n   *\n   * ```js\n   * queryInterface.createTable(\n   *   'nameOfTheNewTable',\n   *   {\n   *     id: {\n   *       type: Sequelize.INTEGER,\n   *       primaryKey: true,\n   *       autoIncrement: true\n   *     },\n   *     createdAt: {\n   *       type: Sequelize.DATE\n   *     },\n   *     updatedAt: {\n   *       type: Sequelize.DATE\n   *     },\n   *     attr1: Sequelize.STRING,\n   *     attr2: Sequelize.INTEGER,\n   *     attr3: {\n   *       type: Sequelize.BOOLEAN,\n   *       defaultValue: false,\n   *       allowNull: false\n   *     },\n   *     //foreign key usage\n   *     attr4: {\n   *       type: Sequelize.INTEGER,\n   *       references: {\n   *         model: 'another_table_name',\n   *         key: 'id'\n   *       },\n   *       onUpdate: 'cascade',\n   *       onDelete: 'cascade'\n   *     }\n   *   },\n   *   {\n   *     engine: 'MYISAM',    // default: 'InnoDB'\n   *     charset: 'latin1',   // default: null\n   *     schema: 'public'     // default: public, PostgreSQL only.\n   *   }\n   * )\n   * ```\n   *\n   * @param {String} tableName  Name of table to create\n   * @param {Object} attributes Object representing a list of table attributes to create\n   * @param {Object} [options]\n   * @param {Model}  [model]\n   *\n   * @return {Promise}\n   */\n\n\n  createTable(tableName, attributes, options, model) {\n    const keys = Object.keys(attributes);\n    const keyLen = keys.length;\n    let sql = '';\n    let i = 0;\n    options = _.clone(options) || {};\n    attributes = _.mapValues(attributes, attribute => {\n      if (!_.isPlainObject(attribute)) {\n        attribute = {\n          type: attribute,\n          allowNull: true\n        };\n      }\n\n      attribute = this.sequelize.normalizeAttribute(attribute);\n      return attribute;\n    }); // Postgres requires a special SQL command for enums\n\n    if (this.sequelize.options.dialect === 'postgres') {\n      const promises = [];\n\n      for (i = 0; i < keyLen; i++) {\n        const attribute = attributes[keys[i]];\n        const type = attribute.type;\n\n        if (type instanceof DataTypes.ENUM || type instanceof DataTypes.ARRAY && type.type instanceof DataTypes.ENUM //ARRAY sub type is ENUM\n        ) {\n            sql = this.QueryGenerator.pgListEnums(tableName, attribute.field || keys[i], options);\n            promises.push(this.sequelize.query(sql, _.assign({}, options, {\n              plain: true,\n              raw: true,\n              type: QueryTypes.SELECT\n            })));\n          }\n      }\n\n      return Promise.all(promises).then(results => {\n        const promises = [];\n        let enumIdx = 0;\n\n        for (i = 0; i < keyLen; i++) {\n          const attribute = attributes[keys[i]];\n          const type = attribute.type;\n          const enumType = type.type || type;\n\n          if (type instanceof DataTypes.ENUM || type instanceof DataTypes.ARRAY && enumType instanceof DataTypes.ENUM //ARRAY sub type is ENUM\n          ) {\n              // If the enum type doesn't exist then create it\n              if (!results[enumIdx]) {\n                sql = this.QueryGenerator.pgEnum(tableName, attribute.field || keys[i], enumType, options);\n                promises.push(this.sequelize.query(sql, _.assign({}, options, {\n                  raw: true\n                })));\n              } else if (!!results[enumIdx] && !!model) {\n                const enumVals = this.QueryGenerator.fromArray(results[enumIdx].enum_value);\n                const vals = enumType.values;\n                vals.forEach((value, idx) => {\n                  // reset out after/before options since it's for every enum value\n                  const valueOptions = _.clone(options);\n\n                  valueOptions.before = null;\n                  valueOptions.after = null;\n\n                  if (enumVals.indexOf(value) === -1) {\n                    if (vals[idx + 1]) {\n                      valueOptions.before = vals[idx + 1];\n                    } else if (vals[idx - 1]) {\n                      valueOptions.after = vals[idx - 1];\n                    }\n\n                    valueOptions.supportsSearchPath = false;\n                    promises.push(this.sequelize.query(this.QueryGenerator.pgEnumAdd(tableName, attribute.field || keys[i], value, valueOptions), valueOptions));\n                  }\n                });\n                enumIdx++;\n              }\n            }\n        }\n\n        if (!tableName.schema && (options.schema || !!model && model._schema)) {\n          tableName = this.QueryGenerator.addSchema({\n            tableName,\n            _schema: !!model && model._schema || options.schema\n          });\n        }\n\n        attributes = this.QueryGenerator.attributesToSQL(attributes, {\n          context: 'createTable'\n        });\n        sql = this.QueryGenerator.createTableQuery(tableName, attributes, options);\n        return Promise.all(promises).tap(() => {\n          // If ENUM processed, then refresh OIDs\n          if (promises.length) {\n            return this.sequelize.dialect.connectionManager._refreshDynamicOIDs();\n          }\n        }).then(() => {\n          return this.sequelize.query(sql, options);\n        });\n      });\n    } else {\n      if (!tableName.schema && (options.schema || !!model && model._schema)) {\n        tableName = this.QueryGenerator.addSchema({\n          tableName,\n          _schema: !!model && model._schema || options.schema\n        });\n      }\n\n      attributes = this.QueryGenerator.attributesToSQL(attributes, {\n        context: 'createTable'\n      });\n      sql = this.QueryGenerator.createTableQuery(tableName, attributes, options);\n      return this.sequelize.query(sql, options);\n    }\n  }\n  /**\n   * Drops a table from database\n   *\n   * @param {String} tableName Table name to drop\n   * @param {Object} options   Query options\n   *\n   * @return {Promise}\n   */\n\n\n  dropTable(tableName, options) {\n    // if we're forcing we should be cascading unless explicitly stated otherwise\n    options = _.clone(options) || {};\n    options.cascade = options.cascade || options.force || false;\n    let sql = this.QueryGenerator.dropTableQuery(tableName, options);\n    return this.sequelize.query(sql, options).then(() => {\n      const promises = []; // Since postgres has a special case for enums, we should drop the related\n      // enum type within the table and attribute\n\n      if (this.sequelize.options.dialect === 'postgres') {\n        const instanceTable = this.sequelize.modelManager.getModel(tableName, {\n          attribute: 'tableName'\n        });\n\n        if (instanceTable) {\n          const getTableName = (!options || !options.schema || options.schema === 'public' ? '' : options.schema + '_') + tableName;\n          const keys = Object.keys(instanceTable.rawAttributes);\n          const keyLen = keys.length;\n\n          for (let i = 0; i < keyLen; i++) {\n            if (instanceTable.rawAttributes[keys[i]].type instanceof DataTypes.ENUM) {\n              sql = this.QueryGenerator.pgEnumDrop(getTableName, keys[i]);\n              options.supportsSearchPath = false;\n              promises.push(this.sequelize.query(sql, _.assign({}, options, {\n                raw: true\n              })));\n            }\n          }\n        }\n      }\n\n      return Promise.all(promises).get(0);\n    });\n  }\n  /**\n   * Drop all tables from database\n   *\n   * @param {Object} [options]\n   * @param {Array}  [options.skip] List of table to skip\n   *\n   * @return {Promise}\n   */\n\n\n  dropAllTables(options) {\n    options = options || {};\n    const skip = options.skip || [];\n\n    const dropAllTables = tableNames => Promise.each(tableNames, tableName => {\n      // if tableName is not in the Array of tables names then dont drop it\n      if (skip.indexOf(tableName.tableName || tableName) === -1) {\n        return this.dropTable(tableName, _.assign({}, options, {\n          cascade: true\n        }));\n      }\n    });\n\n    return this.showAllTables(options).then(tableNames => {\n      if (this.sequelize.options.dialect === 'sqlite') {\n        return this.sequelize.query('PRAGMA foreign_keys;', options).then(result => {\n          const foreignKeysAreEnabled = result.foreign_keys === 1;\n\n          if (foreignKeysAreEnabled) {\n            return this.sequelize.query('PRAGMA foreign_keys = OFF', options).then(() => dropAllTables(tableNames)).then(() => this.sequelize.query('PRAGMA foreign_keys = ON', options));\n          } else {\n            return dropAllTables(tableNames);\n          }\n        });\n      } else {\n        return this.getForeignKeysForTables(tableNames, options).then(foreignKeys => {\n          const promises = [];\n          tableNames.forEach(tableName => {\n            let normalizedTableName = tableName;\n\n            if (_.isObject(tableName)) {\n              normalizedTableName = tableName.schema + '.' + tableName.tableName;\n            }\n\n            foreignKeys[normalizedTableName].forEach(foreignKey => {\n              const sql = this.QueryGenerator.dropForeignKeyQuery(tableName, foreignKey);\n              promises.push(this.sequelize.query(sql, options));\n            });\n          });\n          return Promise.all(promises).then(() => dropAllTables(tableNames));\n        });\n      }\n    });\n  }\n  /**\n   * Drop all enums from database, Postgres Only\n   *\n   * @param {Object} options Query options\n   *\n   * @return {Promise}\n   * @private\n   */\n\n\n  dropAllEnums(options) {\n    if (this.sequelize.getDialect() !== 'postgres') {\n      return Promise.resolve();\n    }\n\n    options = options || {};\n    return this.pgListEnums(null, options).map(result => this.sequelize.query(this.QueryGenerator.pgEnumDrop(null, null, this.QueryGenerator.pgEscapeAndQuote(result.enum_name)), _.assign({}, options, {\n      raw: true\n    })));\n  }\n  /**\n   * List all enums, Postgres Only\n   *\n   * @param {String} [tableName]  Table whose enum to list\n   * @param {Object} [options]    Query options\n   *\n   * @return {Promise}\n   * @private\n   */\n\n\n  pgListEnums(tableName, options) {\n    options = options || {};\n    const sql = this.QueryGenerator.pgListEnums(tableName);\n    return this.sequelize.query(sql, _.assign({}, options, {\n      plain: false,\n      raw: true,\n      type: QueryTypes.SELECT\n    }));\n  }\n  /**\n   * Renames a table\n   *\n   * @param {String} before    Current name of table\n   * @param {String} after     New name from table\n   * @param {Object} [options] Query options\n   *\n   * @return {Promise}\n   */\n\n\n  renameTable(before, after, options) {\n    options = options || {};\n    const sql = this.QueryGenerator.renameTableQuery(before, after);\n    return this.sequelize.query(sql, options);\n  }\n  /**\n   * Get all tables in current database\n   *\n   * @param {Object}    [options] Query options\n   * @param {Boolean}   [options.raw=true] Run query in raw mode\n   * @param {QueryType} [options.type=QueryType.SHOWTABLE]\n   *\n   * @return {Promise<Array>}\n   * @private\n   */\n\n\n  showAllTables(options) {\n    options = _.assign({}, options, {\n      raw: true,\n      type: QueryTypes.SHOWTABLES\n    });\n    const showTablesSql = this.QueryGenerator.showTablesQuery();\n    return this.sequelize.query(showTablesSql, options).then(tableNames => _.flatten(tableNames));\n  }\n  /**\n   * Describe a table structure\n   *\n   * This method returns an array of hashes containing information about all attributes in the table.\n   *\n   * ```js\n   * {\n   *    name: {\n   *      type:         'VARCHAR(255)', // this will be 'CHARACTER VARYING' for pg!\n   *      allowNull:    true,\n   *      defaultValue: null\n   *    },\n   *    isBetaMember: {\n   *      type:         'TINYINT(1)', // this will be 'BOOLEAN' for pg!\n   *      allowNull:    false,\n   *      defaultValue: false\n   *    }\n   * }\n   * ```\n   * @param {String} tableName\n   * @param {Object} [options] Query options\n   *\n   * @return {Promise<Object>}\n   */\n\n\n  describeTable(tableName, options) {\n    let schema = null;\n    let schemaDelimiter = null;\n\n    if (typeof options === 'string') {\n      schema = options;\n    } else if (typeof options === 'object' && options !== null) {\n      schema = options.schema || null;\n      schemaDelimiter = options.schemaDelimiter || null;\n    }\n\n    if (typeof tableName === 'object' && tableName !== null) {\n      schema = tableName.schema;\n      tableName = tableName.tableName;\n    }\n\n    const sql = this.QueryGenerator.describeTableQuery(tableName, schema, schemaDelimiter);\n    return this.sequelize.query(sql, _.assign({}, options, {\n      type: QueryTypes.DESCRIBE\n    })).then(data => {\n      // If no data is returned from the query, then the table name may be wrong.\n      // Query generators that use information_schema for retrieving table info will just return an empty result set,\n      // it will not throw an error like built-ins do (e.g. DESCRIBE on MySql).\n      if (_.isEmpty(data)) {\n        return Promise.reject('No description found for \"' + tableName + '\" table. Check the table name and schema; remember, they _are_ case sensitive.');\n      } else {\n        return Promise.resolve(data);\n      }\n    });\n  }\n  /**\n   * Add a new column into a table\n   *\n   * @param {String} table     Table to add column to\n   * @param {String} key       Column name\n   * @param {Object} attribute Attribute definition\n   * @param {Object} [options] Query options\n   *\n   * @return {Promise}\n   */\n\n\n  addColumn(table, key, attribute, options) {\n    if (!table || !key || !attribute) {\n      throw new Error('addColumn takes atleast 3 arguments (table, attribute name, attribute definition)');\n    }\n\n    options = options || {};\n    attribute = this.sequelize.normalizeAttribute(attribute);\n    return this.sequelize.query(this.QueryGenerator.addColumnQuery(table, key, attribute), options);\n  }\n  /**\n   * Remove a column from table\n   *\n   * @param {String} tableName      Table to remove column from\n   * @param {String} attributeName  Columns name to remove\n   * @param {Object} [options]      Query options\n   *\n   * @return {Promise}\n   */\n\n\n  removeColumn(tableName, attributeName, options) {\n    options = options || {};\n\n    switch (this.sequelize.options.dialect) {\n      case 'sqlite':\n        // sqlite needs some special treatment as it cannot drop a column\n        return SQLiteQueryInterface.removeColumn.call(this, tableName, attributeName, options);\n\n      case 'mssql':\n        // mssql needs special treatment as it cannot drop a column with a default or foreign key constraint\n        return MSSSQLQueryInterface.removeColumn.call(this, tableName, attributeName, options);\n\n      case 'mysql':\n        // mysql needs special treatment as it cannot drop a column with a foreign key constraint\n        return MySQLQueryInterface.removeColumn.call(this, tableName, attributeName, options);\n\n      default:\n        return this.sequelize.query(this.QueryGenerator.removeColumnQuery(tableName, attributeName), options);\n    }\n  }\n  /**\n   * Change a column definition\n   *\n   * @param {String} tableName          Table name to change from\n   * @param {String} attributeName      Column name\n   * @param {Object} dataTypeOrOptions  Attribute definition for new column\n   * @param {Object} [options]          Query options\n   *\n   * @return {Promise}\n   */\n\n\n  changeColumn(tableName, attributeName, dataTypeOrOptions, options) {\n    const attributes = {};\n    options = options || {};\n\n    if (_.values(DataTypes).indexOf(dataTypeOrOptions) > -1) {\n      attributes[attributeName] = {\n        type: dataTypeOrOptions,\n        allowNull: true\n      };\n    } else {\n      attributes[attributeName] = dataTypeOrOptions;\n    }\n\n    attributes[attributeName].type = this.sequelize.normalizeDataType(attributes[attributeName].type);\n\n    if (this.sequelize.options.dialect === 'sqlite') {\n      // sqlite needs some special treatment as it cannot change a column\n      return SQLiteQueryInterface.changeColumn.call(this, tableName, attributes, options);\n    } else {\n      const query = this.QueryGenerator.attributesToSQL(attributes);\n      const sql = this.QueryGenerator.changeColumnQuery(tableName, query);\n      return this.sequelize.query(sql, options);\n    }\n  }\n  /**\n   * Rename a column\n   *\n   * @param {String} tableName        Table name whose column to rename\n   * @param {String} attrNameBefore   Current column name\n   * @param {String} attrNameAfter    New column name\n   * @param {Object} [options]        Query option\n   *\n   * @return {Promise}\n   */\n\n\n  renameColumn(tableName, attrNameBefore, attrNameAfter, options) {\n    options = options || {};\n    return this.describeTable(tableName, options).then(data => {\n      if (!data[attrNameBefore]) {\n        throw new Error('Table ' + tableName + ' doesn\\'t have the column ' + attrNameBefore);\n      }\n\n      data = data[attrNameBefore] || {};\n      const _options = {};\n      _options[attrNameAfter] = {\n        attribute: attrNameAfter,\n        type: data.type,\n        allowNull: data.allowNull,\n        defaultValue: data.defaultValue\n      }; // fix: a not-null column cannot have null as default value\n\n      if (data.defaultValue === null && !data.allowNull) {\n        delete _options[attrNameAfter].defaultValue;\n      }\n\n      if (this.sequelize.options.dialect === 'sqlite') {\n        // sqlite needs some special treatment as it cannot rename a column\n        return SQLiteQueryInterface.renameColumn.call(this, tableName, attrNameBefore, attrNameAfter, options);\n      } else {\n        const sql = this.QueryGenerator.renameColumnQuery(tableName, attrNameBefore, this.QueryGenerator.attributesToSQL(_options));\n        return this.sequelize.query(sql, options);\n      }\n    });\n  }\n  /**\n   * Add index to a column\n   *\n   * @param {String}  tableName        Table name to add index on\n   * @param {Object}  options\n   * @param {Array}   options.fields   List of attributes to add index on\n   * @param {Boolean} [options.unique] Create a unique index\n   * @param {String}  [options.using]  Useful for GIN indexes\n   * @param {String}  [options.type]   Type of index, available options are UNIQUE|FULLTEXT|SPATIAL\n   * @param {String}  [options.name]   Name of the index. Default is <table>_<attr1>_<attr2>\n   * @param {Object}  [options.where]  Where condition on index, for partial indexes\n   *\n   * @return {Promise}\n   */\n\n\n  addIndex(tableName, attributes, options, rawTablename) {\n    // Support for passing tableName, attributes, options or tableName, options (with a fields param which is the attributes)\n    if (!Array.isArray(attributes)) {\n      rawTablename = options;\n      options = attributes;\n      attributes = options.fields;\n    } // testhint argsConform.end\n\n\n    if (!rawTablename) {\n      // Map for backwards compat\n      rawTablename = tableName;\n    }\n\n    options = Utils.cloneDeep(options);\n    options.fields = attributes;\n    const sql = this.QueryGenerator.addIndexQuery(tableName, options, rawTablename);\n    return this.sequelize.query(sql, _.assign({}, options, {\n      supportsSearchPath: false\n    }));\n  }\n  /**\n   * Show indexes on a table\n   *\n   * @param {String} tableName\n   * @param {Object} [options]   Query options\n   *\n   * @return {Promise<Array>}\n   * @private\n   */\n\n\n  showIndex(tableName, options) {\n    const sql = this.QueryGenerator.showIndexesQuery(tableName, options);\n    return this.sequelize.query(sql, _.assign({}, options, {\n      type: QueryTypes.SHOWINDEXES\n    }));\n  }\n\n  nameIndexes(indexes, rawTablename) {\n    return this.QueryGenerator.nameIndexes(indexes, rawTablename);\n  }\n\n  getForeignKeysForTables(tableNames, options) {\n    if (tableNames.length === 0) {\n      return Promise.resolve({});\n    }\n\n    options = _.assign({}, options || {}, {\n      type: QueryTypes.FOREIGNKEYS\n    });\n    return Promise.map(tableNames, tableName => this.sequelize.query(this.QueryGenerator.getForeignKeysQuery(tableName, this.sequelize.config.database), options)).then(results => {\n      const result = {};\n      tableNames.forEach((tableName, i) => {\n        if (_.isObject(tableName)) {\n          tableName = tableName.schema + '.' + tableName.tableName;\n        }\n\n        result[tableName] = _.isArray(results[i]) ? results[i].map(r => r.constraint_name) : [results[i] && results[i].constraint_name];\n        result[tableName] = result[tableName].filter(_.identity);\n      });\n      return result;\n    });\n  }\n  /**\n   * Get foreign key references details for the table.\n   *\n   * Those details contains constraintSchema, constraintName, constraintCatalog\n   * tableCatalog, tableSchema, tableName, columnName,\n   * referencedTableCatalog, referencedTableCatalog, referencedTableSchema, referencedTableName, referencedColumnName.\n   * Remind: constraint informations won't return if it's sqlite.\n   *\n   * @param {String} tableName\n   * @param {Object} [options]  Query options\n   * @returns {Promise}\n   */\n\n\n  getForeignKeyReferencesForTable(tableName, options) {\n    const queryOptions = Object.assign({}, options, {\n      type: QueryTypes.FOREIGNKEYS\n    });\n    const catalogName = this.sequelize.config.database;\n\n    switch (this.sequelize.options.dialect) {\n      case 'sqlite':\n        // sqlite needs some special treatment.\n        return SQLiteQueryInterface.getForeignKeyReferencesForTable.call(this, tableName, queryOptions);\n\n      case 'postgres':\n        {\n          // postgres needs some special treatment as those field names returned are all lowercase\n          // in order to keep same result with other dialects.\n          const query = this.QueryGenerator.getForeignKeyReferencesQuery(tableName, catalogName);\n          return this.sequelize.query(query, queryOptions).then(result => result.map(Utils.camelizeObjectKeys));\n        }\n\n      case 'mssql':\n      case 'mysql':\n      default:\n        {\n          const query = this.QueryGenerator.getForeignKeysQuery(tableName, catalogName);\n          return this.sequelize.query(query, queryOptions);\n        }\n    }\n  }\n  /**\n   * Remove an already existing index from a table\n   *\n   * @param {String} tableName             Table name to drop index from\n   * @param {String} indexNameOrAttributes Index name\n   * @param {Object} [options]             Query options\n   *\n   * @return {Promise}\n   */\n\n\n  removeIndex(tableName, indexNameOrAttributes, options) {\n    options = options || {};\n    const sql = this.QueryGenerator.removeIndexQuery(tableName, indexNameOrAttributes);\n    return this.sequelize.query(sql, options);\n  }\n  /**\n   * Add constraints to table\n   *\n   * Available constraints:\n   * - UNIQUE\n   * - DEFAULT (MSSQL only)\n   * - CHECK (MySQL - Ignored by the database engine )\n   * - FOREIGN KEY\n   * - PRIMARY KEY\n   *\n   * UNIQUE\n   * ```js\n   * queryInterface.addConstraint('Users', ['email'], {\n   *   type: 'unique',\n   *   name: 'custom_unique_constraint_name'\n   * });\n   * ```\n   *\n   * CHECK\n   * ```js\n   * queryInterface.addConstraint('Users', ['roles'], {\n   *   type: 'check',\n   *   where: {\n   *      roles: ['user', 'admin', 'moderator', 'guest']\n   *   }\n   * });\n   * ```\n   * Default - MSSQL only\n   * ```js\n   * queryInterface.addConstraint('Users', ['roles'], {\n   *    type: 'default',\n   *    defaultValue: 'guest'\n   * });\n   * ```\n   *\n   * Primary Key\n   * ```js\n   * queryInterface.addConstraint('Users', ['username'], {\n   *    type: 'primary key',\n   *    name: 'custom_primary_constraint_name'\n   * });\n   * ```\n   *\n   * Foreign Key\n   * ```js\n   * queryInterface.addConstraint('Posts', ['username'], {\n   *   type: 'foreign key',\n   *   name: 'custom_fkey_constraint_name',\n   *   references: { //Required field\n   *     table: 'target_table_name',\n   *     field: 'target_column_name'\n   *   },\n   *   onDelete: 'cascade',\n   *   onUpdate: 'cascade'\n   * });\n   * ```\n   *\n   * @param {String} tableName                  Table name where you want to add a constraint\n   * @param {Array}  attributes                 Array of column names to apply the constraint over\n   * @param {Object} options                    An object to define the constraint name, type etc\n   * @param {String} options.type               Type of constraint. One of the values in available constraints(case insensitive)\n   * @param {String} [options.name]             Name of the constraint. If not specified, sequelize automatically creates a named constraint based on constraint type, table & column names\n   * @param {String} [options.defaultValue]     The value for the default constraint\n   * @param {Object} [options.where]            Where clause/expression for the CHECK constraint\n   * @param {Object} [options.references]       Object specifying target table, column name to create foreign key constraint\n   * @param {String} [options.references.table] Target table name\n   * @param {String} [options.references.field] Target column name\n   *\n   * @return {Promise}\n   */\n\n\n  addConstraint(tableName, attributes, options, rawTablename) {\n    if (!Array.isArray(attributes)) {\n      rawTablename = options;\n      options = attributes;\n      attributes = options.fields;\n    }\n\n    if (!options.type) {\n      throw new Error('Constraint type must be specified through options.type');\n    }\n\n    if (!rawTablename) {\n      // Map for backwards compat\n      rawTablename = tableName;\n    }\n\n    options = Utils.cloneDeep(options);\n    options.fields = attributes;\n\n    if (this.sequelize.dialect.name === 'sqlite') {\n      return SQLiteQueryInterface.addConstraint.call(this, tableName, options, rawTablename);\n    } else {\n      const sql = this.QueryGenerator.addConstraintQuery(tableName, options, rawTablename);\n      return this.sequelize.query(sql, options);\n    }\n  }\n\n  showConstraint(tableName, constraintName, options) {\n    const sql = this.QueryGenerator.showConstraintsQuery(tableName, constraintName);\n    return this.sequelize.query(sql, Object.assign({}, options, {\n      type: QueryTypes.SHOWCONSTRAINTS\n    }));\n  }\n  /**\n   *\n   * @param {String} tableName       Table name to drop constraint from\n   * @param {String} constraintName  Constraint name\n   * @param {Object} options         Query options\n   *\n   * @return {Promise}\n   */\n\n\n  removeConstraint(tableName, constraintName, options) {\n    options = options || {};\n\n    switch (this.sequelize.options.dialect) {\n      case 'mysql':\n        //Mysql does not support DROP CONSTRAINT. Instead DROP PRIMARY, FOREIGN KEY, INDEX should be used\n        return MySQLQueryInterface.removeConstraint.call(this, tableName, constraintName, options);\n\n      case 'sqlite':\n        return SQLiteQueryInterface.removeConstraint.call(this, tableName, constraintName, options);\n\n      default:\n        const sql = this.QueryGenerator.removeConstraintQuery(tableName, constraintName);\n        return this.sequelize.query(sql, options);\n    }\n  }\n\n  insert(instance, tableName, values, options) {\n    options = Utils.cloneDeep(options);\n    options.hasTrigger = instance && instance.constructor.options.hasTrigger;\n    const sql = this.QueryGenerator.insertQuery(tableName, values, instance && instance.constructor.rawAttributes, options);\n    options.type = QueryTypes.INSERT;\n    options.instance = instance;\n    return this.sequelize.query(sql, options).then(results => {\n      if (instance) results[0].isNewRecord = false;\n      return results;\n    });\n  }\n  /**\n   * Upsert\n   *\n   * @param {String} tableName\n   * @param {Object} insertValues values to be inserted, mapped to field name\n   * @param {Object} updateValues values to be updated, mapped to field name\n   * @param {Object} where        various conditions\n   * @param {Model}  model\n   * @param {Object} options\n   *\n   * @returns {Promise<created, primaryKey>}\n   */\n\n\n  upsert(tableName, insertValues, updateValues, where, model, options) {\n    const wheres = [];\n    const attributes = Object.keys(insertValues);\n    let indexes = [];\n    let indexFields;\n    options = _.clone(options);\n\n    if (!Utils.isWhereEmpty(where)) {\n      wheres.push(where);\n    } // Lets combine uniquekeys and indexes into one\n\n\n    indexes = _.map(model.options.uniqueKeys, value => {\n      return value.fields;\n    });\n\n    _.each(model.options.indexes, value => {\n      if (value.unique) {\n        // fields in the index may both the strings or objects with an attribute property - lets sanitize that\n        indexFields = _.map(value.fields, field => {\n          if (_.isPlainObject(field)) {\n            return field.attribute;\n          }\n\n          return field;\n        });\n        indexes.push(indexFields);\n      }\n    });\n\n    for (const index of indexes) {\n      if (_.intersection(attributes, index).length === index.length) {\n        where = {};\n\n        for (const field of index) {\n          where[field] = insertValues[field];\n        }\n\n        wheres.push(where);\n      }\n    }\n\n    where = {\n      [Op.or]: wheres\n    };\n    options.type = QueryTypes.UPSERT;\n    options.raw = true;\n    const sql = this.QueryGenerator.upsertQuery(tableName, insertValues, updateValues, where, model, options);\n    return this.sequelize.query(sql, options).then(result => {\n      switch (this.sequelize.options.dialect) {\n        case 'postgres':\n          return [result.created, result.primary_key];\n\n        case 'mssql':\n          return [result.$action === 'INSERT', result[model.primaryKeyField]];\n        // MySQL returns 1 for inserted, 2 for updated\n        // http://dev.mysql.com/doc/refman/5.0/en/insert-on-duplicate.html.\n\n        case 'mysql':\n          return [result === 1, undefined];\n\n        default:\n          return [result, undefined];\n      }\n    });\n  }\n  /**\n   * Insert records into a table\n   *\n   * ```js\n   * queryInterface.bulkInsert('roles', [{\n   *    label: 'user',\n   *    createdAt: new Date(),\n   *    updatedAt: new Date()\n   *  }, {\n   *    label: 'admin',\n   *    createdAt: new Date(),\n   *    updatedAt: new Date()\n   *  }]);\n   * ```\n   *\n   * @param {String} tableName             Table name to insert record to\n   * @param {Array}  records               List of records to insert\n   * @param {Object} options               Various options, please see Model.bulkCreate options\n   * @param {Object} fieldMappedAttributes Various attributes mapped by field name\n   *\n   * @return {Promise}\n   */\n\n\n  bulkInsert(tableName, records, options, attributes) {\n    options = _.clone(options) || {};\n    options.type = QueryTypes.INSERT;\n    return this.sequelize.query(this.QueryGenerator.bulkInsertQuery(tableName, records, options, attributes), options).then(results => results[0]);\n  }\n\n  update(instance, tableName, values, identifier, options) {\n    options = _.clone(options || {});\n    options.hasTrigger = !!(instance && instance._modelOptions && instance._modelOptions.hasTrigger);\n    const sql = this.QueryGenerator.updateQuery(tableName, values, identifier, options, instance.constructor.rawAttributes);\n    options.type = QueryTypes.UPDATE;\n    options.instance = instance;\n    return this.sequelize.query(sql, options);\n  }\n\n  bulkUpdate(tableName, values, identifier, options, attributes) {\n    options = Utils.cloneDeep(options);\n    if (typeof identifier === 'object') identifier = Utils.cloneDeep(identifier);\n    const sql = this.QueryGenerator.updateQuery(tableName, values, identifier, options, attributes);\n    const table = _.isObject(tableName) ? tableName : {\n      tableName\n    };\n\n    const model = _.find(this.sequelize.modelManager.models, {\n      tableName: table.tableName\n    });\n\n    options.model = model;\n    return this.sequelize.query(sql, options);\n  }\n\n  delete(instance, tableName, identifier, options) {\n    const cascades = [];\n    const sql = this.QueryGenerator.deleteQuery(tableName, identifier, null, instance.constructor);\n    options = _.clone(options) || {}; // Check for a restrict field\n\n    if (!!instance.constructor && !!instance.constructor.associations) {\n      const keys = Object.keys(instance.constructor.associations);\n      const length = keys.length;\n      let association;\n\n      for (let i = 0; i < length; i++) {\n        association = instance.constructor.associations[keys[i]];\n\n        if (association.options && association.options.onDelete && association.options.onDelete.toLowerCase() === 'cascade' && association.options.useHooks === true) {\n          cascades.push(association.accessors.get);\n        }\n      }\n    }\n\n    return Promise.each(cascades, cascade => {\n      return instance[cascade](options).then(instances => {\n        // Check for hasOne relationship with non-existing associate (\"has zero\")\n        if (!instances) {\n          return Promise.resolve();\n        }\n\n        if (!Array.isArray(instances)) instances = [instances];\n        return Promise.each(instances, instance => instance.destroy(options));\n      });\n    }).then(() => {\n      options.instance = instance;\n      return this.sequelize.query(sql, options);\n    });\n  }\n  /**\n   * Delete records from a table\n   *\n   * @param {String} tableName  Table name from where to delete records\n   * @param {Object} identifier Where conditions to find records to delete\n   *\n   * @return {Promise}\n   */\n\n\n  bulkDelete(tableName, identifier, options, model) {\n    options = Utils.cloneDeep(options);\n    options = _.defaults(options, {\n      limit: null\n    });\n    if (typeof identifier === 'object') identifier = Utils.cloneDeep(identifier);\n    const sql = this.QueryGenerator.deleteQuery(tableName, identifier, options, model);\n    return this.sequelize.query(sql, options);\n  }\n\n  select(model, tableName, options) {\n    options = Utils.cloneDeep(options);\n    options.type = QueryTypes.SELECT;\n    options.model = model;\n    return this.sequelize.query(this.QueryGenerator.selectQuery(tableName, options, model), options);\n  }\n\n  increment(model, tableName, values, identifier, options) {\n    options = Utils.cloneDeep(options);\n    const sql = this.QueryGenerator.arithmeticQuery('+', tableName, values, identifier, options, options.attributes);\n    options.type = QueryTypes.UPDATE;\n    options.model = model;\n    return this.sequelize.query(sql, options);\n  }\n\n  decrement(model, tableName, values, identifier, options) {\n    options = Utils.cloneDeep(options);\n    const sql = this.QueryGenerator.arithmeticQuery('-', tableName, values, identifier, options, options.attributes);\n    options.type = QueryTypes.UPDATE;\n    options.model = model;\n    return this.sequelize.query(sql, options);\n  }\n\n  rawSelect(tableName, options, attributeSelector, Model) {\n    if (options.schema) {\n      tableName = this.QueryGenerator.addSchema({\n        tableName,\n        _schema: options.schema\n      });\n    }\n\n    options = Utils.cloneDeep(options);\n    options = _.defaults(options, {\n      raw: true,\n      plain: true,\n      type: QueryTypes.SELECT\n    });\n    const sql = this.QueryGenerator.selectQuery(tableName, options, Model);\n\n    if (attributeSelector === undefined) {\n      throw new Error('Please pass an attribute selector!');\n    }\n\n    return this.sequelize.query(sql, options).then(data => {\n      if (!options.plain) {\n        return data;\n      }\n\n      let result = data ? data[attributeSelector] : null;\n\n      if (options && options.dataType) {\n        const dataType = options.dataType;\n\n        if (dataType instanceof DataTypes.DECIMAL || dataType instanceof DataTypes.FLOAT) {\n          result = parseFloat(result);\n        } else if (dataType instanceof DataTypes.INTEGER || dataType instanceof DataTypes.BIGINT) {\n          result = parseInt(result, 10);\n        } else if (dataType instanceof DataTypes.DATE) {\n          if (!_.isNull(result) && !_.isDate(result)) {\n            result = new Date(result);\n          }\n        } else if (dataType instanceof DataTypes.STRING) {// Nothing to do, result is already a string.\n        }\n      }\n\n      return result;\n    });\n  }\n\n  createTrigger(tableName, triggerName, timingType, fireOnArray, functionName, functionParams, optionsArray, options) {\n    const sql = this.QueryGenerator.createTrigger(tableName, triggerName, timingType, fireOnArray, functionName, functionParams, optionsArray);\n    options = options || {};\n\n    if (sql) {\n      return this.sequelize.query(sql, options);\n    } else {\n      return Promise.resolve();\n    }\n  }\n\n  dropTrigger(tableName, triggerName, options) {\n    const sql = this.QueryGenerator.dropTrigger(tableName, triggerName);\n    options = options || {};\n\n    if (sql) {\n      return this.sequelize.query(sql, options);\n    } else {\n      return Promise.resolve();\n    }\n  }\n\n  renameTrigger(tableName, oldTriggerName, newTriggerName, options) {\n    const sql = this.QueryGenerator.renameTrigger(tableName, oldTriggerName, newTriggerName);\n    options = options || {};\n\n    if (sql) {\n      return this.sequelize.query(sql, options);\n    } else {\n      return Promise.resolve();\n    }\n  }\n  /**\n   * Create SQL function\n   *\n   * ```js\n   * queryInterface.createFunction(\n   *   'someFunction',\n   *   [\n   *     {type: 'integer', name: 'param', direction: 'IN'}\n   *   ],\n   *   'integer',\n   *   'plpgsql',\n   *   'RETURN param + 1;',\n   *   [\n   *     'IMMUTABLE',\n   *     'LEAKPROOF'\n   *   ]\n   * );\n   * ```\n   *\n   * @param {String} functionName Name of SQL function to create\n   * @param {Array}  params       List of parameters declared for SQL function\n   * @param {String} returnType   SQL type of function returned value\n   * @param {String} language     The name of the language that the function is implemented in\n   * @param {String} body         Source code of function\n   * @param {Array}  optionsArray Extra-options for creation\n   * @param {Object} [options]\n   *\n   * @return {Promise}\n   */\n\n\n  createFunction(functionName, params, returnType, language, body, optionsArray, options) {\n    const sql = this.QueryGenerator.createFunction(functionName, params, returnType, language, body, optionsArray);\n    options = options || {};\n\n    if (sql) {\n      return this.sequelize.query(sql, options);\n    } else {\n      return Promise.resolve();\n    }\n  }\n  /**\n   * Drop SQL function\n   *\n   * ```js\n   * queryInterface.dropFunction(\n   *   'someFunction',\n   *   [\n   *     {type: 'varchar', name: 'param1', direction: 'IN'},\n   *     {type: 'integer', name: 'param2', direction: 'INOUT'}\n   *   ]\n   * );\n   * ```\n   *\n   * @param {String} functionName Name of SQL function to drop\n   * @param {Array}  params       List of parameters declared for SQL function\n   * @param {Object} [options]\n   *\n   * @return {Promise}\n   */\n\n\n  dropFunction(functionName, params, options) {\n    const sql = this.QueryGenerator.dropFunction(functionName, params);\n    options = options || {};\n\n    if (sql) {\n      return this.sequelize.query(sql, options);\n    } else {\n      return Promise.resolve();\n    }\n  }\n  /**\n   * Rename SQL function\n   *\n   * ```js\n   * queryInterface.renameFunction(\n   *   'fooFunction',\n   *   [\n   *     {type: 'varchar', name: 'param1', direction: 'IN'},\n   *     {type: 'integer', name: 'param2', direction: 'INOUT'}\n   *   ],\n   *   'barFunction'\n   * );\n   * ```\n   *\n   * @param {String} oldFunctionName\n   * @param {Array}  params           List of parameters declared for SQL function\n   * @param {String} newFunctionName\n   * @param {Object} [options]\n   *\n   * @return {Promise}\n   */\n\n\n  renameFunction(oldFunctionName, params, newFunctionName, options) {\n    const sql = this.QueryGenerator.renameFunction(oldFunctionName, params, newFunctionName);\n    options = options || {};\n\n    if (sql) {\n      return this.sequelize.query(sql, options);\n    } else {\n      return Promise.resolve();\n    }\n  } // Helper methods useful for querying\n\n  /**\n   * Escape an identifier (e.g. a table or attribute name). If force is true,\n   * the identifier will be quoted even if the `quoteIdentifiers` option is\n   * false.\n   * @private\n   */\n\n\n  quoteIdentifier(identifier, force) {\n    return this.QueryGenerator.quoteIdentifier(identifier, force);\n  }\n\n  quoteTable(identifier) {\n    return this.QueryGenerator.quoteTable(identifier);\n  }\n  /**\n   * Split an identifier into .-separated tokens and quote each part.\n   * If force is true, the identifier will be quoted even if the\n   * `quoteIdentifiers` option is false.\n   * @private\n   */\n\n\n  quoteIdentifiers(identifiers, force) {\n    return this.QueryGenerator.quoteIdentifiers(identifiers, force);\n  }\n  /**\n   * Escape a value (e.g. a string, number or date)\n   * @private\n   */\n\n\n  escape(value) {\n    return this.QueryGenerator.escape(value);\n  }\n\n  setAutocommit(transaction, value, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to set autocommit for a transaction without transaction object!');\n    }\n\n    if (transaction.parent) {\n      // Not possible to set a separate isolation level for savepoints\n      return Promise.resolve();\n    }\n\n    options = _.assign({}, options, {\n      transaction: transaction.parent || transaction\n    });\n    const sql = this.QueryGenerator.setAutocommitQuery(value, {\n      parent: transaction.parent\n    });\n    if (!sql) return Promise.resolve();\n    return this.sequelize.query(sql, options);\n  }\n\n  setIsolationLevel(transaction, value, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to set isolation level for a transaction without transaction object!');\n    }\n\n    if (transaction.parent || !value) {\n      // Not possible to set a separate isolation level for savepoints\n      return Promise.resolve();\n    }\n\n    options = _.assign({}, options, {\n      transaction: transaction.parent || transaction\n    });\n    const sql = this.QueryGenerator.setIsolationLevelQuery(value, {\n      parent: transaction.parent\n    });\n    if (!sql) return Promise.resolve();\n    return this.sequelize.query(sql, options);\n  }\n\n  startTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to start a transaction without transaction object!');\n    }\n\n    options = _.assign({}, options, {\n      transaction: transaction.parent || transaction\n    });\n    options.transaction.name = transaction.parent ? transaction.name : undefined;\n    const sql = this.QueryGenerator.startTransactionQuery(transaction);\n    return this.sequelize.query(sql, options);\n  }\n\n  deferConstraints(transaction, options) {\n    options = _.assign({}, options, {\n      transaction: transaction.parent || transaction\n    });\n    const sql = this.QueryGenerator.deferConstraintsQuery(options);\n\n    if (sql) {\n      return this.sequelize.query(sql, options);\n    }\n\n    return Promise.resolve();\n  }\n\n  commitTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to commit a transaction without transaction object!');\n    }\n\n    if (transaction.parent) {\n      // Savepoints cannot be committed\n      return Promise.resolve();\n    }\n\n    options = _.assign({}, options, {\n      transaction: transaction.parent || transaction,\n      supportsSearchPath: false\n    });\n    const sql = this.QueryGenerator.commitTransactionQuery(transaction);\n    const promise = this.sequelize.query(sql, options);\n    transaction.finished = 'commit';\n    return promise;\n  }\n\n  rollbackTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to rollback a transaction without transaction object!');\n    }\n\n    options = _.assign({}, options, {\n      transaction: transaction.parent || transaction,\n      supportsSearchPath: false\n    });\n    options.transaction.name = transaction.parent ? transaction.name : undefined;\n    const sql = this.QueryGenerator.rollbackTransactionQuery(transaction);\n    const promise = this.sequelize.query(sql, options);\n    transaction.finished = 'rollback';\n    return promise;\n  }\n\n}\n\nmodule.exports = QueryInterface;\nmodule.exports.QueryInterface = QueryInterface;\nmodule.exports.default = QueryInterface;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/sequelize/lib/query-interface.js"],"names":["Utils","require","_","DataTypes","SQLiteQueryInterface","MSSSQLQueryInterface","MySQLQueryInterface","Transaction","Promise","QueryTypes","Op","QueryInterface","constructor","sequelize","QueryGenerator","dialect","createSchema","schema","options","sql","query","dropSchema","dropAllSchemas","_dialect","supports","schemas","drop","showAllSchemas","map","schemaName","assign","raw","type","SELECT","showSchemasSql","showSchemasQuery","then","schemaNames","flatten","value","schema_name","databaseVersion","versionQuery","VERSION","createTable","tableName","attributes","model","keys","Object","keyLen","length","i","clone","mapValues","attribute","isPlainObject","allowNull","normalizeAttribute","promises","ENUM","ARRAY","pgListEnums","field","push","plain","all","results","enumIdx","enumType","pgEnum","enumVals","fromArray","enum_value","vals","values","forEach","idx","valueOptions","before","after","indexOf","supportsSearchPath","pgEnumAdd","_schema","addSchema","attributesToSQL","context","createTableQuery","tap","connectionManager","_refreshDynamicOIDs","dropTable","cascade","force","dropTableQuery","instanceTable","modelManager","getModel","getTableName","rawAttributes","pgEnumDrop","get","dropAllTables","skip","tableNames","each","showAllTables","result","foreignKeysAreEnabled","foreign_keys","getForeignKeysForTables","foreignKeys","normalizedTableName","isObject","foreignKey","dropForeignKeyQuery","dropAllEnums","getDialect","resolve","pgEscapeAndQuote","enum_name","renameTable","renameTableQuery","SHOWTABLES","showTablesSql","showTablesQuery","describeTable","schemaDelimiter","describeTableQuery","DESCRIBE","data","isEmpty","reject","addColumn","table","key","Error","addColumnQuery","removeColumn","attributeName","call","removeColumnQuery","changeColumn","dataTypeOrOptions","normalizeDataType","changeColumnQuery","renameColumn","attrNameBefore","attrNameAfter","_options","defaultValue","renameColumnQuery","addIndex","rawTablename","Array","isArray","fields","cloneDeep","addIndexQuery","showIndex","showIndexesQuery","SHOWINDEXES","nameIndexes","indexes","FOREIGNKEYS","getForeignKeysQuery","config","database","r","constraint_name","filter","identity","getForeignKeyReferencesForTable","queryOptions","catalogName","getForeignKeyReferencesQuery","camelizeObjectKeys","removeIndex","indexNameOrAttributes","removeIndexQuery","addConstraint","name","addConstraintQuery","showConstraint","constraintName","showConstraintsQuery","SHOWCONSTRAINTS","removeConstraint","removeConstraintQuery","insert","instance","hasTrigger","insertQuery","INSERT","isNewRecord","upsert","insertValues","updateValues","where","wheres","indexFields","isWhereEmpty","uniqueKeys","unique","index","intersection","or","UPSERT","upsertQuery","created","primary_key","$action","primaryKeyField","undefined","bulkInsert","records","bulkInsertQuery","update","identifier","_modelOptions","updateQuery","UPDATE","bulkUpdate","find","models","delete","cascades","deleteQuery","associations","association","onDelete","toLowerCase","useHooks","accessors","instances","destroy","bulkDelete","defaults","limit","select","selectQuery","increment","arithmeticQuery","decrement","rawSelect","attributeSelector","Model","dataType","DECIMAL","FLOAT","parseFloat","INTEGER","BIGINT","parseInt","DATE","isNull","isDate","Date","STRING","createTrigger","triggerName","timingType","fireOnArray","functionName","functionParams","optionsArray","dropTrigger","renameTrigger","oldTriggerName","newTriggerName","createFunction","params","returnType","language","body","dropFunction","renameFunction","oldFunctionName","newFunctionName","quoteIdentifier","quoteTable","quoteIdentifiers","identifiers","escape","setAutocommit","transaction","parent","setAutocommitQuery","setIsolationLevel","setIsolationLevelQuery","startTransaction","startTransactionQuery","deferConstraints","deferConstraintsQuery","commitTransaction","commitTransactionQuery","promise","finished","rollbackTransaction","rollbackTransactionQuery","module","exports","default"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Utils = require('./utils');\nconst _ = require('lodash');\nconst DataTypes = require('./data-types');\nconst SQLiteQueryInterface = require('./dialects/sqlite/query-interface');\nconst MSSSQLQueryInterface = require('./dialects/mssql/query-interface');\nconst MySQLQueryInterface = require('./dialects/mysql/query-interface');\nconst Transaction = require('./transaction');\nconst Promise = require('./promise');\nconst QueryTypes = require('./query-types');\nconst Op = require('./operators');\n\n/**\n * The interface that Sequelize uses to talk to all databases\n *\n * @class QueryInterface\n */\nclass QueryInterface {\n  constructor(sequelize) {\n    this.sequelize = sequelize;\n    this.QueryGenerator = this.sequelize.dialect.QueryGenerator;\n  }\n\n  /**\n   * Creates a schema\n   *\n   * @param {String} schema    Schema name to create\n   * @param {Object} [options] Query options\n   *\n   * @return {Promise}\n   */\n  createSchema(schema, options) {\n    options = options || {};\n    const sql = this.QueryGenerator.createSchema(schema);\n    return this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Drops a schema\n   *\n   * @param {String} schema    Schema name to create\n   * @param {Object} [options] Query options\n   *\n   * @return {Promise}\n   */\n  dropSchema(schema, options) {\n    options = options || {};\n    const sql = this.QueryGenerator.dropSchema(schema);\n    return this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Drop all schemas\n   *\n   * @param {Object} [options] Query options\n   *\n   * @return {Promise}\n   */\n  dropAllSchemas(options) {\n    options = options || {};\n\n    if (!this.QueryGenerator._dialect.supports.schemas) {\n      return this.sequelize.drop(options);\n    } else {\n      return this.showAllSchemas(options).map(schemaName => this.dropSchema(schemaName, options));\n    }\n  }\n\n  /**\n   * Show all schemas\n   *\n   * @param {Object} [options] Query options\n   *\n   * @return {Promise<Array>}\n   */\n  showAllSchemas(options) {\n    options = _.assign({}, options, {\n      raw: true,\n      type: this.sequelize.QueryTypes.SELECT\n    });\n\n    const showSchemasSql = this.QueryGenerator.showSchemasQuery();\n\n    return this.sequelize.query(showSchemasSql, options).then(schemaNames => _.flatten(\n      _.map(schemaNames, value => value.schema_name ? value.schema_name : value)\n    ));\n  }\n\n  /**\n   * Returns database version\n   *\n   * @param {Object}    [options]      Query options\n   * @param {QueryType} [options.type] Query type\n   *\n   * @returns {Promise}\n   * @private\n   */\n  databaseVersion(options) {\n    return this.sequelize.query(\n      this.QueryGenerator.versionQuery(),\n      _.assign({}, options, { type: QueryTypes.VERSION })\n    );\n  }\n\n  /**\n   * Create a table with given set of attributes\n   *\n   * ```js\n   * queryInterface.createTable(\n   *   'nameOfTheNewTable',\n   *   {\n   *     id: {\n   *       type: Sequelize.INTEGER,\n   *       primaryKey: true,\n   *       autoIncrement: true\n   *     },\n   *     createdAt: {\n   *       type: Sequelize.DATE\n   *     },\n   *     updatedAt: {\n   *       type: Sequelize.DATE\n   *     },\n   *     attr1: Sequelize.STRING,\n   *     attr2: Sequelize.INTEGER,\n   *     attr3: {\n   *       type: Sequelize.BOOLEAN,\n   *       defaultValue: false,\n   *       allowNull: false\n   *     },\n   *     //foreign key usage\n   *     attr4: {\n   *       type: Sequelize.INTEGER,\n   *       references: {\n   *         model: 'another_table_name',\n   *         key: 'id'\n   *       },\n   *       onUpdate: 'cascade',\n   *       onDelete: 'cascade'\n   *     }\n   *   },\n   *   {\n   *     engine: 'MYISAM',    // default: 'InnoDB'\n   *     charset: 'latin1',   // default: null\n   *     schema: 'public'     // default: public, PostgreSQL only.\n   *   }\n   * )\n   * ```\n   *\n   * @param {String} tableName  Name of table to create\n   * @param {Object} attributes Object representing a list of table attributes to create\n   * @param {Object} [options]\n   * @param {Model}  [model]\n   *\n   * @return {Promise}\n   */\n  createTable(tableName, attributes, options, model) {\n    const keys = Object.keys(attributes);\n    const keyLen = keys.length;\n    let sql = '';\n    let i = 0;\n\n    options = _.clone(options) || {};\n\n    attributes = _.mapValues(attributes, attribute => {\n      if (!_.isPlainObject(attribute)) {\n        attribute = { type: attribute, allowNull: true };\n      }\n\n      attribute = this.sequelize.normalizeAttribute(attribute);\n\n      return attribute;\n    });\n\n    // Postgres requires a special SQL command for enums\n    if (this.sequelize.options.dialect === 'postgres') {\n      const promises = [];\n\n      for (i = 0; i < keyLen; i++) {\n        const attribute = attributes[keys[i]];\n        const type = attribute.type;\n\n        if (\n          type instanceof DataTypes.ENUM ||\n          (type instanceof DataTypes.ARRAY && type.type instanceof DataTypes.ENUM) //ARRAY sub type is ENUM\n        ) {\n          sql = this.QueryGenerator.pgListEnums(tableName, attribute.field || keys[i], options);\n          promises.push(this.sequelize.query(\n            sql,\n            _.assign({}, options, { plain: true, raw: true, type: QueryTypes.SELECT })\n          ));\n        }\n      }\n\n      return Promise.all(promises).then(results => {\n        const promises = [];\n        let enumIdx = 0;\n\n        for (i = 0; i < keyLen; i++) {\n          const attribute = attributes[keys[i]];\n          const type = attribute.type;\n          const enumType = type.type || type;\n\n          if (\n            type instanceof DataTypes.ENUM ||\n            (type instanceof DataTypes.ARRAY && enumType instanceof DataTypes.ENUM) //ARRAY sub type is ENUM\n          ) {\n            // If the enum type doesn't exist then create it\n            if (!results[enumIdx]) {\n              sql = this.QueryGenerator.pgEnum(tableName, attribute.field || keys[i], enumType, options);\n              promises.push(this.sequelize.query(\n                sql,\n                _.assign({}, options, { raw: true })\n              ));\n            } else if (!!results[enumIdx] && !!model) {\n              const enumVals = this.QueryGenerator.fromArray(results[enumIdx].enum_value);\n              const vals = enumType.values;\n\n              vals.forEach((value, idx) => {\n                // reset out after/before options since it's for every enum value\n                const valueOptions = _.clone(options);\n                valueOptions.before = null;\n                valueOptions.after = null;\n\n                if (enumVals.indexOf(value) === -1) {\n                  if (vals[idx + 1]) {\n                    valueOptions.before = vals[idx + 1];\n                  }\n                  else if (vals[idx - 1]) {\n                    valueOptions.after = vals[idx - 1];\n                  }\n                  valueOptions.supportsSearchPath = false;\n                  promises.push(this.sequelize.query(this.QueryGenerator.pgEnumAdd(tableName, attribute.field || keys[i], value, valueOptions), valueOptions));\n                }\n              });\n              enumIdx++;\n            }\n          }\n        }\n\n        if (!tableName.schema &&\n          (options.schema || !!model && model._schema)) {\n          tableName = this.QueryGenerator.addSchema({\n            tableName,\n            _schema: !!model && model._schema || options.schema\n          });\n        }\n\n        attributes = this.QueryGenerator.attributesToSQL(attributes, {\n          context: 'createTable'\n        });\n        sql = this.QueryGenerator.createTableQuery(tableName, attributes, options);\n\n        return Promise.all(promises)\n          .tap(() => {\n            // If ENUM processed, then refresh OIDs\n            if (promises.length) {\n              return this.sequelize.dialect.connectionManager._refreshDynamicOIDs();\n            }\n          })\n          .then(() => {\n            return this.sequelize.query(sql, options);\n          });\n      });\n    } else {\n      if (!tableName.schema &&\n        (options.schema || !!model && model._schema)) {\n        tableName = this.QueryGenerator.addSchema({\n          tableName,\n          _schema: !!model && model._schema || options.schema\n        });\n      }\n\n      attributes = this.QueryGenerator.attributesToSQL(attributes, {\n        context: 'createTable'\n      });\n      sql = this.QueryGenerator.createTableQuery(tableName, attributes, options);\n\n      return this.sequelize.query(sql, options);\n    }\n  }\n\n  /**\n   * Drops a table from database\n   *\n   * @param {String} tableName Table name to drop\n   * @param {Object} options   Query options\n   *\n   * @return {Promise}\n   */\n  dropTable(tableName, options) {\n    // if we're forcing we should be cascading unless explicitly stated otherwise\n    options = _.clone(options) || {};\n    options.cascade = options.cascade || options.force || false;\n\n    let sql = this.QueryGenerator.dropTableQuery(tableName, options);\n\n    return this.sequelize.query(sql, options).then(() => {\n      const promises = [];\n\n      // Since postgres has a special case for enums, we should drop the related\n      // enum type within the table and attribute\n      if (this.sequelize.options.dialect === 'postgres') {\n        const instanceTable = this.sequelize.modelManager.getModel(tableName, { attribute: 'tableName' });\n\n        if (instanceTable) {\n          const getTableName = (!options || !options.schema || options.schema === 'public' ? '' : options.schema + '_') + tableName;\n\n          const keys = Object.keys(instanceTable.rawAttributes);\n          const keyLen = keys.length;\n\n          for (let i = 0; i < keyLen; i++) {\n            if (instanceTable.rawAttributes[keys[i]].type instanceof DataTypes.ENUM) {\n              sql = this.QueryGenerator.pgEnumDrop(getTableName, keys[i]);\n              options.supportsSearchPath = false;\n              promises.push(this.sequelize.query(sql, _.assign({}, options, { raw: true })));\n            }\n          }\n        }\n      }\n\n      return Promise.all(promises).get(0);\n    });\n  }\n\n  /**\n   * Drop all tables from database\n   *\n   * @param {Object} [options]\n   * @param {Array}  [options.skip] List of table to skip\n   *\n   * @return {Promise}\n   */\n  dropAllTables(options) {\n    options = options || {};\n    const skip = options.skip || [];\n\n    const dropAllTables = tableNames => Promise.each(tableNames, tableName => {\n      // if tableName is not in the Array of tables names then dont drop it\n      if (skip.indexOf(tableName.tableName || tableName) === -1) {\n        return this.dropTable(tableName, _.assign({}, options, { cascade: true }) );\n      }\n    });\n\n    return this.showAllTables(options).then(tableNames => {\n      if (this.sequelize.options.dialect === 'sqlite') {\n        return this.sequelize.query('PRAGMA foreign_keys;', options).then(result => {\n          const foreignKeysAreEnabled = result.foreign_keys === 1;\n\n          if (foreignKeysAreEnabled) {\n            return this.sequelize.query('PRAGMA foreign_keys = OFF', options)\n              .then(() => dropAllTables(tableNames))\n              .then(() => this.sequelize.query('PRAGMA foreign_keys = ON', options));\n          } else {\n            return dropAllTables(tableNames);\n          }\n        });\n      } else {\n        return this.getForeignKeysForTables(tableNames, options).then(foreignKeys => {\n          const promises = [];\n\n          tableNames.forEach(tableName => {\n            let normalizedTableName = tableName;\n            if (_.isObject(tableName)) {\n              normalizedTableName = tableName.schema + '.' + tableName.tableName;\n            }\n\n            foreignKeys[normalizedTableName].forEach(foreignKey => {\n              const sql = this.QueryGenerator.dropForeignKeyQuery(tableName, foreignKey);\n              promises.push(this.sequelize.query(sql, options));\n            });\n          });\n\n          return Promise.all(promises).then(() => dropAllTables(tableNames));\n        });\n      }\n    });\n  }\n\n  /**\n   * Drop all enums from database, Postgres Only\n   *\n   * @param {Object} options Query options\n   *\n   * @return {Promise}\n   * @private\n   */\n  dropAllEnums(options) {\n    if (this.sequelize.getDialect() !== 'postgres') {\n      return Promise.resolve();\n    }\n\n    options = options || {};\n\n    return this.pgListEnums(null, options).map(result => this.sequelize.query(\n      this.QueryGenerator.pgEnumDrop(null, null, this.QueryGenerator.pgEscapeAndQuote(result.enum_name)),\n      _.assign({}, options, { raw: true })\n    ));\n  }\n\n  /**\n   * List all enums, Postgres Only\n   *\n   * @param {String} [tableName]  Table whose enum to list\n   * @param {Object} [options]    Query options\n   *\n   * @return {Promise}\n   * @private\n   */\n  pgListEnums(tableName, options) {\n    options = options || {};\n    const sql = this.QueryGenerator.pgListEnums(tableName);\n    return this.sequelize.query(sql, _.assign({}, options, { plain: false, raw: true, type: QueryTypes.SELECT }));\n  }\n\n  /**\n   * Renames a table\n   *\n   * @param {String} before    Current name of table\n   * @param {String} after     New name from table\n   * @param {Object} [options] Query options\n   *\n   * @return {Promise}\n   */\n  renameTable(before, after, options) {\n    options = options || {};\n    const sql = this.QueryGenerator.renameTableQuery(before, after);\n    return this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Get all tables in current database\n   *\n   * @param {Object}    [options] Query options\n   * @param {Boolean}   [options.raw=true] Run query in raw mode\n   * @param {QueryType} [options.type=QueryType.SHOWTABLE]\n   *\n   * @return {Promise<Array>}\n   * @private\n   */\n  showAllTables(options) {\n    options = _.assign({}, options, {\n      raw: true,\n      type: QueryTypes.SHOWTABLES\n    });\n\n    const showTablesSql = this.QueryGenerator.showTablesQuery();\n    return this.sequelize.query(showTablesSql, options).then(tableNames => _.flatten(tableNames));\n  }\n\n  /**\n   * Describe a table structure\n   *\n   * This method returns an array of hashes containing information about all attributes in the table.\n   *\n   * ```js\n   * {\n   *    name: {\n   *      type:         'VARCHAR(255)', // this will be 'CHARACTER VARYING' for pg!\n   *      allowNull:    true,\n   *      defaultValue: null\n   *    },\n   *    isBetaMember: {\n   *      type:         'TINYINT(1)', // this will be 'BOOLEAN' for pg!\n   *      allowNull:    false,\n   *      defaultValue: false\n   *    }\n   * }\n   * ```\n   * @param {String} tableName\n   * @param {Object} [options] Query options\n   *\n   * @return {Promise<Object>}\n   */\n  describeTable(tableName, options) {\n    let schema = null;\n    let schemaDelimiter = null;\n\n    if (typeof options === 'string') {\n      schema = options;\n    } else if (typeof options === 'object' && options !== null) {\n      schema = options.schema || null;\n      schemaDelimiter = options.schemaDelimiter || null;\n    }\n\n    if (typeof tableName === 'object' && tableName !== null) {\n      schema = tableName.schema;\n      tableName = tableName.tableName;\n    }\n\n    const sql = this.QueryGenerator.describeTableQuery(tableName, schema, schemaDelimiter);\n\n    return this.sequelize.query(\n      sql,\n      _.assign({}, options, { type: QueryTypes.DESCRIBE })\n    ).then(data => {\n      // If no data is returned from the query, then the table name may be wrong.\n      // Query generators that use information_schema for retrieving table info will just return an empty result set,\n      // it will not throw an error like built-ins do (e.g. DESCRIBE on MySql).\n      if (_.isEmpty(data)) {\n        return Promise.reject('No description found for \"' + tableName + '\" table. Check the table name and schema; remember, they _are_ case sensitive.');\n      } else {\n        return Promise.resolve(data);\n      }\n    });\n  }\n\n  /**\n   * Add a new column into a table\n   *\n   * @param {String} table     Table to add column to\n   * @param {String} key       Column name\n   * @param {Object} attribute Attribute definition\n   * @param {Object} [options] Query options\n   *\n   * @return {Promise}\n   */\n  addColumn(table, key, attribute, options) {\n    if (!table || !key || !attribute) {\n      throw new Error('addColumn takes atleast 3 arguments (table, attribute name, attribute definition)');\n    }\n\n    options = options || {};\n    attribute = this.sequelize.normalizeAttribute(attribute);\n    return this.sequelize.query(this.QueryGenerator.addColumnQuery(table, key, attribute), options);\n  }\n\n  /**\n   * Remove a column from table\n   *\n   * @param {String} tableName      Table to remove column from\n   * @param {String} attributeName  Columns name to remove\n   * @param {Object} [options]      Query options\n   *\n   * @return {Promise}\n   */\n  removeColumn(tableName, attributeName, options) {\n    options = options || {};\n    switch (this.sequelize.options.dialect) {\n      case 'sqlite':\n        // sqlite needs some special treatment as it cannot drop a column\n        return SQLiteQueryInterface.removeColumn.call(this, tableName, attributeName, options);\n      case 'mssql':\n        // mssql needs special treatment as it cannot drop a column with a default or foreign key constraint\n        return MSSSQLQueryInterface.removeColumn.call(this, tableName, attributeName, options);\n      case 'mysql':\n        // mysql needs special treatment as it cannot drop a column with a foreign key constraint\n        return MySQLQueryInterface.removeColumn.call(this, tableName, attributeName, options);\n      default:\n        return this.sequelize.query(this.QueryGenerator.removeColumnQuery(tableName, attributeName), options);\n    }\n  }\n\n  /**\n   * Change a column definition\n   *\n   * @param {String} tableName          Table name to change from\n   * @param {String} attributeName      Column name\n   * @param {Object} dataTypeOrOptions  Attribute definition for new column\n   * @param {Object} [options]          Query options\n   *\n   * @return {Promise}\n   */\n  changeColumn(tableName, attributeName, dataTypeOrOptions, options) {\n    const attributes = {};\n    options = options || {};\n\n    if (_.values(DataTypes).indexOf(dataTypeOrOptions) > -1) {\n      attributes[attributeName] = { type: dataTypeOrOptions, allowNull: true };\n    } else {\n      attributes[attributeName] = dataTypeOrOptions;\n    }\n\n    attributes[attributeName].type = this.sequelize.normalizeDataType(attributes[attributeName].type);\n\n    if (this.sequelize.options.dialect === 'sqlite') {\n      // sqlite needs some special treatment as it cannot change a column\n      return SQLiteQueryInterface.changeColumn.call(this, tableName, attributes, options);\n    } else {\n      const query = this.QueryGenerator.attributesToSQL(attributes);\n      const sql = this.QueryGenerator.changeColumnQuery(tableName, query);\n\n      return this.sequelize.query(sql, options);\n    }\n  }\n\n  /**\n   * Rename a column\n   *\n   * @param {String} tableName        Table name whose column to rename\n   * @param {String} attrNameBefore   Current column name\n   * @param {String} attrNameAfter    New column name\n   * @param {Object} [options]        Query option\n   *\n   * @return {Promise}\n   */\n  renameColumn(tableName, attrNameBefore, attrNameAfter, options) {\n    options = options || {};\n    return this.describeTable(tableName, options).then(data => {\n      if (!data[attrNameBefore]) {\n        throw new Error('Table ' + tableName + ' doesn\\'t have the column ' + attrNameBefore);\n      }\n\n      data = data[attrNameBefore] || {};\n\n      const _options = {};\n\n      _options[attrNameAfter] = {\n        attribute: attrNameAfter,\n        type: data.type,\n        allowNull: data.allowNull,\n        defaultValue: data.defaultValue\n      };\n\n      // fix: a not-null column cannot have null as default value\n      if (data.defaultValue === null && !data.allowNull) {\n        delete _options[attrNameAfter].defaultValue;\n      }\n\n      if (this.sequelize.options.dialect === 'sqlite') {\n        // sqlite needs some special treatment as it cannot rename a column\n        return SQLiteQueryInterface.renameColumn.call(this, tableName, attrNameBefore, attrNameAfter, options);\n      } else {\n        const sql = this.QueryGenerator.renameColumnQuery(\n          tableName,\n          attrNameBefore,\n          this.QueryGenerator.attributesToSQL(_options)\n        );\n        return this.sequelize.query(sql, options);\n      }\n    });\n  }\n\n  /**\n   * Add index to a column\n   *\n   * @param {String}  tableName        Table name to add index on\n   * @param {Object}  options\n   * @param {Array}   options.fields   List of attributes to add index on\n   * @param {Boolean} [options.unique] Create a unique index\n   * @param {String}  [options.using]  Useful for GIN indexes\n   * @param {String}  [options.type]   Type of index, available options are UNIQUE|FULLTEXT|SPATIAL\n   * @param {String}  [options.name]   Name of the index. Default is <table>_<attr1>_<attr2>\n   * @param {Object}  [options.where]  Where condition on index, for partial indexes\n   *\n   * @return {Promise}\n   */\n  addIndex(tableName, attributes, options, rawTablename) {\n    // Support for passing tableName, attributes, options or tableName, options (with a fields param which is the attributes)\n    if (!Array.isArray(attributes)) {\n      rawTablename = options;\n      options = attributes;\n      attributes = options.fields;\n    }\n    // testhint argsConform.end\n\n    if (!rawTablename) {\n      // Map for backwards compat\n      rawTablename = tableName;\n    }\n\n    options = Utils.cloneDeep(options);\n    options.fields = attributes;\n    const sql = this.QueryGenerator.addIndexQuery(tableName, options, rawTablename);\n    return this.sequelize.query(sql, _.assign({}, options, { supportsSearchPath: false }));\n  }\n\n  /**\n   * Show indexes on a table\n   *\n   * @param {String} tableName\n   * @param {Object} [options]   Query options\n   *\n   * @return {Promise<Array>}\n   * @private\n   */\n  showIndex(tableName, options) {\n    const sql = this.QueryGenerator.showIndexesQuery(tableName, options);\n    return this.sequelize.query(sql, _.assign({}, options, { type: QueryTypes.SHOWINDEXES }));\n  }\n\n  nameIndexes(indexes, rawTablename) {\n    return this.QueryGenerator.nameIndexes(indexes, rawTablename);\n  }\n\n  getForeignKeysForTables(tableNames, options) {\n    if (tableNames.length === 0) {\n      return Promise.resolve({});\n    }\n\n    options = _.assign({}, options || {}, { type: QueryTypes.FOREIGNKEYS });\n\n    return Promise.map(tableNames, tableName =>\n      this.sequelize.query(this.QueryGenerator.getForeignKeysQuery(tableName, this.sequelize.config.database), options)\n    ).then(results => {\n      const result = {};\n\n      tableNames.forEach((tableName, i) => {\n        if (_.isObject(tableName)) {\n          tableName = tableName.schema + '.' + tableName.tableName;\n        }\n\n        result[tableName] = _.isArray(results[i])\n          ? results[i].map(r => r.constraint_name)\n          : [results[i] && results[i].constraint_name];\n\n        result[tableName] = result[tableName].filter(_.identity);\n      });\n\n      return result;\n    });\n  }\n\n  /**\n   * Get foreign key references details for the table.\n   *\n   * Those details contains constraintSchema, constraintName, constraintCatalog\n   * tableCatalog, tableSchema, tableName, columnName,\n   * referencedTableCatalog, referencedTableCatalog, referencedTableSchema, referencedTableName, referencedColumnName.\n   * Remind: constraint informations won't return if it's sqlite.\n   *\n   * @param {String} tableName\n   * @param {Object} [options]  Query options\n   * @returns {Promise}\n   */\n  getForeignKeyReferencesForTable(tableName, options) {\n    const queryOptions = Object.assign({}, options, {\n      type: QueryTypes.FOREIGNKEYS\n    });\n    const catalogName = this.sequelize.config.database;\n    switch (this.sequelize.options.dialect) {\n      case 'sqlite':\n        // sqlite needs some special treatment.\n        return SQLiteQueryInterface.getForeignKeyReferencesForTable.call(this, tableName, queryOptions);\n      case 'postgres':\n      {\n        // postgres needs some special treatment as those field names returned are all lowercase\n        // in order to keep same result with other dialects.\n        const query = this.QueryGenerator.getForeignKeyReferencesQuery(tableName, catalogName);\n        return this.sequelize.query(query, queryOptions)\n          .then(result => result.map(Utils.camelizeObjectKeys));\n      }\n      case 'mssql':\n      case 'mysql':\n      default:\n      {\n        const query = this.QueryGenerator.getForeignKeysQuery(tableName, catalogName);\n        return this.sequelize.query(query, queryOptions);\n      }\n    }\n  }\n\n  /**\n   * Remove an already existing index from a table\n   *\n   * @param {String} tableName             Table name to drop index from\n   * @param {String} indexNameOrAttributes Index name\n   * @param {Object} [options]             Query options\n   *\n   * @return {Promise}\n   */\n  removeIndex(tableName, indexNameOrAttributes, options) {\n    options = options || {};\n    const sql = this.QueryGenerator.removeIndexQuery(tableName, indexNameOrAttributes);\n    return this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Add constraints to table\n   *\n   * Available constraints:\n   * - UNIQUE\n   * - DEFAULT (MSSQL only)\n   * - CHECK (MySQL - Ignored by the database engine )\n   * - FOREIGN KEY\n   * - PRIMARY KEY\n   *\n   * UNIQUE\n   * ```js\n   * queryInterface.addConstraint('Users', ['email'], {\n   *   type: 'unique',\n   *   name: 'custom_unique_constraint_name'\n   * });\n   * ```\n   *\n   * CHECK\n   * ```js\n   * queryInterface.addConstraint('Users', ['roles'], {\n   *   type: 'check',\n   *   where: {\n   *      roles: ['user', 'admin', 'moderator', 'guest']\n   *   }\n   * });\n   * ```\n   * Default - MSSQL only\n   * ```js\n   * queryInterface.addConstraint('Users', ['roles'], {\n   *    type: 'default',\n   *    defaultValue: 'guest'\n   * });\n   * ```\n   *\n   * Primary Key\n   * ```js\n   * queryInterface.addConstraint('Users', ['username'], {\n   *    type: 'primary key',\n   *    name: 'custom_primary_constraint_name'\n   * });\n   * ```\n   *\n   * Foreign Key\n   * ```js\n   * queryInterface.addConstraint('Posts', ['username'], {\n   *   type: 'foreign key',\n   *   name: 'custom_fkey_constraint_name',\n   *   references: { //Required field\n   *     table: 'target_table_name',\n   *     field: 'target_column_name'\n   *   },\n   *   onDelete: 'cascade',\n   *   onUpdate: 'cascade'\n   * });\n   * ```\n   *\n   * @param {String} tableName                  Table name where you want to add a constraint\n   * @param {Array}  attributes                 Array of column names to apply the constraint over\n   * @param {Object} options                    An object to define the constraint name, type etc\n   * @param {String} options.type               Type of constraint. One of the values in available constraints(case insensitive)\n   * @param {String} [options.name]             Name of the constraint. If not specified, sequelize automatically creates a named constraint based on constraint type, table & column names\n   * @param {String} [options.defaultValue]     The value for the default constraint\n   * @param {Object} [options.where]            Where clause/expression for the CHECK constraint\n   * @param {Object} [options.references]       Object specifying target table, column name to create foreign key constraint\n   * @param {String} [options.references.table] Target table name\n   * @param {String} [options.references.field] Target column name\n   *\n   * @return {Promise}\n   */\n  addConstraint(tableName, attributes, options, rawTablename) {\n    if (!Array.isArray(attributes)) {\n      rawTablename = options;\n      options = attributes;\n      attributes = options.fields;\n    }\n\n    if (!options.type) {\n      throw new Error('Constraint type must be specified through options.type');\n    }\n\n    if (!rawTablename) {\n      // Map for backwards compat\n      rawTablename = tableName;\n    }\n\n    options = Utils.cloneDeep(options);\n    options.fields = attributes;\n\n    if (this.sequelize.dialect.name === 'sqlite') {\n      return SQLiteQueryInterface.addConstraint.call(this, tableName, options, rawTablename);\n    } else {\n      const sql = this.QueryGenerator.addConstraintQuery(tableName, options, rawTablename);\n      return this.sequelize.query(sql, options);\n    }\n  }\n\n  showConstraint(tableName, constraintName, options) {\n    const sql = this.QueryGenerator.showConstraintsQuery(tableName, constraintName);\n    return this.sequelize.query(sql, Object.assign({}, options, { type: QueryTypes.SHOWCONSTRAINTS }));\n  }\n\n  /**\n   *\n   * @param {String} tableName       Table name to drop constraint from\n   * @param {String} constraintName  Constraint name\n   * @param {Object} options         Query options\n   *\n   * @return {Promise}\n   */\n  removeConstraint(tableName, constraintName, options) {\n    options = options || {};\n\n    switch (this.sequelize.options.dialect) {\n      case 'mysql':\n        //Mysql does not support DROP CONSTRAINT. Instead DROP PRIMARY, FOREIGN KEY, INDEX should be used\n        return MySQLQueryInterface.removeConstraint.call(this, tableName, constraintName, options);\n      case 'sqlite':\n        return SQLiteQueryInterface.removeConstraint.call(this, tableName, constraintName, options);\n      default:\n        const sql = this.QueryGenerator.removeConstraintQuery(tableName, constraintName);\n        return this.sequelize.query(sql, options);\n    }\n  }\n\n  insert(instance, tableName, values, options) {\n    options = Utils.cloneDeep(options);\n    options.hasTrigger = instance && instance.constructor.options.hasTrigger;\n    const sql = this.QueryGenerator.insertQuery(tableName, values, instance && instance.constructor.rawAttributes, options);\n\n    options.type = QueryTypes.INSERT;\n    options.instance = instance;\n\n    return this.sequelize.query(sql, options).then(results => {\n      if (instance) results[0].isNewRecord = false;\n      return results;\n    });\n  }\n\n  /**\n   * Upsert\n   *\n   * @param {String} tableName\n   * @param {Object} insertValues values to be inserted, mapped to field name\n   * @param {Object} updateValues values to be updated, mapped to field name\n   * @param {Object} where        various conditions\n   * @param {Model}  model\n   * @param {Object} options\n   *\n   * @returns {Promise<created, primaryKey>}\n   */\n  upsert(tableName, insertValues, updateValues, where, model, options) {\n    const wheres = [];\n    const attributes = Object.keys(insertValues);\n    let indexes = [];\n    let indexFields;\n\n    options = _.clone(options);\n\n    if (!Utils.isWhereEmpty(where)) {\n      wheres.push(where);\n    }\n\n    // Lets combine uniquekeys and indexes into one\n    indexes = _.map(model.options.uniqueKeys, value => {\n      return value.fields;\n    });\n\n    _.each(model.options.indexes, value => {\n      if (value.unique) {\n        // fields in the index may both the strings or objects with an attribute property - lets sanitize that\n        indexFields = _.map(value.fields, field => {\n          if (_.isPlainObject(field)) {\n            return field.attribute;\n          }\n          return field;\n        });\n        indexes.push(indexFields);\n      }\n    });\n\n    for (const index of indexes) {\n      if (_.intersection(attributes, index).length === index.length) {\n        where = {};\n        for (const field of index) {\n          where[field] = insertValues[field];\n        }\n        wheres.push(where);\n      }\n    }\n\n    where = { [Op.or]: wheres };\n\n    options.type = QueryTypes.UPSERT;\n    options.raw = true;\n\n    const sql = this.QueryGenerator.upsertQuery(tableName, insertValues, updateValues, where, model, options);\n    return this.sequelize.query(sql, options).then(result => {\n      switch (this.sequelize.options.dialect) {\n        case 'postgres':\n          return [result.created, result.primary_key];\n\n        case 'mssql':\n          return [\n            result.$action === 'INSERT',\n            result[model.primaryKeyField]\n          ];\n\n        // MySQL returns 1 for inserted, 2 for updated\n        // http://dev.mysql.com/doc/refman/5.0/en/insert-on-duplicate.html.\n        case 'mysql':\n          return [result === 1, undefined];\n\n        default:\n          return [result, undefined];\n      }\n    });\n  }\n\n  /**\n   * Insert records into a table\n   *\n   * ```js\n   * queryInterface.bulkInsert('roles', [{\n   *    label: 'user',\n   *    createdAt: new Date(),\n   *    updatedAt: new Date()\n   *  }, {\n   *    label: 'admin',\n   *    createdAt: new Date(),\n   *    updatedAt: new Date()\n   *  }]);\n   * ```\n   *\n   * @param {String} tableName             Table name to insert record to\n   * @param {Array}  records               List of records to insert\n   * @param {Object} options               Various options, please see Model.bulkCreate options\n   * @param {Object} fieldMappedAttributes Various attributes mapped by field name\n   *\n   * @return {Promise}\n   */\n  bulkInsert(tableName, records, options, attributes) {\n    options = _.clone(options) || {};\n    options.type = QueryTypes.INSERT;\n\n    return this.sequelize.query(\n      this.QueryGenerator.bulkInsertQuery(tableName, records, options, attributes),\n      options\n    ).then(results => results[0]);\n  }\n\n  update(instance, tableName, values, identifier, options) {\n    options = _.clone(options || {});\n    options.hasTrigger = !!(instance && instance._modelOptions && instance._modelOptions.hasTrigger);\n\n    const sql = this.QueryGenerator.updateQuery(tableName, values, identifier, options, instance.constructor.rawAttributes);\n\n    options.type = QueryTypes.UPDATE;\n\n    options.instance = instance;\n    return this.sequelize.query(sql, options);\n  }\n\n  bulkUpdate(tableName, values, identifier, options, attributes) {\n    options = Utils.cloneDeep(options);\n    if (typeof identifier === 'object') identifier = Utils.cloneDeep(identifier);\n\n    const sql = this.QueryGenerator.updateQuery(tableName, values, identifier, options, attributes);\n    const table = _.isObject(tableName) ? tableName : { tableName };\n    const model = _.find(this.sequelize.modelManager.models, { tableName: table.tableName });\n\n    options.model = model;\n    return this.sequelize.query(sql, options);\n  }\n\n  delete(instance, tableName, identifier, options) {\n    const cascades = [];\n    const sql = this.QueryGenerator.deleteQuery(tableName, identifier, null, instance.constructor);\n\n    options = _.clone(options) || {};\n\n    // Check for a restrict field\n    if (!!instance.constructor && !!instance.constructor.associations) {\n      const keys = Object.keys(instance.constructor.associations);\n      const length = keys.length;\n      let association;\n\n      for (let i = 0; i < length; i++) {\n        association = instance.constructor.associations[keys[i]];\n        if (association.options && association.options.onDelete &&\n          association.options.onDelete.toLowerCase() === 'cascade' &&\n          association.options.useHooks === true) {\n          cascades.push(association.accessors.get);\n        }\n      }\n    }\n\n    return Promise.each(cascades, cascade => {\n      return instance[cascade](options).then(instances => {\n        // Check for hasOne relationship with non-existing associate (\"has zero\")\n        if (!instances) {\n          return Promise.resolve();\n        }\n\n        if (!Array.isArray(instances)) instances = [instances];\n\n        return Promise.each(instances, instance => instance.destroy(options));\n      });\n    }).then(() => {\n      options.instance = instance;\n      return this.sequelize.query(sql, options);\n    });\n  }\n\n  /**\n   * Delete records from a table\n   *\n   * @param {String} tableName  Table name from where to delete records\n   * @param {Object} identifier Where conditions to find records to delete\n   *\n   * @return {Promise}\n   */\n  bulkDelete(tableName, identifier, options, model) {\n    options = Utils.cloneDeep(options);\n    options = _.defaults(options, {limit: null});\n    if (typeof identifier === 'object') identifier = Utils.cloneDeep(identifier);\n\n    const sql = this.QueryGenerator.deleteQuery(tableName, identifier, options, model);\n    return this.sequelize.query(sql, options);\n  }\n\n  select(model, tableName, options) {\n    options = Utils.cloneDeep(options);\n    options.type = QueryTypes.SELECT;\n    options.model = model;\n\n    return this.sequelize.query(\n      this.QueryGenerator.selectQuery(tableName, options, model),\n      options\n    );\n  }\n\n  increment(model, tableName, values, identifier, options) {\n    options = Utils.cloneDeep(options);\n\n    const sql = this.QueryGenerator.arithmeticQuery('+', tableName, values, identifier, options, options.attributes);\n\n    options.type = QueryTypes.UPDATE;\n    options.model = model;\n\n    return this.sequelize.query(sql, options);\n  }\n\n  decrement(model, tableName, values, identifier, options) {\n    options = Utils.cloneDeep(options);\n\n    const sql = this.QueryGenerator.arithmeticQuery('-', tableName, values, identifier, options, options.attributes);\n\n    options.type = QueryTypes.UPDATE;\n    options.model = model;\n\n    return this.sequelize.query(sql, options);\n  }\n\n  rawSelect(tableName, options, attributeSelector, Model) {\n    if (options.schema) {\n      tableName = this.QueryGenerator.addSchema({\n        tableName,\n        _schema: options.schema\n      });\n    }\n\n    options = Utils.cloneDeep(options);\n    options = _.defaults(options, {\n      raw: true,\n      plain: true,\n      type: QueryTypes.SELECT\n    });\n\n    const sql = this.QueryGenerator.selectQuery(tableName, options, Model);\n\n    if (attributeSelector === undefined) {\n      throw new Error('Please pass an attribute selector!');\n    }\n\n    return this.sequelize.query(sql, options).then(data => {\n      if (!options.plain) {\n        return data;\n      }\n\n      let result = data ? data[attributeSelector] : null;\n\n      if (options && options.dataType) {\n        const dataType = options.dataType;\n\n        if (dataType instanceof DataTypes.DECIMAL || dataType instanceof DataTypes.FLOAT) {\n          result = parseFloat(result);\n        } else if (dataType instanceof DataTypes.INTEGER || dataType instanceof DataTypes.BIGINT) {\n          result = parseInt(result, 10);\n        } else if (dataType instanceof DataTypes.DATE) {\n          if (!_.isNull(result) && !_.isDate(result)) {\n            result = new Date(result);\n          }\n        } else if (dataType instanceof DataTypes.STRING) {\n          // Nothing to do, result is already a string.\n        }\n      }\n\n      return result;\n    });\n  }\n\n  createTrigger(tableName, triggerName, timingType, fireOnArray, functionName, functionParams, optionsArray, options) {\n    const sql = this.QueryGenerator.createTrigger(tableName, triggerName, timingType, fireOnArray, functionName, functionParams, optionsArray);\n    options = options || {};\n    if (sql) {\n      return this.sequelize.query(sql, options);\n    } else {\n      return Promise.resolve();\n    }\n  }\n\n  dropTrigger(tableName, triggerName, options) {\n    const sql = this.QueryGenerator.dropTrigger(tableName, triggerName);\n    options = options || {};\n\n    if (sql) {\n      return this.sequelize.query(sql, options);\n    } else {\n      return Promise.resolve();\n    }\n  }\n\n  renameTrigger(tableName, oldTriggerName, newTriggerName, options) {\n    const sql = this.QueryGenerator.renameTrigger(tableName, oldTriggerName, newTriggerName);\n    options = options || {};\n\n    if (sql) {\n      return this.sequelize.query(sql, options);\n    } else {\n      return Promise.resolve();\n    }\n  }\n\n  /**\n   * Create SQL function\n   *\n   * ```js\n   * queryInterface.createFunction(\n   *   'someFunction',\n   *   [\n   *     {type: 'integer', name: 'param', direction: 'IN'}\n   *   ],\n   *   'integer',\n   *   'plpgsql',\n   *   'RETURN param + 1;',\n   *   [\n   *     'IMMUTABLE',\n   *     'LEAKPROOF'\n   *   ]\n   * );\n   * ```\n   *\n   * @param {String} functionName Name of SQL function to create\n   * @param {Array}  params       List of parameters declared for SQL function\n   * @param {String} returnType   SQL type of function returned value\n   * @param {String} language     The name of the language that the function is implemented in\n   * @param {String} body         Source code of function\n   * @param {Array}  optionsArray Extra-options for creation\n   * @param {Object} [options]\n   *\n   * @return {Promise}\n   */\n  createFunction(functionName, params, returnType, language, body, optionsArray, options) {\n    const sql = this.QueryGenerator.createFunction(functionName, params, returnType, language, body, optionsArray);\n    options = options || {};\n\n    if (sql) {\n      return this.sequelize.query(sql, options);\n    } else {\n      return Promise.resolve();\n    }\n  }\n\n  /**\n   * Drop SQL function\n   *\n   * ```js\n   * queryInterface.dropFunction(\n   *   'someFunction',\n   *   [\n   *     {type: 'varchar', name: 'param1', direction: 'IN'},\n   *     {type: 'integer', name: 'param2', direction: 'INOUT'}\n   *   ]\n   * );\n   * ```\n   *\n   * @param {String} functionName Name of SQL function to drop\n   * @param {Array}  params       List of parameters declared for SQL function\n   * @param {Object} [options]\n   *\n   * @return {Promise}\n   */\n  dropFunction(functionName, params, options) {\n    const sql = this.QueryGenerator.dropFunction(functionName, params);\n    options = options || {};\n\n    if (sql) {\n      return this.sequelize.query(sql, options);\n    } else {\n      return Promise.resolve();\n    }\n  }\n\n  /**\n   * Rename SQL function\n   *\n   * ```js\n   * queryInterface.renameFunction(\n   *   'fooFunction',\n   *   [\n   *     {type: 'varchar', name: 'param1', direction: 'IN'},\n   *     {type: 'integer', name: 'param2', direction: 'INOUT'}\n   *   ],\n   *   'barFunction'\n   * );\n   * ```\n   *\n   * @param {String} oldFunctionName\n   * @param {Array}  params           List of parameters declared for SQL function\n   * @param {String} newFunctionName\n   * @param {Object} [options]\n   *\n   * @return {Promise}\n   */\n  renameFunction(oldFunctionName, params, newFunctionName, options) {\n    const sql = this.QueryGenerator.renameFunction(oldFunctionName, params, newFunctionName);\n    options = options || {};\n\n    if (sql) {\n      return this.sequelize.query(sql, options);\n    } else {\n      return Promise.resolve();\n    }\n  }\n\n  // Helper methods useful for querying\n\n  /**\n   * Escape an identifier (e.g. a table or attribute name). If force is true,\n   * the identifier will be quoted even if the `quoteIdentifiers` option is\n   * false.\n   * @private\n   */\n  quoteIdentifier(identifier, force) {\n    return this.QueryGenerator.quoteIdentifier(identifier, force);\n  }\n\n  quoteTable(identifier) {\n    return this.QueryGenerator.quoteTable(identifier);\n  }\n\n  /**\n   * Split an identifier into .-separated tokens and quote each part.\n   * If force is true, the identifier will be quoted even if the\n   * `quoteIdentifiers` option is false.\n   * @private\n   */\n  quoteIdentifiers(identifiers, force) {\n    return this.QueryGenerator.quoteIdentifiers(identifiers, force);\n  }\n\n  /**\n   * Escape a value (e.g. a string, number or date)\n   * @private\n   */\n  escape(value) {\n    return this.QueryGenerator.escape(value);\n  }\n\n  setAutocommit(transaction, value, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to set autocommit for a transaction without transaction object!');\n    }\n    if (transaction.parent) {\n      // Not possible to set a separate isolation level for savepoints\n      return Promise.resolve();\n    }\n\n    options = _.assign({}, options, {\n      transaction: transaction.parent || transaction\n    });\n\n    const sql = this.QueryGenerator.setAutocommitQuery(value, {\n      parent: transaction.parent\n    });\n\n    if (!sql) return Promise.resolve();\n\n    return this.sequelize.query(sql, options);\n  }\n\n  setIsolationLevel(transaction, value, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to set isolation level for a transaction without transaction object!');\n    }\n\n    if (transaction.parent || !value) {\n      // Not possible to set a separate isolation level for savepoints\n      return Promise.resolve();\n    }\n\n    options = _.assign({}, options, {\n      transaction: transaction.parent || transaction\n    });\n\n    const sql = this.QueryGenerator.setIsolationLevelQuery(value, {\n      parent: transaction.parent\n    });\n\n    if (!sql) return Promise.resolve();\n\n    return this.sequelize.query(sql, options);\n  }\n\n  startTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to start a transaction without transaction object!');\n    }\n\n    options = _.assign({}, options, {\n      transaction: transaction.parent || transaction\n    });\n    options.transaction.name = transaction.parent ? transaction.name : undefined;\n    const sql = this.QueryGenerator.startTransactionQuery(transaction);\n\n    return this.sequelize.query(sql, options);\n  }\n\n  deferConstraints(transaction, options) {\n    options = _.assign({}, options, {\n      transaction: transaction.parent || transaction\n    });\n\n    const sql = this.QueryGenerator.deferConstraintsQuery(options);\n\n    if (sql) {\n      return this.sequelize.query(sql, options);\n    }\n\n    return Promise.resolve();\n  }\n\n  commitTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to commit a transaction without transaction object!');\n    }\n    if (transaction.parent) {\n      // Savepoints cannot be committed\n      return Promise.resolve();\n    }\n\n    options = _.assign({}, options, {\n      transaction: transaction.parent || transaction,\n      supportsSearchPath: false\n    });\n\n    const sql = this.QueryGenerator.commitTransactionQuery(transaction);\n    const promise = this.sequelize.query(sql, options);\n\n    transaction.finished = 'commit';\n\n    return promise;\n  }\n\n  rollbackTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to rollback a transaction without transaction object!');\n    }\n\n    options = _.assign({}, options, {\n      transaction: transaction.parent || transaction,\n      supportsSearchPath: false\n    });\n    options.transaction.name = transaction.parent ? transaction.name : undefined;\n    const sql = this.QueryGenerator.rollbackTransactionQuery(transaction);\n    const promise = this.sequelize.query(sql, options);\n\n    transaction.finished = 'rollback';\n\n    return promise;\n  }\n}\n\nmodule.exports = QueryInterface;\nmodule.exports.QueryInterface = QueryInterface;\nmodule.exports.default = QueryInterface;\n"]},"metadata":{},"sourceType":"script"}
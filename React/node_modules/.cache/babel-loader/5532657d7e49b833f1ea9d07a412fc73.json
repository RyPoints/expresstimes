{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Resolver = require(\"./Resolver\");\n\nconst SyncAsyncFileSystemDecorator = require(\"./SyncAsyncFileSystemDecorator\");\n\nconst ParsePlugin = require(\"./ParsePlugin\");\n\nconst DescriptionFilePlugin = require(\"./DescriptionFilePlugin\");\n\nconst NextPlugin = require(\"./NextPlugin\");\n\nconst TryNextPlugin = require(\"./TryNextPlugin\");\n\nconst ModuleKindPlugin = require(\"./ModuleKindPlugin\");\n\nconst FileKindPlugin = require(\"./FileKindPlugin\");\n\nconst JoinRequestPlugin = require(\"./JoinRequestPlugin\");\n\nconst ModulesInHierachicDirectoriesPlugin = require(\"./ModulesInHierachicDirectoriesPlugin\");\n\nconst ModulesInRootPlugin = require(\"./ModulesInRootPlugin\");\n\nconst AliasPlugin = require(\"./AliasPlugin\");\n\nconst AliasFieldPlugin = require(\"./AliasFieldPlugin\");\n\nconst ConcordExtensionsPlugin = require(\"./ConcordExtensionsPlugin\");\n\nconst ConcordMainPlugin = require(\"./ConcordMainPlugin\");\n\nconst ConcordModulesPlugin = require(\"./ConcordModulesPlugin\");\n\nconst DirectoryExistsPlugin = require(\"./DirectoryExistsPlugin\");\n\nconst FileExistsPlugin = require(\"./FileExistsPlugin\");\n\nconst SymlinkPlugin = require(\"./SymlinkPlugin\");\n\nconst MainFieldPlugin = require(\"./MainFieldPlugin\");\n\nconst UseFilePlugin = require(\"./UseFilePlugin\");\n\nconst AppendPlugin = require(\"./AppendPlugin\");\n\nconst ResultPlugin = require(\"./ResultPlugin\");\n\nconst ModuleAppendPlugin = require(\"./ModuleAppendPlugin\");\n\nconst UnsafeCachePlugin = require(\"./UnsafeCachePlugin\");\n\nexports.createResolver = function (options) {\n  //// OPTIONS ////\n  // A list of directories to resolve modules from, can be absolute path or folder name\n  let modules = options.modules || [\"node_modules\"]; // A list of description files to read from\n\n  const descriptionFiles = options.descriptionFiles || [\"package.json\"]; // A list of additional resolve plugins which should be applied\n  // The slice is there to create a copy, because otherwise pushing into plugins\n  // changes the original options.plugins array, causing duplicate plugins\n\n  const plugins = options.plugins && options.plugins.slice() || []; // A list of main fields in description files\n\n  let mainFields = options.mainFields || [\"main\"]; // A list of alias fields in description files\n\n  const aliasFields = options.aliasFields || []; // A list of main files in directories\n\n  const mainFiles = options.mainFiles || [\"index\"]; // A list of extensions which should be tried for files\n\n  let extensions = options.extensions || [\".js\", \".json\", \".node\"]; // Enforce that a extension from extensions must be used\n\n  const enforceExtension = options.enforceExtension || false; // A list of module extensions which should be tried for modules\n\n  let moduleExtensions = options.moduleExtensions || []; // Enforce that a extension from moduleExtensions must be used\n\n  const enforceModuleExtension = options.enforceModuleExtension || false; // A list of module alias configurations or an object which maps key to value\n\n  let alias = options.alias || []; // Resolve symlinks to their symlinked location\n\n  const symlinks = typeof options.symlinks !== \"undefined\" ? options.symlinks : true; // Resolve to a context instead of a file\n\n  const resolveToContext = options.resolveToContext || false; // Use this cache object to unsafely cache the successful requests\n\n  let unsafeCache = options.unsafeCache || false; // Whether or not the unsafeCache should include request context as part of the cache key.\n\n  const cacheWithContext = typeof options.cacheWithContext !== \"undefined\" ? options.cacheWithContext : true; // Enable concord description file instructions\n\n  const enableConcord = options.concord || false; // A function which decides whether a request should be cached or not.\n  // an object is passed with `path` and `request` properties.\n\n  const cachePredicate = options.cachePredicate || function () {\n    return true;\n  }; // The file system which should be used\n\n\n  const fileSystem = options.fileSystem; // Use only the sync constiants of the file system calls\n\n  const useSyncFileSystemCalls = options.useSyncFileSystemCalls; // A prepared Resolver to which the plugins are attached\n\n  let resolver = options.resolver; //// options processing ////\n\n  if (!resolver) {\n    resolver = new Resolver(useSyncFileSystemCalls ? new SyncAsyncFileSystemDecorator(fileSystem) : fileSystem);\n  }\n\n  extensions = [].concat(extensions);\n  moduleExtensions = [].concat(moduleExtensions);\n  modules = mergeFilteredToArray([].concat(modules), item => {\n    return !isAbsolutePath(item);\n  });\n  mainFields = mainFields.map(item => {\n    if (typeof item === \"string\" || Array.isArray(item)) {\n      item = {\n        name: item,\n        forceRelative: true\n      };\n    }\n\n    return item;\n  });\n\n  if (typeof alias === \"object\" && !Array.isArray(alias)) {\n    alias = Object.keys(alias).map(key => {\n      let onlyModule = false;\n      let obj = alias[key];\n\n      if (/\\$$/.test(key)) {\n        onlyModule = true;\n        key = key.substr(0, key.length - 1);\n      }\n\n      if (typeof obj === \"string\") {\n        obj = {\n          alias: obj\n        };\n      }\n\n      obj = Object.assign({\n        name: key,\n        onlyModule: onlyModule\n      }, obj);\n      return obj;\n    });\n  }\n\n  if (unsafeCache && typeof unsafeCache !== \"object\") {\n    unsafeCache = {};\n  } //// pipeline ////\n\n\n  resolver.ensureHook(\"resolve\");\n  resolver.ensureHook(\"parsedResolve\");\n  resolver.ensureHook(\"describedResolve\");\n  resolver.ensureHook(\"rawModule\");\n  resolver.ensureHook(\"module\");\n  resolver.ensureHook(\"relative\");\n  resolver.ensureHook(\"describedRelative\");\n  resolver.ensureHook(\"directory\");\n  resolver.ensureHook(\"existingDirectory\");\n  resolver.ensureHook(\"undescribedRawFile\");\n  resolver.ensureHook(\"rawFile\");\n  resolver.ensureHook(\"file\");\n  resolver.ensureHook(\"existingFile\");\n  resolver.ensureHook(\"resolved\"); // resolve\n\n  if (unsafeCache) {\n    plugins.push(new UnsafeCachePlugin(\"resolve\", cachePredicate, unsafeCache, cacheWithContext, \"new-resolve\"));\n    plugins.push(new ParsePlugin(\"new-resolve\", \"parsed-resolve\"));\n  } else {\n    plugins.push(new ParsePlugin(\"resolve\", \"parsed-resolve\"));\n  } // parsed-resolve\n\n\n  plugins.push(new DescriptionFilePlugin(\"parsed-resolve\", descriptionFiles, \"described-resolve\"));\n  plugins.push(new NextPlugin(\"after-parsed-resolve\", \"described-resolve\")); // described-resolve\n\n  if (alias.length > 0) plugins.push(new AliasPlugin(\"described-resolve\", alias, \"resolve\"));\n\n  if (enableConcord) {\n    plugins.push(new ConcordModulesPlugin(\"described-resolve\", {}, \"resolve\"));\n  }\n\n  aliasFields.forEach(item => {\n    plugins.push(new AliasFieldPlugin(\"described-resolve\", item, \"resolve\"));\n  });\n  plugins.push(new ModuleKindPlugin(\"after-described-resolve\", \"raw-module\"));\n  plugins.push(new JoinRequestPlugin(\"after-described-resolve\", \"relative\")); // raw-module\n\n  moduleExtensions.forEach(item => {\n    plugins.push(new ModuleAppendPlugin(\"raw-module\", item, \"module\"));\n  });\n  if (!enforceModuleExtension) plugins.push(new TryNextPlugin(\"raw-module\", null, \"module\")); // module\n\n  modules.forEach(item => {\n    if (Array.isArray(item)) plugins.push(new ModulesInHierachicDirectoriesPlugin(\"module\", item, \"resolve\"));else plugins.push(new ModulesInRootPlugin(\"module\", item, \"resolve\"));\n  }); // relative\n\n  plugins.push(new DescriptionFilePlugin(\"relative\", descriptionFiles, \"described-relative\"));\n  plugins.push(new NextPlugin(\"after-relative\", \"described-relative\")); // described-relative\n\n  plugins.push(new FileKindPlugin(\"described-relative\", \"raw-file\"));\n  plugins.push(new TryNextPlugin(\"described-relative\", \"as directory\", \"directory\")); // directory\n\n  plugins.push(new DirectoryExistsPlugin(\"directory\", \"existing-directory\"));\n\n  if (resolveToContext) {\n    // existing-directory\n    plugins.push(new NextPlugin(\"existing-directory\", \"resolved\"));\n  } else {\n    // existing-directory\n    if (enableConcord) {\n      plugins.push(new ConcordMainPlugin(\"existing-directory\", {}, \"resolve\"));\n    }\n\n    mainFields.forEach(item => {\n      plugins.push(new MainFieldPlugin(\"existing-directory\", item, \"resolve\"));\n    });\n    mainFiles.forEach(item => {\n      plugins.push(new UseFilePlugin(\"existing-directory\", item, \"undescribed-raw-file\"));\n    }); // undescribed-raw-file\n\n    plugins.push(new DescriptionFilePlugin(\"undescribed-raw-file\", descriptionFiles, \"raw-file\"));\n    plugins.push(new NextPlugin(\"after-undescribed-raw-file\", \"raw-file\")); // raw-file\n\n    if (!enforceExtension) {\n      plugins.push(new TryNextPlugin(\"raw-file\", \"no extension\", \"file\"));\n    }\n\n    if (enableConcord) {\n      plugins.push(new ConcordExtensionsPlugin(\"raw-file\", {}, \"file\"));\n    }\n\n    extensions.forEach(item => {\n      plugins.push(new AppendPlugin(\"raw-file\", item, \"file\"));\n    }); // file\n\n    if (alias.length > 0) plugins.push(new AliasPlugin(\"file\", alias, \"resolve\"));\n\n    if (enableConcord) {\n      plugins.push(new ConcordModulesPlugin(\"file\", {}, \"resolve\"));\n    }\n\n    aliasFields.forEach(item => {\n      plugins.push(new AliasFieldPlugin(\"file\", item, \"resolve\"));\n    });\n    if (symlinks) plugins.push(new SymlinkPlugin(\"file\", \"relative\"));\n    plugins.push(new FileExistsPlugin(\"file\", \"existing-file\")); // existing-file\n\n    plugins.push(new NextPlugin(\"existing-file\", \"resolved\"));\n  } // resolved\n\n\n  plugins.push(new ResultPlugin(resolver.hooks.resolved)); //// RESOLVER ////\n\n  plugins.forEach(plugin => {\n    plugin.apply(resolver);\n  });\n  return resolver;\n};\n\nfunction mergeFilteredToArray(array, filter) {\n  return array.reduce((array, item) => {\n    if (filter(item)) {\n      const lastElement = array[array.length - 1];\n\n      if (Array.isArray(lastElement)) {\n        lastElement.push(item);\n      } else {\n        array.push([item]);\n      }\n\n      return array;\n    } else {\n      array.push(item);\n      return array;\n    }\n  }, []);\n}\n\nfunction isAbsolutePath(path) {\n  return /^[A-Z]:|^\\//.test(path);\n}","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/enhanced-resolve/lib/ResolverFactory.js"],"names":["Resolver","require","SyncAsyncFileSystemDecorator","ParsePlugin","DescriptionFilePlugin","NextPlugin","TryNextPlugin","ModuleKindPlugin","FileKindPlugin","JoinRequestPlugin","ModulesInHierachicDirectoriesPlugin","ModulesInRootPlugin","AliasPlugin","AliasFieldPlugin","ConcordExtensionsPlugin","ConcordMainPlugin","ConcordModulesPlugin","DirectoryExistsPlugin","FileExistsPlugin","SymlinkPlugin","MainFieldPlugin","UseFilePlugin","AppendPlugin","ResultPlugin","ModuleAppendPlugin","UnsafeCachePlugin","exports","createResolver","options","modules","descriptionFiles","plugins","slice","mainFields","aliasFields","mainFiles","extensions","enforceExtension","moduleExtensions","enforceModuleExtension","alias","symlinks","resolveToContext","unsafeCache","cacheWithContext","enableConcord","concord","cachePredicate","fileSystem","useSyncFileSystemCalls","resolver","concat","mergeFilteredToArray","item","isAbsolutePath","map","Array","isArray","name","forceRelative","Object","keys","key","onlyModule","obj","test","substr","length","assign","ensureHook","push","forEach","hooks","resolved","plugin","apply","array","filter","reduce","lastElement","path"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Resolver = require(\"./Resolver\");\n\nconst SyncAsyncFileSystemDecorator = require(\"./SyncAsyncFileSystemDecorator\");\n\nconst ParsePlugin = require(\"./ParsePlugin\");\nconst DescriptionFilePlugin = require(\"./DescriptionFilePlugin\");\nconst NextPlugin = require(\"./NextPlugin\");\nconst TryNextPlugin = require(\"./TryNextPlugin\");\nconst ModuleKindPlugin = require(\"./ModuleKindPlugin\");\nconst FileKindPlugin = require(\"./FileKindPlugin\");\nconst JoinRequestPlugin = require(\"./JoinRequestPlugin\");\nconst ModulesInHierachicDirectoriesPlugin = require(\"./ModulesInHierachicDirectoriesPlugin\");\nconst ModulesInRootPlugin = require(\"./ModulesInRootPlugin\");\nconst AliasPlugin = require(\"./AliasPlugin\");\nconst AliasFieldPlugin = require(\"./AliasFieldPlugin\");\nconst ConcordExtensionsPlugin = require(\"./ConcordExtensionsPlugin\");\nconst ConcordMainPlugin = require(\"./ConcordMainPlugin\");\nconst ConcordModulesPlugin = require(\"./ConcordModulesPlugin\");\nconst DirectoryExistsPlugin = require(\"./DirectoryExistsPlugin\");\nconst FileExistsPlugin = require(\"./FileExistsPlugin\");\nconst SymlinkPlugin = require(\"./SymlinkPlugin\");\nconst MainFieldPlugin = require(\"./MainFieldPlugin\");\nconst UseFilePlugin = require(\"./UseFilePlugin\");\nconst AppendPlugin = require(\"./AppendPlugin\");\nconst ResultPlugin = require(\"./ResultPlugin\");\nconst ModuleAppendPlugin = require(\"./ModuleAppendPlugin\");\nconst UnsafeCachePlugin = require(\"./UnsafeCachePlugin\");\n\nexports.createResolver = function(options) {\n\t//// OPTIONS ////\n\n\t// A list of directories to resolve modules from, can be absolute path or folder name\n\tlet modules = options.modules || [\"node_modules\"];\n\n\t// A list of description files to read from\n\tconst descriptionFiles = options.descriptionFiles || [\"package.json\"];\n\n\t// A list of additional resolve plugins which should be applied\n\t// The slice is there to create a copy, because otherwise pushing into plugins\n\t// changes the original options.plugins array, causing duplicate plugins\n\tconst plugins = (options.plugins && options.plugins.slice()) || [];\n\n\t// A list of main fields in description files\n\tlet mainFields = options.mainFields || [\"main\"];\n\n\t// A list of alias fields in description files\n\tconst aliasFields = options.aliasFields || [];\n\n\t// A list of main files in directories\n\tconst mainFiles = options.mainFiles || [\"index\"];\n\n\t// A list of extensions which should be tried for files\n\tlet extensions = options.extensions || [\".js\", \".json\", \".node\"];\n\n\t// Enforce that a extension from extensions must be used\n\tconst enforceExtension = options.enforceExtension || false;\n\n\t// A list of module extensions which should be tried for modules\n\tlet moduleExtensions = options.moduleExtensions || [];\n\n\t// Enforce that a extension from moduleExtensions must be used\n\tconst enforceModuleExtension = options.enforceModuleExtension || false;\n\n\t// A list of module alias configurations or an object which maps key to value\n\tlet alias = options.alias || [];\n\n\t// Resolve symlinks to their symlinked location\n\tconst symlinks =\n\t\ttypeof options.symlinks !== \"undefined\" ? options.symlinks : true;\n\n\t// Resolve to a context instead of a file\n\tconst resolveToContext = options.resolveToContext || false;\n\n\t// Use this cache object to unsafely cache the successful requests\n\tlet unsafeCache = options.unsafeCache || false;\n\n\t// Whether or not the unsafeCache should include request context as part of the cache key.\n\tconst cacheWithContext =\n\t\ttypeof options.cacheWithContext !== \"undefined\"\n\t\t\t? options.cacheWithContext\n\t\t\t: true;\n\n\t// Enable concord description file instructions\n\tconst enableConcord = options.concord || false;\n\n\t// A function which decides whether a request should be cached or not.\n\t// an object is passed with `path` and `request` properties.\n\tconst cachePredicate =\n\t\toptions.cachePredicate ||\n\t\tfunction() {\n\t\t\treturn true;\n\t\t};\n\n\t// The file system which should be used\n\tconst fileSystem = options.fileSystem;\n\n\t// Use only the sync constiants of the file system calls\n\tconst useSyncFileSystemCalls = options.useSyncFileSystemCalls;\n\n\t// A prepared Resolver to which the plugins are attached\n\tlet resolver = options.resolver;\n\n\t//// options processing ////\n\n\tif (!resolver) {\n\t\tresolver = new Resolver(\n\t\t\tuseSyncFileSystemCalls\n\t\t\t\t? new SyncAsyncFileSystemDecorator(fileSystem)\n\t\t\t\t: fileSystem\n\t\t);\n\t}\n\n\textensions = [].concat(extensions);\n\tmoduleExtensions = [].concat(moduleExtensions);\n\n\tmodules = mergeFilteredToArray([].concat(modules), item => {\n\t\treturn !isAbsolutePath(item);\n\t});\n\n\tmainFields = mainFields.map(item => {\n\t\tif (typeof item === \"string\" || Array.isArray(item)) {\n\t\t\titem = {\n\t\t\t\tname: item,\n\t\t\t\tforceRelative: true\n\t\t\t};\n\t\t}\n\t\treturn item;\n\t});\n\n\tif (typeof alias === \"object\" && !Array.isArray(alias)) {\n\t\talias = Object.keys(alias).map(key => {\n\t\t\tlet onlyModule = false;\n\t\t\tlet obj = alias[key];\n\t\t\tif (/\\$$/.test(key)) {\n\t\t\t\tonlyModule = true;\n\t\t\t\tkey = key.substr(0, key.length - 1);\n\t\t\t}\n\t\t\tif (typeof obj === \"string\") {\n\t\t\t\tobj = {\n\t\t\t\t\talias: obj\n\t\t\t\t};\n\t\t\t}\n\t\t\tobj = Object.assign(\n\t\t\t\t{\n\t\t\t\t\tname: key,\n\t\t\t\t\tonlyModule: onlyModule\n\t\t\t\t},\n\t\t\t\tobj\n\t\t\t);\n\t\t\treturn obj;\n\t\t});\n\t}\n\n\tif (unsafeCache && typeof unsafeCache !== \"object\") {\n\t\tunsafeCache = {};\n\t}\n\n\t//// pipeline ////\n\n\tresolver.ensureHook(\"resolve\");\n\tresolver.ensureHook(\"parsedResolve\");\n\tresolver.ensureHook(\"describedResolve\");\n\tresolver.ensureHook(\"rawModule\");\n\tresolver.ensureHook(\"module\");\n\tresolver.ensureHook(\"relative\");\n\tresolver.ensureHook(\"describedRelative\");\n\tresolver.ensureHook(\"directory\");\n\tresolver.ensureHook(\"existingDirectory\");\n\tresolver.ensureHook(\"undescribedRawFile\");\n\tresolver.ensureHook(\"rawFile\");\n\tresolver.ensureHook(\"file\");\n\tresolver.ensureHook(\"existingFile\");\n\tresolver.ensureHook(\"resolved\");\n\n\t// resolve\n\tif (unsafeCache) {\n\t\tplugins.push(\n\t\t\tnew UnsafeCachePlugin(\n\t\t\t\t\"resolve\",\n\t\t\t\tcachePredicate,\n\t\t\t\tunsafeCache,\n\t\t\t\tcacheWithContext,\n\t\t\t\t\"new-resolve\"\n\t\t\t)\n\t\t);\n\t\tplugins.push(new ParsePlugin(\"new-resolve\", \"parsed-resolve\"));\n\t} else {\n\t\tplugins.push(new ParsePlugin(\"resolve\", \"parsed-resolve\"));\n\t}\n\n\t// parsed-resolve\n\tplugins.push(\n\t\tnew DescriptionFilePlugin(\n\t\t\t\"parsed-resolve\",\n\t\t\tdescriptionFiles,\n\t\t\t\"described-resolve\"\n\t\t)\n\t);\n\tplugins.push(new NextPlugin(\"after-parsed-resolve\", \"described-resolve\"));\n\n\t// described-resolve\n\tif (alias.length > 0)\n\t\tplugins.push(new AliasPlugin(\"described-resolve\", alias, \"resolve\"));\n\tif (enableConcord) {\n\t\tplugins.push(new ConcordModulesPlugin(\"described-resolve\", {}, \"resolve\"));\n\t}\n\taliasFields.forEach(item => {\n\t\tplugins.push(new AliasFieldPlugin(\"described-resolve\", item, \"resolve\"));\n\t});\n\tplugins.push(new ModuleKindPlugin(\"after-described-resolve\", \"raw-module\"));\n\tplugins.push(new JoinRequestPlugin(\"after-described-resolve\", \"relative\"));\n\n\t// raw-module\n\tmoduleExtensions.forEach(item => {\n\t\tplugins.push(new ModuleAppendPlugin(\"raw-module\", item, \"module\"));\n\t});\n\tif (!enforceModuleExtension)\n\t\tplugins.push(new TryNextPlugin(\"raw-module\", null, \"module\"));\n\n\t// module\n\tmodules.forEach(item => {\n\t\tif (Array.isArray(item))\n\t\t\tplugins.push(\n\t\t\t\tnew ModulesInHierachicDirectoriesPlugin(\"module\", item, \"resolve\")\n\t\t\t);\n\t\telse plugins.push(new ModulesInRootPlugin(\"module\", item, \"resolve\"));\n\t});\n\n\t// relative\n\tplugins.push(\n\t\tnew DescriptionFilePlugin(\n\t\t\t\"relative\",\n\t\t\tdescriptionFiles,\n\t\t\t\"described-relative\"\n\t\t)\n\t);\n\tplugins.push(new NextPlugin(\"after-relative\", \"described-relative\"));\n\n\t// described-relative\n\tplugins.push(new FileKindPlugin(\"described-relative\", \"raw-file\"));\n\tplugins.push(\n\t\tnew TryNextPlugin(\"described-relative\", \"as directory\", \"directory\")\n\t);\n\n\t// directory\n\tplugins.push(new DirectoryExistsPlugin(\"directory\", \"existing-directory\"));\n\n\tif (resolveToContext) {\n\t\t// existing-directory\n\t\tplugins.push(new NextPlugin(\"existing-directory\", \"resolved\"));\n\t} else {\n\t\t// existing-directory\n\t\tif (enableConcord) {\n\t\t\tplugins.push(new ConcordMainPlugin(\"existing-directory\", {}, \"resolve\"));\n\t\t}\n\t\tmainFields.forEach(item => {\n\t\t\tplugins.push(new MainFieldPlugin(\"existing-directory\", item, \"resolve\"));\n\t\t});\n\t\tmainFiles.forEach(item => {\n\t\t\tplugins.push(\n\t\t\t\tnew UseFilePlugin(\"existing-directory\", item, \"undescribed-raw-file\")\n\t\t\t);\n\t\t});\n\n\t\t// undescribed-raw-file\n\t\tplugins.push(\n\t\t\tnew DescriptionFilePlugin(\n\t\t\t\t\"undescribed-raw-file\",\n\t\t\t\tdescriptionFiles,\n\t\t\t\t\"raw-file\"\n\t\t\t)\n\t\t);\n\t\tplugins.push(new NextPlugin(\"after-undescribed-raw-file\", \"raw-file\"));\n\n\t\t// raw-file\n\t\tif (!enforceExtension) {\n\t\t\tplugins.push(new TryNextPlugin(\"raw-file\", \"no extension\", \"file\"));\n\t\t}\n\t\tif (enableConcord) {\n\t\t\tplugins.push(new ConcordExtensionsPlugin(\"raw-file\", {}, \"file\"));\n\t\t}\n\t\textensions.forEach(item => {\n\t\t\tplugins.push(new AppendPlugin(\"raw-file\", item, \"file\"));\n\t\t});\n\n\t\t// file\n\t\tif (alias.length > 0)\n\t\t\tplugins.push(new AliasPlugin(\"file\", alias, \"resolve\"));\n\t\tif (enableConcord) {\n\t\t\tplugins.push(new ConcordModulesPlugin(\"file\", {}, \"resolve\"));\n\t\t}\n\t\taliasFields.forEach(item => {\n\t\t\tplugins.push(new AliasFieldPlugin(\"file\", item, \"resolve\"));\n\t\t});\n\t\tif (symlinks) plugins.push(new SymlinkPlugin(\"file\", \"relative\"));\n\t\tplugins.push(new FileExistsPlugin(\"file\", \"existing-file\"));\n\n\t\t// existing-file\n\t\tplugins.push(new NextPlugin(\"existing-file\", \"resolved\"));\n\t}\n\n\t// resolved\n\tplugins.push(new ResultPlugin(resolver.hooks.resolved));\n\n\t//// RESOLVER ////\n\n\tplugins.forEach(plugin => {\n\t\tplugin.apply(resolver);\n\t});\n\n\treturn resolver;\n};\n\nfunction mergeFilteredToArray(array, filter) {\n\treturn array.reduce((array, item) => {\n\t\tif (filter(item)) {\n\t\t\tconst lastElement = array[array.length - 1];\n\t\t\tif (Array.isArray(lastElement)) {\n\t\t\t\tlastElement.push(item);\n\t\t\t} else {\n\t\t\t\tarray.push([item]);\n\t\t\t}\n\t\t\treturn array;\n\t\t} else {\n\t\t\tarray.push(item);\n\t\t\treturn array;\n\t\t}\n\t}, []);\n}\n\nfunction isAbsolutePath(path) {\n\treturn /^[A-Z]:|^\\//.test(path);\n}\n"]},"metadata":{},"sourceType":"script"}
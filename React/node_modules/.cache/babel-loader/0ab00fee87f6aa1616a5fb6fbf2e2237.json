{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { HttpHeaders } from \"../httpHeaders\";\nimport { Constants } from \"../util/constants\";\nvar HeaderConstants = Constants.HeaderConstants;\nvar DEFAULT_AUTHORIZATION_SCHEME = \"Bearer\";\n/**\n * A credentials object that uses a token string and a authorzation scheme to authenticate.\n */\n\nvar TokenCredentials =\n/** @class */\nfunction () {\n  /**\n   * Creates a new TokenCredentials object.\n   *\n   * @constructor\n   * @param {string} token The token.\n   * @param {string} [authorizationScheme] The authorization scheme.\n   */\n  function TokenCredentials(token, authorizationScheme) {\n    if (authorizationScheme === void 0) {\n      authorizationScheme = DEFAULT_AUTHORIZATION_SCHEME;\n    }\n\n    this.authorizationScheme = DEFAULT_AUTHORIZATION_SCHEME;\n\n    if (!token) {\n      throw new Error(\"token cannot be null or undefined.\");\n    }\n\n    this.token = token;\n    this.authorizationScheme = authorizationScheme;\n  }\n  /**\n   * Signs a request with the Authentication header.\n   *\n   * @param {WebResource} webResource The WebResource to be signed.\n   * @return {Promise<WebResource>} The signed request object.\n   */\n\n\n  TokenCredentials.prototype.signRequest = function (webResource) {\n    if (!webResource.headers) webResource.headers = new HttpHeaders();\n    webResource.headers.set(HeaderConstants.AUTHORIZATION, this.authorizationScheme + \" \" + this.token);\n    return Promise.resolve(webResource);\n  };\n\n  return TokenCredentials;\n}();\n\nexport { TokenCredentials };","map":{"version":3,"sources":["../../../lib/credentials/tokenCredentials.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SAAS,WAAT,QAA4B,gBAA5B;AACA,SAAS,SAAT,QAA0B,mBAA1B;AAIA,IAAM,eAAe,GAAG,SAAS,CAAC,eAAlC;AACA,IAAM,4BAA4B,GAAG,QAArC;AAEA;;;;AAGA,IAAA,gBAAA;AAAA;AAAA,YAAA;AAIE;;;;;;;AAOA,WAAA,gBAAA,CAAY,KAAZ,EAA2B,mBAA3B,EAAqF;AAA1D,QAAA,mBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,mBAAA,GAAA,4BAAA;AAA0D;;AATrF,SAAA,mBAAA,GAA8B,4BAA9B;;AAUE,QAAI,CAAC,KAAL,EAAY;AACV,YAAM,IAAI,KAAJ,CAAU,oCAAV,CAAN;AACD;;AACD,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,mBAAL,GAA2B,mBAA3B;AACD;AAED;;;;;;;;AAMA,EAAA,gBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,WAAZ,EAAoC;AAClC,QAAI,CAAC,WAAW,CAAC,OAAjB,EAA0B,WAAW,CAAC,OAAZ,GAAsB,IAAI,WAAJ,EAAtB;AAC1B,IAAA,WAAW,CAAC,OAAZ,CAAoB,GAApB,CAAwB,eAAe,CAAC,aAAxC,EAA0D,KAAK,mBAAL,GAAwB,GAAxB,GAA4B,KAAK,KAA3F;AACA,WAAO,OAAO,CAAC,OAAR,CAAgB,WAAhB,CAAP;AACD,GAJD;;AAKF,SAAA,gBAAA;AAAC,CA9BD,EAAA","sourceRoot":"","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { HttpHeaders } from \"../httpHeaders\";\nimport { Constants } from \"../util/constants\";\nvar HeaderConstants = Constants.HeaderConstants;\nvar DEFAULT_AUTHORIZATION_SCHEME = \"Bearer\";\n/**\n * A credentials object that uses a token string and a authorzation scheme to authenticate.\n */\nvar TokenCredentials = /** @class */ (function () {\n    /**\n     * Creates a new TokenCredentials object.\n     *\n     * @constructor\n     * @param {string} token The token.\n     * @param {string} [authorizationScheme] The authorization scheme.\n     */\n    function TokenCredentials(token, authorizationScheme) {\n        if (authorizationScheme === void 0) { authorizationScheme = DEFAULT_AUTHORIZATION_SCHEME; }\n        this.authorizationScheme = DEFAULT_AUTHORIZATION_SCHEME;\n        if (!token) {\n            throw new Error(\"token cannot be null or undefined.\");\n        }\n        this.token = token;\n        this.authorizationScheme = authorizationScheme;\n    }\n    /**\n     * Signs a request with the Authentication header.\n     *\n     * @param {WebResource} webResource The WebResource to be signed.\n     * @return {Promise<WebResource>} The signed request object.\n     */\n    TokenCredentials.prototype.signRequest = function (webResource) {\n        if (!webResource.headers)\n            webResource.headers = new HttpHeaders();\n        webResource.headers.set(HeaderConstants.AUTHORIZATION, this.authorizationScheme + \" \" + this.token);\n        return Promise.resolve(webResource);\n    };\n    return TokenCredentials;\n}());\nexport { TokenCredentials };\n//# sourceMappingURL=tokenCredentials.js.map"]},"metadata":{},"sourceType":"module"}
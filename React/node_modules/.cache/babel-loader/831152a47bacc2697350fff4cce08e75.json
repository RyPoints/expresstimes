{"ast":null,"code":"module.exports = WktParser;\n\nvar Types = require('./types');\n\nvar Point = require('./point');\n\nfunction WktParser(value) {\n  this.value = value;\n  this.position = 0;\n}\n\nWktParser.prototype.match = function (tokens) {\n  this.skipWhitespaces();\n\n  for (var i = 0; i < tokens.length; i++) {\n    if (this.value.substring(this.position).indexOf(tokens[i]) === 0) {\n      this.position += tokens[i].length;\n      return tokens[i];\n    }\n  }\n\n  return null;\n};\n\nWktParser.prototype.matchRegex = function (tokens) {\n  this.skipWhitespaces();\n\n  for (var i = 0; i < tokens.length; i++) {\n    var match = this.value.substring(this.position).match(tokens[i]);\n\n    if (match) {\n      this.position += match[0].length;\n      return match;\n    }\n  }\n\n  return null;\n};\n\nWktParser.prototype.isMatch = function (tokens) {\n  this.skipWhitespaces();\n\n  for (var i = 0; i < tokens.length; i++) {\n    if (this.value.substring(this.position).indexOf(tokens[i]) === 0) {\n      this.position += tokens[i].length;\n      return true;\n    }\n  }\n\n  return false;\n};\n\nWktParser.prototype.matchType = function () {\n  var geometryType = this.match([Types.wkt.Point, Types.wkt.LineString, Types.wkt.Polygon, Types.wkt.MultiPoint, Types.wkt.MultiLineString, Types.wkt.MultiPolygon, Types.wkt.GeometryCollection]);\n  if (!geometryType) throw new Error('Expected geometry type');\n  return geometryType;\n};\n\nWktParser.prototype.matchDimension = function () {\n  var dimension = this.match(['ZM', 'Z', 'M']);\n\n  switch (dimension) {\n    case 'ZM':\n      return {\n        hasZ: true,\n        hasM: true\n      };\n\n    case 'Z':\n      return {\n        hasZ: true,\n        hasM: false\n      };\n\n    case 'M':\n      return {\n        hasZ: false,\n        hasM: true\n      };\n\n    default:\n      return {\n        hasZ: false,\n        hasM: false\n      };\n  }\n};\n\nWktParser.prototype.expectGroupStart = function () {\n  if (!this.isMatch(['('])) throw new Error('Expected group start');\n};\n\nWktParser.prototype.expectGroupEnd = function () {\n  if (!this.isMatch([')'])) throw new Error('Expected group end');\n};\n\nWktParser.prototype.matchCoordinate = function (options) {\n  var match;\n  if (options.hasZ && options.hasM) match = this.matchRegex([/^(\\S*)\\s+(\\S*)\\s+(\\S*)\\s+([^\\s,)]*)/]);else if (options.hasZ || options.hasM) match = this.matchRegex([/^(\\S*)\\s+(\\S*)\\s+([^\\s,)]*)/]);else match = this.matchRegex([/^(\\S*)\\s+([^\\s,)]*)/]);\n  if (!match) throw new Error('Expected coordinates');\n  if (options.hasZ && options.hasM) return new Point(parseFloat(match[1]), parseFloat(match[2]), parseFloat(match[3]), parseFloat(match[4]));else if (options.hasZ) return new Point(parseFloat(match[1]), parseFloat(match[2]), parseFloat(match[3]));else if (options.hasM) return new Point(parseFloat(match[1]), parseFloat(match[2]), undefined, parseFloat(match[3]));else return new Point(parseFloat(match[1]), parseFloat(match[2]));\n};\n\nWktParser.prototype.matchCoordinates = function (options) {\n  var coordinates = [];\n\n  do {\n    var startsWithBracket = this.isMatch(['(']);\n    coordinates.push(this.matchCoordinate(options));\n    if (startsWithBracket) this.expectGroupEnd();\n  } while (this.isMatch([',']));\n\n  return coordinates;\n};\n\nWktParser.prototype.skipWhitespaces = function () {\n  while (this.position < this.value.length && this.value[this.position] === ' ') this.position++;\n};","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/wkx/lib/wktparser.js"],"names":["module","exports","WktParser","Types","require","Point","value","position","prototype","match","tokens","skipWhitespaces","i","length","substring","indexOf","matchRegex","isMatch","matchType","geometryType","wkt","LineString","Polygon","MultiPoint","MultiLineString","MultiPolygon","GeometryCollection","Error","matchDimension","dimension","hasZ","hasM","expectGroupStart","expectGroupEnd","matchCoordinate","options","parseFloat","undefined","matchCoordinates","coordinates","startsWithBracket","push"],"mappings":"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","sourcesContent":["module.exports = WktParser;\r\n\r\nvar Types = require('./types');\r\nvar Point = require('./point');\r\n\r\nfunction WktParser(value) {\r\n    this.value = value;\r\n    this.position = 0;\r\n}\r\n\r\nWktParser.prototype.match = function (tokens) {\r\n    this.skipWhitespaces();\r\n\r\n    for (var i = 0; i < tokens.length; i++) {\r\n        if (this.value.substring(this.position).indexOf(tokens[i]) === 0) {\r\n            this.position += tokens[i].length;\r\n            return tokens[i];\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nWktParser.prototype.matchRegex = function (tokens) {\r\n    this.skipWhitespaces();\r\n\r\n    for (var i = 0; i < tokens.length; i++) {\r\n        var match = this.value.substring(this.position).match(tokens[i]);\r\n\r\n        if (match) {\r\n            this.position += match[0].length;\r\n            return match;\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nWktParser.prototype.isMatch = function (tokens) {\r\n    this.skipWhitespaces();\r\n\r\n    for (var i = 0; i < tokens.length; i++) {\r\n        if (this.value.substring(this.position).indexOf(tokens[i]) === 0) {\r\n            this.position += tokens[i].length;\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\nWktParser.prototype.matchType = function () {\r\n    var geometryType = this.match([Types.wkt.Point, Types.wkt.LineString, Types.wkt.Polygon, Types.wkt.MultiPoint,\r\n    Types.wkt.MultiLineString, Types.wkt.MultiPolygon, Types.wkt.GeometryCollection]);\r\n\r\n    if (!geometryType)\r\n        throw new Error('Expected geometry type');\r\n\r\n    return geometryType;\r\n};\r\n\r\nWktParser.prototype.matchDimension = function () {\r\n    var dimension = this.match(['ZM', 'Z', 'M']);\r\n\r\n    switch (dimension) {\r\n        case 'ZM': return { hasZ: true, hasM: true };\r\n        case 'Z': return { hasZ: true, hasM: false };\r\n        case 'M': return { hasZ: false, hasM: true };\r\n        default: return { hasZ: false, hasM: false };\r\n    }\r\n};\r\n\r\nWktParser.prototype.expectGroupStart = function () {\r\n    if (!this.isMatch(['(']))\r\n        throw new Error('Expected group start');\r\n};\r\n\r\nWktParser.prototype.expectGroupEnd = function () {\r\n    if (!this.isMatch([')']))\r\n        throw new Error('Expected group end');\r\n};\r\n\r\nWktParser.prototype.matchCoordinate = function (options) {\r\n    var match;\r\n\r\n    if (options.hasZ && options.hasM)\r\n        match = this.matchRegex([/^(\\S*)\\s+(\\S*)\\s+(\\S*)\\s+([^\\s,)]*)/]);\r\n    else if (options.hasZ || options.hasM)\r\n        match = this.matchRegex([/^(\\S*)\\s+(\\S*)\\s+([^\\s,)]*)/]);\r\n    else\r\n        match = this.matchRegex([/^(\\S*)\\s+([^\\s,)]*)/]);\r\n\r\n    if (!match)\r\n        throw new Error('Expected coordinates');\r\n\r\n    if (options.hasZ && options.hasM)\r\n        return new Point(parseFloat(match[1]), parseFloat(match[2]), parseFloat(match[3]), parseFloat(match[4]));\r\n    else if (options.hasZ)\r\n        return new Point(parseFloat(match[1]), parseFloat(match[2]), parseFloat(match[3]));\r\n    else if (options.hasM)\r\n        return new Point(parseFloat(match[1]), parseFloat(match[2]), undefined, parseFloat(match[3]));\r\n    else\r\n        return new Point(parseFloat(match[1]), parseFloat(match[2]));\r\n};\r\n\r\nWktParser.prototype.matchCoordinates = function (options) {\r\n    var coordinates = [];\r\n\r\n    do {\r\n        var startsWithBracket = this.isMatch(['(']);\r\n\r\n        coordinates.push(this.matchCoordinate(options));\r\n\r\n        if (startsWithBracket)\r\n            this.expectGroupEnd();\r\n    } while (this.isMatch([',']));\r\n\r\n    return coordinates;\r\n};\r\n\r\nWktParser.prototype.skipWhitespaces = function () {\r\n    while (this.position < this.value.length && this.value[this.position] === ' ')\r\n        this.position++;\r\n};\r\n"]},"metadata":{},"sourceType":"script"}
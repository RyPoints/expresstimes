{"ast":null,"code":"\"use strict\"; // Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst applicationTokenCredentialsBase_1 = require(\"./applicationTokenCredentialsBase\");\n\nconst authConstants_1 = require(\"../util/authConstants\");\n\nclass ApplicationTokenCredentials extends applicationTokenCredentialsBase_1.ApplicationTokenCredentialsBase {\n  /**\n   * Creates a new ApplicationTokenCredentials object.\n   * See {@link https://azure.microsoft.com/en-us/documentation/articles/active-directory-devquickstarts-dotnet/ Active Directory Quickstart for .Net}\n   * for detailed instructions on creating an Azure Active Directory application.\n   * @constructor\n   * @param {string} clientId The active directory application client id.\n   * @param {string} domain The domain or tenant id containing this application.\n   * @param {string} secret The authentication secret for the application.\n   * @param {string} [tokenAudience] The audience for which the token is requested. Valid values are 'graph', 'batch', or any other resource like 'https://vault.azure.net/'.\n   * If tokenAudience is 'graph' then domain should also be provided and its value should not be the default 'common' tenant. It must be a string (preferrably in a guid format).\n   * @param {Environment} [environment] The azure environment to authenticate with.\n   * @param {object} [tokenCache] The token cache. Default value is the MemoryCache object from adal.\n   */\n  constructor(clientId, domain, secret, tokenAudience, environment, tokenCache) {\n    if (!secret || typeof secret.valueOf() !== \"string\") {\n      throw new Error(\"secret must be a non empty string.\");\n    }\n\n    super(clientId, domain, tokenAudience, environment, tokenCache);\n    this.secret = secret;\n  }\n  /**\n   * Tries to get the token from cache initially. If that is unsuccessfull then it tries to get the token from ADAL.\n   * @returns {Promise<TokenResponse>} A promise that resolves to TokenResponse and rejects with an Error.\n   */\n\n\n  getToken() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const tokenResponse = yield this.getTokenFromCache();\n        return tokenResponse;\n      } catch (error) {\n        if (error.message && error.message.startsWith(authConstants_1.AuthConstants.SDK_INTERNAL_ERROR)) {\n          return Promise.reject(error);\n        }\n\n        const resource = this.getActiveDirectoryResourceId();\n        return new Promise((resolve, reject) => {\n          this.authContext.acquireTokenWithClientCredentials(resource, this.clientId, this.secret, (error, tokenResponse) => {\n            if (error) {\n              return reject(error);\n            }\n\n            if (tokenResponse.error || tokenResponse.errorDescription) {\n              return reject(tokenResponse);\n            }\n\n            return resolve(tokenResponse);\n          });\n        });\n      }\n    });\n  }\n\n}\n\nexports.ApplicationTokenCredentials = ApplicationTokenCredentials;","map":{"version":3,"sources":["../../../lib/credentials/applicationTokenCredentials.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAA,iCAAA,GAAA,OAAA,CAAA,mCAAA,CAAA;;AAEA,MAAA,eAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AAGA,MAAa,2BAAb,SAAiD,iCAAA,CAAA,+BAAjD,CAAgF;AAG9E;;;;;;;;;;;;;AAaA,EAAA,WAAA,CACE,QADF,EAEE,MAFF,EAGE,MAHF,EAIE,aAJF,EAKE,WALF,EAME,UANF,EAMyB;AAEvB,QAAI,CAAC,MAAD,IAAW,OAAO,MAAM,CAAC,OAAP,EAAP,KAA4B,QAA3C,EAAqD;AACnD,YAAM,IAAI,KAAJ,CAAU,oCAAV,CAAN;AACD;;AACD,UAAM,QAAN,EAAgB,MAAhB,EAAwB,aAAxB,EAAuC,WAAvC,EAAoD,UAApD;AAEA,SAAK,MAAL,GAAc,MAAd;AACD;AAED;;;;;;AAIa,EAAA,QAAQ,GAAA;;AACnB,UAAI;AACF,cAAM,aAAa,GAAG,MAAM,KAAK,iBAAL,EAA5B;AACA,eAAO,aAAP;AACD,OAHD,CAGE,OAAO,KAAP,EAAc;AACd,YACE,KAAK,CAAC,OAAN,IACA,KAAK,CAAC,OAAN,CAAc,UAAd,CAAyB,eAAA,CAAA,aAAA,CAAc,kBAAvC,CAFF,EAGE;AACA,iBAAO,OAAO,CAAC,MAAR,CAAe,KAAf,CAAP;AACD;;AACD,cAAM,QAAQ,GAAG,KAAK,4BAAL,EAAjB;AACA,eAAO,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAoB;AACrC,eAAK,WAAL,CAAiB,iCAAjB,CACE,QADF,EAEE,KAAK,QAFP,EAGE,KAAK,MAHP,EAIE,CAAC,KAAD,EAAa,aAAb,KAA6D;AAC3D,gBAAI,KAAJ,EAAW;AACT,qBAAO,MAAM,CAAC,KAAD,CAAb;AACD;;AACD,gBAAI,aAAa,CAAC,KAAd,IAAuB,aAAa,CAAC,gBAAzC,EAA2D;AACzD,qBAAO,MAAM,CAAC,aAAD,CAAb;AACD;;AACD,mBAAO,OAAO,CAAC,aAAD,CAAd;AACD,WAZH;AAcD,SAfM,CAAP;AAgBD;AACF,K;AAAA;;AAjE6E;;AAAhF,OAAA,CAAA,2BAAA,GAAA,2BAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst applicationTokenCredentialsBase_1 = require(\"./applicationTokenCredentialsBase\");\nconst authConstants_1 = require(\"../util/authConstants\");\nclass ApplicationTokenCredentials extends applicationTokenCredentialsBase_1.ApplicationTokenCredentialsBase {\n    /**\n     * Creates a new ApplicationTokenCredentials object.\n     * See {@link https://azure.microsoft.com/en-us/documentation/articles/active-directory-devquickstarts-dotnet/ Active Directory Quickstart for .Net}\n     * for detailed instructions on creating an Azure Active Directory application.\n     * @constructor\n     * @param {string} clientId The active directory application client id.\n     * @param {string} domain The domain or tenant id containing this application.\n     * @param {string} secret The authentication secret for the application.\n     * @param {string} [tokenAudience] The audience for which the token is requested. Valid values are 'graph', 'batch', or any other resource like 'https://vault.azure.net/'.\n     * If tokenAudience is 'graph' then domain should also be provided and its value should not be the default 'common' tenant. It must be a string (preferrably in a guid format).\n     * @param {Environment} [environment] The azure environment to authenticate with.\n     * @param {object} [tokenCache] The token cache. Default value is the MemoryCache object from adal.\n     */\n    constructor(clientId, domain, secret, tokenAudience, environment, tokenCache) {\n        if (!secret || typeof secret.valueOf() !== \"string\") {\n            throw new Error(\"secret must be a non empty string.\");\n        }\n        super(clientId, domain, tokenAudience, environment, tokenCache);\n        this.secret = secret;\n    }\n    /**\n     * Tries to get the token from cache initially. If that is unsuccessfull then it tries to get the token from ADAL.\n     * @returns {Promise<TokenResponse>} A promise that resolves to TokenResponse and rejects with an Error.\n     */\n    getToken() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const tokenResponse = yield this.getTokenFromCache();\n                return tokenResponse;\n            }\n            catch (error) {\n                if (error.message &&\n                    error.message.startsWith(authConstants_1.AuthConstants.SDK_INTERNAL_ERROR)) {\n                    return Promise.reject(error);\n                }\n                const resource = this.getActiveDirectoryResourceId();\n                return new Promise((resolve, reject) => {\n                    this.authContext.acquireTokenWithClientCredentials(resource, this.clientId, this.secret, (error, tokenResponse) => {\n                        if (error) {\n                            return reject(error);\n                        }\n                        if (tokenResponse.error || tokenResponse.errorDescription) {\n                            return reject(tokenResponse);\n                        }\n                        return resolve(tokenResponse);\n                    });\n                });\n            }\n        });\n    }\n}\nexports.ApplicationTokenCredentials = ApplicationTokenCredentials;\n//# sourceMappingURL=applicationTokenCredentials.js.map"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nconst urlParse = require('url').parse;\n\nconst ClientConstants = require('./constants/client');\n\nconst Charsets = require('./constants/charsets');\n\nlet SSLProfiles = null;\nconst validOptions = {\n  authPlugins: 1,\n  authSwitchHandler: 1,\n  bigNumberStrings: 1,\n  charset: 1,\n  charsetNumber: 1,\n  compress: 1,\n  connectAttributes: 1,\n  connectTimeout: 1,\n  database: 1,\n  dateStrings: 1,\n  debug: 1,\n  decimalNumbers: 1,\n  flags: 1,\n  host: 1,\n  insecureAuth: 1,\n  isServer: 1,\n  localAddress: 1,\n  maxPreparedStatements: 1,\n  multipleStatements: 1,\n  namedPlaceholders: 1,\n  nestTables: 1,\n  password: 1,\n  passwordSha1: 1,\n  pool: 1,\n  port: 1,\n  queryFormat: 1,\n  rowsAsArray: 1,\n  socketPath: 1,\n  ssl: 1,\n  stream: 1,\n  stringifyObjects: 1,\n  supportBigNumbers: 1,\n  timezone: 1,\n  trace: 1,\n  typeCast: 1,\n  uri: 1,\n  user: 1,\n  // These options are used for Pool\n  connectionLimit: 1,\n  Promise: 1,\n  queueLimit: 1,\n  waitForConnections: 1\n};\n\nclass ConnectionConfig {\n  constructor(options) {\n    if (typeof options === 'string') {\n      options = ConnectionConfig.parseUrl(options);\n    } else if (options && options.uri) {\n      const uriOptions = ConnectionConfig.parseUrl(options.uri);\n\n      for (const key in uriOptions) {\n        if (!Object.prototype.hasOwnProperty.call(uriOptions, key)) continue;\n        if (options[key]) continue;\n        options[key] = uriOptions[key];\n      }\n    }\n\n    for (const key in options) {\n      if (!Object.prototype.hasOwnProperty.call(options, key)) continue;\n\n      if (validOptions[key] !== 1) {\n        // REVIEW: Should this be emitted somehow?\n        // eslint-disable-next-line no-console\n        console.error(`Ignoring invalid configuration option passed to Connection: ${key}. This is currently a warning, but in future versions of MySQL2, an error will be thrown if you pass an invalid configuration option to a Connection`);\n      }\n    }\n\n    this.isServer = options.isServer;\n    this.stream = options.stream;\n    this.host = options.host || 'localhost';\n    this.port = options.port || 3306;\n    this.localAddress = options.localAddress;\n    this.socketPath = options.socketPath;\n    this.user = options.user || undefined;\n    this.password = options.password || undefined;\n    this.passwordSha1 = options.passwordSha1 || undefined;\n    this.database = options.database;\n    this.connectTimeout = isNaN(options.connectTimeout) ? 10 * 1000 : options.connectTimeout;\n    this.insecureAuth = options.insecureAuth || false;\n    this.supportBigNumbers = options.supportBigNumbers || false;\n    this.bigNumberStrings = options.bigNumberStrings || false;\n    this.decimalNumbers = options.decimalNumbers || false;\n    this.dateStrings = options.dateStrings || false;\n    this.debug = options.debug;\n    this.trace = options.trace !== false;\n    this.stringifyObjects = options.stringifyObjects || false;\n\n    if (options.timezone && !/^(?:local|Z|[ +-]\\d\\d:\\d\\d)$/.test(options.timezone)) {\n      // strictly supports timezones specified by mysqljs/mysql:\n      // https://github.com/mysqljs/mysql#user-content-connection-options\n      // eslint-disable-next-line no-console\n      console.error(`Ignoring invalid timezone passed to Connection: ${options.timezone}. This is currently a warning, but in future versions of MySQL2, an error will be thrown if you pass an invalid configuration option to a Connection`); // SqlStrings falls back to UTC on invalid timezone\n\n      this.timezone = 'Z';\n    } else {\n      this.timezone = options.timezone || 'local';\n    }\n\n    this.queryFormat = options.queryFormat;\n    this.pool = options.pool || undefined;\n    this.ssl = typeof options.ssl === 'string' ? ConnectionConfig.getSSLProfile(options.ssl) : options.ssl || false;\n    this.multipleStatements = options.multipleStatements || false;\n    this.rowsAsArray = options.rowsAsArray || false;\n    this.namedPlaceholders = options.namedPlaceholders || false;\n    this.nestTables = options.nestTables === undefined ? undefined : options.nestTables;\n    this.typeCast = options.typeCast === undefined ? true : options.typeCast;\n\n    if (this.timezone[0] === ' ') {\n      // \"+\" is a url encoded char for space so it\n      // gets translated to space when giving a\n      // connection string..\n      this.timezone = `+${this.timezone.substr(1)}`;\n    }\n\n    if (this.ssl) {\n      if (typeof this.ssl !== 'object') {\n        throw new TypeError(`SSL profile must be an object, instead it's a ${typeof this.ssl}`);\n      } // Default rejectUnauthorized to true\n\n\n      this.ssl.rejectUnauthorized = this.ssl.rejectUnauthorized !== false;\n    }\n\n    this.maxPacketSize = 0;\n    this.charsetNumber = options.charset ? ConnectionConfig.getCharsetNumber(options.charset) : options.charsetNumber || Charsets.UTF8MB4_UNICODE_CI;\n    this.compress = options.compress || false;\n    this.authPlugins = options.authPlugins;\n    this.authSwitchHandler = options.authSwitchHandler;\n    this.clientFlags = ConnectionConfig.mergeFlags(ConnectionConfig.getDefaultFlags(options), options.flags || '');\n    this.connectAttributes = options.connectAttributes;\n    this.maxPreparedStatements = options.maxPreparedStatements || 16000;\n  }\n\n  static mergeFlags(default_flags, user_flags) {\n    let flags = 0x0,\n        i;\n\n    if (!Array.isArray(user_flags)) {\n      user_flags = String(user_flags || '').toUpperCase().split(/\\s*,+\\s*/);\n    } // add default flags unless \"blacklisted\"\n\n\n    for (i in default_flags) {\n      if (user_flags.indexOf(`-${default_flags[i]}`) >= 0) {\n        continue;\n      }\n\n      flags |= ClientConstants[default_flags[i]] || 0x0;\n    } // add user flags unless already already added\n\n\n    for (i in user_flags) {\n      if (user_flags[i][0] === '-') {\n        continue;\n      }\n\n      if (default_flags.indexOf(user_flags[i]) >= 0) {\n        continue;\n      }\n\n      flags |= ClientConstants[user_flags[i]] || 0x0;\n    }\n\n    return flags;\n  }\n\n  static getDefaultFlags(options) {\n    const defaultFlags = ['LONG_PASSWORD', 'FOUND_ROWS', 'LONG_FLAG', 'CONNECT_WITH_DB', 'ODBC', 'LOCAL_FILES', 'IGNORE_SPACE', 'PROTOCOL_41', 'IGNORE_SIGPIPE', 'TRANSACTIONS', 'RESERVED', 'SECURE_CONNECTION', 'MULTI_RESULTS', 'TRANSACTIONS', 'SESSION_TRACK'];\n\n    if (options && options.multipleStatements) {\n      defaultFlags.push('MULTI_STATEMENTS');\n    }\n\n    defaultFlags.push('PLUGIN_AUTH');\n    defaultFlags.push('PLUGIN_AUTH_LENENC_CLIENT_DATA');\n\n    if (options && options.connectAttributes) {\n      defaultFlags.push('CONNECT_ATTRS');\n    }\n\n    return defaultFlags;\n  }\n\n  static getCharsetNumber(charset) {\n    const num = Charsets[charset.toUpperCase()];\n\n    if (num === undefined) {\n      throw new TypeError(`Unknown charset '${charset}'`);\n    }\n\n    return num;\n  }\n\n  static getSSLProfile(name) {\n    if (!SSLProfiles) {\n      SSLProfiles = require('./constants/ssl_profiles.js');\n    }\n\n    const ssl = SSLProfiles[name];\n\n    if (ssl === undefined) {\n      throw new TypeError(`Unknown SSL profile '${name}'`);\n    }\n\n    return ssl;\n  }\n\n  static parseUrl(url) {\n    url = urlParse(url, true);\n    const options = {\n      host: url.hostname,\n      port: url.port,\n      database: url.pathname.substr(1)\n    };\n\n    if (url.auth) {\n      const auth = url.auth.split(':');\n      options.user = auth[0];\n      options.password = auth[1];\n    }\n\n    if (url.query) {\n      for (const key in url.query) {\n        const value = url.query[key];\n\n        try {\n          // Try to parse this as a JSON expression first\n          options[key] = JSON.parse(value);\n        } catch (err) {\n          // Otherwise assume it is a plain string\n          options[key] = value;\n        }\n      }\n    }\n\n    return options;\n  }\n\n}\n\nmodule.exports = ConnectionConfig;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/mysql2/lib/connection_config.js"],"names":["urlParse","require","parse","ClientConstants","Charsets","SSLProfiles","validOptions","authPlugins","authSwitchHandler","bigNumberStrings","charset","charsetNumber","compress","connectAttributes","connectTimeout","database","dateStrings","debug","decimalNumbers","flags","host","insecureAuth","isServer","localAddress","maxPreparedStatements","multipleStatements","namedPlaceholders","nestTables","password","passwordSha1","pool","port","queryFormat","rowsAsArray","socketPath","ssl","stream","stringifyObjects","supportBigNumbers","timezone","trace","typeCast","uri","user","connectionLimit","Promise","queueLimit","waitForConnections","ConnectionConfig","constructor","options","parseUrl","uriOptions","key","Object","prototype","hasOwnProperty","call","console","error","undefined","isNaN","test","getSSLProfile","substr","TypeError","rejectUnauthorized","maxPacketSize","getCharsetNumber","UTF8MB4_UNICODE_CI","clientFlags","mergeFlags","getDefaultFlags","default_flags","user_flags","i","Array","isArray","String","toUpperCase","split","indexOf","defaultFlags","push","num","name","url","hostname","pathname","auth","query","value","JSON","err","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst urlParse = require('url').parse;\nconst ClientConstants = require('./constants/client');\nconst Charsets = require('./constants/charsets');\nlet SSLProfiles = null;\n\nconst validOptions = {\n  authPlugins: 1,\n  authSwitchHandler: 1,\n  bigNumberStrings: 1,\n  charset: 1,\n  charsetNumber: 1,\n  compress: 1,\n  connectAttributes: 1,\n  connectTimeout: 1,\n  database: 1,\n  dateStrings: 1,\n  debug: 1,\n  decimalNumbers: 1,\n  flags: 1,\n  host: 1,\n  insecureAuth: 1,\n  isServer: 1,\n  localAddress: 1,\n  maxPreparedStatements: 1,\n  multipleStatements: 1,\n  namedPlaceholders: 1,\n  nestTables: 1,\n  password: 1,\n  passwordSha1: 1,\n  pool: 1,\n  port: 1,\n  queryFormat: 1,\n  rowsAsArray: 1,\n  socketPath: 1,\n  ssl: 1,\n  stream: 1,\n  stringifyObjects: 1,\n  supportBigNumbers: 1,\n  timezone: 1,\n  trace: 1,\n  typeCast: 1,\n  uri: 1,\n  user: 1,\n  // These options are used for Pool\n  connectionLimit: 1,\n  Promise: 1,\n  queueLimit: 1,\n  waitForConnections: 1\n};\n\nclass ConnectionConfig {\n  constructor(options) {\n    if (typeof options === 'string') {\n      options = ConnectionConfig.parseUrl(options);\n    } else if (options && options.uri) {\n      const uriOptions = ConnectionConfig.parseUrl(options.uri);\n      for (const key in uriOptions) {\n        if (!Object.prototype.hasOwnProperty.call(uriOptions, key)) continue;\n        if (options[key]) continue;\n        options[key] = uriOptions[key];\n      }\n    }\n    for (const key in options) {\n      if (!Object.prototype.hasOwnProperty.call(options, key)) continue;\n      if (validOptions[key] !== 1) {\n        // REVIEW: Should this be emitted somehow?\n        // eslint-disable-next-line no-console\n        console.error(\n          `Ignoring invalid configuration option passed to Connection: ${key}. This is currently a warning, but in future versions of MySQL2, an error will be thrown if you pass an invalid configuration option to a Connection`\n        );\n      }\n    }\n    this.isServer = options.isServer;\n    this.stream = options.stream;\n    this.host = options.host || 'localhost';\n    this.port = options.port || 3306;\n    this.localAddress = options.localAddress;\n    this.socketPath = options.socketPath;\n    this.user = options.user || undefined;\n    this.password = options.password || undefined;\n    this.passwordSha1 = options.passwordSha1 || undefined;\n    this.database = options.database;\n    this.connectTimeout = isNaN(options.connectTimeout)\n      ? 10 * 1000\n      : options.connectTimeout;\n    this.insecureAuth = options.insecureAuth || false;\n    this.supportBigNumbers = options.supportBigNumbers || false;\n    this.bigNumberStrings = options.bigNumberStrings || false;\n    this.decimalNumbers = options.decimalNumbers || false;\n    this.dateStrings = options.dateStrings || false;\n    this.debug = options.debug;\n    this.trace = options.trace !== false;\n    this.stringifyObjects = options.stringifyObjects || false;\n    if (\n      options.timezone &&\n      !/^(?:local|Z|[ +-]\\d\\d:\\d\\d)$/.test(options.timezone)\n    ) {\n      // strictly supports timezones specified by mysqljs/mysql:\n      // https://github.com/mysqljs/mysql#user-content-connection-options\n      // eslint-disable-next-line no-console\n      console.error(\n        `Ignoring invalid timezone passed to Connection: ${options.timezone}. This is currently a warning, but in future versions of MySQL2, an error will be thrown if you pass an invalid configuration option to a Connection`\n      );\n      // SqlStrings falls back to UTC on invalid timezone\n      this.timezone = 'Z';\n    } else {\n      this.timezone = options.timezone || 'local';\n    }\n    this.queryFormat = options.queryFormat;\n    this.pool = options.pool || undefined;\n    this.ssl =\n      typeof options.ssl === 'string'\n        ? ConnectionConfig.getSSLProfile(options.ssl)\n        : options.ssl || false;\n    this.multipleStatements = options.multipleStatements || false;\n    this.rowsAsArray = options.rowsAsArray || false;\n    this.namedPlaceholders = options.namedPlaceholders || false;\n    this.nestTables =\n      options.nestTables === undefined ? undefined : options.nestTables;\n    this.typeCast = options.typeCast === undefined ? true : options.typeCast;\n    if (this.timezone[0] === ' ') {\n      // \"+\" is a url encoded char for space so it\n      // gets translated to space when giving a\n      // connection string..\n      this.timezone = `+${this.timezone.substr(1)}`;\n    }\n    if (this.ssl) {\n      if (typeof this.ssl !== 'object') {\n        throw new TypeError(\n          `SSL profile must be an object, instead it's a ${typeof this.ssl}`\n        );\n      }\n      // Default rejectUnauthorized to true\n      this.ssl.rejectUnauthorized = this.ssl.rejectUnauthorized !== false;\n    }\n    this.maxPacketSize = 0;\n    this.charsetNumber = options.charset\n      ? ConnectionConfig.getCharsetNumber(options.charset)\n      : options.charsetNumber || Charsets.UTF8MB4_UNICODE_CI;\n    this.compress = options.compress || false;\n    this.authPlugins = options.authPlugins;\n    this.authSwitchHandler = options.authSwitchHandler;\n    this.clientFlags = ConnectionConfig.mergeFlags(\n      ConnectionConfig.getDefaultFlags(options),\n      options.flags || ''\n    );\n    this.connectAttributes = options.connectAttributes;\n    this.maxPreparedStatements = options.maxPreparedStatements || 16000;\n  }\n\n  static mergeFlags(default_flags, user_flags) {\n    let flags = 0x0,\n      i;\n    if (!Array.isArray(user_flags)) {\n      user_flags = String(user_flags || '')\n        .toUpperCase()\n        .split(/\\s*,+\\s*/);\n    }\n    // add default flags unless \"blacklisted\"\n    for (i in default_flags) {\n      if (user_flags.indexOf(`-${default_flags[i]}`) >= 0) {\n        continue;\n      }\n      flags |= ClientConstants[default_flags[i]] || 0x0;\n    }\n    // add user flags unless already already added\n    for (i in user_flags) {\n      if (user_flags[i][0] === '-') {\n        continue;\n      }\n      if (default_flags.indexOf(user_flags[i]) >= 0) {\n        continue;\n      }\n      flags |= ClientConstants[user_flags[i]] || 0x0;\n    }\n    return flags;\n  }\n\n  static getDefaultFlags(options) {\n    const defaultFlags = [\n      'LONG_PASSWORD',\n      'FOUND_ROWS',\n      'LONG_FLAG',\n      'CONNECT_WITH_DB',\n      'ODBC',\n      'LOCAL_FILES',\n      'IGNORE_SPACE',\n      'PROTOCOL_41',\n      'IGNORE_SIGPIPE',\n      'TRANSACTIONS',\n      'RESERVED',\n      'SECURE_CONNECTION',\n      'MULTI_RESULTS',\n      'TRANSACTIONS',\n      'SESSION_TRACK'\n    ];\n    if (options && options.multipleStatements) {\n      defaultFlags.push('MULTI_STATEMENTS');\n    }\n    defaultFlags.push('PLUGIN_AUTH');\n    defaultFlags.push('PLUGIN_AUTH_LENENC_CLIENT_DATA');\n\n    if (options && options.connectAttributes) {\n      defaultFlags.push('CONNECT_ATTRS');\n    }\n    return defaultFlags;\n  }\n\n  static getCharsetNumber(charset) {\n    const num = Charsets[charset.toUpperCase()];\n    if (num === undefined) {\n      throw new TypeError(`Unknown charset '${charset}'`);\n    }\n    return num;\n  }\n\n  static getSSLProfile(name) {\n    if (!SSLProfiles) {\n      SSLProfiles = require('./constants/ssl_profiles.js');\n    }\n    const ssl = SSLProfiles[name];\n    if (ssl === undefined) {\n      throw new TypeError(`Unknown SSL profile '${name}'`);\n    }\n    return ssl;\n  }\n\n  static parseUrl(url) {\n    url = urlParse(url, true);\n    const options = {\n      host: url.hostname,\n      port: url.port,\n      database: url.pathname.substr(1)\n    };\n    if (url.auth) {\n      const auth = url.auth.split(':');\n      options.user = auth[0];\n      options.password = auth[1];\n    }\n    if (url.query) {\n      for (const key in url.query) {\n        const value = url.query[key];\n        try {\n          // Try to parse this as a JSON expression first\n          options[key] = JSON.parse(value);\n        } catch (err) {\n          // Otherwise assume it is a plain string\n          options[key] = value;\n        }\n      }\n    }\n    return options;\n  }\n}\n\nmodule.exports = ConnectionConfig;\n"]},"metadata":{},"sourceType":"script"}
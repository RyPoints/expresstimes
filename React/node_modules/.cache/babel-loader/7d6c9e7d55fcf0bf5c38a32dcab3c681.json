{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _token = require(\"./token\");\n\nfunction parseChallenge(buffer) {\n  const challenge = {};\n  challenge.magic = buffer.slice(0, 8).toString('utf8');\n  challenge.type = buffer.readInt32LE(8);\n  challenge.domainLen = buffer.readInt16LE(12);\n  challenge.domainMax = buffer.readInt16LE(14);\n  challenge.domainOffset = buffer.readInt32LE(16);\n  challenge.flags = buffer.readInt32LE(20);\n  challenge.nonce = buffer.slice(24, 32);\n  challenge.zeroes = buffer.slice(32, 40);\n  challenge.targetLen = buffer.readInt16LE(40);\n  challenge.targetMax = buffer.readInt16LE(42);\n  challenge.targetOffset = buffer.readInt32LE(44);\n  challenge.oddData = buffer.slice(48, 56);\n  challenge.domain = buffer.slice(56, 56 + challenge.domainLen).toString('ucs2');\n  challenge.target = buffer.slice(56 + challenge.domainLen, 56 + challenge.domainLen + challenge.targetLen);\n  return challenge;\n}\n\nfunction sspiParser(parser, _colMetadata, _options, callback) {\n  parser.readUsVarByte(buffer => {\n    callback(new _token.SSPIToken(parseChallenge(buffer), buffer));\n  });\n}\n\nvar _default = sspiParser;\nexports.default = _default;\nmodule.exports = sspiParser;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/tedious/lib/token/sspi-token-parser.js"],"names":["Object","defineProperty","exports","value","default","_token","require","parseChallenge","buffer","challenge","magic","slice","toString","type","readInt32LE","domainLen","readInt16LE","domainMax","domainOffset","flags","nonce","zeroes","targetLen","targetMax","targetOffset","oddData","domain","target","sspiParser","parser","_colMetadata","_options","callback","readUsVarByte","SSPIToken","_default","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,SAAD,CAApB;;AAEA,SAASC,cAAT,CAAwBC,MAAxB,EAAgC;AAC9B,QAAMC,SAAS,GAAG,EAAlB;AACAA,EAAAA,SAAS,CAACC,KAAV,GAAkBF,MAAM,CAACG,KAAP,CAAa,CAAb,EAAgB,CAAhB,EAAmBC,QAAnB,CAA4B,MAA5B,CAAlB;AACAH,EAAAA,SAAS,CAACI,IAAV,GAAiBL,MAAM,CAACM,WAAP,CAAmB,CAAnB,CAAjB;AACAL,EAAAA,SAAS,CAACM,SAAV,GAAsBP,MAAM,CAACQ,WAAP,CAAmB,EAAnB,CAAtB;AACAP,EAAAA,SAAS,CAACQ,SAAV,GAAsBT,MAAM,CAACQ,WAAP,CAAmB,EAAnB,CAAtB;AACAP,EAAAA,SAAS,CAACS,YAAV,GAAyBV,MAAM,CAACM,WAAP,CAAmB,EAAnB,CAAzB;AACAL,EAAAA,SAAS,CAACU,KAAV,GAAkBX,MAAM,CAACM,WAAP,CAAmB,EAAnB,CAAlB;AACAL,EAAAA,SAAS,CAACW,KAAV,GAAkBZ,MAAM,CAACG,KAAP,CAAa,EAAb,EAAiB,EAAjB,CAAlB;AACAF,EAAAA,SAAS,CAACY,MAAV,GAAmBb,MAAM,CAACG,KAAP,CAAa,EAAb,EAAiB,EAAjB,CAAnB;AACAF,EAAAA,SAAS,CAACa,SAAV,GAAsBd,MAAM,CAACQ,WAAP,CAAmB,EAAnB,CAAtB;AACAP,EAAAA,SAAS,CAACc,SAAV,GAAsBf,MAAM,CAACQ,WAAP,CAAmB,EAAnB,CAAtB;AACAP,EAAAA,SAAS,CAACe,YAAV,GAAyBhB,MAAM,CAACM,WAAP,CAAmB,EAAnB,CAAzB;AACAL,EAAAA,SAAS,CAACgB,OAAV,GAAoBjB,MAAM,CAACG,KAAP,CAAa,EAAb,EAAiB,EAAjB,CAApB;AACAF,EAAAA,SAAS,CAACiB,MAAV,GAAmBlB,MAAM,CAACG,KAAP,CAAa,EAAb,EAAiB,KAAKF,SAAS,CAACM,SAAhC,EAA2CH,QAA3C,CAAoD,MAApD,CAAnB;AACAH,EAAAA,SAAS,CAACkB,MAAV,GAAmBnB,MAAM,CAACG,KAAP,CAAa,KAAKF,SAAS,CAACM,SAA5B,EAAuC,KAAKN,SAAS,CAACM,SAAf,GAA2BN,SAAS,CAACa,SAA5E,CAAnB;AACA,SAAOb,SAAP;AACD;;AAED,SAASmB,UAAT,CAAoBC,MAApB,EAA4BC,YAA5B,EAA0CC,QAA1C,EAAoDC,QAApD,EAA8D;AAC5DH,EAAAA,MAAM,CAACI,aAAP,CAAqBzB,MAAM,IAAI;AAC7BwB,IAAAA,QAAQ,CAAC,IAAI3B,MAAM,CAAC6B,SAAX,CAAqB3B,cAAc,CAACC,MAAD,CAAnC,EAA6CA,MAA7C,CAAD,CAAR;AACD,GAFD;AAGD;;AAED,IAAI2B,QAAQ,GAAGP,UAAf;AACA1B,OAAO,CAACE,OAAR,GAAkB+B,QAAlB;AACAC,MAAM,CAAClC,OAAP,GAAiB0B,UAAjB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _token = require(\"./token\");\n\nfunction parseChallenge(buffer) {\n  const challenge = {};\n  challenge.magic = buffer.slice(0, 8).toString('utf8');\n  challenge.type = buffer.readInt32LE(8);\n  challenge.domainLen = buffer.readInt16LE(12);\n  challenge.domainMax = buffer.readInt16LE(14);\n  challenge.domainOffset = buffer.readInt32LE(16);\n  challenge.flags = buffer.readInt32LE(20);\n  challenge.nonce = buffer.slice(24, 32);\n  challenge.zeroes = buffer.slice(32, 40);\n  challenge.targetLen = buffer.readInt16LE(40);\n  challenge.targetMax = buffer.readInt16LE(42);\n  challenge.targetOffset = buffer.readInt32LE(44);\n  challenge.oddData = buffer.slice(48, 56);\n  challenge.domain = buffer.slice(56, 56 + challenge.domainLen).toString('ucs2');\n  challenge.target = buffer.slice(56 + challenge.domainLen, 56 + challenge.domainLen + challenge.targetLen);\n  return challenge;\n}\n\nfunction sspiParser(parser, _colMetadata, _options, callback) {\n  parser.readUsVarByte(buffer => {\n    callback(new _token.SSPIToken(parseChallenge(buffer), buffer));\n  });\n}\n\nvar _default = sspiParser;\nexports.default = _default;\nmodule.exports = sspiParser;"]},"metadata":{},"sourceType":"script"}
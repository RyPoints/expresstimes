{"ast":null,"code":"'use strict';\n\nconst dataTypes = require('./data-types');\n\nconst util = require('util');\n\nconst _ = require('lodash');\n\nfunction arrayToList(array, timeZone, dialect, format) {\n  return array.reduce((sql, val, i) => {\n    if (i !== 0) {\n      sql += ', ';\n    }\n\n    if (Array.isArray(val)) {\n      sql += `(${arrayToList(val, timeZone, dialect, format)})`;\n    } else {\n      sql += escape(val, timeZone, dialect, format);\n    }\n\n    return sql;\n  }, '');\n}\n\nexports.arrayToList = arrayToList;\n\nfunction escape(val, timeZone, dialect, format) {\n  let prependN = false;\n\n  if (val === undefined || val === null) {\n    return 'NULL';\n  }\n\n  switch (typeof val) {\n    case 'boolean':\n      // SQLite doesn't have true/false support. MySQL aliases true/false to 1/0\n      // for us. Postgres actually has a boolean type with true/false literals,\n      // but sequelize doesn't use it yet.\n      if (dialect === 'sqlite' || dialect === 'mssql') {\n        return +!!val;\n      }\n\n      return '' + !!val;\n\n    case 'number':\n      return val + '';\n\n    case 'string':\n      // In mssql, prepend N to all quoted vals which are originally a string (for\n      // unicode compatibility)\n      prependN = dialect === 'mssql';\n      break;\n  }\n\n  if (val instanceof Date) {\n    val = dataTypes[dialect].DATE.prototype.stringify(val, {\n      timezone: timeZone\n    });\n  }\n\n  if (Buffer.isBuffer(val)) {\n    if (dataTypes[dialect].BLOB) {\n      return dataTypes[dialect].BLOB.prototype.stringify(val);\n    }\n\n    return dataTypes.BLOB.prototype.stringify(val);\n  }\n\n  if (Array.isArray(val)) {\n    const partialEscape = _.partial(escape, _, timeZone, dialect, format);\n\n    if (dialect === 'postgres' && !format) {\n      return dataTypes.ARRAY.prototype.stringify(val, {\n        escape: partialEscape\n      });\n    }\n\n    return arrayToList(val, timeZone, dialect, format);\n  }\n\n  if (!val.replace) {\n    throw new Error('Invalid value ' + util.inspect(val));\n  }\n\n  if (dialect === 'postgres' || dialect === 'sqlite' || dialect === 'mssql') {\n    // http://www.postgresql.org/docs/8.2/static/sql-syntax-lexical.html#SQL-SYNTAX-STRINGS\n    // http://stackoverflow.com/q/603572/130598\n    val = val.replace(/'/g, \"''\");\n\n    if (dialect === 'postgres') {\n      // null character is not allowed in Postgres\n      val = val.replace(/\\0/g, '\\\\0');\n    }\n  } else {\n    val = val.replace(/[\\0\\n\\r\\b\\t\\\\\\'\\\"\\x1a]/g, s => {\n      switch (s) {\n        case '\\0':\n          return '\\\\0';\n\n        case '\\n':\n          return '\\\\n';\n\n        case '\\r':\n          return '\\\\r';\n\n        case '\\b':\n          return '\\\\b';\n\n        case '\\t':\n          return '\\\\t';\n\n        case '\\x1a':\n          return '\\\\Z';\n\n        default:\n          return '\\\\' + s;\n      }\n    });\n  }\n\n  return (prependN ? \"N'\" : \"'\") + val + \"'\";\n}\n\nexports.escape = escape;\n\nfunction format(sql, values, timeZone, dialect) {\n  values = [].concat(values);\n\n  if (typeof sql !== 'string') {\n    throw new Error('Invalid SQL string provided: ' + sql);\n  }\n\n  return sql.replace(/\\?/g, match => {\n    if (!values.length) {\n      return match;\n    }\n\n    return escape(values.shift(), timeZone, dialect, true);\n  });\n}\n\nexports.format = format;\n\nfunction formatNamedParameters(sql, values, timeZone, dialect) {\n  return sql.replace(/\\:+(?!\\d)(\\w+)/g, (value, key) => {\n    if ('postgres' === dialect && '::' === value.slice(0, 2)) {\n      return value;\n    }\n\n    if (values[key] !== undefined) {\n      return escape(values[key], timeZone, dialect, true);\n    } else {\n      throw new Error('Named parameter \"' + value + '\" has no value in the given object.');\n    }\n  });\n}\n\nexports.formatNamedParameters = formatNamedParameters;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/sequelize/lib/sql-string.js"],"names":["dataTypes","require","util","_","arrayToList","array","timeZone","dialect","format","reduce","sql","val","i","Array","isArray","escape","exports","prependN","undefined","Date","DATE","prototype","stringify","timezone","Buffer","isBuffer","BLOB","partialEscape","partial","ARRAY","replace","Error","inspect","s","values","concat","match","length","shift","formatNamedParameters","value","key","slice"],"mappings":"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","sourcesContent":["'use strict';\n\nconst dataTypes = require('./data-types');\nconst util = require('util');\nconst _ = require('lodash');\n\nfunction arrayToList(array, timeZone, dialect, format) {\n  return array.reduce((sql, val, i) => {\n    if (i !== 0) {\n      sql += ', ';\n    }\n    if (Array.isArray(val)) {\n      sql += `(${arrayToList(val, timeZone, dialect, format)})`;\n    } else {\n      sql += escape(val, timeZone, dialect, format);\n    }\n    return sql;\n  }, '');\n}\nexports.arrayToList = arrayToList;\n\nfunction escape(val, timeZone, dialect, format) {\n  let prependN = false;\n  if (val === undefined || val === null) {\n    return 'NULL';\n  }\n  switch (typeof val) {\n    case 'boolean':\n    // SQLite doesn't have true/false support. MySQL aliases true/false to 1/0\n    // for us. Postgres actually has a boolean type with true/false literals,\n    // but sequelize doesn't use it yet.\n      if (dialect === 'sqlite' || dialect === 'mssql') {\n        return +!!val;\n      }\n      return '' + !!val;\n    case 'number':\n      return val + '';\n    case 'string':\n    // In mssql, prepend N to all quoted vals which are originally a string (for\n    // unicode compatibility)\n      prependN = dialect === 'mssql';\n      break;\n  }\n\n  if (val instanceof Date) {\n    val = dataTypes[dialect].DATE.prototype.stringify(val, { timezone: timeZone });\n  }\n\n  if (Buffer.isBuffer(val)) {\n    if (dataTypes[dialect].BLOB) {\n      return dataTypes[dialect].BLOB.prototype.stringify(val);\n    }\n\n    return dataTypes.BLOB.prototype.stringify(val);\n  }\n\n  if (Array.isArray(val)) {\n    const partialEscape = _.partial(escape, _, timeZone, dialect, format);\n    if (dialect === 'postgres' && !format) {\n      return dataTypes.ARRAY.prototype.stringify(val, {escape: partialEscape});\n    }\n    return arrayToList(val, timeZone, dialect, format);\n  }\n\n  if (!val.replace) {\n    throw new Error('Invalid value ' + util.inspect(val));\n  }\n\n  if (dialect === 'postgres' || dialect === 'sqlite' || dialect === 'mssql') {\n    // http://www.postgresql.org/docs/8.2/static/sql-syntax-lexical.html#SQL-SYNTAX-STRINGS\n    // http://stackoverflow.com/q/603572/130598\n    val = val.replace(/'/g, \"''\");\n\n    if (dialect === 'postgres') {\n      // null character is not allowed in Postgres\n      val = val.replace(/\\0/g, '\\\\0');\n    }\n  } else {\n    val = val.replace(/[\\0\\n\\r\\b\\t\\\\\\'\\\"\\x1a]/g, s => {\n      switch (s) {\n        case '\\0': return '\\\\0';\n        case '\\n': return '\\\\n';\n        case '\\r': return '\\\\r';\n        case '\\b': return '\\\\b';\n        case '\\t': return '\\\\t';\n        case '\\x1a': return '\\\\Z';\n        default: return '\\\\' + s;\n      }\n    });\n  }\n  return (prependN ? \"N'\" : \"'\") + val + \"'\";\n}\nexports.escape = escape;\n\nfunction format(sql, values, timeZone, dialect) {\n  values = [].concat(values);\n\n  if (typeof sql !== 'string') {\n    throw new Error('Invalid SQL string provided: ' + sql);\n  }\n  return sql.replace(/\\?/g, match => {\n    if (!values.length) {\n      return match;\n    }\n\n    return escape(values.shift(), timeZone, dialect, true);\n  });\n}\nexports.format = format;\n\nfunction formatNamedParameters(sql, values, timeZone, dialect) {\n  return sql.replace(/\\:+(?!\\d)(\\w+)/g, (value, key) => {\n    if ('postgres' === dialect && '::' === value.slice(0, 2)) {\n      return value;\n    }\n\n    if (values[key] !== undefined) {\n      return escape(values[key], timeZone, dialect, true);\n    } else {\n      throw new Error('Named parameter \"' + value + '\" has no value in the given object.');\n    }\n  });\n}\nexports.formatNamedParameters = formatNamedParameters;\n"]},"metadata":{},"sourceType":"script"}
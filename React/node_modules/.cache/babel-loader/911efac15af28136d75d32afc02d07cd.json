{"ast":null,"code":"(function () {\n  var _ = require('underscore');\n\n  function sanitize_input(input) {\n    // http://www.postgresql.org/docs/9.0/static/sql-syntax-lexical.html [4.1.2.1-4.1.2.2]\n    // single quotes (') must be replaced with double single quotes ('')\n    input = input.replace(/'/g, '\\'\\''); // backslashes (\\) must be replaced with double backslashes (\\\\)\n\n    input = input.replace(/\\\\/g, '\\\\\\\\'); // double quotes (\") must be replaced with escaped quotes (\\\\\")\n\n    input = input.replace(/\"/g, '\\\\\"');\n    return input;\n  }\n\n  function to_string(input, sanitize) {\n    switch (typeof input) {\n      case 'boolean':\n      case 'number':\n      case 'object':\n        return String(input);\n\n      case 'string':\n        return sanitize ? sanitize_input(input) : input;\n\n      default:\n        return '';\n    }\n  }\n\n  module.exports = function (options) {\n    options = _.defaults({}, options, {\n      sanitize: false\n    });\n    return {\n      stringify: function (data, callback) {\n        var hstore = Object.keys(data).map(function (key) {\n          if (data[key] === null) {\n            return '\"' + to_string(key, options.sanitize) + '\"=>NULL';\n          } else {\n            return '\"' + to_string(key, options.sanitize) + '\"=>\"' + to_string(data[key], options.sanitize) + '\"';\n          }\n        });\n        var joined = hstore.join();\n        if (!callback || callback === null) return joined;\n        callback(joined);\n      },\n      parse: function (string, callback) {\n        var result = {},\n            //using [\\s\\S] to match any character, including line feed and carriage return,\n        r = /([\"])(?:\\\\\\1|\\\\\\\\|[\\s\\S])*?\\1|NULL/g,\n            matches = string.match(r),\n            i,\n            l,\n            clean = function (value) {\n          // Remove leading double quotes\n          value = value.replace(/^\\\"|\\\"$/g, \"\"); // Unescape quotes\n\n          value = value.replace(/\\\\\"/g, \"\\\"\"); //Unescape backslashes\n\n          value = value.replace(/\\\\\\\\/g, \"\\\\\"); //Unescape single quotes\n\n          value = value.replace(/''/g, \"'\");\n          return value;\n        };\n\n        if (matches) {\n          for (i = 0, l = matches.length; i < l; i += 2) {\n            if (matches[i] && matches[i + 1]) {\n              var key = clean(matches[i]);\n              var value = matches[i + 1];\n              result[key] = value == \"NULL\" ? null : clean(value);\n            }\n          }\n        }\n\n        if (!callback || callback === null) return result;\n        callback(result);\n      }\n    };\n  };\n})();","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/pg-hstore/lib/index.js"],"names":["_","require","sanitize_input","input","replace","to_string","sanitize","String","module","exports","options","defaults","stringify","data","callback","hstore","Object","keys","map","key","joined","join","parse","string","result","r","matches","match","i","l","clean","value","length"],"mappings":"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","sourcesContent":["(function () {\r\n  var _ = require('underscore');\r\n\r\n  function sanitize_input(input) {\r\n    // http://www.postgresql.org/docs/9.0/static/sql-syntax-lexical.html [4.1.2.1-4.1.2.2]\r\n    // single quotes (') must be replaced with double single quotes ('')\r\n    input = input.replace(/'/g, '\\'\\'');\r\n    // backslashes (\\) must be replaced with double backslashes (\\\\)\r\n    input = input.replace(/\\\\/g, '\\\\\\\\');\r\n    // double quotes (\") must be replaced with escaped quotes (\\\\\")\r\n    input = input.replace(/\"/g, '\\\\\"');\r\n    return input;\r\n  }\r\n\r\n  function to_string(input, sanitize) {\r\n    switch(typeof input) {\r\n      case 'boolean':\r\n      case 'number':\r\n      case 'object':\r\n        return String(input);\r\n      case 'string':\r\n        return sanitize ? sanitize_input(input) : input;\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n\r\n  module.exports = function (options) {\r\n    options = _.defaults({}, options, { sanitize: false });\r\n\r\n    return {\r\n      stringify: function (data, callback) {\r\n        var hstore = Object.keys(data).map(function (key) {\r\n          if (data[key] === null) {\r\n            return '\"'+to_string(key, options.sanitize)+'\"=>NULL';\r\n          } else {\r\n            return '\"'+to_string(key, options.sanitize)+'\"=>\"'+to_string(data[key], options.sanitize)+'\"';\r\n          }\r\n        });\r\n        var joined = hstore.join();\r\n        if (!callback || callback === null) return joined;\r\n        callback(joined);\r\n      },\r\n\r\n      parse: function(string, callback) {\r\n        var result = {},\r\n        //using [\\s\\S] to match any character, including line feed and carriage return,\r\n            r = /([\"])(?:\\\\\\1|\\\\\\\\|[\\s\\S])*?\\1|NULL/g,\r\n            matches = string.match(r),\r\n            i,\r\n            l,\r\n            clean = function (value) {\r\n                // Remove leading double quotes\r\n                value = value.replace(/^\\\"|\\\"$/g, \"\");\r\n                // Unescape quotes\r\n                value = value.replace(/\\\\\"/g, \"\\\"\");\r\n                //Unescape backslashes\r\n                value = value.replace(/\\\\\\\\/g,\"\\\\\");\r\n                //Unescape single quotes\r\n                value = value.replace(/''/g,\"'\");\r\n\r\n                return value;\r\n            };\r\n\r\n        if(matches) {\r\n          for (i = 0, l = matches.length; i < l; i+= 2) {\r\n            if (matches[i] && matches[i + 1]) {\r\n              var key = clean(matches[i]);\r\n              var value = matches[i + 1];\r\n              result[key] = value==\"NULL\"?null:clean(value);\r\n            }\r\n          }\r\n        }\r\n        if (!callback || callback === null) return result;\r\n        callback(result);\r\n      }\r\n    };\r\n  };\r\n})();\r\n"]},"metadata":{},"sourceType":"script"}
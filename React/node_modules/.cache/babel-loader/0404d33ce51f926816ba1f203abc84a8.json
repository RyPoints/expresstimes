{"ast":null,"code":"'use strict';\n\nconst Command = require('./command');\n\nconst Packets = require('../packets');\n\nconst eventParsers = [];\n\nclass BinlogEventHeader {\n  constructor(packet) {\n    this.timestamp = packet.readInt32();\n    this.eventType = packet.readInt8();\n    this.serverId = packet.readInt32();\n    this.eventSize = packet.readInt32();\n    this.logPos = packet.readInt32();\n    this.flags = packet.readInt16();\n  }\n\n}\n\nclass BinlogDump extends Command {\n  constructor(opts) {\n    super(); // this.onResult = callback;\n\n    this.opts = opts;\n  }\n\n  start(packet, connection) {\n    const newPacket = new Packets.BinlogDump(this.opts);\n    connection.writePacket(newPacket.toPacket(1));\n    return BinlogDump.prototype.binlogData;\n  }\n\n  binlogData(packet) {\n    // ok - continue consuming events\n    // error - error\n    // eof - end of binlog\n    if (packet.isEOF()) {\n      this.emit('eof');\n      return null;\n    } // binlog event header\n\n\n    packet.readInt8();\n    const header = new BinlogEventHeader(packet);\n    const EventParser = eventParsers[header.eventType];\n    let event;\n\n    if (EventParser) {\n      event = new EventParser(packet);\n    } else {\n      event = {\n        name: 'UNKNOWN'\n      };\n    }\n\n    event.header = header;\n    this.emit('event', event);\n    return BinlogDump.prototype.binlogData;\n  }\n\n}\n\nclass RotateEvent {\n  constructor(packet) {\n    this.pposition = packet.readInt32(); // TODO: read uint64 here\n\n    packet.readInt32(); // positionDword2\n\n    this.nextBinlog = packet.readString();\n    this.name = 'RotateEvent';\n  }\n\n}\n\nclass FormatDescriptionEvent {\n  constructor(packet) {\n    this.binlogVersion = packet.readInt16();\n    this.serverVersion = packet.readString(50).replace(/\\u0000.*/, ''); // eslint-disable-line no-control-regex\n\n    this.createTimestamp = packet.readInt32();\n    this.eventHeaderLength = packet.readInt8(); // should be 19\n\n    this.eventsLength = packet.readBuffer();\n    this.name = 'FormatDescriptionEvent';\n  }\n\n}\n\nclass QueryEvent {\n  constructor(packet) {\n    const parseStatusVars = require('../packets/binlog_query_statusvars.js');\n\n    this.slaveProxyId = packet.readInt32();\n    this.executionTime = packet.readInt32();\n    const schemaLength = packet.readInt8();\n    this.errorCode = packet.readInt16();\n    const statusVarsLength = packet.readInt16();\n    const statusVars = packet.readBuffer(statusVarsLength);\n    this.schema = packet.readString(schemaLength);\n    packet.readInt8(); // should be zero\n\n    this.statusVars = parseStatusVars(statusVars);\n    this.query = packet.readString();\n    this.name = 'QueryEvent';\n  }\n\n}\n\nclass XidEvent {\n  constructor(packet) {\n    this.binlogVersion = packet.readInt16();\n    this.xid = packet.readInt64();\n    this.name = 'XidEvent';\n  }\n\n}\n\neventParsers[2] = QueryEvent;\neventParsers[4] = RotateEvent;\neventParsers[15] = FormatDescriptionEvent;\neventParsers[16] = XidEvent;\nmodule.exports = BinlogDump;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/mysql2/lib/commands/binlog_dump.js"],"names":["Command","require","Packets","eventParsers","BinlogEventHeader","constructor","packet","timestamp","readInt32","eventType","readInt8","serverId","eventSize","logPos","flags","readInt16","BinlogDump","opts","start","connection","newPacket","writePacket","toPacket","prototype","binlogData","isEOF","emit","header","EventParser","event","name","RotateEvent","pposition","nextBinlog","readString","FormatDescriptionEvent","binlogVersion","serverVersion","replace","createTimestamp","eventHeaderLength","eventsLength","readBuffer","QueryEvent","parseStatusVars","slaveProxyId","executionTime","schemaLength","errorCode","statusVarsLength","statusVars","schema","query","XidEvent","xid","readInt64","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Command = require('./command');\nconst Packets = require('../packets');\n\nconst eventParsers = [];\n\nclass BinlogEventHeader {\n  constructor(packet) {\n    this.timestamp = packet.readInt32();\n    this.eventType = packet.readInt8();\n    this.serverId = packet.readInt32();\n    this.eventSize = packet.readInt32();\n    this.logPos = packet.readInt32();\n    this.flags = packet.readInt16();\n  }\n}\n\nclass BinlogDump extends Command {\n  constructor(opts) {\n    super();\n    // this.onResult = callback;\n    this.opts = opts;\n  }\n\n  start(packet, connection) {\n    const newPacket = new Packets.BinlogDump(this.opts);\n    connection.writePacket(newPacket.toPacket(1));\n    return BinlogDump.prototype.binlogData;\n  }\n\n  binlogData(packet) {\n    // ok - continue consuming events\n    // error - error\n    // eof - end of binlog\n    if (packet.isEOF()) {\n      this.emit('eof');\n      return null;\n    }\n    // binlog event header\n    packet.readInt8();\n    const header = new BinlogEventHeader(packet);\n    const EventParser = eventParsers[header.eventType];\n    let event;\n    if (EventParser) {\n      event = new EventParser(packet);\n    } else {\n      event = {\n        name: 'UNKNOWN'\n      };\n    }\n    event.header = header;\n    this.emit('event', event);\n    return BinlogDump.prototype.binlogData;\n  }\n}\n\nclass RotateEvent {\n  constructor(packet) {\n    this.pposition = packet.readInt32();\n    // TODO: read uint64 here\n    packet.readInt32(); // positionDword2\n    this.nextBinlog = packet.readString();\n    this.name = 'RotateEvent';\n  }\n}\n\nclass FormatDescriptionEvent {\n  constructor(packet) {\n    this.binlogVersion = packet.readInt16();\n    this.serverVersion = packet.readString(50).replace(/\\u0000.*/, ''); // eslint-disable-line no-control-regex\n    this.createTimestamp = packet.readInt32();\n    this.eventHeaderLength = packet.readInt8(); // should be 19\n    this.eventsLength = packet.readBuffer();\n    this.name = 'FormatDescriptionEvent';\n  }\n}\n\nclass QueryEvent {\n  constructor(packet) {\n    const parseStatusVars = require('../packets/binlog_query_statusvars.js');\n    this.slaveProxyId = packet.readInt32();\n    this.executionTime = packet.readInt32();\n    const schemaLength = packet.readInt8();\n    this.errorCode = packet.readInt16();\n    const statusVarsLength = packet.readInt16();\n    const statusVars = packet.readBuffer(statusVarsLength);\n    this.schema = packet.readString(schemaLength);\n    packet.readInt8(); // should be zero\n    this.statusVars = parseStatusVars(statusVars);\n    this.query = packet.readString();\n    this.name = 'QueryEvent';\n  }\n}\n\nclass XidEvent {\n  constructor(packet) {\n    this.binlogVersion = packet.readInt16();\n    this.xid = packet.readInt64();\n    this.name = 'XidEvent';\n  }\n}\n\neventParsers[2] = QueryEvent;\neventParsers[4] = RotateEvent;\neventParsers[15] = FormatDescriptionEvent;\neventParsers[16] = XidEvent;\n\nmodule.exports = BinlogDump;\n"]},"metadata":{},"sourceType":"script"}
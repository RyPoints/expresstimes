{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { HttpPipelineLogLevel } from \"../httpPipelineLogLevel\";\n\nvar BaseRequestPolicy =\n/** @class */\nfunction () {\n  function BaseRequestPolicy(_nextPolicy, _options) {\n    this._nextPolicy = _nextPolicy;\n    this._options = _options;\n  }\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n\n\n  BaseRequestPolicy.prototype.shouldLog = function (logLevel) {\n    return this._options.shouldLog(logLevel);\n  };\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meat the logger's threshold, then nothing will be logged.\n   * @param logLevel The log level of this log.\n   * @param message The message of this log.\n   */\n\n\n  BaseRequestPolicy.prototype.log = function (logLevel, message) {\n    this._options.log(logLevel, message);\n  };\n\n  return BaseRequestPolicy;\n}();\n\nexport { BaseRequestPolicy };\n/**\n * Optional properties that can be used when creating a RequestPolicy.\n */\n\nvar RequestPolicyOptions =\n/** @class */\nfunction () {\n  function RequestPolicyOptions(_logger) {\n    this._logger = _logger;\n  }\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n\n\n  RequestPolicyOptions.prototype.shouldLog = function (logLevel) {\n    return !!this._logger && logLevel !== HttpPipelineLogLevel.OFF && logLevel <= this._logger.minimumLogLevel;\n  };\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meat the logger's threshold, then nothing will be logged.\n   * @param logLevel The log level of this log.\n   * @param message The message of this log.\n   */\n\n\n  RequestPolicyOptions.prototype.log = function (logLevel, message) {\n    if (this._logger && this.shouldLog(logLevel)) {\n      this._logger.log(logLevel, message);\n    }\n  };\n\n  return RequestPolicyOptions;\n}();\n\nexport { RequestPolicyOptions };","map":{"version":3,"sources":["../../../lib/policies/requestPolicy.ts"],"names":[],"mappings":"AAAA;AACA;AAIA,SAAS,oBAAT,QAAqC,yBAArC;;AAcA,IAAA,iBAAA;AAAA;AAAA,YAAA;AACE,WAAA,iBAAA,CAA+B,WAA/B,EAAoE,QAApE,EAAkG;AAAnE,SAAA,WAAA,GAAA,WAAA;AAAqC,SAAA,QAAA,GAAA,QAAA;AACnE;AAID;;;;;;;AAKO,EAAA,iBAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,QAAjB,EAA+C;AAC7C,WAAO,KAAK,QAAL,CAAc,SAAd,CAAwB,QAAxB,CAAP;AACD,GAFM;AAIP;;;;;;;;AAMO,EAAA,iBAAA,CAAA,SAAA,CAAA,GAAA,GAAP,UAAW,QAAX,EAA2C,OAA3C,EAA0D;AACxD,SAAK,QAAL,CAAc,GAAd,CAAkB,QAAlB,EAA4B,OAA5B;AACD,GAFM;;AAGT,SAAA,iBAAA;AAAC,CAxBD,EAAA;;;AA0BA;;;;AAGA,IAAA,oBAAA;AAAA;AAAA,YAAA;AACE,WAAA,oBAAA,CAAoB,OAApB,EAAgD;AAA5B,SAAA,OAAA,GAAA,OAAA;AACnB;AAED;;;;;;;AAKO,EAAA,oBAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,QAAjB,EAA+C;AAC7C,WAAO,CAAC,CAAC,KAAK,OAAP,IACL,QAAQ,KAAK,oBAAoB,CAAC,GAD7B,IAEL,QAAQ,IAAI,KAAK,OAAL,CAAa,eAF3B;AAGD,GAJM;AAMP;;;;;;;;AAMO,EAAA,oBAAA,CAAA,SAAA,CAAA,GAAA,GAAP,UAAW,QAAX,EAA2C,OAA3C,EAA0D;AACxD,QAAI,KAAK,OAAL,IAAgB,KAAK,SAAL,CAAe,QAAf,CAApB,EAA8C;AAC5C,WAAK,OAAL,CAAa,GAAb,CAAiB,QAAjB,EAA2B,OAA3B;AACD;AACF,GAJM;;AAKT,SAAA,oBAAA;AAAC,CA1BD,EAAA","sourceRoot":"","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { HttpPipelineLogLevel } from \"../httpPipelineLogLevel\";\nvar BaseRequestPolicy = /** @class */ (function () {\n    function BaseRequestPolicy(_nextPolicy, _options) {\n        this._nextPolicy = _nextPolicy;\n        this._options = _options;\n    }\n    /**\n     * Get whether or not a log with the provided log level should be logged.\n     * @param logLevel The log level of the log that will be logged.\n     * @returns Whether or not a log with the provided log level should be logged.\n     */\n    BaseRequestPolicy.prototype.shouldLog = function (logLevel) {\n        return this._options.shouldLog(logLevel);\n    };\n    /**\n     * Attempt to log the provided message to the provided logger. If no logger was provided or if\n     * the log level does not meat the logger's threshold, then nothing will be logged.\n     * @param logLevel The log level of this log.\n     * @param message The message of this log.\n     */\n    BaseRequestPolicy.prototype.log = function (logLevel, message) {\n        this._options.log(logLevel, message);\n    };\n    return BaseRequestPolicy;\n}());\nexport { BaseRequestPolicy };\n/**\n * Optional properties that can be used when creating a RequestPolicy.\n */\nvar RequestPolicyOptions = /** @class */ (function () {\n    function RequestPolicyOptions(_logger) {\n        this._logger = _logger;\n    }\n    /**\n     * Get whether or not a log with the provided log level should be logged.\n     * @param logLevel The log level of the log that will be logged.\n     * @returns Whether or not a log with the provided log level should be logged.\n     */\n    RequestPolicyOptions.prototype.shouldLog = function (logLevel) {\n        return !!this._logger &&\n            logLevel !== HttpPipelineLogLevel.OFF &&\n            logLevel <= this._logger.minimumLogLevel;\n    };\n    /**\n     * Attempt to log the provided message to the provided logger. If no logger was provided or if\n     * the log level does not meat the logger's threshold, then nothing will be logged.\n     * @param logLevel The log level of this log.\n     * @param message The message of this log.\n     */\n    RequestPolicyOptions.prototype.log = function (logLevel, message) {\n        if (this._logger && this.shouldLog(logLevel)) {\n            this._logger.log(logLevel, message);\n        }\n    };\n    return RequestPolicyOptions;\n}());\nexport { RequestPolicyOptions };\n//# sourceMappingURL=requestPolicy.js.map"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict';\n\nconst AbstractConnectionManager = require('../abstract/connection-manager');\n\nconst Promise = require('../../promise');\n\nconst _require = require('../../utils/logger'),\n      logger = _require.logger;\n\nconst debug = logger.debugContext('connection:sqlite');\n\nconst dataTypes = require('../../data-types').sqlite;\n\nconst sequelizeErrors = require('../../errors');\n\nconst parserStore = require('../parserStore')('sqlite');\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    super(dialect, sequelize); // We attempt to parse file location from a connection uri\n    // but we shouldn't match sequelize default host.\n\n    if (this.sequelize.options.host === 'localhost') {\n      delete this.sequelize.options.host;\n    }\n\n    this.connections = {};\n    this.lib = this._loadDialectModule('sqlite3').verbose();\n    this.refreshTypeParser(dataTypes);\n  }\n\n  _onProcessExit() {\n    const promises = Object.getOwnPropertyNames(this.connections).map(connection => Promise.fromCallback(callback => this.connections[connection].close(callback)));\n    return Promise.all(promises).then(() => super._onProcessExit.call(this));\n  } // Expose this as a method so that the parsing may be updated when the user has added additional, custom types\n\n\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  getConnection(options) {\n    options = options || {};\n    options.uuid = options.uuid || 'default';\n    options.inMemory = (this.sequelize.options.storage || this.sequelize.options.host || ':memory:') === ':memory:' ? 1 : 0;\n    const dialectOptions = this.sequelize.options.dialectOptions;\n    options.readWriteMode = dialectOptions && dialectOptions.mode;\n\n    if (this.connections[options.inMemory || options.uuid]) {\n      return Promise.resolve(this.connections[options.inMemory || options.uuid]);\n    }\n\n    return new Promise((resolve, reject) => {\n      this.connections[options.inMemory || options.uuid] = new this.lib.Database(this.sequelize.options.storage || this.sequelize.options.host || ':memory:', options.readWriteMode || this.lib.OPEN_READWRITE | this.lib.OPEN_CREATE, // default mode\n      err => {\n        if (err) return reject(new sequelizeErrors.ConnectionError(err));\n        debug(`connection acquired ${options.uuid}`);\n        resolve(this.connections[options.inMemory || options.uuid]);\n      });\n    }).tap(connection => {\n      if (this.sequelize.config.password) {\n        // Make it possible to define and use password for sqlite encryption plugin like sqlcipher\n        connection.run(`PRAGMA KEY=${this.sequelize.escape(this.sequelize.config.password)}`);\n      }\n\n      if (this.sequelize.options.foreignKeys !== false) {\n        // Make it possible to define and use foreign key constraints unless\n        // explicitly disallowed. It's still opt-in per relation\n        connection.run('PRAGMA FOREIGN_KEYS=ON');\n      }\n    });\n  }\n\n  releaseConnection(connection, force) {\n    if (connection.filename === ':memory:' && force !== true) return;\n\n    if (connection.uuid) {\n      connection.close();\n      debug(`connection released ${connection.uuid}`);\n      delete this.connections[connection.uuid];\n    }\n  }\n\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/sequelize/lib/dialects/sqlite/connection-manager.js"],"names":["AbstractConnectionManager","require","Promise","logger","debug","debugContext","dataTypes","sqlite","sequelizeErrors","parserStore","ConnectionManager","constructor","dialect","sequelize","options","host","connections","lib","_loadDialectModule","verbose","refreshTypeParser","_onProcessExit","promises","Object","getOwnPropertyNames","map","connection","fromCallback","callback","close","all","then","call","_refreshTypeParser","dataType","refresh","_clearTypeParser","clear","getConnection","uuid","inMemory","storage","dialectOptions","readWriteMode","mode","resolve","reject","Database","OPEN_READWRITE","OPEN_CREATE","err","ConnectionError","tap","config","password","run","escape","foreignKeys","releaseConnection","force","filename","module","exports","default"],"mappings":"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","sourcesContent":["'use strict';\n\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst Promise = require('../../promise');\nconst { logger } = require('../../utils/logger');\nconst debug = logger.debugContext('connection:sqlite');\nconst dataTypes = require('../../data-types').sqlite;\nconst sequelizeErrors = require('../../errors');\nconst parserStore = require('../parserStore')('sqlite');\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    super(dialect, sequelize);\n\n    // We attempt to parse file location from a connection uri\n    // but we shouldn't match sequelize default host.\n    if (this.sequelize.options.host === 'localhost') {\n      delete this.sequelize.options.host;\n    }\n\n    this.connections = {};\n    this.lib = this._loadDialectModule('sqlite3').verbose();\n    this.refreshTypeParser(dataTypes);\n  }\n\n  _onProcessExit() {\n    const promises = Object.getOwnPropertyNames(this.connections)\n      .map(connection => Promise.fromCallback(callback => this.connections[connection].close(callback)));\n\n    return Promise\n      .all(promises)\n      .then(() => super._onProcessExit.call(this));\n  }\n\n  // Expose this as a method so that the parsing may be updated when the user has added additional, custom types\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  getConnection(options) {\n    options = options || {};\n    options.uuid = options.uuid || 'default';\n    options.inMemory = (this.sequelize.options.storage || this.sequelize.options.host || ':memory:') === ':memory:' ? 1 : 0;\n\n    const dialectOptions = this.sequelize.options.dialectOptions;\n    options.readWriteMode = dialectOptions && dialectOptions.mode;\n\n    if (this.connections[options.inMemory || options.uuid]) {\n      return Promise.resolve(this.connections[options.inMemory || options.uuid]);\n    }\n\n    return new Promise((resolve, reject) => {\n      this.connections[options.inMemory || options.uuid] = new this.lib.Database(\n        this.sequelize.options.storage || this.sequelize.options.host || ':memory:',\n        options.readWriteMode || this.lib.OPEN_READWRITE | this.lib.OPEN_CREATE, // default mode\n        err => {\n          if (err) return reject(new sequelizeErrors.ConnectionError(err));\n          debug(`connection acquired ${options.uuid}`);\n          resolve(this.connections[options.inMemory || options.uuid]);\n        }\n      );\n    }).tap(connection => {\n      if (this.sequelize.config.password) {\n        // Make it possible to define and use password for sqlite encryption plugin like sqlcipher\n        connection.run(`PRAGMA KEY=${this.sequelize.escape(this.sequelize.config.password)}`);\n      }\n      if (this.sequelize.options.foreignKeys !== false) {\n        // Make it possible to define and use foreign key constraints unless\n        // explicitly disallowed. It's still opt-in per relation\n        connection.run('PRAGMA FOREIGN_KEYS=ON');\n      }\n    });\n  }\n\n  releaseConnection(connection, force) {\n    if (connection.filename === ':memory:' && force !== true) return;\n\n    if (connection.uuid) {\n      connection.close();\n      debug(`connection released ${connection.uuid}`);\n      delete this.connections[connection.uuid];\n    }\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst AbstractDialect = require('../abstract');\n\nconst ConnectionManager = require('./connection-manager');\n\nconst Query = require('./query');\n\nconst QueryGenerator = require('./query-generator');\n\nconst DataTypes = require('../../data-types').sqlite;\n\nclass SqliteDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.QueryGenerator = _.extend({}, QueryGenerator, {\n      options: sequelize.options,\n      _dialect: this,\n      sequelize\n    });\n  }\n\n}\n\nSqliteDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  'DEFAULT': false,\n  'DEFAULT VALUES': true,\n  'UNION ALL': false,\n  'IGNORE': ' OR IGNORE',\n  index: {\n    using: false,\n    where: true\n  },\n  transactionOptions: {\n    type: true,\n    autocommit: false\n  },\n  constraints: {\n    addConstraint: false,\n    dropConstraint: false\n  },\n  joinTableDependent: false,\n  groupedLimit: false,\n  ignoreDuplicates: ' OR IGNORE',\n  JSON: true\n});\nConnectionManager.prototype.defaultVersion = '3.8.0';\nSqliteDialect.prototype.Query = Query;\nSqliteDialect.prototype.DataTypes = DataTypes;\nSqliteDialect.prototype.name = 'sqlite';\nSqliteDialect.prototype.TICK_CHAR = '`';\nSqliteDialect.prototype.TICK_CHAR_LEFT = SqliteDialect.prototype.TICK_CHAR;\nSqliteDialect.prototype.TICK_CHAR_RIGHT = SqliteDialect.prototype.TICK_CHAR;\nmodule.exports = SqliteDialect;\nmodule.exports.SqliteDialect = SqliteDialect;\nmodule.exports.default = SqliteDialect;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/sequelize/lib/dialects/sqlite/index.js"],"names":["_","require","AbstractDialect","ConnectionManager","Query","QueryGenerator","DataTypes","sqlite","SqliteDialect","constructor","sequelize","connectionManager","extend","options","_dialect","prototype","supports","merge","cloneDeep","index","using","where","transactionOptions","type","autocommit","constraints","addConstraint","dropConstraint","joinTableDependent","groupedLimit","ignoreDuplicates","JSON","defaultVersion","name","TICK_CHAR","TICK_CHAR_LEFT","TICK_CHAR_RIGHT","module","exports","default"],"mappings":"AAAA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,aAAD,CAA/B;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,sBAAD,CAAjC;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,SAAD,CAArB;;AACA,MAAMI,cAAc,GAAGJ,OAAO,CAAC,mBAAD,CAA9B;;AACA,MAAMK,SAAS,GAAGL,OAAO,CAAC,kBAAD,CAAP,CAA4BM,MAA9C;;AAEA,MAAMC,aAAN,SAA4BN,eAA5B,CAA4C;AAC1CO,EAAAA,WAAW,CAACC,SAAD,EAAY;AACrB;AACA,SAAKA,SAAL,GAAiBA,SAAjB;AACA,SAAKC,iBAAL,GAAyB,IAAIR,iBAAJ,CAAsB,IAAtB,EAA4BO,SAA5B,CAAzB;AACA,SAAKL,cAAL,GAAsBL,CAAC,CAACY,MAAF,CAAS,EAAT,EAAaP,cAAb,EAA6B;AACjDQ,MAAAA,OAAO,EAAEH,SAAS,CAACG,OAD8B;AAEjDC,MAAAA,QAAQ,EAAE,IAFuC;AAGjDJ,MAAAA;AAHiD,KAA7B,CAAtB;AAKD;;AAVyC;;AAa5CF,aAAa,CAACO,SAAd,CAAwBC,QAAxB,GAAmChB,CAAC,CAACiB,KAAF,CAAQjB,CAAC,CAACkB,SAAF,CAAYhB,eAAe,CAACa,SAAhB,CAA0BC,QAAtC,CAAR,EAAyD;AAC1F,aAAW,KAD+E;AAE1F,oBAAkB,IAFwE;AAG1F,eAAa,KAH6E;AAI1F,YAAU,YAJgF;AAK1FG,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE,KADF;AAELC,IAAAA,KAAK,EAAE;AAFF,GALmF;AAS1FC,EAAAA,kBAAkB,EAAE;AAClBC,IAAAA,IAAI,EAAE,IADY;AAElBC,IAAAA,UAAU,EAAE;AAFM,GATsE;AAa1FC,EAAAA,WAAW,EAAE;AACXC,IAAAA,aAAa,EAAE,KADJ;AAEXC,IAAAA,cAAc,EAAE;AAFL,GAb6E;AAiB1FC,EAAAA,kBAAkB,EAAE,KAjBsE;AAkB1FC,EAAAA,YAAY,EAAE,KAlB4E;AAmB1FC,EAAAA,gBAAgB,EAAE,YAnBwE;AAoB1FC,EAAAA,IAAI,EAAE;AApBoF,CAAzD,CAAnC;AAuBA5B,iBAAiB,CAACY,SAAlB,CAA4BiB,cAA5B,GAA6C,OAA7C;AACAxB,aAAa,CAACO,SAAd,CAAwBX,KAAxB,GAAgCA,KAAhC;AACAI,aAAa,CAACO,SAAd,CAAwBT,SAAxB,GAAoCA,SAApC;AACAE,aAAa,CAACO,SAAd,CAAwBkB,IAAxB,GAA+B,QAA/B;AACAzB,aAAa,CAACO,SAAd,CAAwBmB,SAAxB,GAAoC,GAApC;AACA1B,aAAa,CAACO,SAAd,CAAwBoB,cAAxB,GAAyC3B,aAAa,CAACO,SAAd,CAAwBmB,SAAjE;AACA1B,aAAa,CAACO,SAAd,CAAwBqB,eAAxB,GAA0C5B,aAAa,CAACO,SAAd,CAAwBmB,SAAlE;AAEAG,MAAM,CAACC,OAAP,GAAiB9B,aAAjB;AACA6B,MAAM,CAACC,OAAP,CAAe9B,aAAf,GAA+BA,aAA/B;AACA6B,MAAM,CAACC,OAAP,CAAeC,OAAf,GAAyB/B,aAAzB","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').sqlite;\n\nclass SqliteDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.QueryGenerator = _.extend({}, QueryGenerator, {\n      options: sequelize.options,\n      _dialect: this,\n      sequelize\n    });\n  }\n}\n\nSqliteDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  'DEFAULT': false,\n  'DEFAULT VALUES': true,\n  'UNION ALL': false,\n  'IGNORE': ' OR IGNORE',\n  index: {\n    using: false,\n    where: true\n  },\n  transactionOptions: {\n    type: true,\n    autocommit: false\n  },\n  constraints: {\n    addConstraint: false,\n    dropConstraint: false\n  },\n  joinTableDependent: false,\n  groupedLimit: false,\n  ignoreDuplicates: ' OR IGNORE',\n  JSON: true\n});\n\nConnectionManager.prototype.defaultVersion = '3.8.0';\nSqliteDialect.prototype.Query = Query;\nSqliteDialect.prototype.DataTypes = DataTypes;\nSqliteDialect.prototype.name = 'sqlite';\nSqliteDialect.prototype.TICK_CHAR = '`';\nSqliteDialect.prototype.TICK_CHAR_LEFT = SqliteDialect.prototype.TICK_CHAR;\nSqliteDialect.prototype.TICK_CHAR_RIGHT = SqliteDialect.prototype.TICK_CHAR;\n\nmodule.exports = SqliteDialect;\nmodule.exports.SqliteDialect = SqliteDialect;\nmodule.exports.default = SqliteDialect;\n"]},"metadata":{},"sourceType":"script"}
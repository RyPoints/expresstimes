{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0; // globalDate is to be used for JavaScript's global 'Date' object to avoid name clashing with the 'Date' constant below\n\nconst globalDate = global.Date;\nconst YEAR_ONE = new globalDate(2000, 0, -730118);\nconst UTC_YEAR_ONE = globalDate.UTC(2000, 0, -730118);\nconst Date = {\n  id: 0x28,\n  type: 'DATEN',\n  name: 'Date',\n  declaration: function declaration() {\n    return 'date';\n  },\n  writeTypeInfo: function writeTypeInfo(buffer) {\n    buffer.writeUInt8(this.id);\n  },\n  // ParameterData<any> is temporary solution. TODO: need to understand what type ParameterData<...> can be.\n  writeParameterData: function writeParameterData(buffer, parameter, options, cb) {\n    if (parameter.value != null) {\n      buffer.writeUInt8(3);\n\n      if (options.useUTC) {\n        buffer.writeUInt24LE(Math.floor((+parameter.value - UTC_YEAR_ONE) / 86400000));\n      } else {\n        const dstDiff = -(parameter.value.getTimezoneOffset() - YEAR_ONE.getTimezoneOffset()) * 60 * 1000;\n        buffer.writeUInt24LE(Math.floor((+parameter.value - +YEAR_ONE + dstDiff) / 86400000));\n      }\n    } else {\n      buffer.writeUInt8(0);\n    }\n\n    cb();\n  },\n  // TODO: value is techincally of type 'unknown'.\n  validate: function validate(value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (!(value instanceof globalDate)) {\n      value = globalDate.parse(value);\n    }\n\n    if (isNaN(value)) {\n      return new TypeError('Invalid date.');\n    }\n\n    return value;\n  }\n};\nvar _default = Date;\nexports.default = _default;\nmodule.exports = Date;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/tedious/lib/data-types/date.js"],"names":["Object","defineProperty","exports","value","default","globalDate","global","Date","YEAR_ONE","UTC_YEAR_ONE","UTC","id","type","name","declaration","writeTypeInfo","buffer","writeUInt8","writeParameterData","parameter","options","cb","useUTC","writeUInt24LE","Math","floor","dstDiff","getTimezoneOffset","validate","parse","isNaN","TypeError","_default","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB,C,CACA;;AACA,MAAMC,UAAU,GAAGC,MAAM,CAACC,IAA1B;AACA,MAAMC,QAAQ,GAAG,IAAIH,UAAJ,CAAe,IAAf,EAAqB,CAArB,EAAwB,CAAC,MAAzB,CAAjB;AACA,MAAMI,YAAY,GAAGJ,UAAU,CAACK,GAAX,CAAe,IAAf,EAAqB,CAArB,EAAwB,CAAC,MAAzB,CAArB;AACA,MAAMH,IAAI,GAAG;AACXI,EAAAA,EAAE,EAAE,IADO;AAEXC,EAAAA,IAAI,EAAE,OAFK;AAGXC,EAAAA,IAAI,EAAE,MAHK;AAIXC,EAAAA,WAAW,EAAE,SAASA,WAAT,GAAuB;AAClC,WAAO,MAAP;AACD,GANU;AAOXC,EAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBC,MAAvB,EAA+B;AAC5CA,IAAAA,MAAM,CAACC,UAAP,CAAkB,KAAKN,EAAvB;AACD,GATU;AAUX;AACAO,EAAAA,kBAAkB,EAAE,SAASA,kBAAT,CAA4BF,MAA5B,EAAoCG,SAApC,EAA+CC,OAA/C,EAAwDC,EAAxD,EAA4D;AAC9E,QAAIF,SAAS,CAAChB,KAAV,IAAmB,IAAvB,EAA6B;AAC3Ba,MAAAA,MAAM,CAACC,UAAP,CAAkB,CAAlB;;AAEA,UAAIG,OAAO,CAACE,MAAZ,EAAoB;AAClBN,QAAAA,MAAM,CAACO,aAAP,CAAqBC,IAAI,CAACC,KAAL,CAAW,CAAC,CAACN,SAAS,CAAChB,KAAX,GAAmBM,YAApB,IAAoC,QAA/C,CAArB;AACD,OAFD,MAEO;AACL,cAAMiB,OAAO,GAAG,EAAEP,SAAS,CAAChB,KAAV,CAAgBwB,iBAAhB,KAAsCnB,QAAQ,CAACmB,iBAAT,EAAxC,IAAwE,EAAxE,GAA6E,IAA7F;AACAX,QAAAA,MAAM,CAACO,aAAP,CAAqBC,IAAI,CAACC,KAAL,CAAW,CAAC,CAACN,SAAS,CAAChB,KAAX,GAAmB,CAACK,QAApB,GAA+BkB,OAAhC,IAA2C,QAAtD,CAArB;AACD;AACF,KATD,MASO;AACLV,MAAAA,MAAM,CAACC,UAAP,CAAkB,CAAlB;AACD;;AAEDI,IAAAA,EAAE;AACH,GA1BU;AA2BX;AACAO,EAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBzB,KAAlB,EAAyB;AACjC,QAAIA,KAAK,IAAI,IAAb,EAAmB;AACjB,aAAO,IAAP;AACD;;AAED,QAAI,EAAEA,KAAK,YAAYE,UAAnB,CAAJ,EAAoC;AAClCF,MAAAA,KAAK,GAAGE,UAAU,CAACwB,KAAX,CAAiB1B,KAAjB,CAAR;AACD;;AAED,QAAI2B,KAAK,CAAC3B,KAAD,CAAT,EAAkB;AAChB,aAAO,IAAI4B,SAAJ,CAAc,eAAd,CAAP;AACD;;AAED,WAAO5B,KAAP;AACD;AA1CU,CAAb;AA4CA,IAAI6B,QAAQ,GAAGzB,IAAf;AACAL,OAAO,CAACE,OAAR,GAAkB4B,QAAlB;AACAC,MAAM,CAAC/B,OAAP,GAAiBK,IAAjB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n// globalDate is to be used for JavaScript's global 'Date' object to avoid name clashing with the 'Date' constant below\nconst globalDate = global.Date;\nconst YEAR_ONE = new globalDate(2000, 0, -730118);\nconst UTC_YEAR_ONE = globalDate.UTC(2000, 0, -730118);\nconst Date = {\n  id: 0x28,\n  type: 'DATEN',\n  name: 'Date',\n  declaration: function declaration() {\n    return 'date';\n  },\n  writeTypeInfo: function writeTypeInfo(buffer) {\n    buffer.writeUInt8(this.id);\n  },\n  // ParameterData<any> is temporary solution. TODO: need to understand what type ParameterData<...> can be.\n  writeParameterData: function writeParameterData(buffer, parameter, options, cb) {\n    if (parameter.value != null) {\n      buffer.writeUInt8(3);\n\n      if (options.useUTC) {\n        buffer.writeUInt24LE(Math.floor((+parameter.value - UTC_YEAR_ONE) / 86400000));\n      } else {\n        const dstDiff = -(parameter.value.getTimezoneOffset() - YEAR_ONE.getTimezoneOffset()) * 60 * 1000;\n        buffer.writeUInt24LE(Math.floor((+parameter.value - +YEAR_ONE + dstDiff) / 86400000));\n      }\n    } else {\n      buffer.writeUInt8(0);\n    }\n\n    cb();\n  },\n  // TODO: value is techincally of type 'unknown'.\n  validate: function validate(value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (!(value instanceof globalDate)) {\n      value = globalDate.parse(value);\n    }\n\n    if (isNaN(value)) {\n      return new TypeError('Invalid date.');\n    }\n\n    return value;\n  }\n};\nvar _default = Date;\nexports.default = _default;\nmodule.exports = Date;"]},"metadata":{},"sourceType":"script"}
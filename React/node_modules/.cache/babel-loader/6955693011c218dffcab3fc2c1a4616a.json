{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst Promise = require('../../promise');\n\nconst UnknownConstraintError = require('../../errors').UnknownConstraintError;\n/**\n Returns an object that treats SQLite's inabilities to do certain queries.\n\n @class QueryInterface\n @static\n @private\n */\n\n/**\n  A wrapper that fixes SQLite's inability to remove columns from existing tables.\n  It will create a backup of the table, drop the table afterwards and create a\n  new table with the same name but without the obsolete column.\n\n  @method removeColumn\n  @for    QueryInterface\n\n  @param  {String} tableName     The name of the table.\n  @param  {String} attributeName The name of the attribute that we want to remove.\n  @param  {Object} options\n  @param  {Boolean|Function} [options.logging] A function that logs the sql queries, or false for explicitly not logging these queries\n\n  @since 1.6.0\n  @private\n */\n\n\nfunction removeColumn(tableName, attributeName, options) {\n  options = options || {};\n  return this.describeTable(tableName, options).then(fields => {\n    delete fields[attributeName];\n    const sql = this.QueryGenerator.removeColumnQuery(tableName, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n    return Promise.each(subQueries, subQuery => this.sequelize.query(subQuery + ';', _.assign({\n      raw: true\n    }, options)));\n  });\n}\n\nexports.removeColumn = removeColumn;\n/**\n  A wrapper that fixes SQLite's inability to change columns from existing tables.\n  It will create a backup of the table, drop the table afterwards and create a\n  new table with the same name but with a modified version of the respective column.\n\n  @method changeColumn\n  @for    QueryInterface\n\n  @param  {String} tableName The name of the table.\n  @param  {Object} attributes An object with the attribute's name as key and its options as value object.\n  @param  {Object} options\n  @param  {Boolean|Function} [options.logging] A function that logs the sql queries, or false for explicitly not logging these queries\n\n  @since 1.6.0\n  @private\n */\n\nfunction changeColumn(tableName, attributes, options) {\n  const attributeName = Object.keys(attributes)[0];\n  options = options || {};\n  return this.describeTable(tableName, options).then(fields => {\n    fields[attributeName] = attributes[attributeName];\n    const sql = this.QueryGenerator.removeColumnQuery(tableName, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n    return Promise.each(subQueries, subQuery => this.sequelize.query(subQuery + ';', _.assign({\n      raw: true\n    }, options)));\n  });\n}\n\nexports.changeColumn = changeColumn;\n/**\n  A wrapper that fixes SQLite's inability to rename columns from existing tables.\n  It will create a backup of the table, drop the table afterwards and create a\n  new table with the same name but with a renamed version of the respective column.\n\n  @method renameColumn\n  @for    QueryInterface\n\n  @param  {String} tableName The name of the table.\n  @param  {String} attrNameBefore The name of the attribute before it was renamed.\n  @param  {String} attrNameAfter The name of the attribute after it was renamed.\n  @param  {Object} options\n  @param  {Boolean|Function} [options.logging] A function that logs the sql queries, or false for explicitly not logging these queries\n\n  @since 1.6.0\n  @private\n */\n\nfunction renameColumn(tableName, attrNameBefore, attrNameAfter, options) {\n  options = options || {};\n  return this.describeTable(tableName, options).then(fields => {\n    fields[attrNameAfter] = _.clone(fields[attrNameBefore]);\n    delete fields[attrNameBefore];\n    const sql = this.QueryGenerator.renameColumnQuery(tableName, attrNameBefore, attrNameAfter, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n    return Promise.each(subQueries, subQuery => this.sequelize.query(subQuery + ';', _.assign({\n      raw: true\n    }, options)));\n  });\n}\n\nexports.renameColumn = renameColumn;\n\nfunction removeConstraint(tableName, constraintName, options) {\n  let createTableSql;\n  return this.showConstraint(tableName, constraintName).then(constraints => {\n    const constraint = constraints[0];\n\n    if (constraint) {\n      createTableSql = constraint.sql;\n      constraint.constraintName = this.QueryGenerator.quoteIdentifier(constraint.constraintName);\n      let constraintSnippet = `, CONSTRAINT ${constraint.constraintName} ${constraint.constraintType} ${constraint.constraintCondition}`;\n\n      if (constraint.constraintType === 'FOREIGN KEY') {\n        const referenceTableName = this.QueryGenerator.quoteTable(constraint.referenceTableName);\n        constraint.referenceTableKeys = constraint.referenceTableKeys.map(columnName => this.QueryGenerator.quoteIdentifier(columnName));\n        const referenceTableKeys = constraint.referenceTableKeys.join(', ');\n        constraintSnippet += ` REFERENCES ${referenceTableName} (${referenceTableKeys})`;\n        constraintSnippet += ` ON UPDATE ${constraint.updateAction}`;\n        constraintSnippet += ` ON DELETE ${constraint.deleteAction}`;\n      }\n\n      createTableSql = createTableSql.replace(constraintSnippet, '');\n      createTableSql += ';';\n      return this.describeTable(tableName, options);\n    } else {\n      throw new UnknownConstraintError(`Constraint ${constraintName} on table ${tableName} does not exist`);\n    }\n  }).then(fields => {\n    const sql = this.QueryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n\n    const subQueries = sql.split(';').filter(q => q !== '');\n    return Promise.each(subQueries, subQuery => this.sequelize.query(subQuery + ';', _.assign({\n      raw: true\n    }, options)));\n  });\n}\n\nexports.removeConstraint = removeConstraint;\n\nfunction addConstraint(tableName, options) {\n  const constraintSnippet = this.QueryGenerator.getConstraintSnippet(tableName, options);\n  const describeCreateTableSql = this.QueryGenerator.describeCreateTableQuery(tableName);\n  let createTableSql;\n  return this.sequelize.query(describeCreateTableSql, options).then(constraints => {\n    const sql = constraints[0].sql;\n    const index = sql.length - 1; //Replace ending ')' with constraint snippet - Simulates String.replaceAt\n    //http://stackoverflow.com/questions/1431094\n\n    createTableSql = sql.substr(0, index) + `, ${constraintSnippet})` + sql.substr(index + 1) + ';';\n    return this.describeTable(tableName, options);\n  }).then(fields => {\n    const sql = this.QueryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n\n    const subQueries = sql.split(';').filter(q => q !== '');\n    return Promise.each(subQueries, subQuery => this.sequelize.query(subQuery + ';', _.assign({\n      raw: true\n    }, options)));\n  });\n}\n\nexports.addConstraint = addConstraint;\n/**\n *\n * @param {String} tableName\n * @param {Object} options  Query Options\n *\n * @private\n * @returns {Promise}\n */\n\nfunction getForeignKeyReferencesForTable(tableName, options) {\n  const database = this.sequelize.config.database;\n  const query = this.QueryGenerator.getForeignKeysQuery(tableName, database);\n  return this.sequelize.query(query, options).then(result => {\n    return result.map(row => ({\n      tableName,\n      columnName: row.from,\n      referencedTableName: row.table,\n      referencedColumnName: row.to,\n      tableCatalog: database,\n      referencedTableCatalog: database\n    }));\n  });\n}\n\nexports.getForeignKeyReferencesForTable = getForeignKeyReferencesForTable;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/sequelize/lib/dialects/sqlite/query-interface.js"],"names":["_","require","Promise","UnknownConstraintError","removeColumn","tableName","attributeName","options","describeTable","then","fields","sql","QueryGenerator","removeColumnQuery","subQueries","split","filter","q","each","subQuery","sequelize","query","assign","raw","exports","changeColumn","attributes","Object","keys","renameColumn","attrNameBefore","attrNameAfter","clone","renameColumnQuery","removeConstraint","constraintName","createTableSql","showConstraint","constraints","constraint","quoteIdentifier","constraintSnippet","constraintType","constraintCondition","referenceTableName","quoteTable","referenceTableKeys","map","columnName","join","updateAction","deleteAction","replace","_alterConstraintQuery","addConstraint","getConstraintSnippet","describeCreateTableSql","describeCreateTableQuery","index","length","substr","getForeignKeyReferencesForTable","database","config","getForeignKeysQuery","result","row","from","referencedTableName","table","referencedColumnName","to","tableCatalog","referencedTableCatalog"],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst Promise = require('../../promise');\nconst UnknownConstraintError = require('../../errors').UnknownConstraintError;\n\n/**\n Returns an object that treats SQLite's inabilities to do certain queries.\n\n @class QueryInterface\n @static\n @private\n */\n\n/**\n  A wrapper that fixes SQLite's inability to remove columns from existing tables.\n  It will create a backup of the table, drop the table afterwards and create a\n  new table with the same name but without the obsolete column.\n\n  @method removeColumn\n  @for    QueryInterface\n\n  @param  {String} tableName     The name of the table.\n  @param  {String} attributeName The name of the attribute that we want to remove.\n  @param  {Object} options\n  @param  {Boolean|Function} [options.logging] A function that logs the sql queries, or false for explicitly not logging these queries\n\n  @since 1.6.0\n  @private\n */\nfunction removeColumn(tableName, attributeName, options) {\n  options = options || {};\n\n  return this.describeTable(tableName, options).then(fields => {\n    delete fields[attributeName];\n\n    const sql = this.QueryGenerator.removeColumnQuery(tableName, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    return Promise.each(subQueries, subQuery => this.sequelize.query(subQuery + ';', _.assign({raw: true}, options)));\n  });\n}\nexports.removeColumn = removeColumn;\n\n/**\n  A wrapper that fixes SQLite's inability to change columns from existing tables.\n  It will create a backup of the table, drop the table afterwards and create a\n  new table with the same name but with a modified version of the respective column.\n\n  @method changeColumn\n  @for    QueryInterface\n\n  @param  {String} tableName The name of the table.\n  @param  {Object} attributes An object with the attribute's name as key and its options as value object.\n  @param  {Object} options\n  @param  {Boolean|Function} [options.logging] A function that logs the sql queries, or false for explicitly not logging these queries\n\n  @since 1.6.0\n  @private\n */\nfunction changeColumn(tableName, attributes, options) {\n  const attributeName = Object.keys(attributes)[0];\n  options = options || {};\n\n  return this.describeTable(tableName, options).then(fields => {\n    fields[attributeName] = attributes[attributeName];\n\n    const sql = this.QueryGenerator.removeColumnQuery(tableName, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    return Promise.each(subQueries, subQuery => this.sequelize.query(subQuery + ';', _.assign({raw: true}, options)));\n  });\n}\nexports.changeColumn = changeColumn;\n\n/**\n  A wrapper that fixes SQLite's inability to rename columns from existing tables.\n  It will create a backup of the table, drop the table afterwards and create a\n  new table with the same name but with a renamed version of the respective column.\n\n  @method renameColumn\n  @for    QueryInterface\n\n  @param  {String} tableName The name of the table.\n  @param  {String} attrNameBefore The name of the attribute before it was renamed.\n  @param  {String} attrNameAfter The name of the attribute after it was renamed.\n  @param  {Object} options\n  @param  {Boolean|Function} [options.logging] A function that logs the sql queries, or false for explicitly not logging these queries\n\n  @since 1.6.0\n  @private\n */\nfunction renameColumn(tableName, attrNameBefore, attrNameAfter, options) {\n  options = options || {};\n\n  return this.describeTable(tableName, options).then(fields => {\n    fields[attrNameAfter] = _.clone(fields[attrNameBefore]);\n    delete fields[attrNameBefore];\n\n    const sql = this.QueryGenerator.renameColumnQuery(tableName, attrNameBefore, attrNameAfter, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    return Promise.each(subQueries, subQuery => this.sequelize.query(subQuery + ';', _.assign({raw: true}, options)));\n  });\n}\nexports.renameColumn = renameColumn;\n\nfunction removeConstraint(tableName, constraintName, options) {\n  let createTableSql;\n\n  return this.showConstraint(tableName, constraintName)\n    .then(constraints => {\n      const constraint = constraints[0];\n\n      if (constraint) {\n        createTableSql = constraint.sql;\n        constraint.constraintName = this.QueryGenerator.quoteIdentifier(constraint.constraintName);\n        let constraintSnippet = `, CONSTRAINT ${constraint.constraintName} ${constraint.constraintType} ${constraint.constraintCondition}`;\n\n        if (constraint.constraintType === 'FOREIGN KEY') {\n          const referenceTableName = this.QueryGenerator.quoteTable(constraint.referenceTableName);\n          constraint.referenceTableKeys = constraint.referenceTableKeys.map(columnName => this.QueryGenerator.quoteIdentifier(columnName));\n          const referenceTableKeys = constraint.referenceTableKeys.join(', ');\n          constraintSnippet += ` REFERENCES ${referenceTableName} (${referenceTableKeys})`;\n          constraintSnippet += ` ON UPDATE ${constraint.updateAction}`;\n          constraintSnippet += ` ON DELETE ${constraint.deleteAction}`;\n        }\n\n        createTableSql = createTableSql.replace(constraintSnippet, '');\n        createTableSql += ';';\n\n        return this.describeTable(tableName, options);\n      } else {\n        throw new UnknownConstraintError(`Constraint ${constraintName} on table ${tableName} does not exist`);\n      }\n    })\n    .then(fields => {\n      const sql = this.QueryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n      const subQueries = sql.split(';').filter(q => q !== '');\n\n      return Promise.each(subQueries, subQuery => this.sequelize.query(subQuery + ';', _.assign({raw: true}, options)));\n    });\n}\nexports.removeConstraint = removeConstraint;\n\nfunction addConstraint(tableName, options) {\n  const constraintSnippet = this.QueryGenerator.getConstraintSnippet(tableName, options);\n  const describeCreateTableSql = this.QueryGenerator.describeCreateTableQuery(tableName);\n  let createTableSql;\n\n  return this.sequelize.query(describeCreateTableSql, options)\n    .then(constraints => {\n      const sql = constraints[0].sql;\n      const index = sql.length - 1;\n      //Replace ending ')' with constraint snippet - Simulates String.replaceAt\n      //http://stackoverflow.com/questions/1431094\n      createTableSql = sql.substr(0, index) +  `, ${constraintSnippet})` + sql.substr(index + 1) + ';';\n\n      return this.describeTable(tableName, options);\n    })\n    .then(fields => {\n      const sql = this.QueryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n      const subQueries = sql.split(';').filter(q => q !== '');\n\n      return Promise.each(subQueries, subQuery => this.sequelize.query(subQuery + ';', _.assign({raw: true}, options)));\n    });\n}\nexports.addConstraint = addConstraint;\n\n/**\n *\n * @param {String} tableName\n * @param {Object} options  Query Options\n *\n * @private\n * @returns {Promise}\n */\nfunction getForeignKeyReferencesForTable(tableName, options) {\n  const database = this.sequelize.config.database;\n  const query = this.QueryGenerator.getForeignKeysQuery(tableName, database);\n  return this.sequelize.query(query, options)\n    .then(result => {\n      return result.map(row => ({\n        tableName,\n        columnName: row.from,\n        referencedTableName: row.table,\n        referencedColumnName: row.to,\n        tableCatalog: database,\n        referencedTableCatalog: database\n      }));\n    });\n}\n\nexports.getForeignKeyReferencesForTable = getForeignKeyReferencesForTable;\n"]},"metadata":{},"sourceType":"script"}
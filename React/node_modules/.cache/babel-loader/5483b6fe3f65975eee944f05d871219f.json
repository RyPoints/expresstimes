{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { HttpHeaders } from \"../httpHeaders\";\n/**\n * Authenticates to a service using an API key.\n */\n\nvar ApiKeyCredentials =\n/** @class */\nfunction () {\n  /**\n   * @constructor\n   * @param {object} options   Specifies the options to be provided for auth. Either header or query needs to be provided.\n   */\n  function ApiKeyCredentials(options) {\n    if (!options || options && !options.inHeader && !options.inQuery) {\n      throw new Error(\"options cannot be null or undefined. Either \\\"inHeader\\\" or \\\"inQuery\\\" property of the options object needs to be provided.\");\n    }\n\n    this.inHeader = options.inHeader;\n    this.inQuery = options.inQuery;\n  }\n  /**\n   * Signs a request with the values provided in the inHeader and inQuery parameter.\n   *\n   * @param {WebResource} webResource The WebResource to be signed.\n   * @returns {Promise<WebResource>} The signed request object.\n   */\n\n\n  ApiKeyCredentials.prototype.signRequest = function (webResource) {\n    if (!webResource) {\n      return Promise.reject(new Error(\"webResource cannot be null or undefined and must be of type \\\"object\\\".\"));\n    }\n\n    if (this.inHeader) {\n      if (!webResource.headers) {\n        webResource.headers = new HttpHeaders();\n      }\n\n      for (var headerName in this.inHeader) {\n        webResource.headers.set(headerName, this.inHeader[headerName]);\n      }\n    }\n\n    if (this.inQuery) {\n      if (!webResource.url) {\n        return Promise.reject(new Error(\"url cannot be null in the request object.\"));\n      }\n\n      if (webResource.url.indexOf(\"?\") < 0) {\n        webResource.url += \"?\";\n      }\n\n      for (var key in this.inQuery) {\n        if (!webResource.url.endsWith(\"?\")) {\n          webResource.url += \"&\";\n        }\n\n        webResource.url += key + \"=\" + this.inQuery[key];\n      }\n    }\n\n    return Promise.resolve(webResource);\n  };\n\n  return ApiKeyCredentials;\n}();\n\nexport { ApiKeyCredentials };","map":{"version":3,"sources":["../../../lib/credentials/apiKeyCredentials.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SAAS,WAAT,QAA4B,gBAA5B;AAmBA;;;;AAGA,IAAA,iBAAA;AAAA;AAAA,YAAA;AAUE;;;;AAIA,WAAA,iBAAA,CAAY,OAAZ,EAA4C;AAC1C,QAAI,CAAC,OAAD,IAAa,OAAO,IAAI,CAAC,OAAO,CAAC,QAApB,IAAgC,CAAC,OAAO,CAAC,OAA1D,EAAoE;AAClE,YAAM,IAAI,KAAJ,CAAU,8HAAV,CAAN;AACD;;AACD,SAAK,QAAL,GAAgB,OAAO,CAAC,QAAxB;AACA,SAAK,OAAL,GAAe,OAAO,CAAC,OAAvB;AACD;AAED;;;;;;;;AAMA,EAAA,iBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,WAAZ,EAAoC;AAClC,QAAI,CAAC,WAAL,EAAkB;AAChB,aAAO,OAAO,CAAC,MAAR,CAAe,IAAI,KAAJ,CAAU,yEAAV,CAAf,CAAP;AACD;;AAED,QAAI,KAAK,QAAT,EAAmB;AACjB,UAAI,CAAC,WAAW,CAAC,OAAjB,EAA0B;AACxB,QAAA,WAAW,CAAC,OAAZ,GAAsB,IAAI,WAAJ,EAAtB;AACD;;AACD,WAAK,IAAM,UAAX,IAAyB,KAAK,QAA9B,EAAwC;AACtC,QAAA,WAAW,CAAC,OAAZ,CAAoB,GAApB,CAAwB,UAAxB,EAAoC,KAAK,QAAL,CAAc,UAAd,CAApC;AACD;AACF;;AAED,QAAI,KAAK,OAAT,EAAkB;AAChB,UAAI,CAAC,WAAW,CAAC,GAAjB,EAAsB;AACpB,eAAO,OAAO,CAAC,MAAR,CAAe,IAAI,KAAJ,CAAU,2CAAV,CAAf,CAAP;AACD;;AACD,UAAI,WAAW,CAAC,GAAZ,CAAgB,OAAhB,CAAwB,GAAxB,IAA+B,CAAnC,EAAsC;AACpC,QAAA,WAAW,CAAC,GAAZ,IAAmB,GAAnB;AACD;;AACD,WAAK,IAAM,GAAX,IAAkB,KAAK,OAAvB,EAAgC;AAC9B,YAAI,CAAC,WAAW,CAAC,GAAZ,CAAgB,QAAhB,CAAyB,GAAzB,CAAL,EAAoC;AAClC,UAAA,WAAW,CAAC,GAAZ,IAAmB,GAAnB;AACD;;AACD,QAAA,WAAW,CAAC,GAAZ,IAAsB,GAAG,GAAA,GAAH,GAAO,KAAK,OAAL,CAAa,GAAb,CAA7B;AACD;AACF;;AAED,WAAO,OAAO,CAAC,OAAR,CAAgB,WAAhB,CAAP;AACD,GA9BD;;AA+BF,SAAA,iBAAA;AAAC,CA3DD,EAAA","sourceRoot":"","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { HttpHeaders } from \"../httpHeaders\";\n/**\n * Authenticates to a service using an API key.\n */\nvar ApiKeyCredentials = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {object} options   Specifies the options to be provided for auth. Either header or query needs to be provided.\n     */\n    function ApiKeyCredentials(options) {\n        if (!options || (options && !options.inHeader && !options.inQuery)) {\n            throw new Error(\"options cannot be null or undefined. Either \\\"inHeader\\\" or \\\"inQuery\\\" property of the options object needs to be provided.\");\n        }\n        this.inHeader = options.inHeader;\n        this.inQuery = options.inQuery;\n    }\n    /**\n     * Signs a request with the values provided in the inHeader and inQuery parameter.\n     *\n     * @param {WebResource} webResource The WebResource to be signed.\n     * @returns {Promise<WebResource>} The signed request object.\n     */\n    ApiKeyCredentials.prototype.signRequest = function (webResource) {\n        if (!webResource) {\n            return Promise.reject(new Error(\"webResource cannot be null or undefined and must be of type \\\"object\\\".\"));\n        }\n        if (this.inHeader) {\n            if (!webResource.headers) {\n                webResource.headers = new HttpHeaders();\n            }\n            for (var headerName in this.inHeader) {\n                webResource.headers.set(headerName, this.inHeader[headerName]);\n            }\n        }\n        if (this.inQuery) {\n            if (!webResource.url) {\n                return Promise.reject(new Error(\"url cannot be null in the request object.\"));\n            }\n            if (webResource.url.indexOf(\"?\") < 0) {\n                webResource.url += \"?\";\n            }\n            for (var key in this.inQuery) {\n                if (!webResource.url.endsWith(\"?\")) {\n                    webResource.url += \"&\";\n                }\n                webResource.url += key + \"=\" + this.inQuery[key];\n            }\n        }\n        return Promise.resolve(webResource);\n    };\n    return ApiKeyCredentials;\n}());\nexport { ApiKeyCredentials };\n//# sourceMappingURL=apiKeyCredentials.js.map"]},"metadata":{},"sourceType":"module"}
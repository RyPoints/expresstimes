{"ast":null,"code":"var AWS = require('../core');\n\nvar v4Credentials = require('../signers/v4_credentials');\n\nvar resolveRegionalEndpointsFlag = require('../config_regional_endpoint');\n\nvar regionUtil = require('../region_config'); // Pull in managed upload extension\n\n\nrequire('../s3/managed_upload');\n/**\n * @api private\n */\n\n\nvar operationsWith200StatusCodeError = {\n  'completeMultipartUpload': true,\n  'copyObject': true,\n  'uploadPartCopy': true\n};\n/**\n * @api private\n */\n\nvar regionRedirectErrorCodes = ['AuthorizationHeaderMalformed', // non-head operations on virtual-hosted global bucket endpoints\n'BadRequest', // head operations on virtual-hosted global bucket endpoints\n'PermanentRedirect', // non-head operations on path-style or regional endpoints\n301 // head operations on path-style or regional endpoints\n];\nAWS.util.update(AWS.S3.prototype, {\n  /**\n   * @api private\n   */\n  getSignatureVersion: function getSignatureVersion(request) {\n    var defaultApiVersion = this.api.signatureVersion;\n    var userDefinedVersion = this._originalConfig ? this._originalConfig.signatureVersion : null;\n    var regionDefinedVersion = this.config.signatureVersion;\n    var isPresigned = request ? request.isPresigned() : false;\n    /*\n      1) User defined version specified:\n        a) always return user defined version\n      2) No user defined version specified:\n        a) default to lowest version the region supports\n        b) If using presigned urls, default to lowest version the region supports\n    */\n\n    if (userDefinedVersion) {\n      userDefinedVersion = userDefinedVersion === 'v2' ? 's3' : userDefinedVersion;\n      return userDefinedVersion;\n    }\n\n    if (isPresigned !== true) {\n      defaultApiVersion = 'v4';\n    } else if (regionDefinedVersion) {\n      defaultApiVersion = regionDefinedVersion;\n    }\n\n    return defaultApiVersion;\n  },\n\n  /**\n   * @api private\n   */\n  getSignerClass: function getSignerClass(request) {\n    var signatureVersion = this.getSignatureVersion(request);\n    return AWS.Signers.RequestSigner.getVersion(signatureVersion);\n  },\n\n  /**\n   * @api private\n   */\n  validateService: function validateService() {\n    var msg;\n    var messages = []; // default to us-east-1 when no region is provided\n\n    if (!this.config.region) this.config.region = 'us-east-1';\n\n    if (!this.config.endpoint && this.config.s3BucketEndpoint) {\n      messages.push('An endpoint must be provided when configuring ' + '`s3BucketEndpoint` to true.');\n    }\n\n    if (messages.length === 1) {\n      msg = messages[0];\n    } else if (messages.length > 1) {\n      msg = 'Multiple configuration errors:\\n' + messages.join('\\n');\n    }\n\n    if (msg) {\n      throw AWS.util.error(new Error(), {\n        name: 'InvalidEndpoint',\n        message: msg\n      });\n    }\n  },\n\n  /**\n   * @api private\n   */\n  shouldDisableBodySigning: function shouldDisableBodySigning(request) {\n    var signerClass = this.getSignerClass();\n\n    if (this.config.s3DisableBodySigning === true && signerClass === AWS.Signers.V4 && request.httpRequest.endpoint.protocol === 'https:') {\n      return true;\n    }\n\n    return false;\n  },\n\n  /**\n   * @api private\n   */\n  setupRequestListeners: function setupRequestListeners(request) {\n    var prependListener = true;\n    request.addListener('validate', this.validateScheme);\n    request.addListener('validate', this.validateBucketName, prependListener);\n    request.addListener('validate', this.optInUsEast1RegionalEndpoint, prependListener);\n    request.removeListener('validate', AWS.EventListeners.Core.VALIDATE_REGION);\n    request.addListener('build', this.addContentType);\n    request.addListener('build', this.computeContentMd5);\n    request.addListener('build', this.computeSseCustomerKeyMd5);\n    request.addListener('build', this.populateURI);\n    request.addListener('afterBuild', this.addExpect100Continue);\n    request.addListener('extractError', this.extractError);\n    request.addListener('extractData', AWS.util.hoistPayloadMember);\n    request.addListener('extractData', this.extractData);\n    request.addListener('beforePresign', this.prepareSignedUrl);\n\n    if (this.shouldDisableBodySigning(request)) {\n      request.removeListener('afterBuild', AWS.EventListeners.Core.COMPUTE_SHA256);\n      request.addListener('afterBuild', this.disableBodySigning);\n    } //deal with ARNs supplied to Bucket\n\n\n    if (this.isAccessPointApplicable(request)) {\n      request.removeListener('validate', this.validateBucketName);\n      request.addListener('validate', this.validateAccessPointArn, prependListener);\n      request.addListener('validate', this.validateArnRegion);\n      request.removeListener('build', this.populateURI);\n      request.addListener('build', this.populateUriFromAccessPoint);\n      return;\n    } //listeners regarding region inference\n\n\n    request.addListener('validate', this.validateBucketEndpoint);\n    request.addListener('validate', this.correctBucketRegionFromCache);\n    request.onAsync('extractError', this.requestBucketRegion);\n\n    if (AWS.util.isBrowser()) {\n      request.onAsync('retry', this.reqRegionForNetworkingError);\n    }\n  },\n\n  /**\n   * @api private\n   */\n  validateScheme: function (req) {\n    var params = req.params,\n        scheme = req.httpRequest.endpoint.protocol,\n        sensitive = params.SSECustomerKey || params.CopySourceSSECustomerKey;\n\n    if (sensitive && scheme !== 'https:') {\n      var msg = 'Cannot send SSE keys over HTTP. Set \\'sslEnabled\\'' + 'to \\'true\\' in your configuration';\n      throw AWS.util.error(new Error(), {\n        code: 'ConfigError',\n        message: msg\n      });\n    }\n  },\n\n  /**\n   * @api private\n   */\n  validateBucketEndpoint: function (req) {\n    if (!req.params.Bucket && req.service.config.s3BucketEndpoint) {\n      var msg = 'Cannot send requests to root API with `s3BucketEndpoint` set.';\n      throw AWS.util.error(new Error(), {\n        code: 'ConfigError',\n        message: msg\n      });\n    }\n  },\n\n  /**\n   * @api private\n   */\n  isAccessPointApplicable: function hasBucketInParams(req) {\n    var inputShape = (req.service.api.operations[req.operation] || {}).input || {};\n    var inputMembers = inputShape.members || {};\n    if (req.operation === 'createBucket' || !req.params.Bucket || !inputMembers.Bucket) return false;\n    if (!AWS.util.ARN.validate(req.params.Bucket)) return false;\n    return true;\n  },\n\n  /**\n   * Validate ARN supplied in Bucket parameter is a valid access point ARN\n   *\n   * @api private\n   */\n  validateAccessPointArn: function validateAccessPointArn(req) {\n    var parsedArn = AWS.util.ARN.parse(req.params.Bucket); //avoid duplicated parsing in the future\n\n    req._parsedAccessPointArn = parsedArn;\n    var parsedArn = req._parsedAccessPointArn;\n\n    if (parsedArn.service !== 's3') {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidAccessPointARN',\n        message: 'expect \\'s3\\' in access point ARN service component'\n      });\n    }\n\n    if (!parsedArn.region) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidAccessPointARN',\n        message: 'Access point ARN region is empty'\n      });\n    }\n\n    if (parsedArn.resource.indexOf('accesspoint:') !== 0 && parsedArn.resource.indexOf('accesspoint/') !== 0) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidAccessPointARN',\n        message: 'Access point ARN resource should begin with \\'accesspoint/\\''\n      });\n    }\n\n    var delimiter = parsedArn.resource['accesspoint'.length]; //can be ':' or '/'\n\n    if (parsedArn.resource.split(delimiter).length !== 2) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidAccessPointARN',\n        message: 'Too many resource parameters in access point ARN'\n      });\n    }\n\n    var accessPoint = parsedArn.resource.split(delimiter)[1];\n    var accessPointPrefix = accessPoint + '-' + parsedArn.accountId;\n\n    if (!req.service.isDnsCompatible(accessPointPrefix) || accessPointPrefix.match(/\\./)) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidAccessPointARN',\n        message: 'Access point ARN is not DNS compatible. Got ' + accessPoint\n      });\n    } //set parsed valid access point\n\n\n    req._parsedAccessPointArn.accessPoint = accessPoint;\n  },\n\n  /**\n   * @api private\n   */\n  validateArnRegion: function validateArnRegion(req) {\n    var useArnRegion = req.service.loadUseArnRegionConfig(req);\n    var regionFromArn = req._parsedAccessPointArn.region;\n    var clientRegion = req.service.config.region;\n\n    if (clientRegion.indexOf('fips') >= 0 || regionFromArn.indexOf('fips') >= 0) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'Access point endpoint is not compatible with FIPS region'\n      });\n    }\n\n    if (!useArnRegion && regionFromArn !== clientRegion) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'Configured region conflicts with access point region'\n      });\n    } else if (useArnRegion && regionUtil.getEndpointSuffix(regionFromArn) !== regionUtil.getEndpointSuffix(clientRegion)) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'Configured region and access point region not in same partition'\n      });\n    }\n\n    if (req.service.config.useAccelerateEndpoint) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'useAccelerateEndpoint config is not supported with access point ARN'\n      });\n    }\n  },\n\n  /**\n   * @api private\n   */\n  loadUseArnRegionConfig: function loadUseArnRegionConfig(req) {\n    var envName = 'AWS_S3_USE_ARN_REGION';\n    var configName = 's3_use_arn_region';\n    var useArnRegion = true;\n    var originalConfig = req.service._originalConfig || {};\n\n    if (req.service.config.s3UseArnRegion !== undefined) {\n      return req.service.config.s3UseArnRegion;\n    } else if (originalConfig.s3UseArnRegion !== undefined) {\n      useArnRegion = originalConfig.s3UseArnRegion === true;\n    } else if (AWS.util.isNode()) {\n      //load from environmental variable AWS_USE_ARN_REGION\n      if (process.env[envName]) {\n        var value = process.env[envName].trim().toLowerCase();\n\n        if (['false', 'true'].indexOf(value) < 0) {\n          throw AWS.util.error(new Error(), {\n            code: 'InvalidConfiguration',\n            message: envName + ' only accepts true or false. Got ' + process.env[envName],\n            retryable: false\n          });\n        }\n\n        useArnRegion = value === 'true';\n      } else {\n        //load from shared config property use_arn_region\n        var profiles = {};\n        var profile = {};\n\n        try {\n          profiles = AWS.util.getProfilesFromSharedConfig(AWS.util.iniLoader);\n          profile = profiles[process.env.AWS_PROFILE || AWS.util.defaultProfile];\n        } catch (e) {}\n\n        if (profile[configName]) {\n          if (['false', 'true'].indexOf(profile[configName].trim().toLowerCase()) < 0) {\n            throw AWS.util.error(new Error(), {\n              code: 'InvalidConfiguration',\n              message: configName + ' only accepts true or false. Got ' + profile[configName],\n              retryable: false\n            });\n          }\n\n          useArnRegion = profile[configName].trim().toLowerCase() === 'true';\n        }\n      }\n    }\n\n    req.service.config.s3UseArnRegion = useArnRegion;\n    return useArnRegion;\n  },\n\n  /**\n   * @api private\n   */\n  validateBucketName: function validateBucketName(req) {\n    var service = req.service;\n    var signatureVersion = service.getSignatureVersion(req);\n    var bucket = req.params && req.params.Bucket;\n    var key = req.params && req.params.Key;\n    var slashIndex = bucket && bucket.indexOf('/');\n\n    if (bucket && slashIndex >= 0) {\n      if (typeof key === 'string' && slashIndex > 0) {\n        req.params = AWS.util.copy(req.params); // Need to include trailing slash to match sigv2 behavior\n\n        var prefix = bucket.substr(slashIndex + 1) || '';\n        req.params.Key = prefix + '/' + key;\n        req.params.Bucket = bucket.substr(0, slashIndex);\n      } else if (signatureVersion === 'v4') {\n        var msg = 'Bucket names cannot contain forward slashes. Bucket: ' + bucket;\n        throw AWS.util.error(new Error(), {\n          code: 'InvalidBucket',\n          message: msg\n        });\n      }\n    }\n  },\n\n  /**\n   * @api private\n   */\n  isValidAccelerateOperation: function isValidAccelerateOperation(operation) {\n    var invalidOperations = ['createBucket', 'deleteBucket', 'listBuckets'];\n    return invalidOperations.indexOf(operation) === -1;\n  },\n\n  /**\n   * When us-east-1 region endpoint configuration is set, in stead of sending request to\n   * global endpoint(e.g. 's3.amazonaws.com'), we will send request to\n   * 's3.us-east-1.amazonaws.com'.\n   * @api private\n   */\n  optInUsEast1RegionalEndpoint: function optInUsEast1RegionalEndpoint(req) {\n    var service = req.service;\n    var config = service.config;\n    config.s3UsEast1RegionalEndpoint = resolveRegionalEndpointsFlag(service._originalConfig, {\n      env: 'AWS_S3_US_EAST_1_REGIONAL_ENDPOINT',\n      sharedConfig: 's3_us_east_1_regional_endpoint',\n      clientConfig: 's3UsEast1RegionalEndpoint'\n    });\n\n    if (!(service._originalConfig || {}).endpoint && req.httpRequest.region === 'us-east-1' && config.s3UsEast1RegionalEndpoint === 'regional' && req.httpRequest.endpoint.hostname.indexOf('s3.amazonaws.com') >= 0) {\n      var insertPoint = config.endpoint.indexOf('.amazonaws.com');\n      regionalEndpoint = config.endpoint.substring(0, insertPoint) + '.us-east-1' + config.endpoint.substring(insertPoint);\n      req.httpRequest.updateEndpoint(regionalEndpoint);\n    }\n  },\n\n  /**\n   * S3 prefers dns-compatible bucket names to be moved from the uri path\n   * to the hostname as a sub-domain.  This is not possible, even for dns-compat\n   * buckets when using SSL and the bucket name contains a dot ('.').  The\n   * ssl wildcard certificate is only 1-level deep.\n   *\n   * @api private\n   */\n  populateURI: function populateURI(req) {\n    var httpRequest = req.httpRequest;\n    var b = req.params.Bucket;\n    var service = req.service;\n    var endpoint = httpRequest.endpoint;\n\n    if (b) {\n      if (!service.pathStyleBucketName(b)) {\n        if (service.config.useAccelerateEndpoint && service.isValidAccelerateOperation(req.operation)) {\n          if (service.config.useDualstack) {\n            endpoint.hostname = b + '.s3-accelerate.dualstack.amazonaws.com';\n          } else {\n            endpoint.hostname = b + '.s3-accelerate.amazonaws.com';\n          }\n        } else if (!service.config.s3BucketEndpoint) {\n          endpoint.hostname = b + '.' + endpoint.hostname;\n        }\n\n        var port = endpoint.port;\n\n        if (port !== 80 && port !== 443) {\n          endpoint.host = endpoint.hostname + ':' + endpoint.port;\n        } else {\n          endpoint.host = endpoint.hostname;\n        }\n\n        httpRequest.virtualHostedBucket = b; // needed for signing the request\n\n        service.removeVirtualHostedBucketFromPath(req);\n      }\n    }\n  },\n\n  /**\n   * Takes the bucket name out of the path if bucket is virtual-hosted\n   *\n   * @api private\n   */\n  removeVirtualHostedBucketFromPath: function removeVirtualHostedBucketFromPath(req) {\n    var httpRequest = req.httpRequest;\n    var bucket = httpRequest.virtualHostedBucket;\n\n    if (bucket && httpRequest.path) {\n      if (req.params && req.params.Key) {\n        var encodedS3Key = '/' + AWS.util.uriEscapePath(req.params.Key);\n\n        if (httpRequest.path.indexOf(encodedS3Key) === 0 && (httpRequest.path.length === encodedS3Key.length || httpRequest.path[encodedS3Key.length] === '?')) {\n          //path only contains key or path contains only key and querystring\n          return;\n        }\n      }\n\n      httpRequest.path = httpRequest.path.replace(new RegExp('/' + bucket), '');\n\n      if (httpRequest.path[0] !== '/') {\n        httpRequest.path = '/' + httpRequest.path;\n      }\n    }\n  },\n\n  /**\n   * When user supply an access point ARN in the Bucket parameter, we need to\n   * populate the URI according to the ARN.\n   * @api private\n   */\n  populateUriFromAccessPoint: function populateUriFromAccessPoint(req) {\n    if (req.service._originalConfig.endpoint) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'Custom endpoint is not compatible with access point ARN'\n      });\n    }\n\n    if (req.service.config.s3ForcePathStyle) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'Cannot construct path-style endpoint with access point'\n      });\n    }\n\n    var accessPointArn = req._parsedAccessPointArn;\n    var serviceName = req.service.config.useDualstack ? 's3-accesspoint.dualstack' : 's3-accesspoint';\n    var endpoint = req.httpRequest.endpoint;\n    var dnsSuffix = regionUtil.getEndpointSuffix(accessPointArn.region);\n    var useArnRegion = req.service.config.s3UseArnRegion;\n    endpoint.hostname = [accessPointArn.accessPoint + '-' + accessPointArn.accountId, serviceName, useArnRegion ? accessPointArn.region : req.service.config.region, dnsSuffix].join('.');\n    endpoint.host = endpoint.hostname;\n    var encodedArn = AWS.util.uriEscape(req.params.Bucket);\n    var path = req.httpRequest.path; //remove the Bucket value from path\n\n    req.httpRequest.path = path.replace(new RegExp('/' + encodedArn), '');\n\n    if (req.httpRequest.path[0] !== '/') {\n      req.httpRequest.path = '/' + req.httpRequest.path;\n    }\n\n    req.httpRequest.region = accessPointArn.region; //region used to sign\n  },\n\n  /**\n   * Adds Expect: 100-continue header if payload is greater-or-equal 1MB\n   * @api private\n   */\n  addExpect100Continue: function addExpect100Continue(req) {\n    var len = req.httpRequest.headers['Content-Length'];\n\n    if (AWS.util.isNode() && (len >= 1024 * 1024 || req.params.Body instanceof AWS.util.stream.Stream)) {\n      req.httpRequest.headers['Expect'] = '100-continue';\n    }\n  },\n\n  /**\n   * Adds a default content type if none is supplied.\n   *\n   * @api private\n   */\n  addContentType: function addContentType(req) {\n    var httpRequest = req.httpRequest;\n\n    if (httpRequest.method === 'GET' || httpRequest.method === 'HEAD') {\n      // Content-Type is not set in GET/HEAD requests\n      delete httpRequest.headers['Content-Type'];\n      return;\n    }\n\n    if (!httpRequest.headers['Content-Type']) {\n      // always have a Content-Type\n      httpRequest.headers['Content-Type'] = 'application/octet-stream';\n    }\n\n    var contentType = httpRequest.headers['Content-Type'];\n\n    if (AWS.util.isBrowser()) {\n      if (typeof httpRequest.body === 'string' && !contentType.match(/;\\s*charset=/)) {\n        var charset = '; charset=UTF-8';\n        httpRequest.headers['Content-Type'] += charset;\n      } else {\n        var replaceFn = function (_, prefix, charsetName) {\n          return prefix + charsetName.toUpperCase();\n        };\n\n        httpRequest.headers['Content-Type'] = contentType.replace(/(;\\s*charset=)(.+)$/, replaceFn);\n      }\n    }\n  },\n\n  /**\n   * @api private\n   */\n  computableChecksumOperations: {\n    putBucketCors: true,\n    putBucketLifecycle: true,\n    putBucketLifecycleConfiguration: true,\n    putBucketTagging: true,\n    deleteObjects: true,\n    putBucketReplication: true,\n    putObjectLegalHold: true,\n    putObjectRetention: true,\n    putObjectLockConfiguration: true\n  },\n\n  /**\n   * Checks whether checksums should be computed for the request.\n   * If the request requires checksums to be computed, this will always\n   * return true, otherwise it depends on whether {AWS.Config.computeChecksums}\n   * is set.\n   *\n   * @param req [AWS.Request] the request to check against\n   * @return [Boolean] whether to compute checksums for a request.\n   * @api private\n   */\n  willComputeChecksums: function willComputeChecksums(req) {\n    if (this.computableChecksumOperations[req.operation]) return true;\n    if (!this.config.computeChecksums) return false; // TODO: compute checksums for Stream objects\n\n    if (!AWS.util.Buffer.isBuffer(req.httpRequest.body) && typeof req.httpRequest.body !== 'string') {\n      return false;\n    }\n\n    var rules = req.service.api.operations[req.operation].input.members; // Sha256 signing disabled, and not a presigned url\n\n    if (req.service.shouldDisableBodySigning(req) && !Object.prototype.hasOwnProperty.call(req.httpRequest.headers, 'presigned-expires')) {\n      if (rules.ContentMD5 && !req.params.ContentMD5) {\n        return true;\n      }\n    } // V4 signer uses SHA256 signatures so only compute MD5 if it is required\n\n\n    if (req.service.getSignerClass(req) === AWS.Signers.V4) {\n      if (rules.ContentMD5 && !rules.ContentMD5.required) return false;\n    }\n\n    if (rules.ContentMD5 && !req.params.ContentMD5) return true;\n  },\n\n  /**\n   * A listener that computes the Content-MD5 and sets it in the header.\n   * @see AWS.S3.willComputeChecksums\n   * @api private\n   */\n  computeContentMd5: function computeContentMd5(req) {\n    if (req.service.willComputeChecksums(req)) {\n      var md5 = AWS.util.crypto.md5(req.httpRequest.body, 'base64');\n      req.httpRequest.headers['Content-MD5'] = md5;\n    }\n  },\n\n  /**\n   * @api private\n   */\n  computeSseCustomerKeyMd5: function computeSseCustomerKeyMd5(req) {\n    var keys = {\n      SSECustomerKey: 'x-amz-server-side-encryption-customer-key-MD5',\n      CopySourceSSECustomerKey: 'x-amz-copy-source-server-side-encryption-customer-key-MD5'\n    };\n    AWS.util.each(keys, function (key, header) {\n      if (req.params[key]) {\n        var value = AWS.util.crypto.md5(req.params[key], 'base64');\n        req.httpRequest.headers[header] = value;\n      }\n    });\n  },\n\n  /**\n   * Returns true if the bucket name should be left in the URI path for\n   * a request to S3.  This function takes into account the current\n   * endpoint protocol (e.g. http or https).\n   *\n   * @api private\n   */\n  pathStyleBucketName: function pathStyleBucketName(bucketName) {\n    // user can force path style requests via the configuration\n    if (this.config.s3ForcePathStyle) return true;\n    if (this.config.s3BucketEndpoint) return false;\n\n    if (this.isDnsCompatible(bucketName)) {\n      return this.config.sslEnabled && bucketName.match(/\\./) ? true : false;\n    } else {\n      return true; // not dns compatible names must always use path style\n    }\n  },\n\n  /**\n   * Returns true if the bucket name is DNS compatible.  Buckets created\n   * outside of the classic region MUST be DNS compatible.\n   *\n   * @api private\n   */\n  isDnsCompatible: function isDnsCompatible(bucketName) {\n    var b = bucketName;\n    var domain = new RegExp(/^[a-z0-9][a-z0-9\\.\\-]{1,61}[a-z0-9]$/);\n    var ipAddress = new RegExp(/(\\d+\\.){3}\\d+/);\n    var dots = new RegExp(/\\.\\./);\n    return b.match(domain) && !b.match(ipAddress) && !b.match(dots) ? true : false;\n  },\n\n  /**\n   * @return [Boolean] whether response contains an error\n   * @api private\n   */\n  successfulResponse: function successfulResponse(resp) {\n    var req = resp.request;\n    var httpResponse = resp.httpResponse;\n\n    if (operationsWith200StatusCodeError[req.operation] && httpResponse.body.toString().match('<Error>')) {\n      return false;\n    } else {\n      return httpResponse.statusCode < 300;\n    }\n  },\n\n  /**\n   * @return [Boolean] whether the error can be retried\n   * @api private\n   */\n  retryableError: function retryableError(error, request) {\n    if (operationsWith200StatusCodeError[request.operation] && error.statusCode === 200) {\n      return true;\n    } else if (request._requestRegionForBucket && request.service.bucketRegionCache[request._requestRegionForBucket]) {\n      return false;\n    } else if (error && error.code === 'RequestTimeout') {\n      return true;\n    } else if (error && regionRedirectErrorCodes.indexOf(error.code) != -1 && error.region && error.region != request.httpRequest.region) {\n      request.httpRequest.region = error.region;\n\n      if (error.statusCode === 301) {\n        request.service.updateReqBucketRegion(request);\n      }\n\n      return true;\n    } else {\n      var _super = AWS.Service.prototype.retryableError;\n      return _super.call(this, error, request);\n    }\n  },\n\n  /**\n   * Updates httpRequest with region. If region is not provided, then\n   * the httpRequest will be updated based on httpRequest.region\n   *\n   * @api private\n   */\n  updateReqBucketRegion: function updateReqBucketRegion(request, region) {\n    var httpRequest = request.httpRequest;\n\n    if (typeof region === 'string' && region.length) {\n      httpRequest.region = region;\n    }\n\n    if (!httpRequest.endpoint.host.match(/s3(?!-accelerate).*\\.amazonaws\\.com$/)) {\n      return;\n    }\n\n    var service = request.service;\n    var s3Config = service.config;\n    var s3BucketEndpoint = s3Config.s3BucketEndpoint;\n\n    if (s3BucketEndpoint) {\n      delete s3Config.s3BucketEndpoint;\n    }\n\n    var newConfig = AWS.util.copy(s3Config);\n    delete newConfig.endpoint;\n    newConfig.region = httpRequest.region;\n    httpRequest.endpoint = new AWS.S3(newConfig).endpoint;\n    service.populateURI(request);\n    s3Config.s3BucketEndpoint = s3BucketEndpoint;\n    httpRequest.headers.Host = httpRequest.endpoint.host;\n\n    if (request._asm.currentState === 'validate') {\n      request.removeListener('build', service.populateURI);\n      request.addListener('build', service.removeVirtualHostedBucketFromPath);\n    }\n  },\n\n  /**\n   * Provides a specialized parser for getBucketLocation -- all other\n   * operations are parsed by the super class.\n   *\n   * @api private\n   */\n  extractData: function extractData(resp) {\n    var req = resp.request;\n\n    if (req.operation === 'getBucketLocation') {\n      var match = resp.httpResponse.body.toString().match(/>(.+)<\\/Location/);\n      delete resp.data['_'];\n\n      if (match) {\n        resp.data.LocationConstraint = match[1];\n      } else {\n        resp.data.LocationConstraint = '';\n      }\n    }\n\n    var bucket = req.params.Bucket || null;\n\n    if (req.operation === 'deleteBucket' && typeof bucket === 'string' && !resp.error) {\n      req.service.clearBucketRegionCache(bucket);\n    } else {\n      var headers = resp.httpResponse.headers || {};\n      var region = headers['x-amz-bucket-region'] || null;\n\n      if (!region && req.operation === 'createBucket' && !resp.error) {\n        var createBucketConfiguration = req.params.CreateBucketConfiguration;\n\n        if (!createBucketConfiguration) {\n          region = 'us-east-1';\n        } else if (createBucketConfiguration.LocationConstraint === 'EU') {\n          region = 'eu-west-1';\n        } else {\n          region = createBucketConfiguration.LocationConstraint;\n        }\n      }\n\n      if (region) {\n        if (bucket && region !== req.service.bucketRegionCache[bucket]) {\n          req.service.bucketRegionCache[bucket] = region;\n        }\n      }\n    }\n\n    req.service.extractRequestIds(resp);\n  },\n\n  /**\n   * Extracts an error object from the http response.\n   *\n   * @api private\n   */\n  extractError: function extractError(resp) {\n    var codes = {\n      304: 'NotModified',\n      403: 'Forbidden',\n      400: 'BadRequest',\n      404: 'NotFound'\n    };\n    var req = resp.request;\n    var code = resp.httpResponse.statusCode;\n    var body = resp.httpResponse.body || '';\n    var headers = resp.httpResponse.headers || {};\n    var region = headers['x-amz-bucket-region'] || null;\n    var bucket = req.params.Bucket || null;\n    var bucketRegionCache = req.service.bucketRegionCache;\n\n    if (region && bucket && region !== bucketRegionCache[bucket]) {\n      bucketRegionCache[bucket] = region;\n    }\n\n    var cachedRegion;\n\n    if (codes[code] && body.length === 0) {\n      if (bucket && !region) {\n        cachedRegion = bucketRegionCache[bucket] || null;\n\n        if (cachedRegion !== req.httpRequest.region) {\n          region = cachedRegion;\n        }\n      }\n\n      resp.error = AWS.util.error(new Error(), {\n        code: codes[code],\n        message: null,\n        region: region\n      });\n    } else {\n      var data = new AWS.XML.Parser().parse(body.toString());\n\n      if (data.Region && !region) {\n        region = data.Region;\n\n        if (bucket && region !== bucketRegionCache[bucket]) {\n          bucketRegionCache[bucket] = region;\n        }\n      } else if (bucket && !region && !data.Region) {\n        cachedRegion = bucketRegionCache[bucket] || null;\n\n        if (cachedRegion !== req.httpRequest.region) {\n          region = cachedRegion;\n        }\n      }\n\n      resp.error = AWS.util.error(new Error(), {\n        code: data.Code || code,\n        message: data.Message || null,\n        region: region\n      });\n    }\n\n    req.service.extractRequestIds(resp);\n  },\n\n  /**\n   * If region was not obtained synchronously, then send async request\n   * to get bucket region for errors resulting from wrong region.\n   *\n   * @api private\n   */\n  requestBucketRegion: function requestBucketRegion(resp, done) {\n    var error = resp.error;\n    var req = resp.request;\n    var bucket = req.params.Bucket || null;\n\n    if (!error || !bucket || error.region || req.operation === 'listObjects' || AWS.util.isNode() && req.operation === 'headBucket' || error.statusCode === 400 && req.operation !== 'headObject' || regionRedirectErrorCodes.indexOf(error.code) === -1) {\n      return done();\n    }\n\n    var reqOperation = AWS.util.isNode() ? 'headBucket' : 'listObjects';\n    var reqParams = {\n      Bucket: bucket\n    };\n    if (reqOperation === 'listObjects') reqParams.MaxKeys = 0;\n    var regionReq = req.service[reqOperation](reqParams);\n    regionReq._requestRegionForBucket = bucket;\n    regionReq.send(function () {\n      var region = req.service.bucketRegionCache[bucket] || null;\n      error.region = region;\n      done();\n    });\n  },\n\n  /**\n  * For browser only. If NetworkingError received, will attempt to obtain\n  * the bucket region.\n  *\n  * @api private\n  */\n  reqRegionForNetworkingError: function reqRegionForNetworkingError(resp, done) {\n    if (!AWS.util.isBrowser()) {\n      return done();\n    }\n\n    var error = resp.error;\n    var request = resp.request;\n    var bucket = request.params.Bucket;\n\n    if (!error || error.code !== 'NetworkingError' || !bucket || request.httpRequest.region === 'us-east-1') {\n      return done();\n    }\n\n    var service = request.service;\n    var bucketRegionCache = service.bucketRegionCache;\n    var cachedRegion = bucketRegionCache[bucket] || null;\n\n    if (cachedRegion && cachedRegion !== request.httpRequest.region) {\n      service.updateReqBucketRegion(request, cachedRegion);\n      done();\n    } else if (!service.isDnsCompatible(bucket)) {\n      service.updateReqBucketRegion(request, 'us-east-1');\n\n      if (bucketRegionCache[bucket] !== 'us-east-1') {\n        bucketRegionCache[bucket] = 'us-east-1';\n      }\n\n      done();\n    } else if (request.httpRequest.virtualHostedBucket) {\n      var getRegionReq = service.listObjects({\n        Bucket: bucket,\n        MaxKeys: 0\n      });\n      service.updateReqBucketRegion(getRegionReq, 'us-east-1');\n      getRegionReq._requestRegionForBucket = bucket;\n      getRegionReq.send(function () {\n        var region = service.bucketRegionCache[bucket] || null;\n\n        if (region && region !== request.httpRequest.region) {\n          service.updateReqBucketRegion(request, region);\n        }\n\n        done();\n      });\n    } else {\n      // DNS-compatible path-style\n      // (s3ForcePathStyle or bucket name with dot over https)\n      // Cannot obtain region information for this case\n      done();\n    }\n  },\n\n  /**\n   * Cache for bucket region.\n   *\n   * @api private\n   */\n  bucketRegionCache: {},\n\n  /**\n   * Clears bucket region cache.\n   *\n   * @api private\n   */\n  clearBucketRegionCache: function (buckets) {\n    var bucketRegionCache = this.bucketRegionCache;\n\n    if (!buckets) {\n      buckets = Object.keys(bucketRegionCache);\n    } else if (typeof buckets === 'string') {\n      buckets = [buckets];\n    }\n\n    for (var i = 0; i < buckets.length; i++) {\n      delete bucketRegionCache[buckets[i]];\n    }\n\n    return bucketRegionCache;\n  },\n\n  /**\n   * Corrects request region if bucket's cached region is different\n   *\n   * @api private\n   */\n  correctBucketRegionFromCache: function correctBucketRegionFromCache(req) {\n    var bucket = req.params.Bucket || null;\n\n    if (bucket) {\n      var service = req.service;\n      var requestRegion = req.httpRequest.region;\n      var cachedRegion = service.bucketRegionCache[bucket];\n\n      if (cachedRegion && cachedRegion !== requestRegion) {\n        service.updateReqBucketRegion(req, cachedRegion);\n      }\n    }\n  },\n\n  /**\n   * Extracts S3 specific request ids from the http response.\n   *\n   * @api private\n   */\n  extractRequestIds: function extractRequestIds(resp) {\n    var extendedRequestId = resp.httpResponse.headers ? resp.httpResponse.headers['x-amz-id-2'] : null;\n    var cfId = resp.httpResponse.headers ? resp.httpResponse.headers['x-amz-cf-id'] : null;\n    resp.extendedRequestId = extendedRequestId;\n    resp.cfId = cfId;\n\n    if (resp.error) {\n      resp.error.requestId = resp.requestId || null;\n      resp.error.extendedRequestId = extendedRequestId;\n      resp.error.cfId = cfId;\n    }\n  },\n\n  /**\n   * Get a pre-signed URL for a given operation name.\n   *\n   * @note You must ensure that you have static or previously resolved\n   *   credentials if you call this method synchronously (with no callback),\n   *   otherwise it may not properly sign the request. If you cannot guarantee\n   *   this (you are using an asynchronous credential provider, i.e., EC2\n   *   IAM roles), you should always call this method with an asynchronous\n   *   callback.\n   * @note Not all operation parameters are supported when using pre-signed\n   *   URLs. Certain parameters, such as `SSECustomerKey`, `ACL`, `Expires`,\n   *   `ContentLength`, or `Tagging` must be provided as headers when sending a\n   *   request. If you are using pre-signed URLs to upload from a browser and\n   *   need to use these fields, see {createPresignedPost}.\n   * @note The default signer allows altering the request by adding corresponding\n   *   headers to set some parameters (e.g. Range) and these added parameters\n   *   won't be signed. You must use signatureVersion v4 to to include these\n   *   parameters in the signed portion of the URL and enforce exact matching\n   *   between headers and signed params in the URL.\n   * @note This operation cannot be used with a promise. See note above regarding\n   *   asynchronous credentials and use with a callback.\n   * @param operation [String] the name of the operation to call\n   * @param params [map] parameters to pass to the operation. See the given\n   *   operation for the expected operation parameters. In addition, you can\n   *   also pass the \"Expires\" parameter to inform S3 how long the URL should\n   *   work for.\n   * @option params Expires [Integer] (900) the number of seconds to expire\n   *   the pre-signed URL operation in. Defaults to 15 minutes.\n   * @param callback [Function] if a callback is provided, this function will\n   *   pass the URL as the second parameter (after the error parameter) to\n   *   the callback function.\n   * @return [String] if called synchronously (with no callback), returns the\n   *   signed URL.\n   * @return [null] nothing is returned if a callback is provided.\n   * @example Pre-signing a getObject operation (synchronously)\n   *   var params = {Bucket: 'bucket', Key: 'key'};\n   *   var url = s3.getSignedUrl('getObject', params);\n   *   console.log('The URL is', url);\n   * @example Pre-signing a putObject (asynchronously)\n   *   var params = {Bucket: 'bucket', Key: 'key'};\n   *   s3.getSignedUrl('putObject', params, function (err, url) {\n   *     console.log('The URL is', url);\n   *   });\n   * @example Pre-signing a putObject operation with a specific payload\n   *   var params = {Bucket: 'bucket', Key: 'key', Body: 'body'};\n   *   var url = s3.getSignedUrl('putObject', params);\n   *   console.log('The URL is', url);\n   * @example Passing in a 1-minute expiry time for a pre-signed URL\n   *   var params = {Bucket: 'bucket', Key: 'key', Expires: 60};\n   *   var url = s3.getSignedUrl('getObject', params);\n   *   console.log('The URL is', url); // expires in 60 seconds\n   */\n  getSignedUrl: function getSignedUrl(operation, params, callback) {\n    params = AWS.util.copy(params || {});\n    var expires = params.Expires || 900;\n\n    if (typeof expires !== 'number') {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidParameterException',\n        message: 'The expiration must be a number, received ' + typeof expires\n      });\n    }\n\n    delete params.Expires; // we can't validate this\n\n    var request = this.makeRequest(operation, params);\n\n    if (callback) {\n      AWS.util.defer(function () {\n        request.presign(expires, callback);\n      });\n    } else {\n      return request.presign(expires, callback);\n    }\n  },\n\n  /**\n   * @!method  getSignedUrlPromise()\n   *   Returns a 'thenable' promise that will be resolved with a pre-signed URL\n   *   for a given operation name.\n   *\n   *   Two callbacks can be provided to the `then` method on the returned promise.\n   *   The first callback will be called if the promise is fulfilled, and the second\n   *   callback will be called if the promise is rejected.\n   *   @note Not all operation parameters are supported when using pre-signed\n   *      URLs. Certain parameters, such as `SSECustomerKey`, `ACL`, `Expires`,\n   *      `ContentLength`, or `Tagging` must be provided as headers when sending a\n   *      request. If you are using pre-signed URLs to upload from a browser and\n   *      need to use these fields, see {createPresignedPost}.\n   *   @param operation [String] the name of the operation to call\n   *   @param params [map] parameters to pass to the operation. See the given\n   *      operation for the expected operation parameters. In addition, you can\n   *      also pass the \"Expires\" parameter to inform S3 how long the URL should\n   *      work for.\n   *   @option params Expires [Integer] (900) the number of seconds to expire\n   *      the pre-signed URL operation in. Defaults to 15 minutes.\n   *   @callback fulfilledCallback function(url)\n   *     Called if the promise is fulfilled.\n   *     @param url [String] the signed url\n   *   @callback rejectedCallback function(err)\n   *     Called if the promise is rejected.\n   *     @param err [Error] if an error occurred, this value will be filled\n   *   @return [Promise] A promise that represents the state of the `refresh` call.\n   *   @example Pre-signing a getObject operation\n   *      var params = {Bucket: 'bucket', Key: 'key'};\n   *      var promise = s3.getSignedUrlPromise('getObject', params);\n   *      promise.then(function(url) {\n   *        console.log('The URL is', url);\n   *      }, function(err) { ... });\n   *   @example Pre-signing a putObject operation with a specific payload\n   *      var params = {Bucket: 'bucket', Key: 'key', Body: 'body'};\n   *      var promise = s3.getSignedUrlPromise('putObject', params);\n   *      promise.then(function(url) {\n   *        console.log('The URL is', url);\n   *      }, function(err) { ... });\n   *   @example Passing in a 1-minute expiry time for a pre-signed URL\n   *      var params = {Bucket: 'bucket', Key: 'key', Expires: 60};\n   *      var promise = s3.getSignedUrlPromise('getObject', params);\n   *      promise.then(function(url) {\n   *        console.log('The URL is', url);\n   *      }, function(err) { ... });\n   */\n\n  /**\n   * Get a pre-signed POST policy to support uploading to S3 directly from an\n   * HTML form.\n   *\n   * @param params [map]\n   * @option params Bucket [String]     The bucket to which the post should be\n   *                                    uploaded\n   * @option params Expires [Integer]   (3600) The number of seconds for which\n   *                                    the presigned policy should be valid.\n   * @option params Conditions [Array]  An array of conditions that must be met\n   *                                    for the presigned policy to allow the\n   *                                    upload. This can include required tags,\n   *                                    the accepted range for content lengths,\n   *                                    etc.\n   * @see http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-HTTPPOSTConstructPolicy.html\n   * @option params Fields [map]        Fields to include in the form. All\n   *                                    values passed in as fields will be\n   *                                    signed as exact match conditions.\n   * @param callback [Function]\n   *\n   * @note All fields passed in when creating presigned post data will be signed\n   *   as exact match conditions. Any fields that will be interpolated by S3\n   *   must be added to the fields hash after signing, and an appropriate\n   *   condition for such fields must be explicitly added to the Conditions\n   *   array passed to this function before signing.\n   *\n   * @example Presiging post data with a known key\n   *   var params = {\n   *     Bucket: 'bucket',\n   *     Fields: {\n   *       key: 'key'\n   *     }\n   *   };\n   *   s3.createPresignedPost(params, function(err, data) {\n   *     if (err) {\n   *       console.error('Presigning post data encountered an error', err);\n   *     } else {\n   *       console.log('The post data is', data);\n   *     }\n   *   });\n   *\n   * @example Presigning post data with an interpolated key\n   *   var params = {\n   *     Bucket: 'bucket',\n   *     Conditions: [\n   *       ['starts-with', '$key', 'path/to/uploads/']\n   *     ]\n   *   };\n   *   s3.createPresignedPost(params, function(err, data) {\n   *     if (err) {\n   *       console.error('Presigning post data encountered an error', err);\n   *     } else {\n   *       data.Fields.key = 'path/to/uploads/${filename}';\n   *       console.log('The post data is', data);\n   *     }\n   *   });\n   *\n   * @note You must ensure that you have static or previously resolved\n   *   credentials if you call this method synchronously (with no callback),\n   *   otherwise it may not properly sign the request. If you cannot guarantee\n   *   this (you are using an asynchronous credential provider, i.e., EC2\n   *   IAM roles), you should always call this method with an asynchronous\n   *   callback.\n   *\n   * @return [map]  If called synchronously (with no callback), returns a hash\n   *                with the url to set as the form action and a hash of fields\n   *                to include in the form.\n   * @return [null] Nothing is returned if a callback is provided.\n   *\n   * @callback callback function (err, data)\n   *  @param err [Error] the error object returned from the policy signer\n   *  @param data [map] The data necessary to construct an HTML form\n   *  @param data.url [String] The URL to use as the action of the form\n   *  @param data.fields [map] A hash of fields that must be included in the\n   *                           form for the upload to succeed. This hash will\n   *                           include the signed POST policy, your access key\n   *                           ID and security token (if present), etc. These\n   *                           may be safely included as input elements of type\n   *                           'hidden.'\n   */\n  createPresignedPost: function createPresignedPost(params, callback) {\n    if (typeof params === 'function' && callback === undefined) {\n      callback = params;\n      params = null;\n    }\n\n    params = AWS.util.copy(params || {});\n    var boundParams = this.config.params || {};\n    var bucket = params.Bucket || boundParams.Bucket,\n        self = this,\n        config = this.config,\n        endpoint = AWS.util.copy(this.endpoint);\n\n    if (!config.s3BucketEndpoint) {\n      endpoint.pathname = '/' + bucket;\n    }\n\n    function finalizePost() {\n      return {\n        url: AWS.util.urlFormat(endpoint),\n        fields: self.preparePostFields(config.credentials, config.region, bucket, params.Fields, params.Conditions, params.Expires)\n      };\n    }\n\n    if (callback) {\n      config.getCredentials(function (err) {\n        if (err) {\n          callback(err);\n        }\n\n        callback(null, finalizePost());\n      });\n    } else {\n      return finalizePost();\n    }\n  },\n\n  /**\n   * @api private\n   */\n  preparePostFields: function preparePostFields(credentials, region, bucket, fields, conditions, expiresInSeconds) {\n    var now = this.getSkewCorrectedDate();\n\n    if (!credentials || !region || !bucket) {\n      throw new Error('Unable to create a POST object policy without a bucket,' + ' region, and credentials');\n    }\n\n    fields = AWS.util.copy(fields || {});\n    conditions = (conditions || []).slice(0);\n    expiresInSeconds = expiresInSeconds || 3600;\n    var signingDate = AWS.util.date.iso8601(now).replace(/[:\\-]|\\.\\d{3}/g, '');\n    var shortDate = signingDate.substr(0, 8);\n    var scope = v4Credentials.createScope(shortDate, region, 's3');\n    var credential = credentials.accessKeyId + '/' + scope;\n    fields['bucket'] = bucket;\n    fields['X-Amz-Algorithm'] = 'AWS4-HMAC-SHA256';\n    fields['X-Amz-Credential'] = credential;\n    fields['X-Amz-Date'] = signingDate;\n\n    if (credentials.sessionToken) {\n      fields['X-Amz-Security-Token'] = credentials.sessionToken;\n    }\n\n    for (var field in fields) {\n      if (fields.hasOwnProperty(field)) {\n        var condition = {};\n        condition[field] = fields[field];\n        conditions.push(condition);\n      }\n    }\n\n    fields.Policy = this.preparePostPolicy(new Date(now.valueOf() + expiresInSeconds * 1000), conditions);\n    fields['X-Amz-Signature'] = AWS.util.crypto.hmac(v4Credentials.getSigningKey(credentials, shortDate, region, 's3', true), fields.Policy, 'hex');\n    return fields;\n  },\n\n  /**\n   * @api private\n   */\n  preparePostPolicy: function preparePostPolicy(expiration, conditions) {\n    return AWS.util.base64.encode(JSON.stringify({\n      expiration: AWS.util.date.iso8601(expiration),\n      conditions: conditions\n    }));\n  },\n\n  /**\n   * @api private\n   */\n  prepareSignedUrl: function prepareSignedUrl(request) {\n    request.addListener('validate', request.service.noPresignedContentLength);\n    request.removeListener('build', request.service.addContentType);\n\n    if (!request.params.Body) {\n      // no Content-MD5/SHA-256 if body is not provided\n      request.removeListener('build', request.service.computeContentMd5);\n    } else {\n      request.addListener('afterBuild', AWS.EventListeners.Core.COMPUTE_SHA256);\n    }\n  },\n\n  /**\n   * @api private\n   * @param request\n   */\n  disableBodySigning: function disableBodySigning(request) {\n    var headers = request.httpRequest.headers; // Add the header to anything that isn't a presigned url, unless that presigned url had a body defined\n\n    if (!Object.prototype.hasOwnProperty.call(headers, 'presigned-expires')) {\n      headers['X-Amz-Content-Sha256'] = 'UNSIGNED-PAYLOAD';\n    }\n  },\n\n  /**\n   * @api private\n   */\n  noPresignedContentLength: function noPresignedContentLength(request) {\n    if (request.params.ContentLength !== undefined) {\n      throw AWS.util.error(new Error(), {\n        code: 'UnexpectedParameter',\n        message: 'ContentLength is not supported in pre-signed URLs.'\n      });\n    }\n  },\n  createBucket: function createBucket(params, callback) {\n    // When creating a bucket *outside* the classic region, the location\n    // constraint must be set for the bucket and it must match the endpoint.\n    // This chunk of code will set the location constraint param based\n    // on the region (when possible), but it will not override a passed-in\n    // location constraint.\n    if (typeof params === 'function' || !params) {\n      callback = callback || params;\n      params = {};\n    }\n\n    var hostname = this.endpoint.hostname;\n\n    if (hostname !== this.api.globalEndpoint && !params.CreateBucketConfiguration) {\n      params.CreateBucketConfiguration = {\n        LocationConstraint: this.config.region\n      };\n    }\n\n    return this.makeRequest('createBucket', params, callback);\n  },\n\n  /**\n   * @see AWS.S3.ManagedUpload\n   * @overload upload(params = {}, [options], [callback])\n   *   Uploads an arbitrarily sized buffer, blob, or stream, using intelligent\n   *   concurrent handling of parts if the payload is large enough. You can\n   *   configure the concurrent queue size by setting `options`. Note that this\n   *   is the only operation for which the SDK can retry requests with stream\n   *   bodies.\n   *\n   *   @param (see AWS.S3.putObject)\n   *   @option (see AWS.S3.ManagedUpload.constructor)\n   *   @return [AWS.S3.ManagedUpload] the managed upload object that can call\n   *     `send()` or track progress.\n   *   @example Uploading a stream object\n   *     var params = {Bucket: 'bucket', Key: 'key', Body: stream};\n   *     s3.upload(params, function(err, data) {\n   *       console.log(err, data);\n   *     });\n   *   @example Uploading a stream with concurrency of 1 and partSize of 10mb\n   *     var params = {Bucket: 'bucket', Key: 'key', Body: stream};\n   *     var options = {partSize: 10 * 1024 * 1024, queueSize: 1};\n   *     s3.upload(params, options, function(err, data) {\n   *       console.log(err, data);\n   *     });\n   * @callback callback function(err, data)\n   *   @param err [Error] an error or null if no error occurred.\n   *   @param data [map] The response data from the successful upload:\n   *   @param data.Location [String] the URL of the uploaded object\n   *   @param data.ETag [String] the ETag of the uploaded object\n   *   @param data.Bucket [String]  the bucket to which the object was uploaded\n   *   @param data.Key [String] the key to which the object was uploaded\n   */\n  upload: function upload(params, options, callback) {\n    if (typeof options === 'function' && callback === undefined) {\n      callback = options;\n      options = null;\n    }\n\n    options = options || {};\n    options = AWS.util.merge(options || {}, {\n      service: this,\n      params: params\n    });\n    var uploader = new AWS.S3.ManagedUpload(options);\n    if (typeof callback === 'function') uploader.send(callback);\n    return uploader;\n  }\n});\n/**\n * @api private\n */\n\nAWS.S3.addPromisesToClass = function addPromisesToClass(PromiseDependency) {\n  this.prototype.getSignedUrlPromise = AWS.util.promisifyMethod('getSignedUrl', PromiseDependency);\n};\n/**\n * @api private\n */\n\n\nAWS.S3.deletePromisesFromClass = function deletePromisesFromClass() {\n  delete this.prototype.getSignedUrlPromise;\n};\n\nAWS.util.addPromises(AWS.S3);","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/aws-sdk/lib/services/s3.js"],"names":["AWS","require","v4Credentials","resolveRegionalEndpointsFlag","regionUtil","operationsWith200StatusCodeError","regionRedirectErrorCodes","util","update","S3","prototype","getSignatureVersion","request","defaultApiVersion","api","signatureVersion","userDefinedVersion","_originalConfig","regionDefinedVersion","config","isPresigned","getSignerClass","Signers","RequestSigner","getVersion","validateService","msg","messages","region","endpoint","s3BucketEndpoint","push","length","join","error","Error","name","message","shouldDisableBodySigning","signerClass","s3DisableBodySigning","V4","httpRequest","protocol","setupRequestListeners","prependListener","addListener","validateScheme","validateBucketName","optInUsEast1RegionalEndpoint","removeListener","EventListeners","Core","VALIDATE_REGION","addContentType","computeContentMd5","computeSseCustomerKeyMd5","populateURI","addExpect100Continue","extractError","hoistPayloadMember","extractData","prepareSignedUrl","COMPUTE_SHA256","disableBodySigning","isAccessPointApplicable","validateAccessPointArn","validateArnRegion","populateUriFromAccessPoint","validateBucketEndpoint","correctBucketRegionFromCache","onAsync","requestBucketRegion","isBrowser","reqRegionForNetworkingError","req","params","scheme","sensitive","SSECustomerKey","CopySourceSSECustomerKey","code","Bucket","service","hasBucketInParams","inputShape","operations","operation","input","inputMembers","members","ARN","validate","parsedArn","parse","_parsedAccessPointArn","resource","indexOf","delimiter","split","accessPoint","accessPointPrefix","accountId","isDnsCompatible","match","useArnRegion","loadUseArnRegionConfig","regionFromArn","clientRegion","getEndpointSuffix","useAccelerateEndpoint","envName","configName","originalConfig","s3UseArnRegion","undefined","isNode","process","env","value","trim","toLowerCase","retryable","profiles","profile","getProfilesFromSharedConfig","iniLoader","AWS_PROFILE","defaultProfile","e","bucket","key","Key","slashIndex","copy","prefix","substr","isValidAccelerateOperation","invalidOperations","s3UsEast1RegionalEndpoint","sharedConfig","clientConfig","hostname","insertPoint","regionalEndpoint","substring","updateEndpoint","b","pathStyleBucketName","useDualstack","port","host","virtualHostedBucket","removeVirtualHostedBucketFromPath","path","encodedS3Key","uriEscapePath","replace","RegExp","s3ForcePathStyle","accessPointArn","serviceName","dnsSuffix","encodedArn","uriEscape","len","headers","Body","stream","Stream","method","contentType","body","charset","replaceFn","_","charsetName","toUpperCase","computableChecksumOperations","putBucketCors","putBucketLifecycle","putBucketLifecycleConfiguration","putBucketTagging","deleteObjects","putBucketReplication","putObjectLegalHold","putObjectRetention","putObjectLockConfiguration","willComputeChecksums","computeChecksums","Buffer","isBuffer","rules","Object","hasOwnProperty","call","ContentMD5","required","md5","crypto","keys","each","header","bucketName","sslEnabled","domain","ipAddress","dots","successfulResponse","resp","httpResponse","toString","statusCode","retryableError","_requestRegionForBucket","bucketRegionCache","updateReqBucketRegion","_super","Service","s3Config","newConfig","Host","_asm","currentState","data","LocationConstraint","clearBucketRegionCache","createBucketConfiguration","CreateBucketConfiguration","extractRequestIds","codes","cachedRegion","XML","Parser","Region","Code","Message","done","reqOperation","reqParams","MaxKeys","regionReq","send","getRegionReq","listObjects","buckets","i","requestRegion","extendedRequestId","cfId","requestId","getSignedUrl","callback","expires","Expires","makeRequest","defer","presign","createPresignedPost","boundParams","self","pathname","finalizePost","url","urlFormat","fields","preparePostFields","credentials","Fields","Conditions","getCredentials","err","conditions","expiresInSeconds","now","getSkewCorrectedDate","slice","signingDate","date","iso8601","shortDate","scope","createScope","credential","accessKeyId","sessionToken","field","condition","Policy","preparePostPolicy","Date","valueOf","hmac","getSigningKey","expiration","base64","encode","JSON","stringify","noPresignedContentLength","ContentLength","createBucket","globalEndpoint","upload","options","merge","uploader","ManagedUpload","addPromisesToClass","PromiseDependency","getSignedUrlPromise","promisifyMethod","deletePromisesFromClass","addPromises"],"mappings":"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","sourcesContent":["var AWS = require('../core');\nvar v4Credentials = require('../signers/v4_credentials');\nvar resolveRegionalEndpointsFlag = require('../config_regional_endpoint');\nvar regionUtil = require('../region_config');\n\n// Pull in managed upload extension\nrequire('../s3/managed_upload');\n\n/**\n * @api private\n */\nvar operationsWith200StatusCodeError = {\n  'completeMultipartUpload': true,\n  'copyObject': true,\n  'uploadPartCopy': true\n};\n\n/**\n * @api private\n */\n var regionRedirectErrorCodes = [\n  'AuthorizationHeaderMalformed', // non-head operations on virtual-hosted global bucket endpoints\n  'BadRequest', // head operations on virtual-hosted global bucket endpoints\n  'PermanentRedirect', // non-head operations on path-style or regional endpoints\n  301 // head operations on path-style or regional endpoints\n ];\n\nAWS.util.update(AWS.S3.prototype, {\n  /**\n   * @api private\n   */\n  getSignatureVersion: function getSignatureVersion(request) {\n    var defaultApiVersion = this.api.signatureVersion;\n    var userDefinedVersion = this._originalConfig ? this._originalConfig.signatureVersion : null;\n    var regionDefinedVersion = this.config.signatureVersion;\n    var isPresigned = request ? request.isPresigned() : false;\n    /*\n      1) User defined version specified:\n        a) always return user defined version\n      2) No user defined version specified:\n        a) default to lowest version the region supports\n        b) If using presigned urls, default to lowest version the region supports\n    */\n    if (userDefinedVersion) {\n      userDefinedVersion = userDefinedVersion === 'v2' ? 's3' : userDefinedVersion;\n      return userDefinedVersion;\n    }\n    if (isPresigned !== true) {\n      defaultApiVersion = 'v4';\n    } else if (regionDefinedVersion) {\n      defaultApiVersion = regionDefinedVersion;\n    }\n    return defaultApiVersion;\n  },\n\n  /**\n   * @api private\n   */\n  getSignerClass: function getSignerClass(request) {\n    var signatureVersion = this.getSignatureVersion(request);\n    return AWS.Signers.RequestSigner.getVersion(signatureVersion);\n  },\n\n  /**\n   * @api private\n   */\n  validateService: function validateService() {\n    var msg;\n    var messages = [];\n\n    // default to us-east-1 when no region is provided\n    if (!this.config.region) this.config.region = 'us-east-1';\n\n    if (!this.config.endpoint && this.config.s3BucketEndpoint) {\n      messages.push('An endpoint must be provided when configuring ' +\n                    '`s3BucketEndpoint` to true.');\n    }\n    if (messages.length === 1) {\n      msg = messages[0];\n    } else if (messages.length > 1) {\n      msg = 'Multiple configuration errors:\\n' + messages.join('\\n');\n    }\n    if (msg) {\n      throw AWS.util.error(new Error(),\n        {name: 'InvalidEndpoint', message: msg});\n    }\n  },\n\n  /**\n   * @api private\n   */\n  shouldDisableBodySigning: function shouldDisableBodySigning(request) {\n    var signerClass = this.getSignerClass();\n    if (this.config.s3DisableBodySigning === true && signerClass === AWS.Signers.V4\n        && request.httpRequest.endpoint.protocol === 'https:') {\n      return true;\n    }\n    return false;\n  },\n\n  /**\n   * @api private\n   */\n  setupRequestListeners: function setupRequestListeners(request) {\n    var prependListener = true;\n    request.addListener('validate', this.validateScheme);\n    request.addListener('validate', this.validateBucketName, prependListener);\n    request.addListener('validate', this.optInUsEast1RegionalEndpoint, prependListener);\n\n    request.removeListener('validate',\n      AWS.EventListeners.Core.VALIDATE_REGION);\n    request.addListener('build', this.addContentType);\n    request.addListener('build', this.computeContentMd5);\n    request.addListener('build', this.computeSseCustomerKeyMd5);\n    request.addListener('build', this.populateURI);\n    request.addListener('afterBuild', this.addExpect100Continue);\n    request.addListener('extractError', this.extractError);\n    request.addListener('extractData', AWS.util.hoistPayloadMember);\n    request.addListener('extractData', this.extractData);\n    request.addListener('beforePresign', this.prepareSignedUrl);\n    if (this.shouldDisableBodySigning(request))  {\n      request.removeListener('afterBuild', AWS.EventListeners.Core.COMPUTE_SHA256);\n      request.addListener('afterBuild', this.disableBodySigning);\n    }\n    //deal with ARNs supplied to Bucket\n    if (this.isAccessPointApplicable(request)) {\n      request.removeListener('validate', this.validateBucketName);\n      request.addListener('validate', this.validateAccessPointArn, prependListener);\n      request.addListener('validate', this.validateArnRegion);\n      request.removeListener('build', this.populateURI);\n      request.addListener('build', this.populateUriFromAccessPoint);\n      return;\n    }\n    //listeners regarding region inference\n    request.addListener('validate', this.validateBucketEndpoint);\n    request.addListener('validate', this.correctBucketRegionFromCache);\n    request.onAsync('extractError', this.requestBucketRegion);\n    if (AWS.util.isBrowser()) {\n      request.onAsync('retry', this.reqRegionForNetworkingError);\n    }\n  },\n\n  /**\n   * @api private\n   */\n  validateScheme: function(req) {\n    var params = req.params,\n        scheme = req.httpRequest.endpoint.protocol,\n        sensitive = params.SSECustomerKey || params.CopySourceSSECustomerKey;\n    if (sensitive && scheme !== 'https:') {\n      var msg = 'Cannot send SSE keys over HTTP. Set \\'sslEnabled\\'' +\n        'to \\'true\\' in your configuration';\n      throw AWS.util.error(new Error(),\n        { code: 'ConfigError', message: msg });\n    }\n  },\n\n  /**\n   * @api private\n   */\n  validateBucketEndpoint: function(req) {\n    if (!req.params.Bucket && req.service.config.s3BucketEndpoint) {\n      var msg = 'Cannot send requests to root API with `s3BucketEndpoint` set.';\n      throw AWS.util.error(new Error(),\n        { code: 'ConfigError', message: msg });\n    }\n  },\n\n  /**\n   * @api private\n   */\n  isAccessPointApplicable: function hasBucketInParams(req) {\n    var inputShape = (req.service.api.operations[req.operation] || {}).input || {};\n    var inputMembers = inputShape.members || {};\n    if (\n      req.operation === 'createBucket' ||\n      !req.params.Bucket ||\n      !inputMembers.Bucket\n    ) return false;\n    if (!AWS.util.ARN.validate(req.params.Bucket)) return false;\n    return true;\n  },\n\n  /**\n   * Validate ARN supplied in Bucket parameter is a valid access point ARN\n   *\n   * @api private\n   */\n  validateAccessPointArn: function validateAccessPointArn(req) {\n    var parsedArn = AWS.util.ARN.parse(req.params.Bucket);\n    //avoid duplicated parsing in the future\n    req._parsedAccessPointArn = parsedArn;\n    var parsedArn = req._parsedAccessPointArn;\n    if (parsedArn.service !== 's3') {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidAccessPointARN',\n        message: 'expect \\'s3\\' in access point ARN service component'\n      });\n    }\n    if (!parsedArn.region) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidAccessPointARN',\n        message: 'Access point ARN region is empty'\n      });\n    }\n    if (\n      parsedArn.resource.indexOf('accesspoint:') !== 0 &&\n      parsedArn.resource.indexOf('accesspoint/') !== 0\n    ) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidAccessPointARN',\n        message: 'Access point ARN resource should begin with \\'accesspoint/\\''\n      });\n    }\n    var delimiter = parsedArn.resource['accesspoint'.length]; //can be ':' or '/'\n    if (parsedArn.resource.split(delimiter).length !== 2) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidAccessPointARN',\n        message: 'Too many resource parameters in access point ARN'\n      });\n    }\n    var accessPoint = parsedArn.resource.split(delimiter)[1];\n    var accessPointPrefix = accessPoint + '-' + parsedArn.accountId;\n    if (!req.service.isDnsCompatible(accessPointPrefix) || accessPointPrefix.match(/\\./)) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidAccessPointARN',\n        message: 'Access point ARN is not DNS compatible. Got ' + accessPoint\n      });\n    }\n    //set parsed valid access point\n    req._parsedAccessPointArn.accessPoint = accessPoint;\n  },\n\n  /**\n   * @api private\n   */\n  validateArnRegion: function validateArnRegion(req) {\n    var useArnRegion = req.service.loadUseArnRegionConfig(req);\n    var regionFromArn = req._parsedAccessPointArn.region;\n    var clientRegion = req.service.config.region;\n    if (\n      clientRegion.indexOf('fips') >= 0 ||\n      regionFromArn.indexOf('fips') >= 0\n    ) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'Access point endpoint is not compatible with FIPS region'\n      });\n    }\n    if (!useArnRegion && regionFromArn !== clientRegion) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'Configured region conflicts with access point region'\n      });\n    } else if (\n      useArnRegion &&\n      regionUtil.getEndpointSuffix(regionFromArn) !== regionUtil.getEndpointSuffix(clientRegion)\n    ) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'Configured region and access point region not in same partition'\n      });\n    }\n    if (req.service.config.useAccelerateEndpoint) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'useAccelerateEndpoint config is not supported with access point ARN'\n      });\n    }\n  },\n\n  /**\n   * @api private\n   */\n  loadUseArnRegionConfig: function loadUseArnRegionConfig(req) {\n    var envName = 'AWS_S3_USE_ARN_REGION';\n    var configName = 's3_use_arn_region';\n    var useArnRegion = true;\n    var originalConfig = req.service._originalConfig || {};\n    if (req.service.config.s3UseArnRegion !== undefined) {\n      return req.service.config.s3UseArnRegion;\n    } else if (originalConfig.s3UseArnRegion !== undefined) {\n      useArnRegion = originalConfig.s3UseArnRegion === true;\n    } else if (AWS.util.isNode()) {\n      //load from environmental variable AWS_USE_ARN_REGION\n      if (process.env[envName]) {\n        var value = process.env[envName].trim().toLowerCase();\n        if (['false', 'true'].indexOf(value) < 0) {\n          throw AWS.util.error(new Error(), {\n            code: 'InvalidConfiguration',\n            message: envName + ' only accepts true or false. Got ' + process.env[envName],\n            retryable: false\n          });\n        }\n        useArnRegion = value === 'true';\n      } else {  //load from shared config property use_arn_region\n        var profiles = {};\n        var profile = {};\n        try {\n          profiles = AWS.util.getProfilesFromSharedConfig(AWS.util.iniLoader);\n          profile = profiles[process.env.AWS_PROFILE || AWS.util.defaultProfile];\n        } catch (e) {}\n        if (profile[configName]) {\n          if (['false', 'true'].indexOf(profile[configName].trim().toLowerCase()) < 0) {\n            throw AWS.util.error(new Error(), {\n              code: 'InvalidConfiguration',\n              message: configName + ' only accepts true or false. Got ' + profile[configName],\n              retryable: false\n            });\n          }\n          useArnRegion = profile[configName].trim().toLowerCase() === 'true';\n        }\n      }\n    }\n    req.service.config.s3UseArnRegion = useArnRegion;\n    return useArnRegion;\n  },\n\n  /**\n   * @api private\n   */\n  validateBucketName: function validateBucketName(req) {\n    var service = req.service;\n    var signatureVersion = service.getSignatureVersion(req);\n    var bucket = req.params && req.params.Bucket;\n    var key = req.params && req.params.Key;\n    var slashIndex = bucket && bucket.indexOf('/');\n    if (bucket && slashIndex >= 0) {\n      if (typeof key === 'string' && slashIndex > 0) {\n        req.params = AWS.util.copy(req.params);\n        // Need to include trailing slash to match sigv2 behavior\n        var prefix = bucket.substr(slashIndex + 1) || '';\n        req.params.Key = prefix + '/' + key;\n        req.params.Bucket = bucket.substr(0, slashIndex);\n      } else if (signatureVersion === 'v4') {\n        var msg = 'Bucket names cannot contain forward slashes. Bucket: ' + bucket;\n        throw AWS.util.error(new Error(),\n          { code: 'InvalidBucket', message: msg });\n      }\n    }\n  },\n\n  /**\n   * @api private\n   */\n  isValidAccelerateOperation: function isValidAccelerateOperation(operation) {\n    var invalidOperations = [\n      'createBucket',\n      'deleteBucket',\n      'listBuckets'\n    ];\n    return invalidOperations.indexOf(operation) === -1;\n  },\n\n  /**\n   * When us-east-1 region endpoint configuration is set, in stead of sending request to\n   * global endpoint(e.g. 's3.amazonaws.com'), we will send request to\n   * 's3.us-east-1.amazonaws.com'.\n   * @api private\n   */\n  optInUsEast1RegionalEndpoint: function optInUsEast1RegionalEndpoint(req) {\n    var service = req.service;\n    var config = service.config;\n    config.s3UsEast1RegionalEndpoint = resolveRegionalEndpointsFlag(service._originalConfig, {\n      env: 'AWS_S3_US_EAST_1_REGIONAL_ENDPOINT',\n      sharedConfig: 's3_us_east_1_regional_endpoint',\n      clientConfig: 's3UsEast1RegionalEndpoint'\n    });\n    if (\n      !(service._originalConfig || {}).endpoint &&\n      req.httpRequest.region === 'us-east-1' &&\n      config.s3UsEast1RegionalEndpoint === 'regional' &&\n      req.httpRequest.endpoint.hostname.indexOf('s3.amazonaws.com') >= 0\n    ) {\n      var insertPoint = config.endpoint.indexOf('.amazonaws.com');\n      regionalEndpoint = config.endpoint.substring(0, insertPoint) +\n        '.us-east-1' + config.endpoint.substring(insertPoint);\n      req.httpRequest.updateEndpoint(regionalEndpoint);\n    }\n  },\n\n  /**\n   * S3 prefers dns-compatible bucket names to be moved from the uri path\n   * to the hostname as a sub-domain.  This is not possible, even for dns-compat\n   * buckets when using SSL and the bucket name contains a dot ('.').  The\n   * ssl wildcard certificate is only 1-level deep.\n   *\n   * @api private\n   */\n  populateURI: function populateURI(req) {\n    var httpRequest = req.httpRequest;\n    var b = req.params.Bucket;\n    var service = req.service;\n    var endpoint = httpRequest.endpoint;\n    if (b) {\n      if (!service.pathStyleBucketName(b)) {\n        if (service.config.useAccelerateEndpoint && service.isValidAccelerateOperation(req.operation)) {\n          if (service.config.useDualstack) {\n            endpoint.hostname = b + '.s3-accelerate.dualstack.amazonaws.com';\n          } else {\n            endpoint.hostname = b + '.s3-accelerate.amazonaws.com';\n          }\n        } else if (!service.config.s3BucketEndpoint) {\n          endpoint.hostname =\n            b + '.' + endpoint.hostname;\n        }\n\n        var port = endpoint.port;\n        if (port !== 80 && port !== 443) {\n          endpoint.host = endpoint.hostname + ':' +\n            endpoint.port;\n        } else {\n          endpoint.host = endpoint.hostname;\n        }\n\n        httpRequest.virtualHostedBucket = b; // needed for signing the request\n        service.removeVirtualHostedBucketFromPath(req);\n      }\n    }\n  },\n\n  /**\n   * Takes the bucket name out of the path if bucket is virtual-hosted\n   *\n   * @api private\n   */\n  removeVirtualHostedBucketFromPath: function removeVirtualHostedBucketFromPath(req) {\n    var httpRequest = req.httpRequest;\n    var bucket = httpRequest.virtualHostedBucket;\n    if (bucket && httpRequest.path) {\n      if (req.params && req.params.Key) {\n        var encodedS3Key = '/' + AWS.util.uriEscapePath(req.params.Key);\n        if (httpRequest.path.indexOf(encodedS3Key) === 0 && (httpRequest.path.length === encodedS3Key.length || httpRequest.path[encodedS3Key.length] === '?')) {\n          //path only contains key or path contains only key and querystring\n          return;\n        }\n      }\n      httpRequest.path = httpRequest.path.replace(new RegExp('/' + bucket), '');\n      if (httpRequest.path[0] !== '/') {\n        httpRequest.path = '/' + httpRequest.path;\n      }\n    }\n  },\n\n  /**\n   * When user supply an access point ARN in the Bucket parameter, we need to\n   * populate the URI according to the ARN.\n   * @api private\n   */\n  populateUriFromAccessPoint: function populateUriFromAccessPoint(req) {\n    if (req.service._originalConfig.endpoint) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'Custom endpoint is not compatible with access point ARN'\n      });\n    }\n    if (req.service.config.s3ForcePathStyle) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'Cannot construct path-style endpoint with access point'\n      });\n    }\n    var accessPointArn = req._parsedAccessPointArn;\n    var serviceName = req.service.config.useDualstack ?\n      's3-accesspoint.dualstack':\n      's3-accesspoint';\n    var endpoint = req.httpRequest.endpoint;\n    var dnsSuffix = regionUtil.getEndpointSuffix(accessPointArn.region);\n    var useArnRegion = req.service.config.s3UseArnRegion;\n    endpoint.hostname = [\n      accessPointArn.accessPoint + '-' + accessPointArn.accountId,\n      serviceName,\n      useArnRegion ? accessPointArn.region : req.service.config.region,\n      dnsSuffix\n    ].join('.');\n    endpoint.host = endpoint.hostname;\n    var encodedArn = AWS.util.uriEscape(req.params.Bucket);\n    var path = req.httpRequest.path;\n    //remove the Bucket value from path\n    req.httpRequest.path = path.replace(new RegExp('/' + encodedArn), '');\n    if (req.httpRequest.path[0] !== '/') {\n      req.httpRequest.path = '/' + req.httpRequest.path;\n    }\n    req.httpRequest.region = accessPointArn.region; //region used to sign\n  },\n\n  /**\n   * Adds Expect: 100-continue header if payload is greater-or-equal 1MB\n   * @api private\n   */\n  addExpect100Continue: function addExpect100Continue(req) {\n    var len = req.httpRequest.headers['Content-Length'];\n    if (AWS.util.isNode() && (len >= 1024 * 1024 || req.params.Body instanceof AWS.util.stream.Stream)) {\n      req.httpRequest.headers['Expect'] = '100-continue';\n    }\n  },\n\n  /**\n   * Adds a default content type if none is supplied.\n   *\n   * @api private\n   */\n  addContentType: function addContentType(req) {\n    var httpRequest = req.httpRequest;\n    if (httpRequest.method === 'GET' || httpRequest.method === 'HEAD') {\n      // Content-Type is not set in GET/HEAD requests\n      delete httpRequest.headers['Content-Type'];\n      return;\n    }\n\n    if (!httpRequest.headers['Content-Type']) { // always have a Content-Type\n      httpRequest.headers['Content-Type'] = 'application/octet-stream';\n    }\n\n    var contentType = httpRequest.headers['Content-Type'];\n    if (AWS.util.isBrowser()) {\n      if (typeof httpRequest.body === 'string' && !contentType.match(/;\\s*charset=/)) {\n        var charset = '; charset=UTF-8';\n        httpRequest.headers['Content-Type'] += charset;\n      } else {\n        var replaceFn = function(_, prefix, charsetName) {\n          return prefix + charsetName.toUpperCase();\n        };\n\n        httpRequest.headers['Content-Type'] =\n          contentType.replace(/(;\\s*charset=)(.+)$/, replaceFn);\n      }\n    }\n  },\n\n  /**\n   * @api private\n   */\n  computableChecksumOperations: {\n    putBucketCors: true,\n    putBucketLifecycle: true,\n    putBucketLifecycleConfiguration: true,\n    putBucketTagging: true,\n    deleteObjects: true,\n    putBucketReplication: true,\n    putObjectLegalHold: true,\n    putObjectRetention: true,\n    putObjectLockConfiguration: true\n  },\n\n  /**\n   * Checks whether checksums should be computed for the request.\n   * If the request requires checksums to be computed, this will always\n   * return true, otherwise it depends on whether {AWS.Config.computeChecksums}\n   * is set.\n   *\n   * @param req [AWS.Request] the request to check against\n   * @return [Boolean] whether to compute checksums for a request.\n   * @api private\n   */\n  willComputeChecksums: function willComputeChecksums(req) {\n    if (this.computableChecksumOperations[req.operation]) return true;\n    if (!this.config.computeChecksums) return false;\n\n    // TODO: compute checksums for Stream objects\n    if (!AWS.util.Buffer.isBuffer(req.httpRequest.body) &&\n        typeof req.httpRequest.body !== 'string') {\n      return false;\n    }\n\n    var rules = req.service.api.operations[req.operation].input.members;\n\n    // Sha256 signing disabled, and not a presigned url\n    if (req.service.shouldDisableBodySigning(req) && !Object.prototype.hasOwnProperty.call(req.httpRequest.headers, 'presigned-expires')) {\n      if (rules.ContentMD5 && !req.params.ContentMD5) {\n        return true;\n      }\n    }\n\n    // V4 signer uses SHA256 signatures so only compute MD5 if it is required\n    if (req.service.getSignerClass(req) === AWS.Signers.V4) {\n      if (rules.ContentMD5 && !rules.ContentMD5.required) return false;\n    }\n\n    if (rules.ContentMD5 && !req.params.ContentMD5) return true;\n  },\n\n  /**\n   * A listener that computes the Content-MD5 and sets it in the header.\n   * @see AWS.S3.willComputeChecksums\n   * @api private\n   */\n  computeContentMd5: function computeContentMd5(req) {\n    if (req.service.willComputeChecksums(req)) {\n      var md5 = AWS.util.crypto.md5(req.httpRequest.body, 'base64');\n      req.httpRequest.headers['Content-MD5'] = md5;\n    }\n  },\n\n  /**\n   * @api private\n   */\n  computeSseCustomerKeyMd5: function computeSseCustomerKeyMd5(req) {\n    var keys = {\n      SSECustomerKey: 'x-amz-server-side-encryption-customer-key-MD5',\n      CopySourceSSECustomerKey: 'x-amz-copy-source-server-side-encryption-customer-key-MD5'\n    };\n    AWS.util.each(keys, function(key, header) {\n      if (req.params[key]) {\n        var value = AWS.util.crypto.md5(req.params[key], 'base64');\n        req.httpRequest.headers[header] = value;\n      }\n    });\n  },\n\n  /**\n   * Returns true if the bucket name should be left in the URI path for\n   * a request to S3.  This function takes into account the current\n   * endpoint protocol (e.g. http or https).\n   *\n   * @api private\n   */\n  pathStyleBucketName: function pathStyleBucketName(bucketName) {\n    // user can force path style requests via the configuration\n    if (this.config.s3ForcePathStyle) return true;\n    if (this.config.s3BucketEndpoint) return false;\n\n    if (this.isDnsCompatible(bucketName)) {\n      return (this.config.sslEnabled && bucketName.match(/\\./)) ? true : false;\n    } else {\n      return true; // not dns compatible names must always use path style\n    }\n  },\n\n  /**\n   * Returns true if the bucket name is DNS compatible.  Buckets created\n   * outside of the classic region MUST be DNS compatible.\n   *\n   * @api private\n   */\n  isDnsCompatible: function isDnsCompatible(bucketName) {\n    var b = bucketName;\n    var domain = new RegExp(/^[a-z0-9][a-z0-9\\.\\-]{1,61}[a-z0-9]$/);\n    var ipAddress = new RegExp(/(\\d+\\.){3}\\d+/);\n    var dots = new RegExp(/\\.\\./);\n    return (b.match(domain) && !b.match(ipAddress) && !b.match(dots)) ? true : false;\n  },\n\n  /**\n   * @return [Boolean] whether response contains an error\n   * @api private\n   */\n  successfulResponse: function successfulResponse(resp) {\n    var req = resp.request;\n    var httpResponse = resp.httpResponse;\n    if (operationsWith200StatusCodeError[req.operation] &&\n        httpResponse.body.toString().match('<Error>')) {\n      return false;\n    } else {\n      return httpResponse.statusCode < 300;\n    }\n  },\n\n  /**\n   * @return [Boolean] whether the error can be retried\n   * @api private\n   */\n  retryableError: function retryableError(error, request) {\n    if (operationsWith200StatusCodeError[request.operation] &&\n        error.statusCode === 200) {\n      return true;\n    } else if (request._requestRegionForBucket &&\n        request.service.bucketRegionCache[request._requestRegionForBucket]) {\n      return false;\n    } else if (error && error.code === 'RequestTimeout') {\n      return true;\n    } else if (error &&\n        regionRedirectErrorCodes.indexOf(error.code) != -1 &&\n        error.region && error.region != request.httpRequest.region) {\n      request.httpRequest.region = error.region;\n      if (error.statusCode === 301) {\n        request.service.updateReqBucketRegion(request);\n      }\n      return true;\n    } else {\n      var _super = AWS.Service.prototype.retryableError;\n      return _super.call(this, error, request);\n    }\n  },\n\n  /**\n   * Updates httpRequest with region. If region is not provided, then\n   * the httpRequest will be updated based on httpRequest.region\n   *\n   * @api private\n   */\n  updateReqBucketRegion: function updateReqBucketRegion(request, region) {\n    var httpRequest = request.httpRequest;\n    if (typeof region === 'string' && region.length) {\n      httpRequest.region = region;\n    }\n    if (!httpRequest.endpoint.host.match(/s3(?!-accelerate).*\\.amazonaws\\.com$/)) {\n      return;\n    }\n    var service = request.service;\n    var s3Config = service.config;\n    var s3BucketEndpoint = s3Config.s3BucketEndpoint;\n    if (s3BucketEndpoint) {\n      delete s3Config.s3BucketEndpoint;\n    }\n    var newConfig = AWS.util.copy(s3Config);\n    delete newConfig.endpoint;\n    newConfig.region = httpRequest.region;\n\n    httpRequest.endpoint = (new AWS.S3(newConfig)).endpoint;\n    service.populateURI(request);\n    s3Config.s3BucketEndpoint = s3BucketEndpoint;\n    httpRequest.headers.Host = httpRequest.endpoint.host;\n\n    if (request._asm.currentState === 'validate') {\n      request.removeListener('build', service.populateURI);\n      request.addListener('build', service.removeVirtualHostedBucketFromPath);\n    }\n  },\n\n  /**\n   * Provides a specialized parser for getBucketLocation -- all other\n   * operations are parsed by the super class.\n   *\n   * @api private\n   */\n  extractData: function extractData(resp) {\n    var req = resp.request;\n    if (req.operation === 'getBucketLocation') {\n      var match = resp.httpResponse.body.toString().match(/>(.+)<\\/Location/);\n      delete resp.data['_'];\n      if (match) {\n        resp.data.LocationConstraint = match[1];\n      } else {\n        resp.data.LocationConstraint = '';\n      }\n    }\n    var bucket = req.params.Bucket || null;\n    if (req.operation === 'deleteBucket' && typeof bucket === 'string' && !resp.error) {\n      req.service.clearBucketRegionCache(bucket);\n    } else {\n      var headers = resp.httpResponse.headers || {};\n      var region = headers['x-amz-bucket-region'] || null;\n      if (!region && req.operation === 'createBucket' && !resp.error) {\n        var createBucketConfiguration = req.params.CreateBucketConfiguration;\n        if (!createBucketConfiguration) {\n          region = 'us-east-1';\n        } else if (createBucketConfiguration.LocationConstraint === 'EU') {\n          region = 'eu-west-1';\n        } else {\n          region = createBucketConfiguration.LocationConstraint;\n        }\n      }\n      if (region) {\n          if (bucket && region !== req.service.bucketRegionCache[bucket]) {\n            req.service.bucketRegionCache[bucket] = region;\n          }\n      }\n    }\n    req.service.extractRequestIds(resp);\n  },\n\n  /**\n   * Extracts an error object from the http response.\n   *\n   * @api private\n   */\n  extractError: function extractError(resp) {\n    var codes = {\n      304: 'NotModified',\n      403: 'Forbidden',\n      400: 'BadRequest',\n      404: 'NotFound'\n    };\n\n    var req = resp.request;\n    var code = resp.httpResponse.statusCode;\n    var body = resp.httpResponse.body || '';\n\n    var headers = resp.httpResponse.headers || {};\n    var region = headers['x-amz-bucket-region'] || null;\n    var bucket = req.params.Bucket || null;\n    var bucketRegionCache = req.service.bucketRegionCache;\n    if (region && bucket && region !== bucketRegionCache[bucket]) {\n      bucketRegionCache[bucket] = region;\n    }\n\n    var cachedRegion;\n    if (codes[code] && body.length === 0) {\n      if (bucket && !region) {\n        cachedRegion = bucketRegionCache[bucket] || null;\n        if (cachedRegion !== req.httpRequest.region) {\n          region = cachedRegion;\n        }\n      }\n      resp.error = AWS.util.error(new Error(), {\n        code: codes[code],\n        message: null,\n        region: region\n      });\n    } else {\n      var data = new AWS.XML.Parser().parse(body.toString());\n\n      if (data.Region && !region) {\n        region = data.Region;\n        if (bucket && region !== bucketRegionCache[bucket]) {\n          bucketRegionCache[bucket] = region;\n        }\n      } else if (bucket && !region && !data.Region) {\n        cachedRegion = bucketRegionCache[bucket] || null;\n        if (cachedRegion !== req.httpRequest.region) {\n          region = cachedRegion;\n        }\n      }\n\n      resp.error = AWS.util.error(new Error(), {\n        code: data.Code || code,\n        message: data.Message || null,\n        region: region\n      });\n    }\n    req.service.extractRequestIds(resp);\n  },\n\n  /**\n   * If region was not obtained synchronously, then send async request\n   * to get bucket region for errors resulting from wrong region.\n   *\n   * @api private\n   */\n  requestBucketRegion: function requestBucketRegion(resp, done) {\n    var error = resp.error;\n    var req = resp.request;\n    var bucket = req.params.Bucket || null;\n\n    if (!error || !bucket || error.region || req.operation === 'listObjects' ||\n        (AWS.util.isNode() && req.operation === 'headBucket') ||\n        (error.statusCode === 400 && req.operation !== 'headObject') ||\n        regionRedirectErrorCodes.indexOf(error.code) === -1) {\n      return done();\n    }\n    var reqOperation = AWS.util.isNode() ? 'headBucket' : 'listObjects';\n    var reqParams = {Bucket: bucket};\n    if (reqOperation === 'listObjects') reqParams.MaxKeys = 0;\n    var regionReq = req.service[reqOperation](reqParams);\n    regionReq._requestRegionForBucket = bucket;\n    regionReq.send(function() {\n      var region = req.service.bucketRegionCache[bucket] || null;\n      error.region = region;\n      done();\n    });\n  },\n\n   /**\n   * For browser only. If NetworkingError received, will attempt to obtain\n   * the bucket region.\n   *\n   * @api private\n   */\n   reqRegionForNetworkingError: function reqRegionForNetworkingError(resp, done) {\n    if (!AWS.util.isBrowser()) {\n      return done();\n    }\n    var error = resp.error;\n    var request = resp.request;\n    var bucket = request.params.Bucket;\n    if (!error || error.code !== 'NetworkingError' || !bucket ||\n        request.httpRequest.region === 'us-east-1') {\n      return done();\n    }\n    var service = request.service;\n    var bucketRegionCache = service.bucketRegionCache;\n    var cachedRegion = bucketRegionCache[bucket] || null;\n\n    if (cachedRegion && cachedRegion !== request.httpRequest.region) {\n      service.updateReqBucketRegion(request, cachedRegion);\n      done();\n    } else if (!service.isDnsCompatible(bucket)) {\n      service.updateReqBucketRegion(request, 'us-east-1');\n      if (bucketRegionCache[bucket] !== 'us-east-1') {\n        bucketRegionCache[bucket] = 'us-east-1';\n      }\n      done();\n    } else if (request.httpRequest.virtualHostedBucket) {\n      var getRegionReq = service.listObjects({Bucket: bucket, MaxKeys: 0});\n      service.updateReqBucketRegion(getRegionReq, 'us-east-1');\n      getRegionReq._requestRegionForBucket = bucket;\n\n      getRegionReq.send(function() {\n        var region = service.bucketRegionCache[bucket] || null;\n        if (region && region !== request.httpRequest.region) {\n          service.updateReqBucketRegion(request, region);\n        }\n        done();\n      });\n    } else {\n      // DNS-compatible path-style\n      // (s3ForcePathStyle or bucket name with dot over https)\n      // Cannot obtain region information for this case\n      done();\n    }\n   },\n\n  /**\n   * Cache for bucket region.\n   *\n   * @api private\n   */\n   bucketRegionCache: {},\n\n  /**\n   * Clears bucket region cache.\n   *\n   * @api private\n   */\n   clearBucketRegionCache: function(buckets) {\n    var bucketRegionCache = this.bucketRegionCache;\n    if (!buckets) {\n      buckets = Object.keys(bucketRegionCache);\n    } else if (typeof buckets === 'string') {\n      buckets = [buckets];\n    }\n    for (var i = 0; i < buckets.length; i++) {\n      delete bucketRegionCache[buckets[i]];\n    }\n    return bucketRegionCache;\n   },\n\n   /**\n    * Corrects request region if bucket's cached region is different\n    *\n    * @api private\n    */\n  correctBucketRegionFromCache: function correctBucketRegionFromCache(req) {\n    var bucket = req.params.Bucket || null;\n    if (bucket) {\n      var service = req.service;\n      var requestRegion = req.httpRequest.region;\n      var cachedRegion = service.bucketRegionCache[bucket];\n      if (cachedRegion && cachedRegion !== requestRegion) {\n        service.updateReqBucketRegion(req, cachedRegion);\n      }\n    }\n  },\n\n  /**\n   * Extracts S3 specific request ids from the http response.\n   *\n   * @api private\n   */\n  extractRequestIds: function extractRequestIds(resp) {\n    var extendedRequestId = resp.httpResponse.headers ? resp.httpResponse.headers['x-amz-id-2'] : null;\n    var cfId = resp.httpResponse.headers ? resp.httpResponse.headers['x-amz-cf-id'] : null;\n    resp.extendedRequestId = extendedRequestId;\n    resp.cfId = cfId;\n\n    if (resp.error) {\n      resp.error.requestId = resp.requestId || null;\n      resp.error.extendedRequestId = extendedRequestId;\n      resp.error.cfId = cfId;\n    }\n  },\n\n  /**\n   * Get a pre-signed URL for a given operation name.\n   *\n   * @note You must ensure that you have static or previously resolved\n   *   credentials if you call this method synchronously (with no callback),\n   *   otherwise it may not properly sign the request. If you cannot guarantee\n   *   this (you are using an asynchronous credential provider, i.e., EC2\n   *   IAM roles), you should always call this method with an asynchronous\n   *   callback.\n   * @note Not all operation parameters are supported when using pre-signed\n   *   URLs. Certain parameters, such as `SSECustomerKey`, `ACL`, `Expires`,\n   *   `ContentLength`, or `Tagging` must be provided as headers when sending a\n   *   request. If you are using pre-signed URLs to upload from a browser and\n   *   need to use these fields, see {createPresignedPost}.\n   * @note The default signer allows altering the request by adding corresponding\n   *   headers to set some parameters (e.g. Range) and these added parameters\n   *   won't be signed. You must use signatureVersion v4 to to include these\n   *   parameters in the signed portion of the URL and enforce exact matching\n   *   between headers and signed params in the URL.\n   * @note This operation cannot be used with a promise. See note above regarding\n   *   asynchronous credentials and use with a callback.\n   * @param operation [String] the name of the operation to call\n   * @param params [map] parameters to pass to the operation. See the given\n   *   operation for the expected operation parameters. In addition, you can\n   *   also pass the \"Expires\" parameter to inform S3 how long the URL should\n   *   work for.\n   * @option params Expires [Integer] (900) the number of seconds to expire\n   *   the pre-signed URL operation in. Defaults to 15 minutes.\n   * @param callback [Function] if a callback is provided, this function will\n   *   pass the URL as the second parameter (after the error parameter) to\n   *   the callback function.\n   * @return [String] if called synchronously (with no callback), returns the\n   *   signed URL.\n   * @return [null] nothing is returned if a callback is provided.\n   * @example Pre-signing a getObject operation (synchronously)\n   *   var params = {Bucket: 'bucket', Key: 'key'};\n   *   var url = s3.getSignedUrl('getObject', params);\n   *   console.log('The URL is', url);\n   * @example Pre-signing a putObject (asynchronously)\n   *   var params = {Bucket: 'bucket', Key: 'key'};\n   *   s3.getSignedUrl('putObject', params, function (err, url) {\n   *     console.log('The URL is', url);\n   *   });\n   * @example Pre-signing a putObject operation with a specific payload\n   *   var params = {Bucket: 'bucket', Key: 'key', Body: 'body'};\n   *   var url = s3.getSignedUrl('putObject', params);\n   *   console.log('The URL is', url);\n   * @example Passing in a 1-minute expiry time for a pre-signed URL\n   *   var params = {Bucket: 'bucket', Key: 'key', Expires: 60};\n   *   var url = s3.getSignedUrl('getObject', params);\n   *   console.log('The URL is', url); // expires in 60 seconds\n   */\n  getSignedUrl: function getSignedUrl(operation, params, callback) {\n    params = AWS.util.copy(params || {});\n    var expires = params.Expires || 900;\n\n    if (typeof expires !== 'number') {\n      throw AWS.util.error(new Error(),\n        { code: 'InvalidParameterException', message: 'The expiration must be a number, received ' + typeof expires });\n    }\n\n    delete params.Expires; // we can't validate this\n    var request = this.makeRequest(operation, params);\n\n    if (callback) {\n      AWS.util.defer(function() {\n        request.presign(expires, callback);\n      });\n    } else {\n      return request.presign(expires, callback);\n    }\n  },\n\n  /**\n   * @!method  getSignedUrlPromise()\n   *   Returns a 'thenable' promise that will be resolved with a pre-signed URL\n   *   for a given operation name.\n   *\n   *   Two callbacks can be provided to the `then` method on the returned promise.\n   *   The first callback will be called if the promise is fulfilled, and the second\n   *   callback will be called if the promise is rejected.\n   *   @note Not all operation parameters are supported when using pre-signed\n   *      URLs. Certain parameters, such as `SSECustomerKey`, `ACL`, `Expires`,\n   *      `ContentLength`, or `Tagging` must be provided as headers when sending a\n   *      request. If you are using pre-signed URLs to upload from a browser and\n   *      need to use these fields, see {createPresignedPost}.\n   *   @param operation [String] the name of the operation to call\n   *   @param params [map] parameters to pass to the operation. See the given\n   *      operation for the expected operation parameters. In addition, you can\n   *      also pass the \"Expires\" parameter to inform S3 how long the URL should\n   *      work for.\n   *   @option params Expires [Integer] (900) the number of seconds to expire\n   *      the pre-signed URL operation in. Defaults to 15 minutes.\n   *   @callback fulfilledCallback function(url)\n   *     Called if the promise is fulfilled.\n   *     @param url [String] the signed url\n   *   @callback rejectedCallback function(err)\n   *     Called if the promise is rejected.\n   *     @param err [Error] if an error occurred, this value will be filled\n   *   @return [Promise] A promise that represents the state of the `refresh` call.\n   *   @example Pre-signing a getObject operation\n   *      var params = {Bucket: 'bucket', Key: 'key'};\n   *      var promise = s3.getSignedUrlPromise('getObject', params);\n   *      promise.then(function(url) {\n   *        console.log('The URL is', url);\n   *      }, function(err) { ... });\n   *   @example Pre-signing a putObject operation with a specific payload\n   *      var params = {Bucket: 'bucket', Key: 'key', Body: 'body'};\n   *      var promise = s3.getSignedUrlPromise('putObject', params);\n   *      promise.then(function(url) {\n   *        console.log('The URL is', url);\n   *      }, function(err) { ... });\n   *   @example Passing in a 1-minute expiry time for a pre-signed URL\n   *      var params = {Bucket: 'bucket', Key: 'key', Expires: 60};\n   *      var promise = s3.getSignedUrlPromise('getObject', params);\n   *      promise.then(function(url) {\n   *        console.log('The URL is', url);\n   *      }, function(err) { ... });\n   */\n\n  /**\n   * Get a pre-signed POST policy to support uploading to S3 directly from an\n   * HTML form.\n   *\n   * @param params [map]\n   * @option params Bucket [String]     The bucket to which the post should be\n   *                                    uploaded\n   * @option params Expires [Integer]   (3600) The number of seconds for which\n   *                                    the presigned policy should be valid.\n   * @option params Conditions [Array]  An array of conditions that must be met\n   *                                    for the presigned policy to allow the\n   *                                    upload. This can include required tags,\n   *                                    the accepted range for content lengths,\n   *                                    etc.\n   * @see http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-HTTPPOSTConstructPolicy.html\n   * @option params Fields [map]        Fields to include in the form. All\n   *                                    values passed in as fields will be\n   *                                    signed as exact match conditions.\n   * @param callback [Function]\n   *\n   * @note All fields passed in when creating presigned post data will be signed\n   *   as exact match conditions. Any fields that will be interpolated by S3\n   *   must be added to the fields hash after signing, and an appropriate\n   *   condition for such fields must be explicitly added to the Conditions\n   *   array passed to this function before signing.\n   *\n   * @example Presiging post data with a known key\n   *   var params = {\n   *     Bucket: 'bucket',\n   *     Fields: {\n   *       key: 'key'\n   *     }\n   *   };\n   *   s3.createPresignedPost(params, function(err, data) {\n   *     if (err) {\n   *       console.error('Presigning post data encountered an error', err);\n   *     } else {\n   *       console.log('The post data is', data);\n   *     }\n   *   });\n   *\n   * @example Presigning post data with an interpolated key\n   *   var params = {\n   *     Bucket: 'bucket',\n   *     Conditions: [\n   *       ['starts-with', '$key', 'path/to/uploads/']\n   *     ]\n   *   };\n   *   s3.createPresignedPost(params, function(err, data) {\n   *     if (err) {\n   *       console.error('Presigning post data encountered an error', err);\n   *     } else {\n   *       data.Fields.key = 'path/to/uploads/${filename}';\n   *       console.log('The post data is', data);\n   *     }\n   *   });\n   *\n   * @note You must ensure that you have static or previously resolved\n   *   credentials if you call this method synchronously (with no callback),\n   *   otherwise it may not properly sign the request. If you cannot guarantee\n   *   this (you are using an asynchronous credential provider, i.e., EC2\n   *   IAM roles), you should always call this method with an asynchronous\n   *   callback.\n   *\n   * @return [map]  If called synchronously (with no callback), returns a hash\n   *                with the url to set as the form action and a hash of fields\n   *                to include in the form.\n   * @return [null] Nothing is returned if a callback is provided.\n   *\n   * @callback callback function (err, data)\n   *  @param err [Error] the error object returned from the policy signer\n   *  @param data [map] The data necessary to construct an HTML form\n   *  @param data.url [String] The URL to use as the action of the form\n   *  @param data.fields [map] A hash of fields that must be included in the\n   *                           form for the upload to succeed. This hash will\n   *                           include the signed POST policy, your access key\n   *                           ID and security token (if present), etc. These\n   *                           may be safely included as input elements of type\n   *                           'hidden.'\n   */\n  createPresignedPost: function createPresignedPost(params, callback) {\n    if (typeof params === 'function' && callback === undefined) {\n      callback = params;\n      params = null;\n    }\n\n    params = AWS.util.copy(params || {});\n    var boundParams = this.config.params || {};\n    var bucket = params.Bucket || boundParams.Bucket,\n      self = this,\n      config = this.config,\n      endpoint = AWS.util.copy(this.endpoint);\n    if (!config.s3BucketEndpoint) {\n      endpoint.pathname = '/' + bucket;\n    }\n\n    function finalizePost() {\n      return {\n        url: AWS.util.urlFormat(endpoint),\n        fields: self.preparePostFields(\n          config.credentials,\n          config.region,\n          bucket,\n          params.Fields,\n          params.Conditions,\n          params.Expires\n        )\n      };\n    }\n\n    if (callback) {\n      config.getCredentials(function (err) {\n        if (err) {\n          callback(err);\n        }\n\n        callback(null, finalizePost());\n      });\n    } else {\n      return finalizePost();\n    }\n  },\n\n  /**\n   * @api private\n   */\n  preparePostFields: function preparePostFields(\n    credentials,\n    region,\n    bucket,\n    fields,\n    conditions,\n    expiresInSeconds\n  ) {\n    var now = this.getSkewCorrectedDate();\n    if (!credentials || !region || !bucket) {\n      throw new Error('Unable to create a POST object policy without a bucket,'\n        + ' region, and credentials');\n    }\n    fields = AWS.util.copy(fields || {});\n    conditions = (conditions || []).slice(0);\n    expiresInSeconds = expiresInSeconds || 3600;\n\n    var signingDate = AWS.util.date.iso8601(now).replace(/[:\\-]|\\.\\d{3}/g, '');\n    var shortDate = signingDate.substr(0, 8);\n    var scope = v4Credentials.createScope(shortDate, region, 's3');\n    var credential = credentials.accessKeyId + '/' + scope;\n\n    fields['bucket'] = bucket;\n    fields['X-Amz-Algorithm'] = 'AWS4-HMAC-SHA256';\n    fields['X-Amz-Credential'] = credential;\n    fields['X-Amz-Date'] = signingDate;\n    if (credentials.sessionToken) {\n      fields['X-Amz-Security-Token'] = credentials.sessionToken;\n    }\n    for (var field in fields) {\n      if (fields.hasOwnProperty(field)) {\n        var condition = {};\n        condition[field] = fields[field];\n        conditions.push(condition);\n      }\n    }\n\n    fields.Policy = this.preparePostPolicy(\n      new Date(now.valueOf() + expiresInSeconds * 1000),\n      conditions\n    );\n    fields['X-Amz-Signature'] = AWS.util.crypto.hmac(\n      v4Credentials.getSigningKey(credentials, shortDate, region, 's3', true),\n      fields.Policy,\n      'hex'\n    );\n\n    return fields;\n  },\n\n  /**\n   * @api private\n   */\n  preparePostPolicy: function preparePostPolicy(expiration, conditions) {\n    return AWS.util.base64.encode(JSON.stringify({\n      expiration: AWS.util.date.iso8601(expiration),\n      conditions: conditions\n    }));\n  },\n\n  /**\n   * @api private\n   */\n  prepareSignedUrl: function prepareSignedUrl(request) {\n    request.addListener('validate', request.service.noPresignedContentLength);\n    request.removeListener('build', request.service.addContentType);\n    if (!request.params.Body) {\n      // no Content-MD5/SHA-256 if body is not provided\n      request.removeListener('build', request.service.computeContentMd5);\n    } else {\n      request.addListener('afterBuild', AWS.EventListeners.Core.COMPUTE_SHA256);\n    }\n  },\n\n  /**\n   * @api private\n   * @param request\n   */\n  disableBodySigning: function disableBodySigning(request) {\n    var headers = request.httpRequest.headers;\n    // Add the header to anything that isn't a presigned url, unless that presigned url had a body defined\n    if (!Object.prototype.hasOwnProperty.call(headers, 'presigned-expires')) {\n      headers['X-Amz-Content-Sha256'] = 'UNSIGNED-PAYLOAD';\n    }\n  },\n\n  /**\n   * @api private\n   */\n  noPresignedContentLength: function noPresignedContentLength(request) {\n    if (request.params.ContentLength !== undefined) {\n      throw AWS.util.error(new Error(), {code: 'UnexpectedParameter',\n        message: 'ContentLength is not supported in pre-signed URLs.'});\n    }\n  },\n\n  createBucket: function createBucket(params, callback) {\n    // When creating a bucket *outside* the classic region, the location\n    // constraint must be set for the bucket and it must match the endpoint.\n    // This chunk of code will set the location constraint param based\n    // on the region (when possible), but it will not override a passed-in\n    // location constraint.\n    if (typeof params === 'function' || !params) {\n      callback = callback || params;\n      params = {};\n    }\n    var hostname = this.endpoint.hostname;\n    if (hostname !== this.api.globalEndpoint && !params.CreateBucketConfiguration) {\n      params.CreateBucketConfiguration = { LocationConstraint: this.config.region };\n    }\n    return this.makeRequest('createBucket', params, callback);\n  },\n\n  /**\n   * @see AWS.S3.ManagedUpload\n   * @overload upload(params = {}, [options], [callback])\n   *   Uploads an arbitrarily sized buffer, blob, or stream, using intelligent\n   *   concurrent handling of parts if the payload is large enough. You can\n   *   configure the concurrent queue size by setting `options`. Note that this\n   *   is the only operation for which the SDK can retry requests with stream\n   *   bodies.\n   *\n   *   @param (see AWS.S3.putObject)\n   *   @option (see AWS.S3.ManagedUpload.constructor)\n   *   @return [AWS.S3.ManagedUpload] the managed upload object that can call\n   *     `send()` or track progress.\n   *   @example Uploading a stream object\n   *     var params = {Bucket: 'bucket', Key: 'key', Body: stream};\n   *     s3.upload(params, function(err, data) {\n   *       console.log(err, data);\n   *     });\n   *   @example Uploading a stream with concurrency of 1 and partSize of 10mb\n   *     var params = {Bucket: 'bucket', Key: 'key', Body: stream};\n   *     var options = {partSize: 10 * 1024 * 1024, queueSize: 1};\n   *     s3.upload(params, options, function(err, data) {\n   *       console.log(err, data);\n   *     });\n   * @callback callback function(err, data)\n   *   @param err [Error] an error or null if no error occurred.\n   *   @param data [map] The response data from the successful upload:\n   *   @param data.Location [String] the URL of the uploaded object\n   *   @param data.ETag [String] the ETag of the uploaded object\n   *   @param data.Bucket [String]  the bucket to which the object was uploaded\n   *   @param data.Key [String] the key to which the object was uploaded\n   */\n  upload: function upload(params, options, callback) {\n    if (typeof options === 'function' && callback === undefined) {\n      callback = options;\n      options = null;\n    }\n\n    options = options || {};\n    options = AWS.util.merge(options || {}, {service: this, params: params});\n\n    var uploader = new AWS.S3.ManagedUpload(options);\n    if (typeof callback === 'function') uploader.send(callback);\n    return uploader;\n  }\n});\n\n/**\n * @api private\n */\nAWS.S3.addPromisesToClass = function addPromisesToClass(PromiseDependency) {\n  this.prototype.getSignedUrlPromise = AWS.util.promisifyMethod('getSignedUrl', PromiseDependency);\n};\n\n/**\n * @api private\n */\nAWS.S3.deletePromisesFromClass = function deletePromisesFromClass() {\n  delete this.prototype.getSignedUrlPromise;\n};\n\nAWS.util.addPromises(AWS.S3);\n"]},"metadata":{},"sourceType":"script"}
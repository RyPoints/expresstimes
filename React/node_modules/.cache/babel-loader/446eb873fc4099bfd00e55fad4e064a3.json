{"ast":null,"code":"'use strict';\n\nconst Utils = require('./../utils');\n\nconst Helpers = require('./helpers');\n\nconst _ = require('lodash');\n\nconst Transaction = require('../transaction');\n\nconst Association = require('./base');\n\nconst Op = require('../operators');\n/**\n * One-to-one association\n *\n * In the API reference below, add the name of the association to the method, e.g. for `User.belongsTo(Project)` the getter will be `user.getProject()`.\n *\n * @see {@link Model.belongsTo}\n */\n\n\nclass BelongsTo extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n    this.associationType = 'BelongsTo';\n    this.isSingleAssociation = true;\n    this.foreignKeyAttribute = {};\n\n    if (this.as) {\n      this.isAliased = true;\n      this.options.name = {\n        singular: this.as\n      };\n    } else {\n      this.as = this.target.options.name.singular;\n      this.options.name = this.target.options.name;\n    }\n\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelizeIf([Utils.underscoredIf(this.as, this.source.options.underscored), this.target.primaryKeyAttribute].join('_'), !this.source.options.underscored);\n    }\n\n    this.identifier = this.foreignKey;\n\n    if (this.source.rawAttributes[this.identifier]) {\n      this.identifierField = this.source.rawAttributes[this.identifier].field || this.identifier;\n    }\n\n    this.targetKey = this.options.targetKey || this.target.primaryKeyAttribute;\n    this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    this.targetKeyIsPrimary = this.targetKey === this.target.primaryKeyAttribute;\n    this.targetIdentifier = this.targetKey;\n    this.associationAccessor = this.as;\n    this.options.useHooks = options.useHooks; // Get singular name, trying to uppercase the first letter, unless the model forbids it\n\n    const singular = Utils.uppercaseFirst(this.options.name.singular);\n    this.accessors = {\n      get: 'get' + singular,\n      set: 'set' + singular,\n      create: 'create' + singular\n    };\n  } // the id is in the source table\n\n\n  injectAttributes() {\n    const newAttributes = {};\n    newAttributes[this.foreignKey] = _.defaults({}, this.foreignKeyAttribute, {\n      type: this.options.keyType || this.target.rawAttributes[this.targetKey].type,\n      allowNull: true\n    });\n\n    if (this.options.constraints !== false) {\n      const source = this.source.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      this.options.onDelete = this.options.onDelete || (source.allowNull ? 'SET NULL' : 'NO ACTION');\n      this.options.onUpdate = this.options.onUpdate || 'CASCADE';\n    }\n\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.target, this.source, this.options, this.targetKeyField);\n    Utils.mergeDefaults(this.source.rawAttributes, newAttributes);\n    this.identifierField = this.source.rawAttributes[this.foreignKey].field || this.foreignKey;\n    this.source.refreshAttributes();\n    Helpers.checkNamingCollision(this);\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'set', 'create'];\n    Helpers.mixinMethods(this, obj, methods);\n  }\n  /**\n   * Get the associated instance.\n   *\n   * @param {Object} [options]\n   * @param {String|Boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false.\n   * @param {String} [options.schema] Apply a schema on the related model\n   * @see {@link Model.findOne} for a full explanation of options\n   * @return {Promise<Model>}\n   */\n\n\n  get(instances, options) {\n    const association = this;\n    const where = {};\n    let Target = association.target;\n    let instance;\n    options = Utils.cloneDeep(options);\n\n    if (options.hasOwnProperty('scope')) {\n      if (!options.scope) {\n        Target = Target.unscoped();\n      } else {\n        Target = Target.scope(options.scope);\n      }\n    }\n\n    if (options.hasOwnProperty('schema')) {\n      Target = Target.schema(options.schema, options.schemaDelimiter);\n    }\n\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = undefined;\n    }\n\n    if (instances) {\n      where[association.targetKey] = {\n        [Op.in]: instances.map(instance => instance.get(association.foreignKey))\n      };\n    } else {\n      if (association.targetKeyIsPrimary && !options.where) {\n        return Target.findByPk(instance.get(association.foreignKey), options);\n      } else {\n        where[association.targetKey] = instance.get(association.foreignKey);\n        options.limit = null;\n      }\n    }\n\n    options.where = options.where ? {\n      [Op.and]: [where, options.where]\n    } : where;\n\n    if (instances) {\n      return Target.findAll(options).then(results => {\n        const result = {};\n\n        for (const instance of instances) {\n          result[instance.get(association.foreignKey, {\n            raw: true\n          })] = null;\n        }\n\n        for (const instance of results) {\n          result[instance.get(association.targetKey, {\n            raw: true\n          })] = instance;\n        }\n\n        return result;\n      });\n    }\n\n    return Target.findOne(options);\n  }\n  /**\n   * Set the associated model.\n   *\n   * @param {Model|String|Number} [newAssociation] An persisted instance or the primary key of an instance to associate with this. Pass `null` or `undefined` to remove the association.\n   * @param {Object} [options] Options passed to `this.save`\n   * @param {Boolean} [options.save=true] Skip saving this after setting the foreign key if false.\n   * @return {Promise}\n   */\n\n\n  set(sourceInstance, associatedInstance, options) {\n    const association = this;\n    options = options || {};\n    let value = associatedInstance;\n\n    if (associatedInstance instanceof association.target) {\n      value = associatedInstance[association.targetKey];\n    }\n\n    sourceInstance.set(association.foreignKey, value);\n    if (options.save === false) return;\n    options = _.extend({\n      fields: [association.foreignKey],\n      allowNull: [association.foreignKey],\n      association: true\n    }, options); // passes the changed field to save, so only that field get updated.\n\n    return sourceInstance.save(options);\n  }\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Object} [values]\n   * @param {Object} [options] Options passed to `target.create` and setAssociation.\n   * @see {@link Model#create}  for a full explanation of options\n   * @return {Promise}\n   */\n\n\n  create(sourceInstance, values, fieldsOrOptions) {\n    const association = this;\n    const options = {};\n\n    if ((fieldsOrOptions || {}).transaction instanceof Transaction) {\n      options.transaction = fieldsOrOptions.transaction;\n    }\n\n    options.logging = (fieldsOrOptions || {}).logging;\n    return association.target.create(values, fieldsOrOptions).then(newAssociatedObject => sourceInstance[association.accessors.set](newAssociatedObject, options));\n  }\n\n}\n\nmodule.exports = BelongsTo;\nmodule.exports.BelongsTo = BelongsTo;\nmodule.exports.default = BelongsTo;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/sequelize/lib/associations/belongs-to.js"],"names":["Utils","require","Helpers","_","Transaction","Association","Op","BelongsTo","constructor","source","target","options","associationType","isSingleAssociation","foreignKeyAttribute","as","isAliased","name","singular","isObject","foreignKey","fieldName","camelizeIf","underscoredIf","underscored","primaryKeyAttribute","join","identifier","rawAttributes","identifierField","field","targetKey","targetKeyField","targetKeyIsPrimary","targetIdentifier","associationAccessor","useHooks","uppercaseFirst","accessors","get","set","create","injectAttributes","newAttributes","defaults","type","keyType","allowNull","constraints","onDelete","onUpdate","addForeignKeyConstraints","mergeDefaults","refreshAttributes","checkNamingCollision","mixin","obj","methods","mixinMethods","instances","association","where","Target","instance","cloneDeep","hasOwnProperty","scope","unscoped","schema","schemaDelimiter","Array","isArray","undefined","in","map","findByPk","limit","and","findAll","then","results","result","raw","findOne","sourceInstance","associatedInstance","value","save","extend","fields","values","fieldsOrOptions","transaction","logging","newAssociatedObject","module","exports","default"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,YAAD,CAArB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAME,CAAC,GAAGF,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMG,WAAW,GAAGH,OAAO,CAAC,gBAAD,CAA3B;;AACA,MAAMI,WAAW,GAAGJ,OAAO,CAAC,QAAD,CAA3B;;AACA,MAAMK,EAAE,GAAGL,OAAO,CAAC,cAAD,CAAlB;AAGA;;;;;;;;;AAOA,MAAMM,SAAN,SAAwBF,WAAxB,CAAoC;AAClCG,EAAAA,WAAW,CAACC,MAAD,EAASC,MAAT,EAAiBC,OAAjB,EAA0B;AACnC,UAAMF,MAAN,EAAcC,MAAd,EAAsBC,OAAtB;AAEA,SAAKC,eAAL,GAAuB,WAAvB;AACA,SAAKC,mBAAL,GAA2B,IAA3B;AACA,SAAKC,mBAAL,GAA2B,EAA3B;;AAEA,QAAI,KAAKC,EAAT,EAAa;AACX,WAAKC,SAAL,GAAiB,IAAjB;AACA,WAAKL,OAAL,CAAaM,IAAb,GAAoB;AAClBC,QAAAA,QAAQ,EAAE,KAAKH;AADG,OAApB;AAGD,KALD,MAKO;AACL,WAAKA,EAAL,GAAU,KAAKL,MAAL,CAAYC,OAAZ,CAAoBM,IAApB,CAAyBC,QAAnC;AACA,WAAKP,OAAL,CAAaM,IAAb,GAAoB,KAAKP,MAAL,CAAYC,OAAZ,CAAoBM,IAAxC;AACD;;AAED,QAAId,CAAC,CAACgB,QAAF,CAAW,KAAKR,OAAL,CAAaS,UAAxB,CAAJ,EAAyC;AACvC,WAAKN,mBAAL,GAA2B,KAAKH,OAAL,CAAaS,UAAxC;AACA,WAAKA,UAAL,GAAkB,KAAKN,mBAAL,CAAyBG,IAAzB,IAAiC,KAAKH,mBAAL,CAAyBO,SAA5E;AACD,KAHD,MAGO,IAAI,KAAKV,OAAL,CAAaS,UAAjB,EAA6B;AAClC,WAAKA,UAAL,GAAkB,KAAKT,OAAL,CAAaS,UAA/B;AACD;;AAED,QAAI,CAAC,KAAKA,UAAV,EAAsB;AACpB,WAAKA,UAAL,GAAkBpB,KAAK,CAACsB,UAAN,CAChB,CACEtB,KAAK,CAACuB,aAAN,CAAoB,KAAKR,EAAzB,EAA6B,KAAKN,MAAL,CAAYE,OAAZ,CAAoBa,WAAjD,CADF,EAEE,KAAKd,MAAL,CAAYe,mBAFd,EAGEC,IAHF,CAGO,GAHP,CADgB,EAKhB,CAAC,KAAKjB,MAAL,CAAYE,OAAZ,CAAoBa,WALL,CAAlB;AAOD;;AAED,SAAKG,UAAL,GAAkB,KAAKP,UAAvB;;AAEA,QAAI,KAAKX,MAAL,CAAYmB,aAAZ,CAA0B,KAAKD,UAA/B,CAAJ,EAAgD;AAC9C,WAAKE,eAAL,GAAuB,KAAKpB,MAAL,CAAYmB,aAAZ,CAA0B,KAAKD,UAA/B,EAA2CG,KAA3C,IAAoD,KAAKH,UAAhF;AACD;;AAED,SAAKI,SAAL,GAAiB,KAAKpB,OAAL,CAAaoB,SAAb,IAA0B,KAAKrB,MAAL,CAAYe,mBAAvD;AACA,SAAKO,cAAL,GAAsB,KAAKtB,MAAL,CAAYkB,aAAZ,CAA0B,KAAKG,SAA/B,EAA0CD,KAA1C,IAAmD,KAAKC,SAA9E;AACA,SAAKE,kBAAL,GAA0B,KAAKF,SAAL,KAAmB,KAAKrB,MAAL,CAAYe,mBAAzD;AAEA,SAAKS,gBAAL,GAAwB,KAAKH,SAA7B;AACA,SAAKI,mBAAL,GAA2B,KAAKpB,EAAhC;AACA,SAAKJ,OAAL,CAAayB,QAAb,GAAwBzB,OAAO,CAACyB,QAAhC,CA9CmC,CAgDnC;;AACA,UAAMlB,QAAQ,GAAGlB,KAAK,CAACqC,cAAN,CAAqB,KAAK1B,OAAL,CAAaM,IAAb,CAAkBC,QAAvC,CAAjB;AAEA,SAAKoB,SAAL,GAAiB;AACfC,MAAAA,GAAG,EAAE,QAAQrB,QADE;AAEfsB,MAAAA,GAAG,EAAE,QAAQtB,QAFE;AAGfuB,MAAAA,MAAM,EAAE,WAAWvB;AAHJ,KAAjB;AAKD,GAzDiC,CA2DlC;;;AACAwB,EAAAA,gBAAgB,GAAG;AACjB,UAAMC,aAAa,GAAG,EAAtB;AAEAA,IAAAA,aAAa,CAAC,KAAKvB,UAAN,CAAb,GAAiCjB,CAAC,CAACyC,QAAF,CAAW,EAAX,EAAe,KAAK9B,mBAApB,EAAyC;AACxE+B,MAAAA,IAAI,EAAE,KAAKlC,OAAL,CAAamC,OAAb,IAAwB,KAAKpC,MAAL,CAAYkB,aAAZ,CAA0B,KAAKG,SAA/B,EAA0Cc,IADA;AAExEE,MAAAA,SAAS,EAAE;AAF6D,KAAzC,CAAjC;;AAKA,QAAI,KAAKpC,OAAL,CAAaqC,WAAb,KAA6B,KAAjC,EAAwC;AACtC,YAAMvC,MAAM,GAAG,KAAKA,MAAL,CAAYmB,aAAZ,CAA0B,KAAKR,UAA/B,KAA8CuB,aAAa,CAAC,KAAKvB,UAAN,CAA1E;AACA,WAAKT,OAAL,CAAasC,QAAb,GAAwB,KAAKtC,OAAL,CAAasC,QAAb,KAA0BxC,MAAM,CAACsC,SAAP,GAAmB,UAAnB,GAAgC,WAA1D,CAAxB;AACA,WAAKpC,OAAL,CAAauC,QAAb,GAAwB,KAAKvC,OAAL,CAAauC,QAAb,IAAyB,SAAjD;AACD;;AAEDhD,IAAAA,OAAO,CAACiD,wBAAR,CAAiCR,aAAa,CAAC,KAAKvB,UAAN,CAA9C,EAAiE,KAAKV,MAAtE,EAA8E,KAAKD,MAAnF,EAA2F,KAAKE,OAAhG,EAAyG,KAAKqB,cAA9G;AACAhC,IAAAA,KAAK,CAACoD,aAAN,CAAoB,KAAK3C,MAAL,CAAYmB,aAAhC,EAA+Ce,aAA/C;AAEA,SAAKd,eAAL,GAAuB,KAAKpB,MAAL,CAAYmB,aAAZ,CAA0B,KAAKR,UAA/B,EAA2CU,KAA3C,IAAoD,KAAKV,UAAhF;AAEA,SAAKX,MAAL,CAAY4C,iBAAZ;AAEAnD,IAAAA,OAAO,CAACoD,oBAAR,CAA6B,IAA7B;AAEA,WAAO,IAAP;AACD;;AAEDC,EAAAA,KAAK,CAACC,GAAD,EAAM;AACT,UAAMC,OAAO,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,QAAf,CAAhB;AAEAvD,IAAAA,OAAO,CAACwD,YAAR,CAAqB,IAArB,EAA2BF,GAA3B,EAAgCC,OAAhC;AACD;AAED;;;;;;;;;;;AASAlB,EAAAA,GAAG,CAACoB,SAAD,EAAYhD,OAAZ,EAAqB;AACtB,UAAMiD,WAAW,GAAG,IAApB;AACA,UAAMC,KAAK,GAAG,EAAd;AACA,QAAIC,MAAM,GAAGF,WAAW,CAAClD,MAAzB;AACA,QAAIqD,QAAJ;AAEApD,IAAAA,OAAO,GAAGX,KAAK,CAACgE,SAAN,CAAgBrD,OAAhB,CAAV;;AAEA,QAAIA,OAAO,CAACsD,cAAR,CAAuB,OAAvB,CAAJ,EAAqC;AACnC,UAAI,CAACtD,OAAO,CAACuD,KAAb,EAAoB;AAClBJ,QAAAA,MAAM,GAAGA,MAAM,CAACK,QAAP,EAAT;AACD,OAFD,MAEO;AACLL,QAAAA,MAAM,GAAGA,MAAM,CAACI,KAAP,CAAavD,OAAO,CAACuD,KAArB,CAAT;AACD;AACF;;AAED,QAAIvD,OAAO,CAACsD,cAAR,CAAuB,QAAvB,CAAJ,EAAsC;AACpCH,MAAAA,MAAM,GAAGA,MAAM,CAACM,MAAP,CAAczD,OAAO,CAACyD,MAAtB,EAA8BzD,OAAO,CAAC0D,eAAtC,CAAT;AACD;;AAED,QAAI,CAACC,KAAK,CAACC,OAAN,CAAcZ,SAAd,CAAL,EAA+B;AAC7BI,MAAAA,QAAQ,GAAGJ,SAAX;AACAA,MAAAA,SAAS,GAAGa,SAAZ;AACD;;AAED,QAAIb,SAAJ,EAAe;AACbE,MAAAA,KAAK,CAACD,WAAW,CAAC7B,SAAb,CAAL,GAA+B;AAC7B,SAACzB,EAAE,CAACmE,EAAJ,GAASd,SAAS,CAACe,GAAV,CAAcX,QAAQ,IAAIA,QAAQ,CAACxB,GAAT,CAAaqB,WAAW,CAACxC,UAAzB,CAA1B;AADoB,OAA/B;AAGD,KAJD,MAIO;AACL,UAAIwC,WAAW,CAAC3B,kBAAZ,IAAkC,CAACtB,OAAO,CAACkD,KAA/C,EAAsD;AACpD,eAAOC,MAAM,CAACa,QAAP,CAAgBZ,QAAQ,CAACxB,GAAT,CAAaqB,WAAW,CAACxC,UAAzB,CAAhB,EAAsDT,OAAtD,CAAP;AACD,OAFD,MAEO;AACLkD,QAAAA,KAAK,CAACD,WAAW,CAAC7B,SAAb,CAAL,GAA+BgC,QAAQ,CAACxB,GAAT,CAAaqB,WAAW,CAACxC,UAAzB,CAA/B;AACAT,QAAAA,OAAO,CAACiE,KAAR,GAAgB,IAAhB;AACD;AACF;;AAEDjE,IAAAA,OAAO,CAACkD,KAAR,GAAgBlD,OAAO,CAACkD,KAAR,GACd;AAAC,OAACvD,EAAE,CAACuE,GAAJ,GAAU,CAAChB,KAAD,EAAQlD,OAAO,CAACkD,KAAhB;AAAX,KADc,GAEdA,KAFF;;AAIA,QAAIF,SAAJ,EAAe;AACb,aAAOG,MAAM,CAACgB,OAAP,CAAenE,OAAf,EAAwBoE,IAAxB,CAA6BC,OAAO,IAAI;AAC7C,cAAMC,MAAM,GAAG,EAAf;;AACA,aAAK,MAAMlB,QAAX,IAAuBJ,SAAvB,EAAkC;AAChCsB,UAAAA,MAAM,CAAClB,QAAQ,CAACxB,GAAT,CAAaqB,WAAW,CAACxC,UAAzB,EAAqC;AAAC8D,YAAAA,GAAG,EAAE;AAAN,WAArC,CAAD,CAAN,GAA4D,IAA5D;AACD;;AAED,aAAK,MAAMnB,QAAX,IAAuBiB,OAAvB,EAAgC;AAC9BC,UAAAA,MAAM,CAAClB,QAAQ,CAACxB,GAAT,CAAaqB,WAAW,CAAC7B,SAAzB,EAAoC;AAACmD,YAAAA,GAAG,EAAE;AAAN,WAApC,CAAD,CAAN,GAA2DnB,QAA3D;AACD;;AAED,eAAOkB,MAAP;AACD,OAXM,CAAP;AAYD;;AAED,WAAOnB,MAAM,CAACqB,OAAP,CAAexE,OAAf,CAAP;AACD;AAED;;;;;;;;;;AAQA6B,EAAAA,GAAG,CAAC4C,cAAD,EAAiBC,kBAAjB,EAAqC1E,OAArC,EAA8C;AAC/C,UAAMiD,WAAW,GAAG,IAApB;AAEAjD,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,QAAI2E,KAAK,GAAGD,kBAAZ;;AACA,QAAIA,kBAAkB,YAAYzB,WAAW,CAAClD,MAA9C,EAAsD;AACpD4E,MAAAA,KAAK,GAAGD,kBAAkB,CAACzB,WAAW,CAAC7B,SAAb,CAA1B;AACD;;AAEDqD,IAAAA,cAAc,CAAC5C,GAAf,CAAmBoB,WAAW,CAACxC,UAA/B,EAA2CkE,KAA3C;AAEA,QAAI3E,OAAO,CAAC4E,IAAR,KAAiB,KAArB,EAA4B;AAE5B5E,IAAAA,OAAO,GAAGR,CAAC,CAACqF,MAAF,CAAS;AACjBC,MAAAA,MAAM,EAAE,CAAC7B,WAAW,CAACxC,UAAb,CADS;AAEjB2B,MAAAA,SAAS,EAAE,CAACa,WAAW,CAACxC,UAAb,CAFM;AAGjBwC,MAAAA,WAAW,EAAE;AAHI,KAAT,EAIPjD,OAJO,CAAV,CAd+C,CAoB/C;;AACA,WAAOyE,cAAc,CAACG,IAAf,CAAoB5E,OAApB,CAAP;AACD;AAED;;;;;;;;;;AAQA8B,EAAAA,MAAM,CAAC2C,cAAD,EAAiBM,MAAjB,EAAyBC,eAAzB,EAA0C;AAC9C,UAAM/B,WAAW,GAAG,IAApB;AAEA,UAAMjD,OAAO,GAAG,EAAhB;;AAEA,QAAI,CAACgF,eAAe,IAAI,EAApB,EAAwBC,WAAxB,YAA+CxF,WAAnD,EAAgE;AAC9DO,MAAAA,OAAO,CAACiF,WAAR,GAAsBD,eAAe,CAACC,WAAtC;AACD;;AACDjF,IAAAA,OAAO,CAACkF,OAAR,GAAkB,CAACF,eAAe,IAAI,EAApB,EAAwBE,OAA1C;AAEA,WAAOjC,WAAW,CAAClD,MAAZ,CAAmB+B,MAAnB,CAA0BiD,MAA1B,EAAkCC,eAAlC,EAAmDZ,IAAnD,CAAwDe,mBAAmB,IAChFV,cAAc,CAACxB,WAAW,CAACtB,SAAZ,CAAsBE,GAAvB,CAAd,CAA0CsD,mBAA1C,EAA+DnF,OAA/D,CADK,CAAP;AAGD;;AAtNiC;;AAyNpCoF,MAAM,CAACC,OAAP,GAAiBzF,SAAjB;AACAwF,MAAM,CAACC,OAAP,CAAezF,SAAf,GAA2BA,SAA3B;AACAwF,MAAM,CAACC,OAAP,CAAeC,OAAf,GAAyB1F,SAAzB","sourcesContent":["'use strict';\n\nconst Utils = require('./../utils');\nconst Helpers = require('./helpers');\nconst _ = require('lodash');\nconst Transaction = require('../transaction');\nconst Association = require('./base');\nconst Op = require('../operators');\n\n\n/**\n * One-to-one association\n *\n * In the API reference below, add the name of the association to the method, e.g. for `User.belongsTo(Project)` the getter will be `user.getProject()`.\n *\n * @see {@link Model.belongsTo}\n */\nclass BelongsTo extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    this.associationType = 'BelongsTo';\n    this.isSingleAssociation = true;\n    this.foreignKeyAttribute = {};\n\n    if (this.as) {\n      this.isAliased = true;\n      this.options.name = {\n        singular: this.as\n      };\n    } else {\n      this.as = this.target.options.name.singular;\n      this.options.name = this.target.options.name;\n    }\n\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelizeIf(\n        [\n          Utils.underscoredIf(this.as, this.source.options.underscored),\n          this.target.primaryKeyAttribute\n        ].join('_'),\n        !this.source.options.underscored\n      );\n    }\n\n    this.identifier = this.foreignKey;\n\n    if (this.source.rawAttributes[this.identifier]) {\n      this.identifierField = this.source.rawAttributes[this.identifier].field || this.identifier;\n    }\n\n    this.targetKey = this.options.targetKey || this.target.primaryKeyAttribute;\n    this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    this.targetKeyIsPrimary = this.targetKey === this.target.primaryKeyAttribute;\n\n    this.targetIdentifier = this.targetKey;\n    this.associationAccessor = this.as;\n    this.options.useHooks = options.useHooks;\n\n    // Get singular name, trying to uppercase the first letter, unless the model forbids it\n    const singular = Utils.uppercaseFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: 'get' + singular,\n      set: 'set' + singular,\n      create: 'create' + singular\n    };\n  }\n\n  // the id is in the source table\n  injectAttributes() {\n    const newAttributes = {};\n\n    newAttributes[this.foreignKey] = _.defaults({}, this.foreignKeyAttribute, {\n      type: this.options.keyType || this.target.rawAttributes[this.targetKey].type,\n      allowNull: true\n    });\n\n    if (this.options.constraints !== false) {\n      const source = this.source.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      this.options.onDelete = this.options.onDelete || (source.allowNull ? 'SET NULL' : 'NO ACTION');\n      this.options.onUpdate = this.options.onUpdate || 'CASCADE';\n    }\n\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.target, this.source, this.options, this.targetKeyField);\n    Utils.mergeDefaults(this.source.rawAttributes, newAttributes);\n\n    this.identifierField = this.source.rawAttributes[this.foreignKey].field || this.foreignKey;\n\n    this.source.refreshAttributes();\n\n    Helpers.checkNamingCollision(this);\n\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'set', 'create'];\n\n    Helpers.mixinMethods(this, obj, methods);\n  }\n\n  /**\n   * Get the associated instance.\n   *\n   * @param {Object} [options]\n   * @param {String|Boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false.\n   * @param {String} [options.schema] Apply a schema on the related model\n   * @see {@link Model.findOne} for a full explanation of options\n   * @return {Promise<Model>}\n   */\n  get(instances, options) {\n    const association = this;\n    const where = {};\n    let Target = association.target;\n    let instance;\n\n    options = Utils.cloneDeep(options);\n\n    if (options.hasOwnProperty('scope')) {\n      if (!options.scope) {\n        Target = Target.unscoped();\n      } else {\n        Target = Target.scope(options.scope);\n      }\n    }\n\n    if (options.hasOwnProperty('schema')) {\n      Target = Target.schema(options.schema, options.schemaDelimiter);\n    }\n\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = undefined;\n    }\n\n    if (instances) {\n      where[association.targetKey] = {\n        [Op.in]: instances.map(instance => instance.get(association.foreignKey))\n      };\n    } else {\n      if (association.targetKeyIsPrimary && !options.where) {\n        return Target.findByPk(instance.get(association.foreignKey), options);\n      } else {\n        where[association.targetKey] = instance.get(association.foreignKey);\n        options.limit = null;\n      }\n    }\n\n    options.where = options.where ?\n      {[Op.and]: [where, options.where]} :\n      where;\n\n    if (instances) {\n      return Target.findAll(options).then(results => {\n        const result = {};\n        for (const instance of instances) {\n          result[instance.get(association.foreignKey, {raw: true})] = null;\n        }\n\n        for (const instance of results) {\n          result[instance.get(association.targetKey, {raw: true})] = instance;\n        }\n\n        return result;\n      });\n    }\n\n    return Target.findOne(options);\n  }\n\n  /**\n   * Set the associated model.\n   *\n   * @param {Model|String|Number} [newAssociation] An persisted instance or the primary key of an instance to associate with this. Pass `null` or `undefined` to remove the association.\n   * @param {Object} [options] Options passed to `this.save`\n   * @param {Boolean} [options.save=true] Skip saving this after setting the foreign key if false.\n   * @return {Promise}\n   */\n  set(sourceInstance, associatedInstance, options) {\n    const association = this;\n\n    options = options || {};\n\n    let value = associatedInstance;\n    if (associatedInstance instanceof association.target) {\n      value = associatedInstance[association.targetKey];\n    }\n\n    sourceInstance.set(association.foreignKey, value);\n\n    if (options.save === false) return;\n\n    options = _.extend({\n      fields: [association.foreignKey],\n      allowNull: [association.foreignKey],\n      association: true\n    }, options);\n\n    // passes the changed field to save, so only that field get updated.\n    return sourceInstance.save(options);\n  }\n\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Object} [values]\n   * @param {Object} [options] Options passed to `target.create` and setAssociation.\n   * @see {@link Model#create}  for a full explanation of options\n   * @return {Promise}\n   */\n  create(sourceInstance, values, fieldsOrOptions) {\n    const association = this;\n\n    const options = {};\n\n    if ((fieldsOrOptions || {}).transaction instanceof Transaction) {\n      options.transaction = fieldsOrOptions.transaction;\n    }\n    options.logging = (fieldsOrOptions || {}).logging;\n\n    return association.target.create(values, fieldsOrOptions).then(newAssociatedObject =>\n      sourceInstance[association.accessors.set](newAssociatedObject, options)\n    );\n  }\n}\n\nmodule.exports = BelongsTo;\nmodule.exports.BelongsTo = BelongsTo;\nmodule.exports.default = BelongsTo;\n"]},"metadata":{},"sourceType":"script"}
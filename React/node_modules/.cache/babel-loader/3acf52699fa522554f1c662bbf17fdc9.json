{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _datetimen = _interopRequireDefault(require(\"./datetimen\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst EPOCH_DATE = new Date(1900, 0, 1);\nconst UTC_EPOCH_DATE = new Date(Date.UTC(1900, 0, 1));\nconst SmallDateTime = {\n  id: 0x3A,\n  type: 'DATETIM4',\n  name: 'SmallDateTime',\n  declaration: function declaration() {\n    return 'smalldatetime';\n  },\n  writeTypeInfo: function writeTypeInfo(buffer) {\n    buffer.writeUInt8(_datetimen.default.id);\n    buffer.writeUInt8(4);\n  },\n  writeParameterData: function writeParameterData(buffer, parameter, options, cb) {\n    if (parameter.value != null) {\n      let days, dstDiff, minutes;\n\n      if (options.useUTC) {\n        days = Math.floor((parameter.value.getTime() - UTC_EPOCH_DATE.getTime()) / (1000 * 60 * 60 * 24));\n        minutes = parameter.value.getUTCHours() * 60 + parameter.value.getUTCMinutes();\n      } else {\n        dstDiff = -(parameter.value.getTimezoneOffset() - EPOCH_DATE.getTimezoneOffset()) * 60 * 1000;\n        days = Math.floor((parameter.value.getTime() - EPOCH_DATE.getTime() + dstDiff) / (1000 * 60 * 60 * 24));\n        minutes = parameter.value.getHours() * 60 + parameter.value.getMinutes();\n      }\n\n      buffer.writeUInt8(4);\n      buffer.writeUInt16LE(days);\n      buffer.writeUInt16LE(minutes);\n    } else {\n      buffer.writeUInt8(0);\n    }\n\n    cb();\n  },\n  validate: function validate(value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (!(value instanceof Date)) {\n      value = Date.parse(value);\n    }\n\n    if (isNaN(value)) {\n      return new TypeError('Invalid date.');\n    }\n\n    return value;\n  }\n};\nvar _default = SmallDateTime;\nexports.default = _default;\nmodule.exports = SmallDateTime;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/tedious/lib/data-types/smalldatetime.js"],"names":["Object","defineProperty","exports","value","default","_datetimen","_interopRequireDefault","require","obj","__esModule","EPOCH_DATE","Date","UTC_EPOCH_DATE","UTC","SmallDateTime","id","type","name","declaration","writeTypeInfo","buffer","writeUInt8","writeParameterData","parameter","options","cb","days","dstDiff","minutes","useUTC","Math","floor","getTime","getUTCHours","getUTCMinutes","getTimezoneOffset","getHours","getMinutes","writeUInt16LE","validate","parse","isNaN","TypeError","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _datetimen = _interopRequireDefault(require(\"./datetimen\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst EPOCH_DATE = new Date(1900, 0, 1);\nconst UTC_EPOCH_DATE = new Date(Date.UTC(1900, 0, 1));\nconst SmallDateTime = {\n  id: 0x3A,\n  type: 'DATETIM4',\n  name: 'SmallDateTime',\n  declaration: function declaration() {\n    return 'smalldatetime';\n  },\n  writeTypeInfo: function writeTypeInfo(buffer) {\n    buffer.writeUInt8(_datetimen.default.id);\n    buffer.writeUInt8(4);\n  },\n  writeParameterData: function writeParameterData(buffer, parameter, options, cb) {\n    if (parameter.value != null) {\n      let days, dstDiff, minutes;\n\n      if (options.useUTC) {\n        days = Math.floor((parameter.value.getTime() - UTC_EPOCH_DATE.getTime()) / (1000 * 60 * 60 * 24));\n        minutes = parameter.value.getUTCHours() * 60 + parameter.value.getUTCMinutes();\n      } else {\n        dstDiff = -(parameter.value.getTimezoneOffset() - EPOCH_DATE.getTimezoneOffset()) * 60 * 1000;\n        days = Math.floor((parameter.value.getTime() - EPOCH_DATE.getTime() + dstDiff) / (1000 * 60 * 60 * 24));\n        minutes = parameter.value.getHours() * 60 + parameter.value.getMinutes();\n      }\n\n      buffer.writeUInt8(4);\n      buffer.writeUInt16LE(days);\n      buffer.writeUInt16LE(minutes);\n    } else {\n      buffer.writeUInt8(0);\n    }\n\n    cb();\n  },\n  validate: function validate(value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (!(value instanceof Date)) {\n      value = Date.parse(value);\n    }\n\n    if (isNaN(value)) {\n      return new TypeError('Invalid date.');\n    }\n\n    return value;\n  }\n};\nvar _default = SmallDateTime;\nexports.default = _default;\nmodule.exports = SmallDateTime;"]},"metadata":{},"sourceType":"script"}
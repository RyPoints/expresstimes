{"ast":null,"code":"'use strict';\n\nconst BaseError = require('./base-error');\n/**\n * Validation Error. Thrown when the sequelize validation has failed. The error contains an `errors` property,\n * which is an array with 1 or more ValidationErrorItems, one for each validation that failed.\n *\n * @param {string} message Error message\n * @param {Array} [errors] Array of ValidationErrorItem objects describing the validation errors\n *\n * @property errors {ValidationErrorItems[]}\n */\n\n\nclass ValidationError extends BaseError {\n  constructor(message, errors) {\n    super(message);\n    this.name = 'SequelizeValidationError';\n    this.message = 'Validation Error';\n    /**\n     *\n     * @type {ValidationErrorItem[]}\n     */\n\n    this.errors = errors || []; // Use provided error message if available...\n\n    if (message) {\n      this.message = message; // ... otherwise create a concatenated message out of existing errors.\n    } else if (this.errors.length > 0 && this.errors[0].message) {\n      this.message = this.errors.map(err => `${err.type || err.origin}: ${err.message}`).join(',\\n');\n    }\n\n    Error.captureStackTrace(this, this.constructor);\n  }\n  /**\n   * Gets all validation error items for the path / field specified.\n   *\n   * @param {string} path The path to be checked for error items\n   *\n   * @returns {Array<ValidationErrorItem>} Validation error items for the specified path\n   */\n\n\n  get(path) {\n    return this.errors.reduce((reduced, error) => {\n      if (error.path === path) {\n        reduced.push(error);\n      }\n\n      return reduced;\n    }, []);\n  }\n\n}\n/**\n * Validation Error Item\n * Instances of this class are included in the `ValidationError.errors` property.\n */\n\n\nclass ValidationErrorItem {\n  /**\n   * Creates new validation error item\n   *\n   * @param {string} message An error message\n   * @param {string} type The type/origin of the validation error\n   * @param {string} path The field that triggered the validation error\n   * @param {string} value The value that generated the error\n   * @param {Object} [inst] the DAO instance that caused the validation error\n   * @param {Object} [validatorKey] a validation \"key\", used for identification\n   * @param {string} [fnName] property name of the BUILT-IN validator function that caused the validation error (e.g. \"in\" or \"len\"), if applicable\n   * @param {string} [fnArgs] parameters used with the BUILT-IN validator function, if applicable\n   */\n  constructor(message, type, path, value, inst, validatorKey, fnName, fnArgs) {\n    /**\n     * An error message\n     *\n     * @type {string} message\n     */\n    this.message = message || '';\n    /**\n     * The type/origin of the validation error\n     *\n     * @type {string}\n     */\n\n    this.type = null;\n    /**\n     * The field that triggered the validation error\n     *\n     * @type {string}\n     */\n\n    this.path = path || null;\n    /**\n     * The value that generated the error\n     *\n     * @type {string}\n     */\n\n    this.value = value !== undefined ? value : null;\n    this.origin = null;\n    /**\n     * The DAO instance that caused the validation error\n     *\n     * @type {Model}\n     */\n\n    this.instance = inst || null;\n    /**\n     * A validation \"key\", used for identification\n     *\n     * @type {string}\n     */\n\n    this.validatorKey = validatorKey || null;\n    /**\n     * Property name of the BUILT-IN validator function that caused the validation error (e.g. \"in\" or \"len\"), if applicable\n     *\n     * @type {string}\n     */\n\n    this.validatorName = fnName || null;\n    /**\n     * Parameters used with the BUILT-IN validator function, if applicable\n     *\n     * @type {string}\n     */\n\n    this.validatorArgs = fnArgs || [];\n\n    if (type) {\n      if (ValidationErrorItem.Origins[type]) {\n        this.origin = type;\n      } else {\n        const lowercaseType = `${type}`.toLowerCase().trim();\n        const realType = ValidationErrorItem.TypeStringMap[lowercaseType];\n\n        if (realType && ValidationErrorItem.Origins[realType]) {\n          this.origin = realType;\n          this.type = type;\n        }\n      }\n    } // This doesn't need captureStackTrace because it's not a subclass of Error\n\n  }\n  /**\n   * return a lowercase, trimmed string \"key\" that identifies the validator.\n   *\n   * Note: the string will be empty if the instance has neither a valid `validatorKey` property nor a valid `validatorName` property\n   *\n   * @param   {boolean} [useTypeAsNS=true]      controls whether the returned value is \"namespace\",\n   *                                            this parameter is ignored if the validator's `type` is not one of ValidationErrorItem.Origins\n   * @param   {string}  [NSSeparator='.']       a separator string for concatenating the namespace, must be not be empty,\n   *                                            defaults to \".\" (fullstop). only used and validated if useTypeAsNS is TRUE.\n   * @throws  {Error}                           thrown if NSSeparator is found to be invalid.\n   * @returns  {string}\n   *\n   * @private\n   */\n\n\n  getValidatorKey(useTypeAsNS, NSSeparator) {\n    const useTANS = useTypeAsNS === undefined || !!useTypeAsNS;\n    const NSSep = NSSeparator === undefined ? '.' : NSSeparator;\n    const type = this.origin;\n    const key = this.validatorKey || this.validatorName;\n    const useNS = useTANS && type && ValidationErrorItem.Origins[type];\n\n    if (useNS && (typeof NSSep !== 'string' || !NSSep.length)) {\n      throw new Error('Invalid namespace separator given, must be a non-empty string');\n    }\n\n    if (!(typeof key === 'string' && key.length)) {\n      return '';\n    }\n\n    return (useNS ? [type, key].join(NSSep) : key).toLowerCase().trim();\n  }\n\n}\n/**\n * An enum that defines valid ValidationErrorItem `origin` values\n *\n * @type {Object}\n * @property CORE       {string}  specifies errors that originate from the sequelize \"core\"\n * @property DB         {string}  specifies validation errors that originate from the storage engine\n * @property FUNCTION   {string}  specifies validation errors that originate from validator functions (both built-in and custom) defined for a given attribute\n */\n\n\nValidationErrorItem.Origins = {\n  CORE: 'CORE',\n  DB: 'DB',\n  FUNCTION: 'FUNCTION'\n};\n/**\n * An object that is used internally by the `ValidationErrorItem` class\n * that maps current `type` strings (as given to ValidationErrorItem.constructor()) to\n * our new `origin` values.\n *\n * @type {Object}\n */\n\nValidationErrorItem.TypeStringMap = {\n  'notnull violation': 'CORE',\n  'string violation': 'CORE',\n  'unique violation': 'DB',\n  'validation error': 'FUNCTION'\n};\nmodule.exports = ValidationError;\nmodule.exports.ValidationErrorItem = ValidationErrorItem;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/sequelize/lib/errors/validation-error.js"],"names":["BaseError","require","ValidationError","constructor","message","errors","name","length","map","err","type","origin","join","Error","captureStackTrace","get","path","reduce","reduced","error","push","ValidationErrorItem","value","inst","validatorKey","fnName","fnArgs","undefined","instance","validatorName","validatorArgs","Origins","lowercaseType","toLowerCase","trim","realType","TypeStringMap","getValidatorKey","useTypeAsNS","NSSeparator","useTANS","NSSep","key","useNS","CORE","DB","FUNCTION","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst BaseError = require('./base-error');\n\n/**\n * Validation Error. Thrown when the sequelize validation has failed. The error contains an `errors` property,\n * which is an array with 1 or more ValidationErrorItems, one for each validation that failed.\n *\n * @param {string} message Error message\n * @param {Array} [errors] Array of ValidationErrorItem objects describing the validation errors\n *\n * @property errors {ValidationErrorItems[]}\n */\nclass ValidationError extends BaseError {\n  constructor(message, errors) {\n    super(message);\n    this.name = 'SequelizeValidationError';\n    this.message = 'Validation Error';\n    /**\n     *\n     * @type {ValidationErrorItem[]}\n     */\n    this.errors = errors || [];\n\n    // Use provided error message if available...\n    if (message) {\n      this.message = message;\n\n      // ... otherwise create a concatenated message out of existing errors.\n    } else if (this.errors.length > 0 && this.errors[0].message) {\n      this.message = this.errors.map(err => `${err.type || err.origin}: ${err.message}`).join(',\\n');\n    }\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n  /**\n   * Gets all validation error items for the path / field specified.\n   *\n   * @param {string} path The path to be checked for error items\n   *\n   * @returns {Array<ValidationErrorItem>} Validation error items for the specified path\n   */\n  get(path) {\n    return this.errors.reduce((reduced, error) => {\n      if (error.path === path) {\n        reduced.push(error);\n      }\n      return reduced;\n    }, []);\n  }\n}\n\n/**\n * Validation Error Item\n * Instances of this class are included in the `ValidationError.errors` property.\n */\nclass ValidationErrorItem {\n  /**\n   * Creates new validation error item\n   *\n   * @param {string} message An error message\n   * @param {string} type The type/origin of the validation error\n   * @param {string} path The field that triggered the validation error\n   * @param {string} value The value that generated the error\n   * @param {Object} [inst] the DAO instance that caused the validation error\n   * @param {Object} [validatorKey] a validation \"key\", used for identification\n   * @param {string} [fnName] property name of the BUILT-IN validator function that caused the validation error (e.g. \"in\" or \"len\"), if applicable\n   * @param {string} [fnArgs] parameters used with the BUILT-IN validator function, if applicable\n   */\n  constructor(message, type, path, value, inst, validatorKey, fnName, fnArgs) {\n    /**\n     * An error message\n     *\n     * @type {string} message\n     */\n    this.message = message || '';\n\n    /**\n     * The type/origin of the validation error\n     *\n     * @type {string}\n     */\n    this.type = null;\n\n    /**\n     * The field that triggered the validation error\n     *\n     * @type {string}\n     */\n    this.path = path || null;\n\n    /**\n     * The value that generated the error\n     *\n     * @type {string}\n     */\n    this.value = value !== undefined ? value : null;\n\n    this.origin = null;\n\n    /**\n     * The DAO instance that caused the validation error\n     *\n     * @type {Model}\n     */\n    this.instance = inst || null;\n\n    /**\n     * A validation \"key\", used for identification\n     *\n     * @type {string}\n     */\n    this.validatorKey = validatorKey || null;\n\n    /**\n     * Property name of the BUILT-IN validator function that caused the validation error (e.g. \"in\" or \"len\"), if applicable\n     *\n     * @type {string}\n     */\n    this.validatorName = fnName || null;\n\n    /**\n     * Parameters used with the BUILT-IN validator function, if applicable\n     *\n     * @type {string}\n     */\n    this.validatorArgs = fnArgs || [];\n\n    if (type) {\n      if (ValidationErrorItem.Origins[ type ]) {\n        this.origin = type;\n      } else {\n        const lowercaseType = `${type}`.toLowerCase().trim();\n        const realType = ValidationErrorItem.TypeStringMap[ lowercaseType ];\n\n        if (realType && ValidationErrorItem.Origins[ realType ]) {\n          this.origin = realType;\n          this.type = type;\n        }\n      }\n    }\n\n    // This doesn't need captureStackTrace because it's not a subclass of Error\n  }\n\n  /**\n   * return a lowercase, trimmed string \"key\" that identifies the validator.\n   *\n   * Note: the string will be empty if the instance has neither a valid `validatorKey` property nor a valid `validatorName` property\n   *\n   * @param   {boolean} [useTypeAsNS=true]      controls whether the returned value is \"namespace\",\n   *                                            this parameter is ignored if the validator's `type` is not one of ValidationErrorItem.Origins\n   * @param   {string}  [NSSeparator='.']       a separator string for concatenating the namespace, must be not be empty,\n   *                                            defaults to \".\" (fullstop). only used and validated if useTypeAsNS is TRUE.\n   * @throws  {Error}                           thrown if NSSeparator is found to be invalid.\n   * @returns  {string}\n   *\n   * @private\n   */\n  getValidatorKey(useTypeAsNS, NSSeparator) {\n    const useTANS = useTypeAsNS === undefined || !!useTypeAsNS;\n    const NSSep = NSSeparator === undefined ? '.' : NSSeparator;\n\n    const type = this.origin;\n    const key = this.validatorKey || this.validatorName;\n    const useNS = useTANS && type && ValidationErrorItem.Origins[ type ];\n\n    if (useNS && (typeof NSSep !== 'string' || !NSSep.length)) {\n      throw new Error('Invalid namespace separator given, must be a non-empty string');\n    }\n\n    if (!(typeof key === 'string' && key.length)) {\n      return '';\n    }\n\n    return (useNS ? [type, key].join(NSSep) : key).toLowerCase().trim();\n  }\n}\n\n/**\n * An enum that defines valid ValidationErrorItem `origin` values\n *\n * @type {Object}\n * @property CORE       {string}  specifies errors that originate from the sequelize \"core\"\n * @property DB         {string}  specifies validation errors that originate from the storage engine\n * @property FUNCTION   {string}  specifies validation errors that originate from validator functions (both built-in and custom) defined for a given attribute\n */\nValidationErrorItem.Origins = {\n  CORE: 'CORE',\n  DB: 'DB',\n  FUNCTION: 'FUNCTION'\n};\n\n/**\n * An object that is used internally by the `ValidationErrorItem` class\n * that maps current `type` strings (as given to ValidationErrorItem.constructor()) to\n * our new `origin` values.\n *\n * @type {Object}\n */\nValidationErrorItem.TypeStringMap = {\n  'notnull violation': 'CORE',\n  'string violation': 'CORE',\n  'unique violation': 'DB',\n  'validation error': 'FUNCTION'\n};\n\nmodule.exports = ValidationError;\nmodule.exports.ValidationErrorItem = ValidationErrorItem;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { HttpHeaders } from \"./httpHeaders\";\nimport { Serializer } from \"./serializer\";\nimport { generateUuid } from \"./util/utils\";\n/**\n * Creates a new WebResource object.\n *\n * This class provides an abstraction over a REST call by being library / implementation agnostic and wrapping the necessary\n * properties to initiate a request.\n *\n * @constructor\n */\n\nvar WebResource =\n/** @class */\nfunction () {\n  function WebResource(url, method, body, query, headers, streamResponseBody, withCredentials, abortSignal, timeout, onUploadProgress, onDownloadProgress, proxySettings) {\n    this.streamResponseBody = streamResponseBody;\n    this.url = url || \"\";\n    this.method = method || \"GET\";\n    this.headers = headers instanceof HttpHeaders ? headers : new HttpHeaders(headers);\n    this.body = body;\n    this.query = query;\n    this.formData = undefined;\n    this.withCredentials = withCredentials || false;\n    this.abortSignal = abortSignal;\n    this.timeout = timeout || 0;\n    this.onUploadProgress = onUploadProgress;\n    this.onDownloadProgress = onDownloadProgress;\n    this.proxySettings = proxySettings;\n  }\n  /**\n   * Validates that the required properties such as method, url, headers[\"Content-Type\"],\n   * headers[\"accept-language\"] are defined. It will throw an error if one of the above\n   * mentioned properties are not defined.\n   */\n\n\n  WebResource.prototype.validateRequestProperties = function () {\n    if (!this.method) {\n      throw new Error(\"WebResource.method is required.\");\n    }\n\n    if (!this.url) {\n      throw new Error(\"WebResource.url is required.\");\n    }\n  };\n  /**\n   * Prepares the request.\n   * @param {RequestPrepareOptions} options Options to provide for preparing the request.\n   * @returns {WebResource} Returns the prepared WebResource (HTTP Request) object that needs to be given to the request pipeline.\n   */\n\n\n  WebResource.prototype.prepare = function (options) {\n    if (!options) {\n      throw new Error(\"options object is required\");\n    }\n\n    if (options.method == undefined || typeof options.method.valueOf() !== \"string\") {\n      throw new Error(\"options.method must be a string.\");\n    }\n\n    if (options.url && options.pathTemplate) {\n      throw new Error(\"options.url and options.pathTemplate are mutually exclusive. Please provide exactly one of them.\");\n    }\n\n    if ((options.pathTemplate == undefined || typeof options.pathTemplate.valueOf() !== \"string\") && (options.url == undefined || typeof options.url.valueOf() !== \"string\")) {\n      throw new Error(\"Please provide exactly one of options.pathTemplate or options.url.\");\n    } // set the url if it is provided.\n\n\n    if (options.url) {\n      if (typeof options.url !== \"string\") {\n        throw new Error(\"options.url must be of type \\\"string\\\".\");\n      }\n\n      this.url = options.url;\n    } // set the method\n\n\n    if (options.method) {\n      var validMethods = [\"GET\", \"PUT\", \"HEAD\", \"DELETE\", \"OPTIONS\", \"POST\", \"PATCH\", \"TRACE\"];\n\n      if (validMethods.indexOf(options.method.toUpperCase()) === -1) {\n        throw new Error(\"The provided method \\\"\" + options.method + \"\\\" is invalid. Supported HTTP methods are: \" + JSON.stringify(validMethods));\n      }\n    }\n\n    this.method = options.method.toUpperCase(); // construct the url if path template is provided\n\n    if (options.pathTemplate) {\n      var pathTemplate_1 = options.pathTemplate,\n          pathParameters_1 = options.pathParameters;\n\n      if (typeof pathTemplate_1 !== \"string\") {\n        throw new Error(\"options.pathTemplate must be of type \\\"string\\\".\");\n      }\n\n      if (!options.baseUrl) {\n        options.baseUrl = \"https://management.azure.com\";\n      }\n\n      var baseUrl = options.baseUrl;\n      var url_1 = baseUrl + (baseUrl.endsWith(\"/\") ? \"\" : \"/\") + (pathTemplate_1.startsWith(\"/\") ? pathTemplate_1.slice(1) : pathTemplate_1);\n      var segments = url_1.match(/({\\w*\\s*\\w*})/ig);\n\n      if (segments && segments.length) {\n        if (!pathParameters_1) {\n          throw new Error(\"pathTemplate: \" + pathTemplate_1 + \" has been provided. Hence, options.pathParameters must also be provided.\");\n        }\n\n        segments.forEach(function (item) {\n          var pathParamName = item.slice(1, -1);\n          var pathParam = pathParameters_1[pathParamName];\n\n          if (pathParam === null || pathParam === undefined || !(typeof pathParam === \"string\" || typeof pathParam === \"object\")) {\n            throw new Error(\"pathTemplate: \" + pathTemplate_1 + \" contains the path parameter \" + pathParamName + (\" however, it is not present in \" + pathParameters_1 + \" - \" + JSON.stringify(pathParameters_1, undefined, 2) + \".\") + (\"The value of the path parameter can either be a \\\"string\\\" of the form { \" + pathParamName + \": \\\"some sample value\\\" } or \") + (\"it can be an \\\"object\\\" of the form { \\\"\" + pathParamName + \"\\\": { value: \\\"some sample value\\\", skipUrlEncoding: true } }.\"));\n          }\n\n          if (typeof pathParam.valueOf() === \"string\") {\n            url_1 = url_1.replace(item, encodeURIComponent(pathParam));\n          }\n\n          if (typeof pathParam.valueOf() === \"object\") {\n            if (!pathParam.value) {\n              throw new Error(\"options.pathParameters[\" + pathParamName + \"] is of type \\\"object\\\" but it does not contain a \\\"value\\\" property.\");\n            }\n\n            if (pathParam.skipUrlEncoding) {\n              url_1 = url_1.replace(item, pathParam.value);\n            } else {\n              url_1 = url_1.replace(item, encodeURIComponent(pathParam.value));\n            }\n          }\n        });\n      }\n\n      this.url = url_1;\n    } // append query parameters to the url if they are provided. They can be provided with pathTemplate or url option.\n\n\n    if (options.queryParameters) {\n      var queryParameters = options.queryParameters;\n\n      if (typeof queryParameters !== \"object\") {\n        throw new Error(\"options.queryParameters must be of type object. It should be a JSON object \" + \"of \\\"query-parameter-name\\\" as the key and the \\\"query-parameter-value\\\" as the value. \" + \"The \\\"query-parameter-value\\\" may be fo type \\\"string\\\" or an \\\"object\\\" of the form { value: \\\"query-parameter-value\\\", skipUrlEncoding: true }.\");\n      } // append question mark if it is not present in the url\n\n\n      if (this.url && this.url.indexOf(\"?\") === -1) {\n        this.url += \"?\";\n      } // construct queryString\n\n\n      var queryParams = []; // We need to populate this.query as a dictionary if the request is being used for Sway's validateRequest().\n\n      this.query = {};\n\n      for (var queryParamName in queryParameters) {\n        var queryParam = queryParameters[queryParamName];\n\n        if (queryParam) {\n          if (typeof queryParam === \"string\") {\n            queryParams.push(queryParamName + \"=\" + encodeURIComponent(queryParam));\n            this.query[queryParamName] = encodeURIComponent(queryParam);\n          } else if (typeof queryParam === \"object\") {\n            if (!queryParam.value) {\n              throw new Error(\"options.queryParameters[\" + queryParamName + \"] is of type \\\"object\\\" but it does not contain a \\\"value\\\" property.\");\n            }\n\n            if (queryParam.skipUrlEncoding) {\n              queryParams.push(queryParamName + \"=\" + queryParam.value);\n              this.query[queryParamName] = queryParam.value;\n            } else {\n              queryParams.push(queryParamName + \"=\" + encodeURIComponent(queryParam.value));\n              this.query[queryParamName] = encodeURIComponent(queryParam.value);\n            }\n          }\n        }\n      } // end-of-for\n      // append the queryString\n\n\n      this.url += queryParams.join(\"&\");\n    } // add headers to the request if they are provided\n\n\n    if (options.headers) {\n      var headers = options.headers;\n\n      for (var _i = 0, _a = Object.keys(options.headers); _i < _a.length; _i++) {\n        var headerName = _a[_i];\n        this.headers.set(headerName, headers[headerName]);\n      }\n    } // ensure accept-language is set correctly\n\n\n    if (!this.headers.get(\"accept-language\")) {\n      this.headers.set(\"accept-language\", \"en-US\");\n    } // ensure the request-id is set correctly\n\n\n    if (!this.headers.get(\"x-ms-client-request-id\") && !options.disableClientRequestId) {\n      this.headers.set(\"x-ms-client-request-id\", generateUuid());\n    } // default\n\n\n    if (!this.headers.get(\"Content-Type\")) {\n      this.headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n    } // set the request body. request.js automatically sets the Content-Length request header, so we need not set it explicilty\n\n\n    this.body = options.body;\n\n    if (options.body != undefined) {\n      // body as a stream special case. set the body as-is and check for some special request headers specific to sending a stream.\n      if (options.bodyIsStream) {\n        if (!this.headers.get(\"Transfer-Encoding\")) {\n          this.headers.set(\"Transfer-Encoding\", \"chunked\");\n        }\n\n        if (this.headers.get(\"Content-Type\") !== \"application/octet-stream\") {\n          this.headers.set(\"Content-Type\", \"application/octet-stream\");\n        }\n      } else {\n        if (options.serializationMapper) {\n          this.body = new Serializer(options.mappers).serialize(options.serializationMapper, options.body, \"requestBody\");\n        }\n\n        if (!options.disableJsonStringifyOnBody) {\n          this.body = JSON.stringify(options.body);\n        }\n      }\n    }\n\n    this.abortSignal = options.abortSignal;\n    this.onDownloadProgress = options.onDownloadProgress;\n    this.onUploadProgress = options.onUploadProgress;\n    return this;\n  };\n  /**\n   * Clone this WebResource HTTP request object.\n   * @returns {WebResource} The clone of this WebResource HTTP request object.\n   */\n\n\n  WebResource.prototype.clone = function () {\n    var result = new WebResource(this.url, this.method, this.body, this.query, this.headers && this.headers.clone(), this.streamResponseBody, this.withCredentials, this.abortSignal, this.timeout, this.onUploadProgress, this.onDownloadProgress);\n\n    if (this.formData) {\n      result.formData = this.formData;\n    }\n\n    if (this.operationSpec) {\n      result.operationSpec = this.operationSpec;\n    }\n\n    if (this.shouldDeserialize) {\n      result.shouldDeserialize = this.shouldDeserialize;\n    }\n\n    if (this.operationResponseGetter) {\n      result.operationResponseGetter = this.operationResponseGetter;\n    }\n\n    return result;\n  };\n\n  return WebResource;\n}();\n\nexport { WebResource };","map":{"version":3,"sources":["../../lib/webResource.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for license information.\nimport { HttpHeaders } from \"./httpHeaders\";\nimport { Serializer } from \"./serializer\";\nimport { generateUuid } from \"./util/utils\";\n/**\n * Creates a new WebResource object.\n *\n * This class provides an abstraction over a REST call by being library / implementation agnostic and wrapping the necessary\n * properties to initiate a request.\n *\n * @constructor\n */\nvar WebResource = /** @class */ (function () {\n    function WebResource(url, method, body, query, headers, streamResponseBody, withCredentials, abortSignal, timeout, onUploadProgress, onDownloadProgress, proxySettings) {\n        this.streamResponseBody = streamResponseBody;\n        this.url = url || \"\";\n        this.method = method || \"GET\";\n        this.headers = (headers instanceof HttpHeaders ? headers : new HttpHeaders(headers));\n        this.body = body;\n        this.query = query;\n        this.formData = undefined;\n        this.withCredentials = withCredentials || false;\n        this.abortSignal = abortSignal;\n        this.timeout = timeout || 0;\n        this.onUploadProgress = onUploadProgress;\n        this.onDownloadProgress = onDownloadProgress;\n        this.proxySettings = proxySettings;\n    }\n    /**\n     * Validates that the required properties such as method, url, headers[\"Content-Type\"],\n     * headers[\"accept-language\"] are defined. It will throw an error if one of the above\n     * mentioned properties are not defined.\n     */\n    WebResource.prototype.validateRequestProperties = function () {\n        if (!this.method) {\n            throw new Error(\"WebResource.method is required.\");\n        }\n        if (!this.url) {\n            throw new Error(\"WebResource.url is required.\");\n        }\n    };\n    /**\n     * Prepares the request.\n     * @param {RequestPrepareOptions} options Options to provide for preparing the request.\n     * @returns {WebResource} Returns the prepared WebResource (HTTP Request) object that needs to be given to the request pipeline.\n     */\n    WebResource.prototype.prepare = function (options) {\n        if (!options) {\n            throw new Error(\"options object is required\");\n        }\n        if (options.method == undefined || typeof options.method.valueOf() !== \"string\") {\n            throw new Error(\"options.method must be a string.\");\n        }\n        if (options.url && options.pathTemplate) {\n            throw new Error(\"options.url and options.pathTemplate are mutually exclusive. Please provide exactly one of them.\");\n        }\n        if ((options.pathTemplate == undefined || typeof options.pathTemplate.valueOf() !== \"string\") && (options.url == undefined || typeof options.url.valueOf() !== \"string\")) {\n            throw new Error(\"Please provide exactly one of options.pathTemplate or options.url.\");\n        }\n        // set the url if it is provided.\n        if (options.url) {\n            if (typeof options.url !== \"string\") {\n                throw new Error(\"options.url must be of type \\\"string\\\".\");\n            }\n            this.url = options.url;\n        }\n        // set the method\n        if (options.method) {\n            var validMethods = [\"GET\", \"PUT\", \"HEAD\", \"DELETE\", \"OPTIONS\", \"POST\", \"PATCH\", \"TRACE\"];\n            if (validMethods.indexOf(options.method.toUpperCase()) === -1) {\n                throw new Error(\"The provided method \\\"\" + options.method + \"\\\" is invalid. Supported HTTP methods are: \" + JSON.stringify(validMethods));\n            }\n        }\n        this.method = options.method.toUpperCase();\n        // construct the url if path template is provided\n        if (options.pathTemplate) {\n            var pathTemplate_1 = options.pathTemplate, pathParameters_1 = options.pathParameters;\n            if (typeof pathTemplate_1 !== \"string\") {\n                throw new Error(\"options.pathTemplate must be of type \\\"string\\\".\");\n            }\n            if (!options.baseUrl) {\n                options.baseUrl = \"https://management.azure.com\";\n            }\n            var baseUrl = options.baseUrl;\n            var url_1 = baseUrl + (baseUrl.endsWith(\"/\") ? \"\" : \"/\") + (pathTemplate_1.startsWith(\"/\") ? pathTemplate_1.slice(1) : pathTemplate_1);\n            var segments = url_1.match(/({\\w*\\s*\\w*})/ig);\n            if (segments && segments.length) {\n                if (!pathParameters_1) {\n                    throw new Error(\"pathTemplate: \" + pathTemplate_1 + \" has been provided. Hence, options.pathParameters must also be provided.\");\n                }\n                segments.forEach(function (item) {\n                    var pathParamName = item.slice(1, -1);\n                    var pathParam = pathParameters_1[pathParamName];\n                    if (pathParam === null || pathParam === undefined || !(typeof pathParam === \"string\" || typeof pathParam === \"object\")) {\n                        throw new Error(\"pathTemplate: \" + pathTemplate_1 + \" contains the path parameter \" + pathParamName +\n                            (\" however, it is not present in \" + pathParameters_1 + \" - \" + JSON.stringify(pathParameters_1, undefined, 2) + \".\") +\n                            (\"The value of the path parameter can either be a \\\"string\\\" of the form { \" + pathParamName + \": \\\"some sample value\\\" } or \") +\n                            (\"it can be an \\\"object\\\" of the form { \\\"\" + pathParamName + \"\\\": { value: \\\"some sample value\\\", skipUrlEncoding: true } }.\"));\n                    }\n                    if (typeof pathParam.valueOf() === \"string\") {\n                        url_1 = url_1.replace(item, encodeURIComponent(pathParam));\n                    }\n                    if (typeof pathParam.valueOf() === \"object\") {\n                        if (!pathParam.value) {\n                            throw new Error(\"options.pathParameters[\" + pathParamName + \"] is of type \\\"object\\\" but it does not contain a \\\"value\\\" property.\");\n                        }\n                        if (pathParam.skipUrlEncoding) {\n                            url_1 = url_1.replace(item, pathParam.value);\n                        }\n                        else {\n                            url_1 = url_1.replace(item, encodeURIComponent(pathParam.value));\n                        }\n                    }\n                });\n            }\n            this.url = url_1;\n        }\n        // append query parameters to the url if they are provided. They can be provided with pathTemplate or url option.\n        if (options.queryParameters) {\n            var queryParameters = options.queryParameters;\n            if (typeof queryParameters !== \"object\") {\n                throw new Error(\"options.queryParameters must be of type object. It should be a JSON object \" +\n                    \"of \\\"query-parameter-name\\\" as the key and the \\\"query-parameter-value\\\" as the value. \" +\n                    \"The \\\"query-parameter-value\\\" may be fo type \\\"string\\\" or an \\\"object\\\" of the form { value: \\\"query-parameter-value\\\", skipUrlEncoding: true }.\");\n            }\n            // append question mark if it is not present in the url\n            if (this.url && this.url.indexOf(\"?\") === -1) {\n                this.url += \"?\";\n            }\n            // construct queryString\n            var queryParams = [];\n            // We need to populate this.query as a dictionary if the request is being used for Sway's validateRequest().\n            this.query = {};\n            for (var queryParamName in queryParameters) {\n                var queryParam = queryParameters[queryParamName];\n                if (queryParam) {\n                    if (typeof queryParam === \"string\") {\n                        queryParams.push(queryParamName + \"=\" + encodeURIComponent(queryParam));\n                        this.query[queryParamName] = encodeURIComponent(queryParam);\n                    }\n                    else if (typeof queryParam === \"object\") {\n                        if (!queryParam.value) {\n                            throw new Error(\"options.queryParameters[\" + queryParamName + \"] is of type \\\"object\\\" but it does not contain a \\\"value\\\" property.\");\n                        }\n                        if (queryParam.skipUrlEncoding) {\n                            queryParams.push(queryParamName + \"=\" + queryParam.value);\n                            this.query[queryParamName] = queryParam.value;\n                        }\n                        else {\n                            queryParams.push(queryParamName + \"=\" + encodeURIComponent(queryParam.value));\n                            this.query[queryParamName] = encodeURIComponent(queryParam.value);\n                        }\n                    }\n                }\n            } // end-of-for\n            // append the queryString\n            this.url += queryParams.join(\"&\");\n        }\n        // add headers to the request if they are provided\n        if (options.headers) {\n            var headers = options.headers;\n            for (var _i = 0, _a = Object.keys(options.headers); _i < _a.length; _i++) {\n                var headerName = _a[_i];\n                this.headers.set(headerName, headers[headerName]);\n            }\n        }\n        // ensure accept-language is set correctly\n        if (!this.headers.get(\"accept-language\")) {\n            this.headers.set(\"accept-language\", \"en-US\");\n        }\n        // ensure the request-id is set correctly\n        if (!this.headers.get(\"x-ms-client-request-id\") && !options.disableClientRequestId) {\n            this.headers.set(\"x-ms-client-request-id\", generateUuid());\n        }\n        // default\n        if (!this.headers.get(\"Content-Type\")) {\n            this.headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n        }\n        // set the request body. request.js automatically sets the Content-Length request header, so we need not set it explicilty\n        this.body = options.body;\n        if (options.body != undefined) {\n            // body as a stream special case. set the body as-is and check for some special request headers specific to sending a stream.\n            if (options.bodyIsStream) {\n                if (!this.headers.get(\"Transfer-Encoding\")) {\n                    this.headers.set(\"Transfer-Encoding\", \"chunked\");\n                }\n                if (this.headers.get(\"Content-Type\") !== \"application/octet-stream\") {\n                    this.headers.set(\"Content-Type\", \"application/octet-stream\");\n                }\n            }\n            else {\n                if (options.serializationMapper) {\n                    this.body = new Serializer(options.mappers).serialize(options.serializationMapper, options.body, \"requestBody\");\n                }\n                if (!options.disableJsonStringifyOnBody) {\n                    this.body = JSON.stringify(options.body);\n                }\n            }\n        }\n        this.abortSignal = options.abortSignal;\n        this.onDownloadProgress = options.onDownloadProgress;\n        this.onUploadProgress = options.onUploadProgress;\n        return this;\n    };\n    /**\n     * Clone this WebResource HTTP request object.\n     * @returns {WebResource} The clone of this WebResource HTTP request object.\n     */\n    WebResource.prototype.clone = function () {\n        var result = new WebResource(this.url, this.method, this.body, this.query, this.headers && this.headers.clone(), this.streamResponseBody, this.withCredentials, this.abortSignal, this.timeout, this.onUploadProgress, this.onDownloadProgress);\n        if (this.formData) {\n            result.formData = this.formData;\n        }\n        if (this.operationSpec) {\n            result.operationSpec = this.operationSpec;\n        }\n        if (this.shouldDeserialize) {\n            result.shouldDeserialize = this.shouldDeserialize;\n        }\n        if (this.operationResponseGetter) {\n            result.operationResponseGetter = this.operationResponseGetter;\n        }\n        return result;\n    };\n    return WebResource;\n}());\nexport { WebResource };\n//# sourceMappingURL=webResource.js.map"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _token = require(\"./token\");\n\nconst types = {\n  1: {\n    name: 'DATABASE',\n    event: 'databaseChange'\n  },\n  2: {\n    name: 'LANGUAGE',\n    event: 'languageChange'\n  },\n  3: {\n    name: 'CHARSET',\n    event: 'charsetChange'\n  },\n  4: {\n    name: 'PACKET_SIZE',\n    event: 'packetSizeChange'\n  },\n  7: {\n    name: 'SQL_COLLATION',\n    event: 'sqlCollationChange'\n  },\n  8: {\n    name: 'BEGIN_TXN',\n    event: 'beginTransaction'\n  },\n  9: {\n    name: 'COMMIT_TXN',\n    event: 'commitTransaction'\n  },\n  10: {\n    name: 'ROLLBACK_TXN',\n    event: 'rollbackTransaction'\n  },\n  13: {\n    name: 'DATABASE_MIRRORING_PARTNER',\n    event: 'partnerNode'\n  },\n  17: {\n    name: 'TXN_ENDED'\n  },\n  18: {\n    name: 'RESET_CONNECTION',\n    event: 'resetConnection'\n  },\n  20: {\n    name: 'ROUTING_CHANGE',\n    event: 'routingChange'\n  }\n};\n\nfunction readNewAndOldValue(parser, length, type, callback) {\n  switch (type.name) {\n    case 'DATABASE':\n    case 'LANGUAGE':\n    case 'CHARSET':\n    case 'PACKET_SIZE':\n    case 'DATABASE_MIRRORING_PARTNER':\n      return parser.readBVarChar(newValue => {\n        parser.readBVarChar(oldValue => {\n          switch (type.name) {\n            case 'PACKET_SIZE':\n              return callback(new _token.PacketSizeEnvChangeToken(parseInt(newValue), parseInt(oldValue)));\n\n            case 'DATABASE':\n              return callback(new _token.DatabaseEnvChangeToken(newValue, oldValue));\n\n            case 'LANGUAGE':\n              return callback(new _token.LanguageEnvChangeToken(newValue, oldValue));\n\n            case 'CHARSET':\n              return callback(new _token.CharsetEnvChangeToken(newValue, oldValue));\n\n            case 'DATABASE_MIRRORING_PARTNER':\n              return callback(new _token.DatabaseMirroringPartnerEnvChangeToken(newValue, oldValue));\n          }\n        });\n      });\n\n    case 'SQL_COLLATION':\n    case 'BEGIN_TXN':\n    case 'COMMIT_TXN':\n    case 'ROLLBACK_TXN':\n    case 'RESET_CONNECTION':\n      return parser.readBVarByte(newValue => {\n        parser.readBVarByte(oldValue => {\n          switch (type.name) {\n            case 'SQL_COLLATION':\n              return callback(new _token.CollationChangeToken(newValue, oldValue));\n\n            case 'BEGIN_TXN':\n              return callback(new _token.BeginTransactionEnvChangeToken(newValue, oldValue));\n\n            case 'COMMIT_TXN':\n              return callback(new _token.CommitTransactionEnvChangeToken(newValue, oldValue));\n\n            case 'ROLLBACK_TXN':\n              return callback(new _token.RollbackTransactionEnvChangeToken(newValue, oldValue));\n\n            case 'RESET_CONNECTION':\n              return callback(new _token.ResetConnectionEnvChangeToken(newValue, oldValue));\n          }\n        });\n      });\n\n    case 'ROUTING_CHANGE':\n      return parser.readUInt16LE(valueLength => {\n        // Routing Change:\n        // Byte 1: Protocol (must be 0)\n        // Bytes 2-3 (USHORT): Port number\n        // Bytes 4-5 (USHORT): Length of server data in unicode (2byte chars)\n        // Bytes 6-*: Server name in unicode characters\n        parser.readBuffer(valueLength, routePacket => {\n          const protocol = routePacket.readUInt8(0);\n\n          if (protocol !== 0) {\n            return parser.emit('error', new Error('Unknown protocol byte in routing change event'));\n          }\n\n          const port = routePacket.readUInt16LE(1);\n          const serverLen = routePacket.readUInt16LE(3); // 2 bytes per char, starting at offset 5\n\n          const server = routePacket.toString('ucs2', 5, 5 + serverLen * 2);\n          const newValue = {\n            protocol: protocol,\n            port: port,\n            server: server\n          };\n          parser.readUInt16LE(oldValueLength => {\n            parser.readBuffer(oldValueLength, oldValue => {\n              callback(new _token.RoutingEnvChangeToken(newValue, oldValue));\n            });\n          });\n        });\n      });\n\n    default:\n      console.error('Tedious > Unsupported ENVCHANGE type ' + type.name); // skip unknown bytes\n\n      parser.readBuffer(length - 1, () => {\n        callback(undefined);\n      });\n  }\n}\n\nfunction envChangeParser(parser, _colMetadata, _options, callback) {\n  parser.readUInt16LE(length => {\n    parser.readUInt8(typeNumber => {\n      const type = types[typeNumber];\n\n      if (!type) {\n        console.error('Tedious > Unsupported ENVCHANGE type ' + typeNumber); // skip unknown bytes\n\n        return parser.readBuffer(length - 1, () => {\n          callback(undefined);\n        });\n      }\n\n      readNewAndOldValue(parser, length, type, token => {\n        callback(token);\n      });\n    });\n  });\n}\n\nvar _default = envChangeParser;\nexports.default = _default;\nmodule.exports = envChangeParser;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/tedious/lib/token/env-change-token-parser.js"],"names":["Object","defineProperty","exports","value","default","_token","require","types","name","event","readNewAndOldValue","parser","length","type","callback","readBVarChar","newValue","oldValue","PacketSizeEnvChangeToken","parseInt","DatabaseEnvChangeToken","LanguageEnvChangeToken","CharsetEnvChangeToken","DatabaseMirroringPartnerEnvChangeToken","readBVarByte","CollationChangeToken","BeginTransactionEnvChangeToken","CommitTransactionEnvChangeToken","RollbackTransactionEnvChangeToken","ResetConnectionEnvChangeToken","readUInt16LE","valueLength","readBuffer","routePacket","protocol","readUInt8","emit","Error","port","serverLen","server","toString","oldValueLength","RoutingEnvChangeToken","console","error","undefined","envChangeParser","_colMetadata","_options","typeNumber","token","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _token = require(\"./token\");\n\nconst types = {\n  1: {\n    name: 'DATABASE',\n    event: 'databaseChange'\n  },\n  2: {\n    name: 'LANGUAGE',\n    event: 'languageChange'\n  },\n  3: {\n    name: 'CHARSET',\n    event: 'charsetChange'\n  },\n  4: {\n    name: 'PACKET_SIZE',\n    event: 'packetSizeChange'\n  },\n  7: {\n    name: 'SQL_COLLATION',\n    event: 'sqlCollationChange'\n  },\n  8: {\n    name: 'BEGIN_TXN',\n    event: 'beginTransaction'\n  },\n  9: {\n    name: 'COMMIT_TXN',\n    event: 'commitTransaction'\n  },\n  10: {\n    name: 'ROLLBACK_TXN',\n    event: 'rollbackTransaction'\n  },\n  13: {\n    name: 'DATABASE_MIRRORING_PARTNER',\n    event: 'partnerNode'\n  },\n  17: {\n    name: 'TXN_ENDED'\n  },\n  18: {\n    name: 'RESET_CONNECTION',\n    event: 'resetConnection'\n  },\n  20: {\n    name: 'ROUTING_CHANGE',\n    event: 'routingChange'\n  }\n};\n\nfunction readNewAndOldValue(parser, length, type, callback) {\n  switch (type.name) {\n    case 'DATABASE':\n    case 'LANGUAGE':\n    case 'CHARSET':\n    case 'PACKET_SIZE':\n    case 'DATABASE_MIRRORING_PARTNER':\n      return parser.readBVarChar(newValue => {\n        parser.readBVarChar(oldValue => {\n          switch (type.name) {\n            case 'PACKET_SIZE':\n              return callback(new _token.PacketSizeEnvChangeToken(parseInt(newValue), parseInt(oldValue)));\n\n            case 'DATABASE':\n              return callback(new _token.DatabaseEnvChangeToken(newValue, oldValue));\n\n            case 'LANGUAGE':\n              return callback(new _token.LanguageEnvChangeToken(newValue, oldValue));\n\n            case 'CHARSET':\n              return callback(new _token.CharsetEnvChangeToken(newValue, oldValue));\n\n            case 'DATABASE_MIRRORING_PARTNER':\n              return callback(new _token.DatabaseMirroringPartnerEnvChangeToken(newValue, oldValue));\n          }\n        });\n      });\n\n    case 'SQL_COLLATION':\n    case 'BEGIN_TXN':\n    case 'COMMIT_TXN':\n    case 'ROLLBACK_TXN':\n    case 'RESET_CONNECTION':\n      return parser.readBVarByte(newValue => {\n        parser.readBVarByte(oldValue => {\n          switch (type.name) {\n            case 'SQL_COLLATION':\n              return callback(new _token.CollationChangeToken(newValue, oldValue));\n\n            case 'BEGIN_TXN':\n              return callback(new _token.BeginTransactionEnvChangeToken(newValue, oldValue));\n\n            case 'COMMIT_TXN':\n              return callback(new _token.CommitTransactionEnvChangeToken(newValue, oldValue));\n\n            case 'ROLLBACK_TXN':\n              return callback(new _token.RollbackTransactionEnvChangeToken(newValue, oldValue));\n\n            case 'RESET_CONNECTION':\n              return callback(new _token.ResetConnectionEnvChangeToken(newValue, oldValue));\n          }\n        });\n      });\n\n    case 'ROUTING_CHANGE':\n      return parser.readUInt16LE(valueLength => {\n        // Routing Change:\n        // Byte 1: Protocol (must be 0)\n        // Bytes 2-3 (USHORT): Port number\n        // Bytes 4-5 (USHORT): Length of server data in unicode (2byte chars)\n        // Bytes 6-*: Server name in unicode characters\n        parser.readBuffer(valueLength, routePacket => {\n          const protocol = routePacket.readUInt8(0);\n\n          if (protocol !== 0) {\n            return parser.emit('error', new Error('Unknown protocol byte in routing change event'));\n          }\n\n          const port = routePacket.readUInt16LE(1);\n          const serverLen = routePacket.readUInt16LE(3); // 2 bytes per char, starting at offset 5\n\n          const server = routePacket.toString('ucs2', 5, 5 + serverLen * 2);\n          const newValue = {\n            protocol: protocol,\n            port: port,\n            server: server\n          };\n          parser.readUInt16LE(oldValueLength => {\n            parser.readBuffer(oldValueLength, oldValue => {\n              callback(new _token.RoutingEnvChangeToken(newValue, oldValue));\n            });\n          });\n        });\n      });\n\n    default:\n      console.error('Tedious > Unsupported ENVCHANGE type ' + type.name); // skip unknown bytes\n\n      parser.readBuffer(length - 1, () => {\n        callback(undefined);\n      });\n  }\n}\n\nfunction envChangeParser(parser, _colMetadata, _options, callback) {\n  parser.readUInt16LE(length => {\n    parser.readUInt8(typeNumber => {\n      const type = types[typeNumber];\n\n      if (!type) {\n        console.error('Tedious > Unsupported ENVCHANGE type ' + typeNumber); // skip unknown bytes\n\n        return parser.readBuffer(length - 1, () => {\n          callback(undefined);\n        });\n      }\n\n      readNewAndOldValue(parser, length, type, token => {\n        callback(token);\n      });\n    });\n  });\n}\n\nvar _default = envChangeParser;\nexports.default = _default;\nmodule.exports = envChangeParser;"]},"metadata":{},"sourceType":"script"}
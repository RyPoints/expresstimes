{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst _require = require('./utils/logger'),\n      logger = _require.logger;\n\nconst Promise = require('./promise');\n\nconst debug = logger.debugContext('hooks');\nconst hookTypes = {\n  beforeValidate: {\n    params: 2\n  },\n  afterValidate: {\n    params: 2\n  },\n  validationFailed: {\n    params: 3\n  },\n  beforeCreate: {\n    params: 2\n  },\n  afterCreate: {\n    params: 2\n  },\n  beforeDestroy: {\n    params: 2\n  },\n  afterDestroy: {\n    params: 2\n  },\n  beforeRestore: {\n    params: 2\n  },\n  afterRestore: {\n    params: 2\n  },\n  beforeUpdate: {\n    params: 2\n  },\n  afterUpdate: {\n    params: 2\n  },\n  beforeSave: {\n    params: 2,\n    proxies: ['beforeUpdate', 'beforeCreate']\n  },\n  afterSave: {\n    params: 2,\n    proxies: ['afterUpdate', 'afterCreate']\n  },\n  beforeUpsert: {\n    params: 2\n  },\n  afterUpsert: {\n    params: 2\n  },\n  beforeBulkCreate: {\n    params: 2\n  },\n  afterBulkCreate: {\n    params: 2\n  },\n  beforeBulkDestroy: {\n    params: 1\n  },\n  afterBulkDestroy: {\n    params: 1\n  },\n  beforeBulkRestore: {\n    params: 1\n  },\n  afterBulkRestore: {\n    params: 1\n  },\n  beforeBulkUpdate: {\n    params: 1\n  },\n  afterBulkUpdate: {\n    params: 1\n  },\n  beforeFind: {\n    params: 1\n  },\n  beforeFindAfterExpandIncludeAll: {\n    params: 1\n  },\n  beforeFindAfterOptions: {\n    params: 1\n  },\n  afterFind: {\n    params: 2\n  },\n  beforeCount: {\n    params: 1\n  },\n  beforeDefine: {\n    params: 2,\n    sync: true,\n    noModel: true\n  },\n  afterDefine: {\n    params: 1,\n    sync: true,\n    noModel: true\n  },\n  beforeInit: {\n    params: 2,\n    sync: true,\n    noModel: true\n  },\n  afterInit: {\n    params: 1,\n    sync: true,\n    noModel: true\n  },\n  beforeAssociate: {\n    params: 2,\n    sync: true\n  },\n  afterAssociate: {\n    params: 2,\n    sync: true\n  },\n  beforeConnect: {\n    params: 1,\n    noModel: true\n  },\n  afterConnect: {\n    params: 2,\n    noModel: true\n  },\n  beforeDisconnect: {\n    params: 1,\n    noModel: true\n  },\n  afterDisconnect: {\n    params: 1,\n    noModel: true\n  },\n  beforeSync: {\n    params: 1\n  },\n  afterSync: {\n    params: 1\n  },\n  beforeBulkSync: {\n    params: 1\n  },\n  afterBulkSync: {\n    params: 1\n  },\n  beforeQuery: {\n    params: 2\n  },\n  afterQuery: {\n    params: 2\n  }\n};\nexports.hooks = hookTypes;\n/**\n * get array of current hook and its proxies combined\n *\n * @param {string} hookType any hook type @see {@link hookTypes}\n *\n * @private\n */\n\nconst getProxiedHooks = hookType => hookTypes[hookType].proxies ? hookTypes[hookType].proxies.concat(hookType) : [hookType];\n\nfunction getHooks(hooked, hookType) {\n  return (hooked.options.hooks || {})[hookType] || [];\n}\n\nconst Hooks = {\n  /**\n   * Process user supplied hooks definition\n   *\n   * @param {Object} hooks hooks definition\n   *\n   * @private\n   * @memberof Sequelize\n   * @memberof Sequelize.Model\n   */\n  _setupHooks(hooks) {\n    this.options.hooks = {};\n\n    _.map(hooks || {}, (hooksArray, hookName) => {\n      if (!Array.isArray(hooksArray)) hooksArray = [hooksArray];\n      hooksArray.forEach(hookFn => this.addHook(hookName, hookFn));\n    });\n  },\n\n  runHooks(hooks, ...hookArgs) {\n    if (!hooks) throw new Error('runHooks requires at least 1 argument');\n    let hookType;\n\n    if (typeof hooks === 'string') {\n      hookType = hooks;\n      hooks = getHooks(this, hookType);\n\n      if (this.sequelize) {\n        hooks = hooks.concat(getHooks(this.sequelize, hookType));\n      }\n    }\n\n    if (!Array.isArray(hooks)) {\n      hooks = [hooks];\n    } // synchronous hooks\n\n\n    if (hookTypes[hookType] && hookTypes[hookType].sync) {\n      for (let hook of hooks) {\n        if (typeof hook === 'object') {\n          hook = hook.fn;\n        }\n\n        debug(`running hook(sync) ${hookType}`);\n        hook.apply(this, hookArgs);\n      }\n\n      return;\n    } // asynchronous hooks (default)\n\n\n    return Promise.each(hooks, hook => {\n      if (typeof hook === 'object') {\n        hook = hook.fn;\n      }\n\n      debug(`running hook ${hookType}`);\n      return hook.apply(this, hookArgs);\n    }).return();\n  },\n\n  /**\n   * Add a hook to the model\n   *\n   * @param {string}          hookType hook name @see {@link hookTypes}\n   * @param {string|Function} [name] Provide a name for the hook function. It can be used to remove the hook later or to order hooks based on some sort of priority system in the future.\n   * @param {Function}        fn The hook function\n   *\n   * @memberof Sequelize\n   * @memberof Sequelize.Model\n   */\n  addHook(hookType, name, fn) {\n    if (typeof name === 'function') {\n      fn = name;\n      name = null;\n    }\n\n    debug(`adding hook ${hookType}`); // check for proxies, add them too\n\n    hookType = getProxiedHooks(hookType);\n    hookType.forEach(type => {\n      const hooks = getHooks(this, type);\n      hooks.push(name ? {\n        name,\n        fn\n      } : fn);\n      this.options.hooks[type] = hooks;\n    });\n    return this;\n  },\n\n  /**\n   * Remove hook from the model\n   *\n   * @param {string} hookType @see {@link hookTypes}\n   * @param {string|Function} name name of hook or function reference which was attached\n   *\n   * @memberof Sequelize\n   * @memberof Sequelize.Model\n   */\n  removeHook(hookType, name) {\n    const isReference = typeof name === 'function' ? true : false;\n\n    if (!this.hasHook(hookType)) {\n      return this;\n    }\n\n    debug(`removing hook ${hookType}`); // check for proxies, add them too\n\n    hookType = getProxiedHooks(hookType);\n\n    for (const type of hookType) {\n      this.options.hooks[type] = this.options.hooks[type].filter(hook => {\n        if (isReference && typeof hook === 'function') {\n          return hook !== name; // check if same method\n        }\n\n        if (!isReference && typeof hook === 'object') {\n          return hook.name !== name;\n        }\n\n        return true;\n      });\n    }\n\n    return this;\n  },\n\n  /**\n   * Check whether the mode has any hooks of this type\n   *\n   * @param {string} hookType @see {@link hookTypes}\n   *\n   * @alias hasHooks\n   *\n   * @memberof Sequelize\n   * @memberof Sequelize.Model\n   */\n  hasHook(hookType) {\n    return this.options.hooks[hookType] && !!this.options.hooks[hookType].length;\n  }\n\n};\nHooks.hasHooks = Hooks.hasHook;\n\nfunction applyTo(target, isModel = false) {\n  _.mixin(target, Hooks);\n\n  for (const hook of Object.keys(hookTypes)) {\n    if (isModel && hookTypes[hook].noModel) {\n      continue;\n    }\n\n    target[hook] = function (name, callback) {\n      return this.addHook(hook, name, callback);\n    };\n  }\n}\n\nexports.applyTo = applyTo;\n/**\n * A hook that is run before validation\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name beforeValidate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after validation\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name afterValidate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run when validation fails\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options, error. Error is the\n * SequelizeValidationError. If the callback throws an error, it will replace the original validation error.\n * @name validationFailed\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before creating a single instance\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeCreate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after creating a single instance\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name afterCreate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before creating or updating a single instance, It proxies `beforeCreate` and `beforeUpdate`\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeSave\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before upserting\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeUpsert\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after upserting\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the result of upsert(), options\n * @name afterUpsert\n * @memberof Sequelize.Model\n */\n\n/**\n  * A hook that is run after creating or updating a single instance, It proxies `afterCreate` and `afterUpdate`\n  * @param {string}   name\n  * @param {Function} fn   A callback function that is called with attributes, options\n  * @name afterSave\n  * @memberof Sequelize.Model\n  */\n\n/**\n * A hook that is run before destroying a single instance\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name beforeDestroy\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after destroying a single instance\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name afterDestroy\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before restoring a single instance\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name beforeRestore\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after restoring a single instance\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name afterRestore\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before updating a single instance\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name beforeUpdate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after updating a single instance\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name afterUpdate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before creating instances in bulk\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instances, options\n * @name beforeBulkCreate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after creating instances in bulk\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instances, options\n * @name afterBulkCreate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before destroying instances in bulk\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name beforeBulkDestroy\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after destroying instances in bulk\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name afterBulkDestroy\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before restoring instances in bulk\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name beforeBulkRestore\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after restoring instances in bulk\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name afterBulkRestore\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before updating instances in bulk\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeBulkUpdate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after updating instances in bulk\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name afterBulkUpdate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a find (select) query\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeFind\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a find (select) query, after any { include: {all: ...} } options are expanded\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeFindAfterExpandIncludeAll\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a find (select) query, after all option parsing is complete\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeFindAfterOptions\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after a find (select) query\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance(s), options\n * @name afterFind\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a count query\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeCount\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a define call\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeDefine\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after a define call\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with factory\n * @name afterDefine\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run before Sequelize() call\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with config, options\n * @name beforeInit\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after Sequelize() call\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with sequelize\n * @name afterInit\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run before a connection is created\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with config passed to connection\n * @name beforeConnect\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after a connection is created\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the connection object and the config passed to connection\n * @name afterConnect\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run before a connection is disconnected\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the connection object\n * @name beforeDisconnect\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after a connection is disconnected\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the connection object\n * @name afterDisconnect\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run before Model.sync call\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options passed to Model.sync\n * @name beforeSync\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after Model.sync call\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options passed to Model.sync\n * @name afterSync\n * @memberof Sequelize\n */\n\n/**\n  * A hook that is run before sequelize.sync call\n  * @param {string}   name\n  * @param {Function} fn   A callback function that is called with options passed to sequelize.sync\n  * @name beforeBulkSync\n  * @memberof Sequelize\n  */\n\n/**\n  * A hook that is run after sequelize.sync call\n  * @param {string}   name\n  * @param {Function} fn   A callback function that is called with options passed to sequelize.sync\n  * @name afterBulkSync\n  * @memberof Sequelize\n  */","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/sequelize/lib/hooks.js"],"names":["_","require","logger","Promise","debug","debugContext","hookTypes","beforeValidate","params","afterValidate","validationFailed","beforeCreate","afterCreate","beforeDestroy","afterDestroy","beforeRestore","afterRestore","beforeUpdate","afterUpdate","beforeSave","proxies","afterSave","beforeUpsert","afterUpsert","beforeBulkCreate","afterBulkCreate","beforeBulkDestroy","afterBulkDestroy","beforeBulkRestore","afterBulkRestore","beforeBulkUpdate","afterBulkUpdate","beforeFind","beforeFindAfterExpandIncludeAll","beforeFindAfterOptions","afterFind","beforeCount","beforeDefine","sync","noModel","afterDefine","beforeInit","afterInit","beforeAssociate","afterAssociate","beforeConnect","afterConnect","beforeDisconnect","afterDisconnect","beforeSync","afterSync","beforeBulkSync","afterBulkSync","beforeQuery","afterQuery","exports","hooks","getProxiedHooks","hookType","concat","getHooks","hooked","options","Hooks","_setupHooks","map","hooksArray","hookName","Array","isArray","forEach","hookFn","addHook","runHooks","hookArgs","Error","sequelize","hook","fn","apply","each","return","name","type","push","removeHook","isReference","hasHook","filter","length","hasHooks","applyTo","target","isModel","mixin","Object","keys","callback"],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst { logger } = require('./utils/logger');\nconst Promise = require('./promise');\nconst debug = logger.debugContext('hooks');\n\nconst hookTypes = {\n  beforeValidate: { params: 2 },\n  afterValidate: { params: 2 },\n  validationFailed: { params: 3 },\n  beforeCreate: { params: 2 },\n  afterCreate: { params: 2 },\n  beforeDestroy: { params: 2 },\n  afterDestroy: { params: 2 },\n  beforeRestore: { params: 2 },\n  afterRestore: { params: 2 },\n  beforeUpdate: { params: 2 },\n  afterUpdate: { params: 2 },\n  beforeSave: { params: 2, proxies: ['beforeUpdate', 'beforeCreate'] },\n  afterSave: { params: 2, proxies: ['afterUpdate', 'afterCreate'] },\n  beforeUpsert: { params: 2 },\n  afterUpsert: { params: 2 },\n  beforeBulkCreate: { params: 2 },\n  afterBulkCreate: { params: 2 },\n  beforeBulkDestroy: { params: 1 },\n  afterBulkDestroy: { params: 1 },\n  beforeBulkRestore: { params: 1 },\n  afterBulkRestore: { params: 1 },\n  beforeBulkUpdate: { params: 1 },\n  afterBulkUpdate: { params: 1 },\n  beforeFind: { params: 1 },\n  beforeFindAfterExpandIncludeAll: { params: 1 },\n  beforeFindAfterOptions: { params: 1 },\n  afterFind: { params: 2 },\n  beforeCount: { params: 1 },\n  beforeDefine: { params: 2, sync: true, noModel: true },\n  afterDefine: { params: 1, sync: true, noModel: true },\n  beforeInit: { params: 2, sync: true, noModel: true },\n  afterInit: { params: 1, sync: true, noModel: true },\n  beforeAssociate: { params: 2, sync: true },\n  afterAssociate: { params: 2, sync: true },\n  beforeConnect: { params: 1, noModel: true },\n  afterConnect: { params: 2, noModel: true },\n  beforeDisconnect: { params: 1, noModel: true },\n  afterDisconnect: { params: 1, noModel: true },\n  beforeSync: { params: 1 },\n  afterSync: { params: 1 },\n  beforeBulkSync: { params: 1 },\n  afterBulkSync: { params: 1 },\n  beforeQuery: { params: 2 },\n  afterQuery: { params: 2 }\n};\nexports.hooks = hookTypes;\n\n\n/**\n * get array of current hook and its proxies combined\n *\n * @param {string} hookType any hook type @see {@link hookTypes}\n *\n * @private\n */\nconst getProxiedHooks = hookType =>\n  hookTypes[hookType].proxies\n    ? hookTypes[hookType].proxies.concat(hookType)\n    : [hookType]\n;\n\nfunction getHooks(hooked, hookType) {\n  return (hooked.options.hooks || {})[hookType] || [];\n}\n\nconst Hooks = {\n  /**\n   * Process user supplied hooks definition\n   *\n   * @param {Object} hooks hooks definition\n   *\n   * @private\n   * @memberof Sequelize\n   * @memberof Sequelize.Model\n   */\n  _setupHooks(hooks) {\n    this.options.hooks = {};\n    _.map(hooks || {}, (hooksArray, hookName) => {\n      if (!Array.isArray(hooksArray)) hooksArray = [hooksArray];\n      hooksArray.forEach(hookFn => this.addHook(hookName, hookFn));\n    });\n  },\n\n  runHooks(hooks, ...hookArgs) {\n    if (!hooks) throw new Error('runHooks requires at least 1 argument');\n\n    let hookType;\n\n    if (typeof hooks === 'string') {\n      hookType = hooks;\n      hooks = getHooks(this, hookType);\n\n      if (this.sequelize) {\n        hooks = hooks.concat(getHooks(this.sequelize, hookType));\n      }\n    }\n\n    if (!Array.isArray(hooks)) {\n      hooks = [hooks];\n    }\n\n    // synchronous hooks\n    if (hookTypes[hookType] && hookTypes[hookType].sync) {\n      for (let hook of hooks) {\n        if (typeof hook === 'object') {\n          hook = hook.fn;\n        }\n\n        debug(`running hook(sync) ${hookType}`);\n        hook.apply(this, hookArgs);\n      }\n      return;\n    }\n\n    // asynchronous hooks (default)\n    return Promise.each(hooks, hook => {\n      if (typeof hook === 'object') {\n        hook = hook.fn;\n      }\n\n      debug(`running hook ${hookType}`);\n      return hook.apply(this, hookArgs);\n    }).return();\n  },\n\n  /**\n   * Add a hook to the model\n   *\n   * @param {string}          hookType hook name @see {@link hookTypes}\n   * @param {string|Function} [name] Provide a name for the hook function. It can be used to remove the hook later or to order hooks based on some sort of priority system in the future.\n   * @param {Function}        fn The hook function\n   *\n   * @memberof Sequelize\n   * @memberof Sequelize.Model\n   */\n  addHook(hookType, name, fn) {\n    if (typeof name === 'function') {\n      fn = name;\n      name = null;\n    }\n\n    debug(`adding hook ${hookType}`);\n    // check for proxies, add them too\n    hookType = getProxiedHooks(hookType);\n\n    hookType.forEach(type => {\n      const hooks = getHooks(this, type);\n      hooks.push(name ? { name, fn } : fn);\n      this.options.hooks[type] = hooks;\n    });\n\n    return this;\n  },\n\n  /**\n   * Remove hook from the model\n   *\n   * @param {string} hookType @see {@link hookTypes}\n   * @param {string|Function} name name of hook or function reference which was attached\n   *\n   * @memberof Sequelize\n   * @memberof Sequelize.Model\n   */\n  removeHook(hookType, name) {\n    const isReference = typeof name === 'function' ? true : false;\n\n    if (!this.hasHook(hookType)) {\n      return this;\n    }\n\n    debug(`removing hook ${hookType}`);\n\n    // check for proxies, add them too\n    hookType = getProxiedHooks(hookType);\n\n    for (const type of hookType) {\n      this.options.hooks[type] = this.options.hooks[type].filter(hook => {\n        if (isReference && typeof hook === 'function') {\n          return hook !== name; // check if same method\n        }\n        if (!isReference && typeof hook === 'object') {\n          return hook.name !== name;\n        }\n        return true;\n      });\n    }\n\n    return this;\n  },\n\n  /**\n   * Check whether the mode has any hooks of this type\n   *\n   * @param {string} hookType @see {@link hookTypes}\n   *\n   * @alias hasHooks\n   *\n   * @memberof Sequelize\n   * @memberof Sequelize.Model\n   */\n  hasHook(hookType) {\n    return this.options.hooks[hookType] && !!this.options.hooks[hookType].length;\n  }\n};\nHooks.hasHooks = Hooks.hasHook;\n\n\nfunction applyTo(target, isModel = false) {\n  _.mixin(target, Hooks);\n\n  for (const hook of Object.keys(hookTypes)) {\n    if (isModel && hookTypes[hook].noModel) {\n      continue;\n    }\n    target[hook] = function(name, callback) {\n      return this.addHook(hook, name, callback);\n    };\n  }\n}\nexports.applyTo = applyTo;\n\n/**\n * A hook that is run before validation\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name beforeValidate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after validation\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name afterValidate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run when validation fails\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options, error. Error is the\n * SequelizeValidationError. If the callback throws an error, it will replace the original validation error.\n * @name validationFailed\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before creating a single instance\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeCreate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after creating a single instance\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name afterCreate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before creating or updating a single instance, It proxies `beforeCreate` and `beforeUpdate`\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeSave\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before upserting\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeUpsert\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after upserting\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the result of upsert(), options\n * @name afterUpsert\n * @memberof Sequelize.Model\n */\n\n/**\n  * A hook that is run after creating or updating a single instance, It proxies `afterCreate` and `afterUpdate`\n  * @param {string}   name\n  * @param {Function} fn   A callback function that is called with attributes, options\n  * @name afterSave\n  * @memberof Sequelize.Model\n  */\n\n/**\n * A hook that is run before destroying a single instance\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name beforeDestroy\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after destroying a single instance\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name afterDestroy\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before restoring a single instance\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name beforeRestore\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after restoring a single instance\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name afterRestore\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before updating a single instance\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name beforeUpdate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after updating a single instance\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name afterUpdate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before creating instances in bulk\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instances, options\n * @name beforeBulkCreate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after creating instances in bulk\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instances, options\n * @name afterBulkCreate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before destroying instances in bulk\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name beforeBulkDestroy\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after destroying instances in bulk\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name afterBulkDestroy\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before restoring instances in bulk\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name beforeBulkRestore\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after restoring instances in bulk\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name afterBulkRestore\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before updating instances in bulk\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeBulkUpdate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after updating instances in bulk\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name afterBulkUpdate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a find (select) query\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeFind\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a find (select) query, after any { include: {all: ...} } options are expanded\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeFindAfterExpandIncludeAll\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a find (select) query, after all option parsing is complete\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeFindAfterOptions\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after a find (select) query\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance(s), options\n * @name afterFind\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a count query\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeCount\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a define call\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeDefine\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after a define call\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with factory\n * @name afterDefine\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run before Sequelize() call\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with config, options\n * @name beforeInit\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after Sequelize() call\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with sequelize\n * @name afterInit\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run before a connection is created\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with config passed to connection\n * @name beforeConnect\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after a connection is created\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the connection object and the config passed to connection\n * @name afterConnect\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run before a connection is disconnected\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the connection object\n * @name beforeDisconnect\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after a connection is disconnected\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the connection object\n * @name afterDisconnect\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run before Model.sync call\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options passed to Model.sync\n * @name beforeSync\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after Model.sync call\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options passed to Model.sync\n * @name afterSync\n * @memberof Sequelize\n */\n\n/**\n  * A hook that is run before sequelize.sync call\n  * @param {string}   name\n  * @param {Function} fn   A callback function that is called with options passed to sequelize.sync\n  * @name beforeBulkSync\n  * @memberof Sequelize\n  */\n\n/**\n  * A hook that is run after sequelize.sync call\n  * @param {string}   name\n  * @param {Function} fn   A callback function that is called with options passed to sequelize.sync\n  * @name afterBulkSync\n  * @memberof Sequelize\n  */\n"]},"metadata":{},"sourceType":"script"}
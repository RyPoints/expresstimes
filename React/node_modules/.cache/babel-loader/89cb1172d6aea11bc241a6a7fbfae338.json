{"ast":null,"code":"'use strict'; // http://dev.mysql.com/doc/internals/en/com-binlog-dump.html#packet-COM_BINLOG_DUMP\n\nconst Packet = require('../packets/packet');\n\nconst CommandCodes = require('../constants/commands'); // TODO: add flag to constants\n// 0x01 - BINLOG_DUMP_NON_BLOCK\n// send EOF instead of blocking\n\n\nclass BinlogDump {\n  constructor(opts) {\n    this.binlogPos = opts.binlogPos || 0;\n    this.serverId = opts.serverId || 0;\n    this.flags = opts.flags || 0;\n    this.filename = opts.filename || '';\n  }\n\n  toPacket() {\n    const length = 15 + Buffer.byteLength(this.filename, 'utf8'); // TODO: should be ascii?\n\n    const buffer = Buffer.allocUnsafe(length);\n    const packet = new Packet(0, buffer, 0, length);\n    packet.offset = 4;\n    packet.writeInt8(CommandCodes.BINLOG_DUMP);\n    packet.writeInt32(this.binlogPos);\n    packet.writeInt16(this.flags);\n    packet.writeInt32(this.serverId);\n    packet.writeString(this.filename);\n    return packet;\n  }\n\n}\n\nmodule.exports = BinlogDump;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/mysql2/lib/packets/binlog_dump.js"],"names":["Packet","require","CommandCodes","BinlogDump","constructor","opts","binlogPos","serverId","flags","filename","toPacket","length","Buffer","byteLength","buffer","allocUnsafe","packet","offset","writeInt8","BINLOG_DUMP","writeInt32","writeInt16","writeString","module","exports"],"mappings":"AAAA,a,CAEA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,mBAAD,CAAtB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,uBAAD,CAA5B,C,CAEA;AACA;AACA;;;AACA,MAAME,UAAN,CAAiB;AACfC,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChB,SAAKC,SAAL,GAAiBD,IAAI,CAACC,SAAL,IAAkB,CAAnC;AACA,SAAKC,QAAL,GAAgBF,IAAI,CAACE,QAAL,IAAiB,CAAjC;AACA,SAAKC,KAAL,GAAaH,IAAI,CAACG,KAAL,IAAc,CAA3B;AACA,SAAKC,QAAL,GAAgBJ,IAAI,CAACI,QAAL,IAAiB,EAAjC;AACD;;AAEDC,EAAAA,QAAQ,GAAG;AACT,UAAMC,MAAM,GAAG,KAAKC,MAAM,CAACC,UAAP,CAAkB,KAAKJ,QAAvB,EAAiC,MAAjC,CAApB,CADS,CACqD;;AAC9D,UAAMK,MAAM,GAAGF,MAAM,CAACG,WAAP,CAAmBJ,MAAnB,CAAf;AACA,UAAMK,MAAM,GAAG,IAAIhB,MAAJ,CAAW,CAAX,EAAcc,MAAd,EAAsB,CAAtB,EAAyBH,MAAzB,CAAf;AACAK,IAAAA,MAAM,CAACC,MAAP,GAAgB,CAAhB;AACAD,IAAAA,MAAM,CAACE,SAAP,CAAiBhB,YAAY,CAACiB,WAA9B;AACAH,IAAAA,MAAM,CAACI,UAAP,CAAkB,KAAKd,SAAvB;AACAU,IAAAA,MAAM,CAACK,UAAP,CAAkB,KAAKb,KAAvB;AACAQ,IAAAA,MAAM,CAACI,UAAP,CAAkB,KAAKb,QAAvB;AACAS,IAAAA,MAAM,CAACM,WAAP,CAAmB,KAAKb,QAAxB;AACA,WAAOO,MAAP;AACD;;AAnBc;;AAsBjBO,MAAM,CAACC,OAAP,GAAiBrB,UAAjB","sourcesContent":["'use strict';\n\n// http://dev.mysql.com/doc/internals/en/com-binlog-dump.html#packet-COM_BINLOG_DUMP\n\nconst Packet = require('../packets/packet');\nconst CommandCodes = require('../constants/commands');\n\n// TODO: add flag to constants\n// 0x01 - BINLOG_DUMP_NON_BLOCK\n// send EOF instead of blocking\nclass BinlogDump {\n  constructor(opts) {\n    this.binlogPos = opts.binlogPos || 0;\n    this.serverId = opts.serverId || 0;\n    this.flags = opts.flags || 0;\n    this.filename = opts.filename || '';\n  }\n\n  toPacket() {\n    const length = 15 + Buffer.byteLength(this.filename, 'utf8'); // TODO: should be ascii?\n    const buffer = Buffer.allocUnsafe(length);\n    const packet = new Packet(0, buffer, 0, length);\n    packet.offset = 4;\n    packet.writeInt8(CommandCodes.BINLOG_DUMP);\n    packet.writeInt32(this.binlogPos);\n    packet.writeInt16(this.flags);\n    packet.writeInt32(this.serverId);\n    packet.writeString(this.filename);\n    return packet;\n  }\n}\n\nmodule.exports = BinlogDump;\n"]},"metadata":{},"sourceType":"script"}
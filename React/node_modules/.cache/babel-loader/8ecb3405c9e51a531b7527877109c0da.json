{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst Utils = require('../../utils');\n\nconst SqlString = require('../../sql-string');\n\nconst Dot = require('dottie');\n\nconst QueryTypes = require('../../query-types');\n\nclass AbstractQuery {\n  /**\n   * rewrite query with parameters\n   *\n   * Examples:\n   *\n   *   query.formatBindParameters('select $1 as foo', ['fooval']);\n   *\n   *   query.formatBindParameters('select $foo as foo', { foo: 'fooval' });\n   *\n   * Options\n   *   skipUnescape: bool, skip unescaping $$\n   *   skipValueReplace: bool, do not replace (but do unescape $$). Check correct syntax and if all values are available\n   * @private\n   */\n  static formatBindParameters(sql, values, dialect, replacementFunc, options) {\n    if (!values) {\n      return [sql, []];\n    }\n\n    options = options || {};\n\n    if (typeof replacementFunc !== 'function') {\n      options = replacementFunc || {};\n      replacementFunc = undefined;\n    }\n\n    if (!replacementFunc) {\n      if (options.skipValueReplace) {\n        replacementFunc = (match, key, values) => {\n          if (values[key] !== undefined) {\n            return match;\n          }\n\n          return undefined;\n        };\n      } else {\n        replacementFunc = (match, key, values, timeZone, dialect) => {\n          if (values[key] !== undefined) {\n            return SqlString.escape(values[key], timeZone, dialect);\n          }\n\n          return undefined;\n        };\n      }\n    } else {\n      if (options.skipValueReplace) {\n        const origReplacementFunc = replacementFunc;\n\n        replacementFunc = (match, key, values, timeZone, dialect, options) => {\n          if (origReplacementFunc(match, key, values, timeZone, dialect, options) !== undefined) {\n            return match;\n          }\n\n          return undefined;\n        };\n      }\n    }\n\n    const timeZone = null;\n    const list = Array.isArray(values);\n    sql = sql.replace(/\\$(\\$|\\w+)/g, (match, key) => {\n      if ('$' === key) {\n        return options.skipUnescape ? match : key;\n      }\n\n      let replVal;\n\n      if (list) {\n        if (key.match(/^[1-9]\\d*$/)) {\n          key = key - 1;\n          replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n        }\n      } else {\n        if (!key.match(/^\\d*$/)) {\n          replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n        }\n      }\n\n      if (replVal === undefined) {\n        throw new Error('Named bind parameter \"' + match + '\" has no value in the given object.');\n      }\n\n      return replVal;\n    });\n    return [sql, []];\n  }\n  /**\n   * Execute the passed sql query.\n   *\n   * Examples:\n   *\n   *     query.run('SELECT 1')\n   *\n   * @param {String} sql - The SQL query which should be executed.\n   * @private\n   */\n\n\n  run() {\n    throw new Error('The run method wasn\\'t overwritten!');\n  }\n  /**\n   * Check the logging option of the instance and print deprecation warnings.\n   *\n   * @return {void}\n   * @private\n   */\n\n\n  checkLoggingOption() {\n    if (this.options.logging === true) {\n      Utils.deprecate('The logging-option should be either a function or false. Default: console.log');\n      this.options.logging = console.log;\n    }\n  }\n  /**\n   * Get the attributes of an insert query, which contains the just inserted id.\n   *\n   * @return {String} The field name.\n   * @private\n   */\n\n\n  getInsertIdField() {\n    return 'insertId';\n  }\n  /**\n   * Iterate over all known tables and search their names inside the sql query.\n   * This method will also check association aliases ('as' option).\n   *\n   * @param  {String} attribute An attribute of a SQL query. (?)\n   * @return {String}           The found tableName / alias.\n   * @private\n   */\n\n\n  findTableNameInAttribute(attribute) {\n    if (!this.options.include) {\n      return null;\n    }\n\n    if (!this.options.includeNames) {\n      this.options.includeNames = this.options.include.map(include => include.as);\n    }\n\n    const tableNames = this.options.includeNames.filter(include => attribute.indexOf(include + '.') === 0);\n\n    if (tableNames.length === 1) {\n      return tableNames[0];\n    } else {\n      return null;\n    }\n  }\n\n  getUniqueConstraintErrorMessage(field) {\n    let message = field + ' must be unique';\n\n    if (this.model) {\n      for (const key of Object.keys(this.model.uniqueKeys)) {\n        if (this.model.uniqueKeys[key].fields.indexOf(field.replace(/\"/g, '')) >= 0) {\n          if (this.model.uniqueKeys[key].msg) {\n            message = this.model.uniqueKeys[key].msg;\n          }\n        }\n      }\n    }\n\n    return message;\n  }\n\n  isRawQuery() {\n    return this.options.type === QueryTypes.RAW;\n  }\n\n  isVersionQuery() {\n    return this.options.type === QueryTypes.VERSION;\n  }\n\n  isUpsertQuery() {\n    return this.options.type === QueryTypes.UPSERT;\n  }\n\n  isInsertQuery(results, metaData) {\n    let result = true;\n\n    if (this.options.type === QueryTypes.INSERT) {\n      return true;\n    } // is insert query if sql contains insert into\n\n\n    result = result && this.sql.toLowerCase().indexOf('insert into') === 0; // is insert query if no results are passed or if the result has the inserted id\n\n    result = result && (!results || results.hasOwnProperty(this.getInsertIdField())); // is insert query if no metadata are passed or if the metadata has the inserted id\n\n    result = result && (!metaData || metaData.hasOwnProperty(this.getInsertIdField()));\n    return result;\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      id = id || results && results[this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      this.instance[autoIncrementAttribute] = id;\n    }\n  }\n\n  isShowTablesQuery() {\n    return this.options.type === QueryTypes.SHOWTABLES;\n  }\n\n  handleShowTablesQuery(results) {\n    return _.flatten(results.map(resultSet => _.values(resultSet)));\n  }\n\n  isShowIndexesQuery() {\n    return this.options.type === QueryTypes.SHOWINDEXES;\n  }\n\n  isShowConstraintsQuery() {\n    return this.options.type === QueryTypes.SHOWCONSTRAINTS;\n  }\n\n  isDescribeQuery() {\n    return this.options.type === QueryTypes.DESCRIBE;\n  }\n\n  isSelectQuery() {\n    return this.options.type === QueryTypes.SELECT;\n  }\n\n  isBulkUpdateQuery() {\n    return this.options.type === QueryTypes.BULKUPDATE;\n  }\n\n  isBulkDeleteQuery() {\n    return this.options.type === QueryTypes.BULKDELETE;\n  }\n\n  isForeignKeysQuery() {\n    return this.options.type === QueryTypes.FOREIGNKEYS;\n  }\n\n  isUpdateQuery() {\n    return this.options.type === QueryTypes.UPDATE;\n  }\n\n  handleSelectQuery(results) {\n    let result = null; // Map raw fields to names if a mapping is provided\n\n    if (this.options.fieldMap) {\n      const fieldMap = this.options.fieldMap;\n      results = _.map(results, result => _.reduce(fieldMap, (result, name, field) => {\n        if (result[field] !== undefined) {\n          result[name] = result[field];\n          delete result[field];\n        }\n\n        return result;\n      }, result));\n    } // Raw queries\n\n\n    if (this.options.raw) {\n      result = results.map(result => {\n        let o = {};\n\n        for (const key in result) {\n          if (result.hasOwnProperty(key)) {\n            o[key] = result[key];\n          }\n        }\n\n        if (this.options.nest) {\n          o = Dot.transform(o);\n        }\n\n        return o;\n      }); // Queries with include\n    } else if (this.options.hasJoin === true) {\n      results = AbstractQuery._groupJoinData(results, {\n        model: this.model,\n        includeMap: this.options.includeMap,\n        includeNames: this.options.includeNames\n      }, {\n        checkExisting: this.options.hasMultiAssociation\n      });\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        include: this.options.include,\n        includeNames: this.options.includeNames,\n        includeMap: this.options.includeMap,\n        includeValidated: true,\n        attributes: this.options.originalAttributes || this.options.attributes,\n        raw: true\n      }); // Regular queries\n    } else {\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        raw: true,\n        attributes: this.options.attributes\n      });\n    } // return the first real model instance if options.plain is set (e.g. Model.find)\n\n\n    if (this.options.plain) {\n      result = result.length === 0 ? null : result[0];\n    }\n\n    return result;\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n    result = result || this.sql.toLowerCase().indexOf('show') === 0;\n    result = result || this.sql.toLowerCase().indexOf('describe') === 0;\n    return result;\n  }\n\n  isCallQuery() {\n    return this.sql.toLowerCase().indexOf('call') === 0;\n  }\n  /**\n   * The function takes the result of the query execution and groups\n   * the associated data by the callee.\n   *\n   * Example:\n   *   groupJoinData([\n   *     {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 1 }\n   *     }, {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 2 }\n   *     }, {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 3 }\n   *     }\n   *   ])\n   *\n   * Result:\n   *   Something like this:\n   *\n   *   [\n   *     {\n   *       some: 'data',\n   *       id: 1,\n   *       association: [\n   *         { foo: 'bar', id: 1 },\n   *         { foo: 'bar', id: 2 },\n   *         { foo: 'bar', id: 3 }\n   *       ]\n   *     }\n   *   ]\n   * @private\n   */\n\n\n  static _groupJoinData(rows, includeOptions, options) {\n    /*\n     * Assumptions\n     * ID is not necessarily the first field\n     * All fields for a level is grouped in the same set (i.e. Panel.id, Task.id, Panel.title is not possible)\n     * Parent keys will be seen before any include/child keys\n     * Previous set won't necessarily be parent set (one parent could have two children, one child would then be previous set for the other)\n     */\n\n    /*\n     * Author (MH) comment: This code is an unreadable mess, but it's performant.\n     * groupJoinData is a performance critical function so we prioritize perf over readability.\n     */\n    if (!rows.length) {\n      return [];\n    } // Generic looping\n\n\n    let i;\n    let length;\n    let $i;\n    let $length; // Row specific looping\n\n    let rowsI;\n    let row;\n    const rowsLength = rows.length; // Key specific looping\n\n    let keys;\n    let key;\n    let keyI;\n    let keyLength;\n    let prevKey;\n    let values;\n    let topValues;\n    let topExists;\n    const checkExisting = options.checkExisting; // If we don't have to deduplicate we can pre-allocate the resulting array\n\n    let itemHash;\n    let parentHash;\n    let topHash;\n    const results = checkExisting ? [] : new Array(rowsLength);\n    const resultMap = {};\n    const includeMap = {}; // Result variables for the respective functions\n\n    let $keyPrefix;\n    let $keyPrefixString;\n    let $prevKeyPrefixString; // eslint-disable-line\n\n    let $prevKeyPrefix;\n    let $lastKeyPrefix;\n    let $current;\n    let $parent; // Map each key to an include option\n\n    let previousPiece;\n\n    const buildIncludeMap = piece => {\n      if ($current.includeMap.hasOwnProperty(piece)) {\n        includeMap[key] = $current = $current.includeMap[piece];\n\n        if (previousPiece) {\n          previousPiece = previousPiece + '.' + piece;\n        } else {\n          previousPiece = piece;\n        }\n\n        includeMap[previousPiece] = $current;\n      }\n    }; // Calculate the string prefix of a key ('User.Results' for 'User.Results.id')\n\n\n    const keyPrefixStringMemo = {};\n\n    const keyPrefixString = (key, memo) => {\n      if (!memo.hasOwnProperty(key)) {\n        memo[key] = key.substr(0, key.lastIndexOf('.'));\n      }\n\n      return memo[key];\n    }; // Removes the prefix from a key ('id' for 'User.Results.id')\n\n\n    const removeKeyPrefixMemo = {};\n\n    const removeKeyPrefix = key => {\n      if (!removeKeyPrefixMemo.hasOwnProperty(key)) {\n        const index = key.lastIndexOf('.');\n        removeKeyPrefixMemo[key] = key.substr(index === -1 ? 0 : index + 1);\n      }\n\n      return removeKeyPrefixMemo[key];\n    }; // Calculates the array prefix of a key (['User', 'Results'] for 'User.Results.id')\n\n\n    const keyPrefixMemo = {};\n\n    const keyPrefix = key => {\n      // We use a double memo and keyPrefixString so that different keys with the same prefix will receive the same array instead of differnet arrays with equal values\n      if (!keyPrefixMemo.hasOwnProperty(key)) {\n        const prefixString = keyPrefixString(key, keyPrefixStringMemo);\n\n        if (!keyPrefixMemo.hasOwnProperty(prefixString)) {\n          keyPrefixMemo[prefixString] = prefixString ? prefixString.split('.') : [];\n        }\n\n        keyPrefixMemo[key] = keyPrefixMemo[prefixString];\n      }\n\n      return keyPrefixMemo[key];\n    }; // Calcuate the last item in the array prefix ('Results' for 'User.Results.id')\n\n\n    const lastKeyPrefixMemo = {};\n\n    const lastKeyPrefix = key => {\n      if (!lastKeyPrefixMemo.hasOwnProperty(key)) {\n        const prefix = keyPrefix(key);\n        const length = prefix.length;\n        lastKeyPrefixMemo[key] = !length ? '' : prefix[length - 1];\n      }\n\n      return lastKeyPrefixMemo[key];\n    };\n\n    const getUniqueKeyAttributes = model => {\n      let uniqueKeyAttributes = _.chain(model.uniqueKeys);\n\n      uniqueKeyAttributes = uniqueKeyAttributes.result(uniqueKeyAttributes.findKey() + '.fields').map(field => _.findKey(model.attributes, chr => chr.field === field)).value();\n      return uniqueKeyAttributes;\n    };\n\n    const stringify = obj => obj instanceof Buffer ? obj.toString('hex') : obj;\n\n    let primaryKeyAttributes;\n    let uniqueKeyAttributes;\n    let prefix;\n\n    for (rowsI = 0; rowsI < rowsLength; rowsI++) {\n      row = rows[rowsI]; // Keys are the same for all rows, so only need to compute them on the first row\n\n      if (rowsI === 0) {\n        keys = Object.keys(row);\n        keyLength = keys.length;\n      }\n\n      if (checkExisting) {\n        topExists = false; // Compute top level hash key (this is usually just the primary key values)\n\n        $length = includeOptions.model.primaryKeyAttributes.length;\n        topHash = '';\n\n        if ($length === 1) {\n          topHash = stringify(row[includeOptions.model.primaryKeyAttributes[0]]);\n        } else if ($length > 1) {\n          for ($i = 0; $i < $length; $i++) {\n            topHash += stringify(row[includeOptions.model.primaryKeyAttributes[$i]]);\n          }\n        } else if (!_.isEmpty(includeOptions.model.uniqueKeys)) {\n          uniqueKeyAttributes = getUniqueKeyAttributes(includeOptions.model);\n\n          for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n            topHash += row[uniqueKeyAttributes[$i]];\n          }\n        }\n      }\n\n      topValues = values = {};\n      $prevKeyPrefix = undefined;\n\n      for (keyI = 0; keyI < keyLength; keyI++) {\n        key = keys[keyI]; // The string prefix isn't actualy needed\n        // We use it so keyPrefix for different keys will resolve to the same array if they have the same prefix\n        // TODO: Find a better way?\n\n        $keyPrefixString = keyPrefixString(key, keyPrefixStringMemo);\n        $keyPrefix = keyPrefix(key); // On the first row we compute the includeMap\n\n        if (rowsI === 0 && !includeMap.hasOwnProperty(key)) {\n          if (!$keyPrefix.length) {\n            includeMap[key] = includeMap[''] = includeOptions;\n          } else {\n            $current = includeOptions;\n            previousPiece = undefined;\n            $keyPrefix.forEach(buildIncludeMap);\n          }\n        } // End of key set\n\n\n        if ($prevKeyPrefix !== undefined && $prevKeyPrefix !== $keyPrefix) {\n          if (checkExisting) {\n            // Compute hash key for this set instance\n            // TODO: Optimize\n            length = $prevKeyPrefix.length;\n            $parent = null;\n            parentHash = null;\n\n            if (length) {\n              for (i = 0; i < length; i++) {\n                prefix = $parent ? $parent + '.' + $prevKeyPrefix[i] : $prevKeyPrefix[i];\n                primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n                $length = primaryKeyAttributes.length;\n                itemHash = prefix;\n\n                if ($length === 1) {\n                  itemHash += stringify(row[prefix + '.' + primaryKeyAttributes[0]]);\n                } else if ($length > 1) {\n                  for ($i = 0; $i < $length; $i++) {\n                    itemHash += stringify(row[prefix + '.' + primaryKeyAttributes[$i]]);\n                  }\n                } else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n                  uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n\n                  for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                    itemHash += row[prefix + '.' + uniqueKeyAttributes[$i]];\n                  }\n                }\n\n                if (!parentHash) {\n                  parentHash = topHash;\n                }\n\n                itemHash = parentHash + itemHash;\n                $parent = prefix;\n\n                if (i < length - 1) {\n                  parentHash = itemHash;\n                }\n              }\n            } else {\n              itemHash = topHash;\n            }\n\n            if (itemHash === topHash) {\n              if (!resultMap[itemHash]) {\n                resultMap[itemHash] = values;\n              } else {\n                topExists = true;\n              }\n            } else {\n              if (!resultMap[itemHash]) {\n                $parent = resultMap[parentHash];\n                $lastKeyPrefix = lastKeyPrefix(prevKey);\n\n                if (includeMap[prevKey].association.isSingleAssociation) {\n                  if ($parent) {\n                    $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n                  }\n                } else {\n                  if (!$parent[$lastKeyPrefix]) {\n                    $parent[$lastKeyPrefix] = [];\n                  }\n\n                  $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n                }\n              }\n            } // Reset values\n\n\n            values = {};\n          } else {\n            // If checkExisting is false it's because there's only 1:1 associations in this query\n            // However we still need to map onto the appropriate parent\n            // For 1:1 we map forward, initializing the value object on the parent to be filled in the next iterations of the loop\n            $current = topValues;\n            length = $keyPrefix.length;\n\n            if (length) {\n              for (i = 0; i < length; i++) {\n                if (i === length - 1) {\n                  values = $current[$keyPrefix[i]] = {};\n                }\n\n                $current = $current[$keyPrefix[i]];\n              }\n            }\n          }\n        } // End of iteration, set value and set prev values (for next iteration)\n\n\n        values[removeKeyPrefix(key)] = row[key];\n        prevKey = key;\n        $prevKeyPrefix = $keyPrefix;\n        $prevKeyPrefixString = $keyPrefixString;\n      }\n\n      if (checkExisting) {\n        length = $prevKeyPrefix.length;\n        $parent = null;\n        parentHash = null;\n\n        if (length) {\n          for (i = 0; i < length; i++) {\n            prefix = $parent ? $parent + '.' + $prevKeyPrefix[i] : $prevKeyPrefix[i];\n            primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n            $length = primaryKeyAttributes.length;\n            itemHash = prefix;\n\n            if ($length === 1) {\n              itemHash += stringify(row[prefix + '.' + primaryKeyAttributes[0]]);\n            } else if ($length > 0) {\n              for ($i = 0; $i < $length; $i++) {\n                itemHash += stringify(row[prefix + '.' + primaryKeyAttributes[$i]]);\n              }\n            } else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n              uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n\n              for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                itemHash += row[prefix + '.' + uniqueKeyAttributes[$i]];\n              }\n            }\n\n            if (!parentHash) {\n              parentHash = topHash;\n            }\n\n            itemHash = parentHash + itemHash;\n            $parent = prefix;\n\n            if (i < length - 1) {\n              parentHash = itemHash;\n            }\n          }\n        } else {\n          itemHash = topHash;\n        }\n\n        if (itemHash === topHash) {\n          if (!resultMap[itemHash]) {\n            resultMap[itemHash] = values;\n          } else {\n            topExists = true;\n          }\n        } else {\n          if (!resultMap[itemHash]) {\n            $parent = resultMap[parentHash];\n            $lastKeyPrefix = lastKeyPrefix(prevKey);\n\n            if (includeMap[prevKey].association.isSingleAssociation) {\n              if ($parent) {\n                $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n              }\n            } else {\n              if (!$parent[$lastKeyPrefix]) {\n                $parent[$lastKeyPrefix] = [];\n              }\n\n              $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n            }\n          }\n        }\n\n        if (!topExists) {\n          results.push(topValues);\n        }\n      } else {\n        results[rowsI] = topValues;\n      }\n    }\n\n    return results;\n  }\n\n}\n\nmodule.exports = AbstractQuery;\nmodule.exports.AbstractQuery = AbstractQuery;\nmodule.exports.default = AbstractQuery;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/sequelize/lib/dialects/abstract/query.js"],"names":["_","require","Utils","SqlString","Dot","QueryTypes","AbstractQuery","formatBindParameters","sql","values","dialect","replacementFunc","options","undefined","skipValueReplace","match","key","timeZone","escape","origReplacementFunc","list","Array","isArray","replace","skipUnescape","replVal","Error","run","checkLoggingOption","logging","deprecate","console","log","getInsertIdField","findTableNameInAttribute","attribute","include","includeNames","map","as","tableNames","filter","indexOf","length","getUniqueConstraintErrorMessage","field","message","model","Object","keys","uniqueKeys","fields","msg","isRawQuery","type","RAW","isVersionQuery","VERSION","isUpsertQuery","UPSERT","isInsertQuery","results","metaData","result","INSERT","toLowerCase","hasOwnProperty","handleInsertQuery","instance","autoIncrementAttribute","id","isShowTablesQuery","SHOWTABLES","handleShowTablesQuery","flatten","resultSet","isShowIndexesQuery","SHOWINDEXES","isShowConstraintsQuery","SHOWCONSTRAINTS","isDescribeQuery","DESCRIBE","isSelectQuery","SELECT","isBulkUpdateQuery","BULKUPDATE","isBulkDeleteQuery","BULKDELETE","isForeignKeysQuery","FOREIGNKEYS","isUpdateQuery","UPDATE","handleSelectQuery","fieldMap","reduce","name","raw","o","nest","transform","hasJoin","_groupJoinData","includeMap","checkExisting","hasMultiAssociation","bulkBuild","isNewRecord","includeValidated","attributes","originalAttributes","plain","isShowOrDescribeQuery","isCallQuery","rows","includeOptions","i","$i","$length","rowsI","row","rowsLength","keyI","keyLength","prevKey","topValues","topExists","itemHash","parentHash","topHash","resultMap","$keyPrefix","$keyPrefixString","$prevKeyPrefixString","$prevKeyPrefix","$lastKeyPrefix","$current","$parent","previousPiece","buildIncludeMap","piece","keyPrefixStringMemo","keyPrefixString","memo","substr","lastIndexOf","removeKeyPrefixMemo","removeKeyPrefix","index","keyPrefixMemo","keyPrefix","prefixString","split","lastKeyPrefixMemo","lastKeyPrefix","prefix","getUniqueKeyAttributes","uniqueKeyAttributes","chain","findKey","chr","value","stringify","obj","Buffer","toString","primaryKeyAttributes","isEmpty","forEach","association","isSingleAssociation","push","module","exports","default"],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst Utils = require('../../utils');\nconst SqlString = require('../../sql-string');\nconst Dot = require('dottie');\nconst QueryTypes = require('../../query-types');\n\nclass AbstractQuery {\n\n  /**\n   * rewrite query with parameters\n   *\n   * Examples:\n   *\n   *   query.formatBindParameters('select $1 as foo', ['fooval']);\n   *\n   *   query.formatBindParameters('select $foo as foo', { foo: 'fooval' });\n   *\n   * Options\n   *   skipUnescape: bool, skip unescaping $$\n   *   skipValueReplace: bool, do not replace (but do unescape $$). Check correct syntax and if all values are available\n   * @private\n   */\n  static formatBindParameters(sql, values, dialect, replacementFunc, options) {\n    if (!values) {\n      return [sql, []];\n    }\n\n    options = options || {};\n    if (typeof replacementFunc !== 'function') {\n      options = replacementFunc || {};\n      replacementFunc = undefined;\n    }\n\n    if (!replacementFunc) {\n      if (options.skipValueReplace) {\n        replacementFunc = (match, key, values) => {\n          if (values[key] !== undefined) {\n            return match;\n          }\n          return undefined;\n        };\n      } else {\n        replacementFunc = (match, key, values, timeZone, dialect) => {\n          if (values[key] !== undefined) {\n            return SqlString.escape(values[key], timeZone, dialect);\n          }\n          return undefined;\n        };\n      }\n    } else {\n      if (options.skipValueReplace) {\n        const origReplacementFunc = replacementFunc;\n        replacementFunc = (match, key, values, timeZone, dialect, options) => {\n          if (origReplacementFunc(match, key, values, timeZone, dialect, options) !== undefined) {\n            return match;\n          }\n          return undefined;\n        };\n      }\n    }\n\n    const timeZone = null;\n    const list = Array.isArray(values);\n\n    sql = sql.replace(/\\$(\\$|\\w+)/g, (match, key) => {\n      if ('$' === key) {\n        return options.skipUnescape ? match : key;\n      }\n\n      let replVal;\n      if (list) {\n        if (key.match(/^[1-9]\\d*$/)) {\n          key = key - 1;\n          replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n        }\n      } else {\n        if (!key.match(/^\\d*$/)) {\n          replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n        }\n      }\n      if (replVal === undefined) {\n        throw new Error('Named bind parameter \"' + match + '\" has no value in the given object.');\n      }\n      return replVal;\n    });\n    return [sql, []];\n  }\n\n  /**\n   * Execute the passed sql query.\n   *\n   * Examples:\n   *\n   *     query.run('SELECT 1')\n   *\n   * @param {String} sql - The SQL query which should be executed.\n   * @private\n   */\n  run() {\n    throw new Error('The run method wasn\\'t overwritten!');\n  }\n\n  /**\n   * Check the logging option of the instance and print deprecation warnings.\n   *\n   * @return {void}\n   * @private\n   */\n  checkLoggingOption() {\n    if (this.options.logging === true) {\n      Utils.deprecate('The logging-option should be either a function or false. Default: console.log');\n      this.options.logging = console.log;\n    }\n  }\n\n  /**\n   * Get the attributes of an insert query, which contains the just inserted id.\n   *\n   * @return {String} The field name.\n   * @private\n   */\n  getInsertIdField() {\n    return 'insertId';\n  }\n\n  /**\n   * Iterate over all known tables and search their names inside the sql query.\n   * This method will also check association aliases ('as' option).\n   *\n   * @param  {String} attribute An attribute of a SQL query. (?)\n   * @return {String}           The found tableName / alias.\n   * @private\n   */\n  findTableNameInAttribute(attribute) {\n    if (!this.options.include) {\n      return null;\n    }\n    if (!this.options.includeNames) {\n      this.options.includeNames = this.options.include.map(include => include.as);\n    }\n\n    const tableNames = this.options.includeNames.filter(include => attribute.indexOf(include + '.') === 0);\n\n    if (tableNames.length === 1) {\n      return tableNames[0];\n    } else {\n      return null;\n    }\n  }\n\n  getUniqueConstraintErrorMessage(field) {\n    let message = field + ' must be unique';\n\n    if (this.model) {\n      for (const key of Object.keys(this.model.uniqueKeys)) {\n        if (this.model.uniqueKeys[key].fields.indexOf(field.replace(/\"/g, '')) >= 0) {\n          if (this.model.uniqueKeys[key].msg) {\n            message = this.model.uniqueKeys[key].msg;\n          }\n        }\n      }\n    }\n    return message;\n  }\n\n  isRawQuery() {\n    return this.options.type === QueryTypes.RAW;\n  }\n\n  isVersionQuery() {\n    return this.options.type === QueryTypes.VERSION;\n  }\n\n  isUpsertQuery() {\n    return this.options.type === QueryTypes.UPSERT;\n  }\n\n  isInsertQuery(results, metaData) {\n    let result = true;\n\n    if (this.options.type === QueryTypes.INSERT) {\n      return true;\n    }\n\n    // is insert query if sql contains insert into\n    result = result && this.sql.toLowerCase().indexOf('insert into') === 0;\n\n    // is insert query if no results are passed or if the result has the inserted id\n    result = result && (!results || results.hasOwnProperty(this.getInsertIdField()));\n\n    // is insert query if no metadata are passed or if the metadata has the inserted id\n    result = result && (!metaData || metaData.hasOwnProperty(this.getInsertIdField()));\n\n    return result;\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n\n      id = id || results && results[this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n\n      this.instance[autoIncrementAttribute] = id;\n    }\n  }\n\n  isShowTablesQuery() {\n    return this.options.type === QueryTypes.SHOWTABLES;\n  }\n\n  handleShowTablesQuery(results) {\n    return _.flatten(results.map(resultSet => _.values(resultSet)));\n  }\n\n  isShowIndexesQuery() {\n    return this.options.type === QueryTypes.SHOWINDEXES;\n  }\n\n  isShowConstraintsQuery() {\n    return this.options.type === QueryTypes.SHOWCONSTRAINTS;\n  }\n\n  isDescribeQuery() {\n    return this.options.type === QueryTypes.DESCRIBE;\n  }\n\n  isSelectQuery() {\n    return this.options.type === QueryTypes.SELECT;\n  }\n\n  isBulkUpdateQuery() {\n    return this.options.type === QueryTypes.BULKUPDATE;\n  }\n\n  isBulkDeleteQuery() {\n    return this.options.type === QueryTypes.BULKDELETE;\n  }\n\n  isForeignKeysQuery() {\n    return this.options.type === QueryTypes.FOREIGNKEYS;\n  }\n\n  isUpdateQuery() {\n    return this.options.type === QueryTypes.UPDATE;\n  }\n\n  handleSelectQuery(results) {\n    let result = null;\n    // Map raw fields to names if a mapping is provided\n    if (this.options.fieldMap) {\n      const fieldMap = this.options.fieldMap;\n      results = _.map(results, result => _.reduce(fieldMap, (result, name, field) => {\n        if (result[field] !== undefined) {\n          result[name] = result[field];\n          delete result[field];\n        }\n        return result;\n      }, result));\n    }\n    // Raw queries\n    if (this.options.raw) {\n      result = results.map(result => {\n        let o = {};\n\n        for (const key in result) {\n          if (result.hasOwnProperty(key)) {\n            o[key] = result[key];\n          }\n        }\n\n        if (this.options.nest) {\n          o = Dot.transform(o);\n        }\n\n        return o;\n      });\n    // Queries with include\n    } else if (this.options.hasJoin === true) {\n      results = AbstractQuery._groupJoinData(results, {\n        model: this.model,\n        includeMap: this.options.includeMap,\n        includeNames: this.options.includeNames\n      }, {\n        checkExisting: this.options.hasMultiAssociation\n      });\n\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        include: this.options.include,\n        includeNames: this.options.includeNames,\n        includeMap: this.options.includeMap,\n        includeValidated: true,\n        attributes: this.options.originalAttributes || this.options.attributes,\n        raw: true\n      });\n    // Regular queries\n    } else {\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        raw: true,\n        attributes: this.options.attributes\n      });\n    }\n\n    // return the first real model instance if options.plain is set (e.g. Model.find)\n    if (this.options.plain) {\n      result = result.length === 0 ? null : result[0];\n    }\n    return result;\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().indexOf('show') === 0;\n    result = result || this.sql.toLowerCase().indexOf('describe') === 0;\n\n    return result;\n  }\n\n  isCallQuery() {\n    return this.sql.toLowerCase().indexOf('call') === 0;\n  }\n\n  /**\n   * The function takes the result of the query execution and groups\n   * the associated data by the callee.\n   *\n   * Example:\n   *   groupJoinData([\n   *     {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 1 }\n   *     }, {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 2 }\n   *     }, {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 3 }\n   *     }\n   *   ])\n   *\n   * Result:\n   *   Something like this:\n   *\n   *   [\n   *     {\n   *       some: 'data',\n   *       id: 1,\n   *       association: [\n   *         { foo: 'bar', id: 1 },\n   *         { foo: 'bar', id: 2 },\n   *         { foo: 'bar', id: 3 }\n   *       ]\n   *     }\n   *   ]\n   * @private\n   */\n  static _groupJoinData(rows, includeOptions, options) {\n\n    /*\n     * Assumptions\n     * ID is not necessarily the first field\n     * All fields for a level is grouped in the same set (i.e. Panel.id, Task.id, Panel.title is not possible)\n     * Parent keys will be seen before any include/child keys\n     * Previous set won't necessarily be parent set (one parent could have two children, one child would then be previous set for the other)\n     */\n\n    /*\n     * Author (MH) comment: This code is an unreadable mess, but it's performant.\n     * groupJoinData is a performance critical function so we prioritize perf over readability.\n     */\n    if (!rows.length) {\n      return [];\n    }\n\n    // Generic looping\n    let i;\n    let length;\n    let $i;\n    let $length;\n    // Row specific looping\n    let rowsI;\n    let row;\n    const rowsLength = rows.length;\n    // Key specific looping\n    let keys;\n    let key;\n    let keyI;\n    let keyLength;\n    let prevKey;\n    let values;\n    let topValues;\n    let topExists;\n    const checkExisting = options.checkExisting;\n    // If we don't have to deduplicate we can pre-allocate the resulting array\n    let itemHash;\n    let parentHash;\n    let topHash;\n    const results = checkExisting ? [] : new Array(rowsLength);\n    const resultMap = {};\n    const includeMap = {};\n    // Result variables for the respective functions\n    let $keyPrefix;\n    let $keyPrefixString;\n    let $prevKeyPrefixString; // eslint-disable-line\n    let $prevKeyPrefix;\n    let $lastKeyPrefix;\n    let $current;\n    let $parent;\n    // Map each key to an include option\n    let previousPiece;\n    const buildIncludeMap = piece => {\n      if ($current.includeMap.hasOwnProperty(piece)) {\n        includeMap[key] = $current = $current.includeMap[piece];\n        if (previousPiece) {\n          previousPiece = previousPiece+'.'+piece;\n        } else {\n          previousPiece = piece;\n        }\n        includeMap[previousPiece] = $current;\n      }\n    };\n    // Calculate the string prefix of a key ('User.Results' for 'User.Results.id')\n    const keyPrefixStringMemo = {};\n    const keyPrefixString = (key, memo) => {\n      if (!memo.hasOwnProperty(key)) {\n        memo[key] = key.substr(0, key.lastIndexOf('.'));\n      }\n      return memo[key];\n    };\n    // Removes the prefix from a key ('id' for 'User.Results.id')\n    const removeKeyPrefixMemo = {};\n    const removeKeyPrefix = key => {\n      if (!removeKeyPrefixMemo.hasOwnProperty(key)) {\n        const index = key.lastIndexOf('.');\n        removeKeyPrefixMemo[key] = key.substr(index === -1 ? 0 : index + 1);\n      }\n      return removeKeyPrefixMemo[key];\n    };\n    // Calculates the array prefix of a key (['User', 'Results'] for 'User.Results.id')\n    const keyPrefixMemo = {};\n    const keyPrefix = key => {\n      // We use a double memo and keyPrefixString so that different keys with the same prefix will receive the same array instead of differnet arrays with equal values\n      if (!keyPrefixMemo.hasOwnProperty(key)) {\n        const prefixString = keyPrefixString(key, keyPrefixStringMemo);\n        if (!keyPrefixMemo.hasOwnProperty(prefixString)) {\n          keyPrefixMemo[prefixString] = prefixString ? prefixString.split('.') : [];\n        }\n        keyPrefixMemo[key] = keyPrefixMemo[prefixString];\n      }\n      return keyPrefixMemo[key];\n    };\n    // Calcuate the last item in the array prefix ('Results' for 'User.Results.id')\n    const lastKeyPrefixMemo = {};\n    const lastKeyPrefix = key => {\n      if (!lastKeyPrefixMemo.hasOwnProperty(key)) {\n        const prefix = keyPrefix(key);\n        const length = prefix.length;\n\n        lastKeyPrefixMemo[key] = !length ? '' : prefix[length - 1];\n      }\n      return lastKeyPrefixMemo[key];\n    };\n    const getUniqueKeyAttributes = model => {\n      let uniqueKeyAttributes = _.chain(model.uniqueKeys);\n      uniqueKeyAttributes = uniqueKeyAttributes\n        .result(uniqueKeyAttributes.findKey() + '.fields')\n        .map(field => _.findKey(model.attributes, chr => chr.field === field))\n        .value();\n\n      return uniqueKeyAttributes;\n    };\n    const stringify = obj => obj instanceof Buffer ? obj.toString('hex') : obj;\n    let primaryKeyAttributes;\n    let uniqueKeyAttributes;\n    let prefix;\n\n    for (rowsI = 0; rowsI < rowsLength; rowsI++) {\n      row = rows[rowsI];\n\n      // Keys are the same for all rows, so only need to compute them on the first row\n      if (rowsI === 0) {\n        keys = Object.keys(row);\n        keyLength = keys.length;\n      }\n\n      if (checkExisting) {\n        topExists = false;\n\n        // Compute top level hash key (this is usually just the primary key values)\n        $length = includeOptions.model.primaryKeyAttributes.length;\n        topHash = '';\n        if ($length === 1) {\n          topHash = stringify(row[includeOptions.model.primaryKeyAttributes[0]]);\n        }\n        else if ($length > 1) {\n          for ($i = 0; $i < $length; $i++) {\n            topHash += stringify(row[includeOptions.model.primaryKeyAttributes[$i]]);\n          }\n        }\n        else if (!_.isEmpty(includeOptions.model.uniqueKeys)) {\n          uniqueKeyAttributes = getUniqueKeyAttributes(includeOptions.model);\n          for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n            topHash += row[uniqueKeyAttributes[$i]];\n          }\n        }\n      }\n\n      topValues = values = {};\n      $prevKeyPrefix = undefined;\n      for (keyI = 0; keyI < keyLength; keyI++) {\n        key = keys[keyI];\n\n        // The string prefix isn't actualy needed\n        // We use it so keyPrefix for different keys will resolve to the same array if they have the same prefix\n        // TODO: Find a better way?\n        $keyPrefixString = keyPrefixString(key, keyPrefixStringMemo);\n        $keyPrefix = keyPrefix(key);\n\n        // On the first row we compute the includeMap\n        if (rowsI === 0 && !includeMap.hasOwnProperty(key)) {\n          if (!$keyPrefix.length) {\n            includeMap[key] = includeMap[''] = includeOptions;\n          } else {\n            $current = includeOptions;\n            previousPiece = undefined;\n            $keyPrefix.forEach(buildIncludeMap);\n          }\n        }\n        // End of key set\n        if ($prevKeyPrefix !== undefined && $prevKeyPrefix !== $keyPrefix) {\n          if (checkExisting) {\n            // Compute hash key for this set instance\n            // TODO: Optimize\n            length = $prevKeyPrefix.length;\n            $parent = null;\n            parentHash = null;\n\n            if (length) {\n              for (i = 0; i < length; i++) {\n                prefix = $parent ? $parent+'.'+$prevKeyPrefix[i] : $prevKeyPrefix[i];\n                primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n                $length = primaryKeyAttributes.length;\n                itemHash = prefix;\n                if ($length === 1) {\n                  itemHash += stringify(row[prefix+'.'+primaryKeyAttributes[0]]);\n                }\n                else if ($length > 1) {\n                  for ($i = 0; $i < $length; $i++) {\n                    itemHash += stringify(row[prefix+'.'+primaryKeyAttributes[$i]]);\n                  }\n                }\n                else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n                  uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n                  for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                    itemHash += row[prefix+'.'+uniqueKeyAttributes[$i]];\n                  }\n                }\n                if (!parentHash) {\n                  parentHash = topHash;\n                }\n\n                itemHash = parentHash + itemHash;\n                $parent = prefix;\n                if (i < length - 1) {\n                  parentHash = itemHash;\n                }\n              }\n            } else {\n              itemHash = topHash;\n            }\n\n            if (itemHash === topHash) {\n              if (!resultMap[itemHash]) {\n                resultMap[itemHash] = values;\n              } else {\n                topExists = true;\n              }\n            } else {\n              if (!resultMap[itemHash]) {\n                $parent = resultMap[parentHash];\n                $lastKeyPrefix = lastKeyPrefix(prevKey);\n\n                if (includeMap[prevKey].association.isSingleAssociation) {\n                  if ($parent) {\n                    $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n                  }\n                } else {\n                  if (!$parent[$lastKeyPrefix]) {\n                    $parent[$lastKeyPrefix] = [];\n                  }\n                  $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n                }\n              }\n            }\n\n            // Reset values\n            values = {};\n          } else {\n            // If checkExisting is false it's because there's only 1:1 associations in this query\n            // However we still need to map onto the appropriate parent\n            // For 1:1 we map forward, initializing the value object on the parent to be filled in the next iterations of the loop\n            $current = topValues;\n            length = $keyPrefix.length;\n            if (length) {\n              for (i = 0; i < length; i++) {\n                if (i === length -1) {\n                  values = $current[$keyPrefix[i]] = {};\n                }\n                $current = $current[$keyPrefix[i]];\n              }\n            }\n          }\n        }\n\n        // End of iteration, set value and set prev values (for next iteration)\n        values[removeKeyPrefix(key)] = row[key];\n        prevKey = key;\n        $prevKeyPrefix = $keyPrefix;\n        $prevKeyPrefixString = $keyPrefixString;\n      }\n\n      if (checkExisting) {\n        length = $prevKeyPrefix.length;\n        $parent = null;\n        parentHash = null;\n\n        if (length) {\n          for (i = 0; i < length; i++) {\n            prefix = $parent ? $parent+'.'+$prevKeyPrefix[i] : $prevKeyPrefix[i];\n            primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n            $length = primaryKeyAttributes.length;\n            itemHash = prefix;\n            if ($length === 1) {\n              itemHash += stringify(row[prefix+'.'+primaryKeyAttributes[0]]);\n            }\n            else if ($length > 0) {\n              for ($i = 0; $i < $length; $i++) {\n                itemHash += stringify(row[prefix+'.'+primaryKeyAttributes[$i]]);\n              }\n            }\n            else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n              uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n              for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                itemHash += row[prefix+'.'+uniqueKeyAttributes[$i]];\n              }\n            }\n            if (!parentHash) {\n              parentHash = topHash;\n            }\n\n            itemHash = parentHash + itemHash;\n            $parent = prefix;\n            if (i < length - 1) {\n              parentHash = itemHash;\n            }\n          }\n        } else {\n          itemHash = topHash;\n        }\n\n        if (itemHash === topHash) {\n          if (!resultMap[itemHash]) {\n            resultMap[itemHash] = values;\n          } else {\n            topExists = true;\n          }\n        } else {\n          if (!resultMap[itemHash]) {\n            $parent = resultMap[parentHash];\n            $lastKeyPrefix = lastKeyPrefix(prevKey);\n\n            if (includeMap[prevKey].association.isSingleAssociation) {\n              if ($parent) {\n                $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n              }\n            } else {\n              if (!$parent[$lastKeyPrefix]) {\n                $parent[$lastKeyPrefix] = [];\n              }\n              $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n            }\n          }\n        }\n        if (!topExists) {\n          results.push(topValues);\n        }\n      } else {\n        results[rowsI] = topValues;\n      }\n    }\n\n    return results;\n  }\n}\n\nmodule.exports = AbstractQuery;\nmodule.exports.AbstractQuery = AbstractQuery;\nmodule.exports.default = AbstractQuery;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst TVP = {\n  id: 0xF3,\n  type: 'TVPTYPE',\n  name: 'TVP',\n  declaration: function declaration(parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    return value.name + ' readonly';\n  },\n  writeTypeInfo: function writeTypeInfo(buffer, parameter) {\n    let ref, ref1, ref2, ref3;\n    buffer.writeUInt8(this.id);\n    buffer.writeBVarchar('');\n    buffer.writeBVarchar((ref = (ref1 = parameter.value) != null ? ref1.schema : undefined) != null ? ref : '');\n    buffer.writeBVarchar((ref2 = (ref3 = parameter.value) != null ? ref3.name : undefined) != null ? ref2 : '');\n  },\n  writeParameterData: function writeParameterData(buffer, parameter, options, cb) {\n    if (parameter.value == null) {\n      buffer.writeUInt16LE(0xFFFF);\n      buffer.writeUInt8(0x00);\n      buffer.writeUInt8(0x00);\n      return;\n    }\n\n    buffer.writeUInt16LE(parameter.value.columns.length);\n    const ref = parameter.value.columns;\n\n    for (let i = 0, len = ref.length; i < len; i++) {\n      const column = ref[i];\n      buffer.writeUInt32LE(0x00000000);\n      buffer.writeUInt16LE(0x0000);\n      column.type.writeTypeInfo(buffer, column);\n      buffer.writeBVarchar('');\n    }\n\n    buffer.writeUInt8(0x00);\n    const ref1 = parameter.value.rows;\n\n    const writeNext = i => {\n      if (i >= ref1.length) {\n        buffer.writeUInt8(0x00);\n        cb();\n        return;\n      }\n\n      const row = ref1[i];\n      buffer.writeUInt8(0x01);\n\n      for (let k = 0, len2 = row.length; k < len2; k++) {\n        const value = row[k];\n        const param = {\n          value: value,\n          length: parameter.value.columns[k].length,\n          scale: parameter.value.columns[k].scale,\n          precision: parameter.value.columns[k].precision\n        };\n        parameter.value.columns[k].type.writeParameterData(buffer, param, options, () => {});\n      }\n\n      setImmediate(() => {\n        writeNext(i + 1);\n      });\n    };\n\n    writeNext(0);\n  },\n  validate: function validate(value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'object') {\n      return new TypeError('Invalid table.');\n    }\n\n    if (!Array.isArray(value.columns)) {\n      return new TypeError('Invalid table.');\n    }\n\n    if (!Array.isArray(value.rows)) {\n      return new TypeError('Invalid table.');\n    }\n\n    return value;\n  }\n};\nvar _default = TVP;\nexports.default = _default;\nmodule.exports = TVP;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/tedious/lib/data-types/tvp.js"],"names":["Object","defineProperty","exports","value","default","TVP","id","type","name","declaration","parameter","writeTypeInfo","buffer","ref","ref1","ref2","ref3","writeUInt8","writeBVarchar","schema","undefined","writeParameterData","options","cb","writeUInt16LE","columns","length","i","len","column","writeUInt32LE","rows","writeNext","row","k","len2","param","scale","precision","setImmediate","validate","TypeError","Array","isArray","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst TVP = {\n  id: 0xF3,\n  type: 'TVPTYPE',\n  name: 'TVP',\n  declaration: function declaration(parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    return value.name + ' readonly';\n  },\n  writeTypeInfo: function writeTypeInfo(buffer, parameter) {\n    let ref, ref1, ref2, ref3;\n    buffer.writeUInt8(this.id);\n    buffer.writeBVarchar('');\n    buffer.writeBVarchar((ref = (ref1 = parameter.value) != null ? ref1.schema : undefined) != null ? ref : '');\n    buffer.writeBVarchar((ref2 = (ref3 = parameter.value) != null ? ref3.name : undefined) != null ? ref2 : '');\n  },\n  writeParameterData: function writeParameterData(buffer, parameter, options, cb) {\n    if (parameter.value == null) {\n      buffer.writeUInt16LE(0xFFFF);\n      buffer.writeUInt8(0x00);\n      buffer.writeUInt8(0x00);\n      return;\n    }\n\n    buffer.writeUInt16LE(parameter.value.columns.length);\n    const ref = parameter.value.columns;\n\n    for (let i = 0, len = ref.length; i < len; i++) {\n      const column = ref[i];\n      buffer.writeUInt32LE(0x00000000);\n      buffer.writeUInt16LE(0x0000);\n      column.type.writeTypeInfo(buffer, column);\n      buffer.writeBVarchar('');\n    }\n\n    buffer.writeUInt8(0x00);\n    const ref1 = parameter.value.rows;\n\n    const writeNext = i => {\n      if (i >= ref1.length) {\n        buffer.writeUInt8(0x00);\n        cb();\n        return;\n      }\n\n      const row = ref1[i];\n      buffer.writeUInt8(0x01);\n\n      for (let k = 0, len2 = row.length; k < len2; k++) {\n        const value = row[k];\n        const param = {\n          value: value,\n          length: parameter.value.columns[k].length,\n          scale: parameter.value.columns[k].scale,\n          precision: parameter.value.columns[k].precision\n        };\n        parameter.value.columns[k].type.writeParameterData(buffer, param, options, () => {});\n      }\n\n      setImmediate(() => {\n        writeNext(i + 1);\n      });\n    };\n\n    writeNext(0);\n  },\n  validate: function validate(value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'object') {\n      return new TypeError('Invalid table.');\n    }\n\n    if (!Array.isArray(value.columns)) {\n      return new TypeError('Invalid table.');\n    }\n\n    if (!Array.isArray(value.rows)) {\n      return new TypeError('Invalid table.');\n    }\n\n    return value;\n  }\n};\nvar _default = TVP;\nexports.default = _default;\nmodule.exports = TVP;"]},"metadata":{},"sourceType":"script"}
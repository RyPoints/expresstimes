{"ast":null,"code":"/*\r\n * @copyright\r\n * Copyright © Microsoft Open Technologies, Inc.\r\n *\r\n * All Rights Reserved\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http: *www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS\r\n * OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION\r\n * ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A\r\n * PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.\r\n *\r\n * See the Apache License, Version 2.0 for the specific language\r\n * governing permissions and limitations under the License.\r\n */\n'use strict';\n\nvar constants = require('./constants');\n\nvar Logger = require('./log').Logger;\n\nvar Mex = require('./mex');\n\nvar OAuth2Client = require('./oauth2client');\n\nvar OAuth2Parameters = constants.OAuth2.Parameters;\nvar TokenResponseFields = constants.TokenResponseFields;\nvar OAuth2GrantType = constants.OAuth2.GrantType;\nvar OAuth2Scope = constants.OAuth2.Scope;\n/**\r\n * Constructs a new CodeRequest object.\r\n * @constructor\r\n * @private\r\n * @param {object} callContext Contains any context information that applies to the request.\r\n * @param {AuthenticationContext} authenticationContext\r\n * @param {string} resource\r\n * @param {string} clientId\r\n */\n// TODO: probably need to modify the parameter list. \n\nfunction CodeRequest(callContext, authenticationContext, clientId, resource) {\n  this._log = new Logger('DeviceCodeRequest', callContext._logContext);\n  this._callContext = callContext;\n  this._authenticationContext = authenticationContext;\n  this._resource = resource;\n  this._clientId = clientId; // This should be set at the beginning of getToken\n  // functions that have a userId.\n\n  this._userId = null;\n}\n\n;\n/**\r\n * Get user code info. \r\n * @private\r\n * @param {object} oauthParameters containing all the parameters needed to get the user code info. \r\n * @param {callback} callback\r\n */\n\nCodeRequest.prototype._getUserCodeInfo = function (oauthParameters, callback) {\n  var oauth2Client = this._createOAuth2Client();\n\n  oauth2Client.getUserCodeInfo(oauthParameters, callback);\n};\n\nCodeRequest.prototype._createOAuth2Client = function () {\n  return new OAuth2Client(this._callContext, this._authenticationContext._authority);\n};\n/**\r\n * Creates a set of basic, common, OAuthParameters based on values that the CodeRequest was created with.\r\n * @private\r\n * @return {object} containing all the basic parameters. \r\n */\n\n\nCodeRequest.prototype._createOAuthParameters = function () {\n  var oauthParameters = {};\n  oauthParameters[OAuth2Parameters.CLIENT_ID] = this._clientId;\n  oauthParameters[OAuth2Parameters.RESOURCE] = this._resource;\n  return oauthParameters;\n};\n/**\r\n * Get the user code information. \r\n * @param {string} language optional parameter used to get the user code info. \r\n * @param {callback} callback\r\n */\n\n\nCodeRequest.prototype.getUserCodeInfo = function (language, callback) {\n  this._log.info('Getting user code info.');\n\n  var oauthParameters = this._createOAuthParameters();\n\n  if (language) {\n    oauthParameters[OAuth2Parameters.LANGUAGE] = language;\n  }\n\n  this._getUserCodeInfo(oauthParameters, callback);\n};\n\nmodule.exports = CodeRequest;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/adal-node/lib/code-request.js"],"names":["constants","require","Logger","Mex","OAuth2Client","OAuth2Parameters","OAuth2","Parameters","TokenResponseFields","OAuth2GrantType","GrantType","OAuth2Scope","Scope","CodeRequest","callContext","authenticationContext","clientId","resource","_log","_logContext","_callContext","_authenticationContext","_resource","_clientId","_userId","prototype","_getUserCodeInfo","oauthParameters","callback","oauth2Client","_createOAuth2Client","getUserCodeInfo","_authority","_createOAuthParameters","CLIENT_ID","RESOURCE","language","info","LANGUAGE","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;AAoBA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,OAAD,CAAP,CAAiBC,MAA9B;;AACA,IAAIC,GAAG,GAAGF,OAAO,CAAC,OAAD,CAAjB;;AACA,IAAIG,YAAY,GAAGH,OAAO,CAAC,gBAAD,CAA1B;;AAEA,IAAII,gBAAgB,GAAGL,SAAS,CAACM,MAAV,CAAiBC,UAAxC;AACA,IAAIC,mBAAmB,GAAGR,SAAS,CAACQ,mBAApC;AACA,IAAIC,eAAe,GAAGT,SAAS,CAACM,MAAV,CAAiBI,SAAvC;AACA,IAAIC,WAAW,GAAGX,SAAS,CAACM,MAAV,CAAiBM,KAAnC;AAEA;;;;;;;;;AASA;;AACA,SAASC,WAAT,CAAqBC,WAArB,EAAkCC,qBAAlC,EAAyDC,QAAzD,EAAmEC,QAAnE,EAA6E;AACzE,OAAKC,IAAL,GAAY,IAAIhB,MAAJ,CAAW,mBAAX,EAAgCY,WAAW,CAACK,WAA5C,CAAZ;AACA,OAAKC,YAAL,GAAoBN,WAApB;AACA,OAAKO,sBAAL,GAA8BN,qBAA9B;AACA,OAAKO,SAAL,GAAiBL,QAAjB;AACA,OAAKM,SAAL,GAAiBP,QAAjB,CALyE,CAOzE;AACA;;AACA,OAAKQ,OAAL,GAAe,IAAf;AACH;;AAAA;AAED;;;;;;;AAMAX,WAAW,CAACY,SAAZ,CAAsBC,gBAAtB,GAAyC,UAAUC,eAAV,EAA2BC,QAA3B,EAAqC;AAC3E,MAAIC,YAAY,GAAG,KAAKC,mBAAL,EAAnB;;AACAD,EAAAA,YAAY,CAACE,eAAb,CAA6BJ,eAA7B,EAA8CC,QAA9C;AACF,CAHD;;AAKAf,WAAW,CAACY,SAAZ,CAAsBK,mBAAtB,GAA4C,YAAY;AACpD,SAAO,IAAI1B,YAAJ,CAAiB,KAAKgB,YAAtB,EAAoC,KAAKC,sBAAL,CAA4BW,UAAhE,CAAP;AACH,CAFD;AAIA;;;;;;;AAKAnB,WAAW,CAACY,SAAZ,CAAsBQ,sBAAtB,GAA+C,YAAY;AACvD,MAAIN,eAAe,GAAG,EAAtB;AAEAA,EAAAA,eAAe,CAACtB,gBAAgB,CAAC6B,SAAlB,CAAf,GAA8C,KAAKX,SAAnD;AACAI,EAAAA,eAAe,CAACtB,gBAAgB,CAAC8B,QAAlB,CAAf,GAA6C,KAAKb,SAAlD;AAEA,SAAOK,eAAP;AACH,CAPD;AASA;;;;;;;AAKAd,WAAW,CAACY,SAAZ,CAAsBM,eAAtB,GAAwC,UAASK,QAAT,EAAmBR,QAAnB,EAA6B;AACjE,OAAKV,IAAL,CAAUmB,IAAV,CAAe,yBAAf;;AAEA,MAAIV,eAAe,GAAG,KAAKM,sBAAL,EAAtB;;AACA,MAAIG,QAAJ,EAAa;AACVT,IAAAA,eAAe,CAACtB,gBAAgB,CAACiC,QAAlB,CAAf,GAA6CF,QAA7C;AACF;;AAED,OAAKV,gBAAL,CAAsBC,eAAtB,EAAuCC,QAAvC;AACH,CATD;;AAUAW,MAAM,CAACC,OAAP,GAAiB3B,WAAjB","sourcesContent":["/*\r\n * @copyright\r\n * Copyright © Microsoft Open Technologies, Inc.\r\n *\r\n * All Rights Reserved\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http: *www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS\r\n * OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION\r\n * ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A\r\n * PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.\r\n *\r\n * See the Apache License, Version 2.0 for the specific language\r\n * governing permissions and limitations under the License.\r\n */\r\n'use strict';\r\n\r\nvar constants = require('./constants');\r\nvar Logger = require('./log').Logger;\r\nvar Mex = require('./mex');\r\nvar OAuth2Client = require('./oauth2client');\r\n\r\nvar OAuth2Parameters = constants.OAuth2.Parameters;\r\nvar TokenResponseFields = constants.TokenResponseFields;\r\nvar OAuth2GrantType = constants.OAuth2.GrantType;\r\nvar OAuth2Scope = constants.OAuth2.Scope;\r\n\r\n/**\r\n * Constructs a new CodeRequest object.\r\n * @constructor\r\n * @private\r\n * @param {object} callContext Contains any context information that applies to the request.\r\n * @param {AuthenticationContext} authenticationContext\r\n * @param {string} resource\r\n * @param {string} clientId\r\n */\r\n// TODO: probably need to modify the parameter list. \r\nfunction CodeRequest(callContext, authenticationContext, clientId, resource) {\r\n    this._log = new Logger('DeviceCodeRequest', callContext._logContext);\r\n    this._callContext = callContext;\r\n    this._authenticationContext = authenticationContext;\r\n    this._resource = resource;\r\n    this._clientId = clientId;\r\n    \r\n    // This should be set at the beginning of getToken\r\n    // functions that have a userId.\r\n    this._userId = null;\r\n};\r\n\r\n/**\r\n * Get user code info. \r\n * @private\r\n * @param {object} oauthParameters containing all the parameters needed to get the user code info. \r\n * @param {callback} callback\r\n */\r\nCodeRequest.prototype._getUserCodeInfo = function (oauthParameters, callback) {\r\n   var oauth2Client = this._createOAuth2Client();\r\n   oauth2Client.getUserCodeInfo(oauthParameters, callback);\r\n};\r\n\r\nCodeRequest.prototype._createOAuth2Client = function () {\r\n    return new OAuth2Client(this._callContext, this._authenticationContext._authority);\r\n};\r\n\r\n/**\r\n * Creates a set of basic, common, OAuthParameters based on values that the CodeRequest was created with.\r\n * @private\r\n * @return {object} containing all the basic parameters. \r\n */\r\nCodeRequest.prototype._createOAuthParameters = function () {\r\n    var oauthParameters = {};\r\n    \r\n    oauthParameters[OAuth2Parameters.CLIENT_ID] = this._clientId;\r\n    oauthParameters[OAuth2Parameters.RESOURCE] = this._resource;\r\n\r\n    return oauthParameters;\r\n};\r\n\r\n/**\r\n * Get the user code information. \r\n * @param {string} language optional parameter used to get the user code info. \r\n * @param {callback} callback\r\n */\r\nCodeRequest.prototype.getUserCodeInfo = function(language, callback) {\r\n    this._log.info('Getting user code info.');\r\n\r\n    var oauthParameters = this._createOAuthParameters();\r\n    if (language){\r\n       oauthParameters[OAuth2Parameters.LANGUAGE] = language;\r\n    }\r\n\r\n    this._getUserCodeInfo(oauthParameters, callback);\r\n};\r\nmodule.exports = CodeRequest;"]},"metadata":{},"sourceType":"script"}
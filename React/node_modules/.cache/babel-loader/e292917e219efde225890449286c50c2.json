{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst Utils = require('../../utils');\n\nconst DataTypes = require('../../data-types');\n\nconst TableHints = require('../../table-hints');\n\nconst AbstractQueryGenerator = require('../abstract/query-generator');\n\nconst randomBytes = require('crypto').randomBytes;\n\nconst semver = require('semver');\n\nconst Op = require('../../operators');\n/* istanbul ignore next */\n\n\nconst throwMethodUndefined = function (methodName) {\n  throw new Error('The method \"' + methodName + '\" is not defined! Please add it to your sql dialect.');\n};\n\nconst QueryGenerator = {\n  __proto__: AbstractQueryGenerator,\n  options: {},\n  dialect: 'mssql',\n\n  createSchema(schema) {\n    return ['IF NOT EXISTS (SELECT schema_name', 'FROM information_schema.schemata', 'WHERE schema_name =', wrapSingleQuote(schema), ')', 'BEGIN', \"EXEC sp_executesql N'CREATE SCHEMA\", this.quoteIdentifier(schema), \";'\", 'END;'].join(' ');\n  },\n\n  dropSchema(schema) {\n    // Mimics Postgres CASCADE, will drop objects belonging to the schema\n    const quotedSchema = wrapSingleQuote(schema);\n    return ['IF EXISTS (SELECT schema_name', 'FROM information_schema.schemata', 'WHERE schema_name =', quotedSchema, ')', 'BEGIN', 'DECLARE @id INT, @ms_sql NVARCHAR(2000);', 'DECLARE @cascade TABLE (', 'id INT NOT NULL IDENTITY PRIMARY KEY,', 'ms_sql NVARCHAR(2000) NOT NULL );', 'INSERT INTO @cascade ( ms_sql )', \"SELECT CASE WHEN o.type IN ('F','PK')\", \"THEN N'ALTER TABLE ['+ s.name + N'].[' + p.name + N'] DROP CONSTRAINT [' + o.name + N']'\", \"ELSE N'DROP TABLE ['+ s.name + N'].[' + o.name + N']' END\", 'FROM sys.objects o', 'JOIN sys.schemas s on o.schema_id = s.schema_id', 'LEFT OUTER JOIN sys.objects p on o.parent_object_id = p.object_id', \"WHERE o.type IN ('F', 'PK', 'U') AND s.name = \", quotedSchema, 'ORDER BY o.type ASC;', 'SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;', 'WHILE @id IS NOT NULL', 'BEGIN', 'BEGIN TRY EXEC sp_executesql @ms_sql; END TRY', 'BEGIN CATCH BREAK; THROW; END CATCH;', 'DELETE FROM @cascade WHERE id = @id;', 'SELECT @id = NULL, @ms_sql = NULL;', 'SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;', 'END', \"EXEC sp_executesql N'DROP SCHEMA\", this.quoteIdentifier(schema), \";'\", 'END;'].join(' ');\n  },\n\n  showSchemasQuery() {\n    return ['SELECT \"name\" as \"schema_name\" FROM sys.schemas as s', 'WHERE \"s\".\"name\" NOT IN (', \"'INFORMATION_SCHEMA', 'dbo', 'guest', 'sys', 'archive'\", ')', 'AND', '\"s\".\"name\" NOT LIKE', \"'db_%'\"].join(' ');\n  },\n\n  versionQuery() {\n    // Uses string manipulation to convert the MS Maj.Min.Patch.Build to semver Maj.Min.Patch\n    return ['DECLARE @ms_ver NVARCHAR(20);', \"SET @ms_ver = REVERSE(CONVERT(NVARCHAR(20), SERVERPROPERTY('ProductVersion')));\", \"SELECT REVERSE(SUBSTRING(@ms_ver, CHARINDEX('.', @ms_ver)+1, 20)) AS 'version'\"].join(' ');\n  },\n\n  createTableQuery(tableName, attributes, options) {\n    const query = \"IF OBJECT_ID('<%= table %>', 'U') IS NULL CREATE TABLE <%= table %> (<%= attributes %>)\",\n          primaryKeys = [],\n          foreignKeys = {},\n          attrStr = [];\n\n    for (const attr in attributes) {\n      if (attributes.hasOwnProperty(attr)) {\n        const dataType = attributes[attr];\n        let match;\n\n        if (_.includes(dataType, 'PRIMARY KEY')) {\n          primaryKeys.push(attr);\n\n          if (_.includes(dataType, 'REFERENCES')) {\n            // MSSQL doesn't support inline REFERENCES declarations: move to the end\n            match = dataType.match(/^(.+) (REFERENCES.*)$/);\n            attrStr.push(this.quoteIdentifier(attr) + ' ' + match[1].replace(/PRIMARY KEY/, ''));\n            foreignKeys[attr] = match[2];\n          } else {\n            attrStr.push(this.quoteIdentifier(attr) + ' ' + dataType.replace(/PRIMARY KEY/, ''));\n          }\n        } else if (_.includes(dataType, 'REFERENCES')) {\n          // MSSQL doesn't support inline REFERENCES declarations: move to the end\n          match = dataType.match(/^(.+) (REFERENCES.*)$/);\n          attrStr.push(this.quoteIdentifier(attr) + ' ' + match[1]);\n          foreignKeys[attr] = match[2];\n        } else {\n          attrStr.push(this.quoteIdentifier(attr) + ' ' + dataType);\n        }\n      }\n    }\n\n    const values = {\n      table: this.quoteTable(tableName),\n      attributes: attrStr.join(', ')\n    },\n          pkString = primaryKeys.map(pk => {\n      return this.quoteIdentifier(pk);\n    }).join(', ');\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, (columns, indexName) => {\n        if (columns.customIndex) {\n          if (!_.isString(indexName)) {\n            indexName = 'uniq_' + tableName + '_' + columns.fields.join('_');\n          }\n\n          values.attributes += `, CONSTRAINT ${this.quoteIdentifier(indexName)} UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`;\n        }\n      });\n    }\n\n    if (pkString.length > 0) {\n      values.attributes += `, PRIMARY KEY (${pkString})`;\n    }\n\n    for (const fkey in foreignKeys) {\n      if (foreignKeys.hasOwnProperty(fkey)) {\n        values.attributes += ', FOREIGN KEY (' + this.quoteIdentifier(fkey) + ') ' + foreignKeys[fkey];\n      }\n    }\n\n    return _.template(query, this._templateSettings)(values).trim() + ';';\n  },\n\n  describeTableQuery(tableName, schema) {\n    let sql = ['SELECT', \"c.COLUMN_NAME AS 'Name',\", \"c.DATA_TYPE AS 'Type',\", \"c.CHARACTER_MAXIMUM_LENGTH AS 'Length',\", \"c.IS_NULLABLE as 'IsNull',\", \"COLUMN_DEFAULT AS 'Default',\", \"pk.CONSTRAINT_TYPE AS 'Constraint',\", \"COLUMNPROPERTY(OBJECT_ID(c.TABLE_SCHEMA+'.'+c.TABLE_NAME), c.COLUMN_NAME, 'IsIdentity') as 'IsIdentity'\", 'FROM', 'INFORMATION_SCHEMA.TABLES t', 'INNER JOIN', 'INFORMATION_SCHEMA.COLUMNS c ON t.TABLE_NAME = c.TABLE_NAME AND t.TABLE_SCHEMA = c.TABLE_SCHEMA', 'LEFT JOIN (SELECT tc.table_schema, tc.table_name, ', 'cu.column_name, tc.constraint_type ', 'FROM information_schema.TABLE_CONSTRAINTS tc ', 'JOIN information_schema.KEY_COLUMN_USAGE  cu ', 'ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name ', 'and tc.constraint_name=cu.constraint_name ', 'and tc.constraint_type=\\'PRIMARY KEY\\') pk ', 'ON pk.table_schema=c.table_schema ', 'AND pk.table_name=c.table_name ', 'AND pk.column_name=c.column_name ', 'WHERE t.TABLE_NAME =', wrapSingleQuote(tableName)].join(' ');\n\n    if (schema) {\n      sql += 'AND t.TABLE_SCHEMA =' + wrapSingleQuote(schema);\n    }\n\n    return sql;\n  },\n\n  renameTableQuery(before, after) {\n    const query = 'EXEC sp_rename <%= before %>, <%= after %>;';\n    return _.template(query, this._templateSettings)({\n      before: this.quoteTable(before),\n      after: this.quoteTable(after)\n    });\n  },\n\n  showTablesQuery() {\n    return 'SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES;';\n  },\n\n  dropTableQuery(tableName) {\n    const query = \"IF OBJECT_ID('<%= table %>', 'U') IS NOT NULL DROP TABLE <%= table %>\";\n    const values = {\n      table: this.quoteTable(tableName)\n    };\n    return _.template(query, this._templateSettings)(values).trim() + ';';\n  },\n\n  addColumnQuery(table, key, dataType) {\n    // FIXME: attributeToSQL SHOULD be using attributes in addColumnQuery\n    //        but instead we need to pass the key along as the field here\n    dataType.field = key;\n\n    const query = 'ALTER TABLE <%= table %> ADD <%= attribute %>;',\n          attribute = _.template('<%= key %> <%= definition %>', this._templateSettings)({\n      key: this.quoteIdentifier(key),\n      definition: this.attributeToSQL(dataType, {\n        context: 'addColumn'\n      })\n    });\n\n    return _.template(query, this._templateSettings)({\n      table: this.quoteTable(table),\n      attribute\n    });\n  },\n\n  removeColumnQuery(tableName, attributeName) {\n    const query = 'ALTER TABLE <%= tableName %> DROP COLUMN <%= attributeName %>;';\n    return _.template(query, this._templateSettings)({\n      tableName: this.quoteTable(tableName),\n      attributeName: this.quoteIdentifier(attributeName)\n    });\n  },\n\n  changeColumnQuery(tableName, attributes) {\n    const query = 'ALTER TABLE <%= tableName %> <%= query %>;';\n    const attrString = [],\n          constraintString = [];\n\n    for (const attributeName in attributes) {\n      const definition = attributes[attributeName];\n\n      if (definition.match(/REFERENCES/)) {\n        constraintString.push(_.template('<%= fkName %> FOREIGN KEY (<%= attrName %>) <%= definition %>', this._templateSettings)({\n          fkName: this.quoteIdentifier(attributeName + '_foreign_idx'),\n          attrName: this.quoteIdentifier(attributeName),\n          definition: definition.replace(/.+?(?=REFERENCES)/, '')\n        }));\n      } else {\n        attrString.push(_.template('<%= attrName %> <%= definition %>', this._templateSettings)({\n          attrName: this.quoteIdentifier(attributeName),\n          definition\n        }));\n      }\n    }\n\n    let finalQuery = '';\n\n    if (attrString.length) {\n      finalQuery += 'ALTER COLUMN ' + attrString.join(', ');\n      finalQuery += constraintString.length ? ' ' : '';\n    }\n\n    if (constraintString.length) {\n      finalQuery += 'ADD CONSTRAINT ' + constraintString.join(', ');\n    }\n\n    return _.template(query, this._templateSettings)({\n      tableName: this.quoteTable(tableName),\n      query: finalQuery\n    });\n  },\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const query = \"EXEC sp_rename '<%= tableName %>.<%= before %>', '<%= after %>', 'COLUMN';\",\n          newName = Object.keys(attributes)[0];\n    return _.template(query, this._templateSettings)({\n      tableName: this.quoteTable(tableName),\n      before: attrBefore,\n      after: newName\n    });\n  },\n\n  bulkInsertQuery(tableName, attrValueHashes, options, attributes) {\n    options = options || {};\n    attributes = attributes || {};\n    const query = 'INSERT INTO <%= table %> (<%= attributes %>)<%= output %> VALUES <%= tuples %>;',\n          emptyQuery = 'INSERT INTO <%= table %><%= output %> DEFAULT VALUES',\n          tuples = [],\n          allAttributes = [],\n          allQueries = [];\n    let needIdentityInsertWrapper = false,\n        outputFragment;\n\n    if (options.returning) {\n      outputFragment = ' OUTPUT INSERTED.*';\n    }\n\n    _.forEach(attrValueHashes, attrValueHash => {\n      // special case for empty objects with primary keys\n      const fields = Object.keys(attrValueHash);\n      const firstAttr = attributes[fields[0]];\n\n      if (fields.length === 1 && firstAttr && firstAttr.autoIncrement && attrValueHash[fields[0]] === null) {\n        allQueries.push(emptyQuery);\n        return;\n      } // normal case\n\n\n      _.forOwn(attrValueHash, (value, key) => {\n        if (value !== null && attributes[key] && attributes[key].autoIncrement) {\n          needIdentityInsertWrapper = true;\n        }\n\n        if (allAttributes.indexOf(key) === -1) {\n          if (value === null && attributes[key] && attributes[key].autoIncrement) return;\n          allAttributes.push(key);\n        }\n      });\n    });\n\n    if (allAttributes.length > 0) {\n      _.forEach(attrValueHashes, attrValueHash => {\n        tuples.push('(' + allAttributes.map(key => this.escape(attrValueHash[key])).join(',') + ')');\n      });\n\n      allQueries.push(query);\n    }\n\n    const commands = [];\n    let offset = 0;\n    const batch = Math.floor(250 / (allAttributes.length + 1)) + 1;\n\n    while (offset < Math.max(tuples.length, 1)) {\n      const replacements = {\n        table: this.quoteTable(tableName),\n        attributes: allAttributes.map(attr => this.quoteIdentifier(attr)).join(','),\n        tuples: tuples.slice(offset, Math.min(tuples.length, offset + batch)),\n        output: outputFragment\n      };\n\n      let generatedQuery = _.template(allQueries.join(';'), this._templateSettings)(replacements);\n\n      if (needIdentityInsertWrapper) {\n        generatedQuery = ['SET IDENTITY_INSERT', this.quoteTable(tableName), 'ON;', generatedQuery, 'SET IDENTITY_INSERT', this.quoteTable(tableName), 'OFF;'].join(' ');\n      }\n\n      commands.push(generatedQuery);\n      offset += batch;\n    }\n\n    return commands.join(';');\n  },\n\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    let sql = super.updateQuery(tableName, attrValueHash, where, options, attributes);\n\n    if (options.limit) {\n      const updateArgs = `UPDATE TOP(${this.escape(options.limit)})`;\n      sql = sql.replace('UPDATE', updateArgs);\n    }\n\n    return sql;\n  },\n\n  upsertQuery(tableName, insertValues, updateValues, where, model) {\n    const targetTableAlias = this.quoteTable(`${tableName}_target`);\n    const sourceTableAlias = this.quoteTable(`${tableName}_source`);\n    const primaryKeysAttrs = [];\n    const identityAttrs = [];\n    const uniqueAttrs = [];\n    const tableNameQuoted = this.quoteTable(tableName);\n    let needIdentityInsertWrapper = false; //Obtain primaryKeys, uniquekeys and identity attrs from rawAttributes as model is not passed\n\n    for (const key in model.rawAttributes) {\n      if (model.rawAttributes[key].primaryKey) {\n        primaryKeysAttrs.push(model.rawAttributes[key].field || key);\n      }\n\n      if (model.rawAttributes[key].unique) {\n        uniqueAttrs.push(model.rawAttributes[key].field || key);\n      }\n\n      if (model.rawAttributes[key].autoIncrement) {\n        identityAttrs.push(model.rawAttributes[key].field || key);\n      }\n    } //Add unique indexes defined by indexes option to uniqueAttrs\n\n\n    for (const index of model.options.indexes) {\n      if (index.unique && index.fields) {\n        for (const field of index.fields) {\n          const fieldName = typeof field === 'string' ? field : field.name || field.attribute;\n\n          if (uniqueAttrs.indexOf(fieldName) === -1 && model.rawAttributes[fieldName]) {\n            uniqueAttrs.push(fieldName);\n          }\n        }\n      }\n    }\n\n    const updateKeys = Object.keys(updateValues);\n    const insertKeys = Object.keys(insertValues);\n    const insertKeysQuoted = insertKeys.map(key => this.quoteIdentifier(key)).join(', ');\n    const insertValuesEscaped = insertKeys.map(key => this.escape(insertValues[key])).join(', ');\n    const sourceTableQuery = `VALUES(${insertValuesEscaped})`; //Virtual Table\n\n    let joinCondition; //IDENTITY_INSERT Condition\n\n    identityAttrs.forEach(key => {\n      if (updateValues[key] && updateValues[key] !== null) {\n        needIdentityInsertWrapper = true;\n        /*\n         * IDENTITY_INSERT Column Cannot be updated, only inserted\n         * http://stackoverflow.com/a/30176254/2254360\n         */\n      }\n    }); //Filter NULL Clauses\n\n    const clauses = where[Op.or].filter(clause => {\n      let valid = true;\n      /*\n       * Exclude NULL Composite PK/UK. Partial Composite clauses should also be excluded as it doesn't guarantee a single row\n       */\n\n      for (const key in clause) {\n        if (!clause[key]) {\n          valid = false;\n          break;\n        }\n      }\n\n      return valid;\n    });\n    /*\n     * Generate ON condition using PK(s).\n     * If not, generate using UK(s). Else throw error\n     */\n\n    const getJoinSnippet = array => {\n      return array.map(key => {\n        key = this.quoteIdentifier(key);\n        return `${targetTableAlias}.${key} = ${sourceTableAlias}.${key}`;\n      });\n    };\n\n    if (clauses.length === 0) {\n      throw new Error('Primary Key or Unique key should be passed to upsert query');\n    } else {\n      // Search for primary key attribute in clauses -- Model can have two separate unique keys\n      for (const key in clauses) {\n        const keys = Object.keys(clauses[key]);\n\n        if (primaryKeysAttrs.indexOf(keys[0]) !== -1) {\n          joinCondition = getJoinSnippet(primaryKeysAttrs).join(' AND ');\n          break;\n        }\n      }\n\n      if (!joinCondition) {\n        joinCondition = getJoinSnippet(uniqueAttrs).join(' AND ');\n      }\n    } // Remove the IDENTITY_INSERT Column from update\n\n\n    const updateSnippet = updateKeys.filter(key => {\n      if (identityAttrs.indexOf(key) === -1) {\n        return true;\n      } else {\n        return false;\n      }\n    }).map(key => {\n      const value = this.escape(updateValues[key]);\n      key = this.quoteIdentifier(key);\n      return `${targetTableAlias}.${key} = ${value}`;\n    }).join(', ');\n    const insertSnippet = `(${insertKeysQuoted}) VALUES(${insertValuesEscaped})`;\n    let query = `MERGE INTO ${tableNameQuoted} WITH(HOLDLOCK) AS ${targetTableAlias} USING (${sourceTableQuery}) AS ${sourceTableAlias}(${insertKeysQuoted}) ON ${joinCondition}`;\n    query += ` WHEN MATCHED THEN UPDATE SET ${updateSnippet} WHEN NOT MATCHED THEN INSERT ${insertSnippet} OUTPUT $action, INSERTED.*;`;\n\n    if (needIdentityInsertWrapper) {\n      query = `SET IDENTITY_INSERT ${tableNameQuoted} ON; ${query} SET IDENTITY_INSERT ${tableNameQuoted} OFF;`;\n    }\n\n    return query;\n  },\n\n  deleteQuery(tableName, where, options) {\n    options = options || {};\n    const table = this.quoteTable(tableName);\n\n    if (options.truncate === true) {\n      // Truncate does not allow LIMIT and WHERE\n      return 'TRUNCATE TABLE ' + table;\n    }\n\n    where = this.getWhereConditions(where);\n    let limit = '';\n    const query = 'DELETE<%= limit %> FROM <%= table %><%= where %>; ' + 'SELECT @@ROWCOUNT AS AFFECTEDROWS;';\n\n    if (_.isUndefined(options.limit)) {\n      options.limit = 1;\n    }\n\n    if (options.limit) {\n      limit = ' TOP(' + this.escape(options.limit) + ')';\n    }\n\n    const replacements = {\n      limit,\n      table,\n      where\n    };\n\n    if (replacements.where) {\n      replacements.where = ' WHERE ' + replacements.where;\n    }\n\n    return _.template(query, this._templateSettings)(replacements);\n  },\n\n  showIndexesQuery(tableName) {\n    const sql = \"EXEC sys.sp_helpindex @objname = N'<%= tableName %>';\";\n    return _.template(sql, this._templateSettings)({\n      tableName: this.quoteTable(tableName)\n    });\n  },\n\n  showConstraintsQuery(tableName) {\n    return `EXEC sp_helpconstraint @objname = ${this.escape(this.quoteTable(tableName))};`;\n  },\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    const sql = 'DROP INDEX <%= indexName %> ON <%= tableName %>';\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(tableName + '_' + indexNameOrAttributes.join('_'));\n    }\n\n    const values = {\n      tableName: this.quoteIdentifiers(tableName),\n      indexName: this.quoteIdentifiers(indexName)\n    };\n    return _.template(sql, this._templateSettings)(values);\n  },\n\n  attributeToSQL(attribute) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    } // handle self referential constraints\n\n\n    if (attribute.references) {\n      if (attribute.Model && attribute.Model.tableName === attribute.references.model) {\n        this.sequelize.log('MSSQL does not support self referencial constraints, ' + 'we will remove it but we recommend restructuring your query');\n        attribute.onDelete = '';\n        attribute.onUpdate = '';\n      }\n    }\n\n    let template;\n\n    if (attribute.type instanceof DataTypes.ENUM) {\n      if (attribute.type.values && !attribute.values) attribute.values = attribute.type.values; // enums are a special case\n\n      template = attribute.type.toSql();\n      template += ' CHECK (' + this.quoteIdentifier(attribute.field) + ' IN(' + _.map(attribute.values, value => {\n        return this.escape(value);\n      }).join(', ') + '))';\n      return template;\n    } else {\n      template = attribute.type.toString();\n    }\n\n    if (attribute.allowNull === false) {\n      template += ' NOT NULL';\n    } else if (!attribute.primaryKey && !Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ' NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      template += ' IDENTITY(1,1)';\n    } // Blobs/texts cannot have a defaultValue\n\n\n    if (attribute.type !== 'TEXT' && attribute.type._binary !== true && Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ' DEFAULT ' + this.escape(attribute.defaultValue);\n    }\n\n    if (attribute.unique === true) {\n      template += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      template += ' PRIMARY KEY';\n    }\n\n    if (attribute.references) {\n      template += ' REFERENCES ' + this.quoteTable(attribute.references.model);\n\n      if (attribute.references.key) {\n        template += ' (' + this.quoteIdentifier(attribute.references.key) + ')';\n      } else {\n        template += ' (' + this.quoteIdentifier('id') + ')';\n      }\n\n      if (attribute.onDelete) {\n        template += ' ON DELETE ' + attribute.onDelete.toUpperCase();\n      }\n\n      if (attribute.onUpdate) {\n        template += ' ON UPDATE ' + attribute.onUpdate.toUpperCase();\n      }\n    }\n\n    return template;\n  },\n\n  attributesToSQL(attributes, options) {\n    const result = {},\n          existingConstraints = [];\n    let key, attribute;\n\n    for (key in attributes) {\n      attribute = attributes[key];\n\n      if (attribute.references) {\n        if (existingConstraints.indexOf(attribute.references.model.toString()) !== -1) {\n          // no cascading constraints to a table more than once\n          attribute.onDelete = '';\n          attribute.onUpdate = '';\n        } else {\n          existingConstraints.push(attribute.references.model.toString()); // NOTE: this really just disables cascading updates for all\n          //       definitions. Can be made more robust to support the\n          //       few cases where MSSQL actually supports them\n\n          attribute.onUpdate = '';\n        }\n      }\n\n      if (key && !attribute.field) attribute.field = key;\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n\n    return result;\n  },\n\n  createTrigger() {\n    throwMethodUndefined('createTrigger');\n  },\n\n  dropTrigger() {\n    throwMethodUndefined('dropTrigger');\n  },\n\n  renameTrigger() {\n    throwMethodUndefined('renameTrigger');\n  },\n\n  createFunction() {\n    throwMethodUndefined('createFunction');\n  },\n\n  dropFunction() {\n    throwMethodUndefined('dropFunction');\n  },\n\n  renameFunction() {\n    throwMethodUndefined('renameFunction');\n  },\n\n  quoteIdentifier(identifier) {\n    if (identifier === '*') return identifier;\n    return '[' + identifier.replace(/[\\[\\]']+/g, '') + ']';\n  },\n\n  /**\n   * Generate common SQL prefix for ForeignKeysQuery.\n   * @returns {String}\n   */\n  _getForeignKeysQueryPrefix(catalogName) {\n    return 'SELECT ' + 'constraint_name = OBJ.NAME, ' + 'constraintName = OBJ.NAME, ' + (catalogName ? `constraintCatalog = '${catalogName}', ` : '') + 'constraintSchema = SCHEMA_NAME(OBJ.SCHEMA_ID), ' + 'tableName = TB.NAME, ' + 'tableSchema = SCHEMA_NAME(TB.SCHEMA_ID), ' + (catalogName ? `tableCatalog = '${catalogName}', ` : '') + 'columnName = COL.NAME, ' + 'referencedTableSchema = SCHEMA_NAME(RTB.SCHEMA_ID), ' + (catalogName ? `referencedCatalog = '${catalogName}', ` : '') + 'referencedTableName = RTB.NAME, ' + 'referencedColumnName = RCOL.NAME ' + 'FROM SYS.FOREIGN_KEY_COLUMNS FKC ' + 'INNER JOIN SYS.OBJECTS OBJ ON OBJ.OBJECT_ID = FKC.CONSTRAINT_OBJECT_ID ' + 'INNER JOIN SYS.TABLES TB ON TB.OBJECT_ID = FKC.PARENT_OBJECT_ID ' + 'INNER JOIN SYS.COLUMNS COL ON COL.COLUMN_ID = PARENT_COLUMN_ID AND COL.OBJECT_ID = TB.OBJECT_ID ' + 'INNER JOIN SYS.TABLES RTB ON RTB.OBJECT_ID = FKC.REFERENCED_OBJECT_ID ' + 'INNER JOIN SYS.COLUMNS RCOL ON RCOL.COLUMN_ID = REFERENCED_COLUMN_ID AND RCOL.OBJECT_ID = RTB.OBJECT_ID';\n  },\n\n  /**\n   * Generates an SQL query that returns all foreign keys details of a table.\n   * @param {Stirng|Object} table\n   * @param {String} catalogName database name\n   * @returns {String}\n   */\n  getForeignKeysQuery(table, catalogName) {\n    const tableName = table.tableName || table;\n    let sql = this._getForeignKeysQueryPrefix(catalogName) + ' WHERE TB.NAME =' + wrapSingleQuote(tableName);\n\n    if (table.schema) {\n      sql += ' AND SCHEMA_NAME(TB.SCHEMA_ID) =' + wrapSingleQuote(table.schema);\n    }\n\n    return sql;\n  },\n\n  getForeignKeyQuery(table, attributeName) {\n    const tableName = table.tableName || table;\n    let sql = this._getForeignKeysQueryPrefix() + ' WHERE TB.NAME =' + wrapSingleQuote(tableName) + ' AND COL.NAME =' + wrapSingleQuote(attributeName);\n\n    if (table.schema) {\n      sql += ' AND SCHEMA_NAME(TB.SCHEMA_ID) =' + wrapSingleQuote(table.schema);\n    }\n\n    return sql;\n  },\n\n  getPrimaryKeyConstraintQuery(table, attributeName) {\n    const tableName = wrapSingleQuote(table.tableName || table);\n    return ['SELECT K.TABLE_NAME AS tableName,', 'K.COLUMN_NAME AS columnName,', 'K.CONSTRAINT_NAME AS constraintName', 'FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS C', 'JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS K', 'ON C.TABLE_NAME = K.TABLE_NAME', 'AND C.CONSTRAINT_CATALOG = K.CONSTRAINT_CATALOG', 'AND C.CONSTRAINT_SCHEMA = K.CONSTRAINT_SCHEMA', 'AND C.CONSTRAINT_NAME = K.CONSTRAINT_NAME', 'WHERE C.CONSTRAINT_TYPE = \\'PRIMARY KEY\\'', `AND K.COLUMN_NAME = ${wrapSingleQuote(attributeName)}`, `AND K.TABLE_NAME = ${tableName};`].join(' ');\n  },\n\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return _.template('ALTER TABLE <%= table %> DROP <%= key %>', this._templateSettings)({\n      table: this.quoteTable(tableName),\n      key: this.quoteIdentifier(foreignKey)\n    });\n  },\n\n  getDefaultConstraintQuery(tableName, attributeName) {\n    const sql = 'SELECT name FROM SYS.DEFAULT_CONSTRAINTS ' + \"WHERE PARENT_OBJECT_ID = OBJECT_ID('<%= table %>', 'U') \" + \"AND PARENT_COLUMN_ID = (SELECT column_id FROM sys.columns WHERE NAME = ('<%= column %>') \" + \"AND object_id = OBJECT_ID('<%= table %>', 'U'));\";\n    return _.template(sql, this._templateSettings)({\n      table: this.quoteTable(tableName),\n      column: attributeName\n    });\n  },\n\n  dropConstraintQuery(tableName, constraintName) {\n    const sql = 'ALTER TABLE <%= table %> DROP CONSTRAINT <%= constraint %>;';\n    return _.template(sql, this._templateSettings)({\n      table: this.quoteTable(tableName),\n      constraint: this.quoteIdentifier(constraintName)\n    });\n  },\n\n  setAutocommitQuery() {\n    return '';\n  },\n\n  setIsolationLevelQuery() {},\n\n  generateTransactionId() {\n    return randomBytes(10).toString('hex');\n  },\n\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return 'SAVE TRANSACTION ' + this.quoteIdentifier(transaction.name) + ';';\n    }\n\n    return 'BEGIN TRANSACTION;';\n  },\n\n  commitTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return;\n    }\n\n    return 'COMMIT TRANSACTION;';\n  },\n\n  rollbackTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return 'ROLLBACK TRANSACTION ' + this.quoteIdentifier(transaction.name) + ';';\n    }\n\n    return 'ROLLBACK TRANSACTION;';\n  },\n\n  selectFromTableFragment(options, model, attributes, tables, mainTableAs, where) {\n    let topFragment = '';\n    let mainFragment = 'SELECT ' + attributes.join(', ') + ' FROM ' + tables; // Handle SQL Server 2008 with TOP instead of LIMIT\n\n    if (semver.valid(this.sequelize.options.databaseVersion) && semver.lt(this.sequelize.options.databaseVersion, '11.0.0')) {\n      if (options.limit) {\n        topFragment = 'TOP ' + options.limit + ' ';\n      }\n\n      if (options.offset) {\n        const offset = options.offset || 0,\n              isSubQuery = options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation;\n        let orders = {\n          mainQueryOrder: []\n        };\n\n        if (options.order) {\n          orders = this.getQueryOrders(options, model, isSubQuery);\n        }\n\n        if (!orders.mainQueryOrder.length) {\n          orders.mainQueryOrder.push(this.quoteIdentifier(model.primaryKeyField));\n        }\n\n        const tmpTable = mainTableAs ? mainTableAs : 'OffsetTable';\n        const whereFragment = where ? ' WHERE ' + where : '';\n        /*\n         * For earlier versions of SQL server, we need to nest several queries\n         * in order to emulate the OFFSET behavior.\n         *\n         * 1. The outermost query selects all items from the inner query block.\n         *    This is due to a limitation in SQL server with the use of computed\n         *    columns (e.g. SELECT ROW_NUMBER()...AS x) in WHERE clauses.\n         * 2. The next query handles the LIMIT and OFFSET behavior by getting\n         *    the TOP N rows of the query where the row number is > OFFSET\n         * 3. The innermost query is the actual set we want information from\n         */\n\n        const fragment = 'SELECT TOP 100 PERCENT ' + attributes.join(', ') + ' FROM ' + '(SELECT ' + topFragment + '*' + ' FROM (SELECT ROW_NUMBER() OVER (ORDER BY ' + orders.mainQueryOrder.join(', ') + ') as row_num, * ' + ' FROM ' + tables + ' AS ' + tmpTable + whereFragment + ')' + ' AS ' + tmpTable + ' WHERE row_num > ' + offset + ')' + ' AS ' + tmpTable;\n        return fragment;\n      } else {\n        mainFragment = 'SELECT ' + topFragment + attributes.join(', ') + ' FROM ' + tables;\n      }\n    }\n\n    if (mainTableAs) {\n      mainFragment += ' AS ' + mainTableAs;\n    }\n\n    if (options.tableHint && TableHints[options.tableHint]) {\n      mainFragment += ` WITH (${TableHints[options.tableHint]})`;\n    }\n\n    return mainFragment;\n  },\n\n  addLimitAndOffset(options, model) {\n    // Skip handling of limit and offset as postfixes for older SQL Server versions\n    if (semver.valid(this.sequelize.options.databaseVersion) && semver.lt(this.sequelize.options.databaseVersion, '11.0.0')) {\n      return '';\n    }\n\n    let fragment = '';\n    const offset = options.offset || 0,\n          isSubQuery = options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation;\n    let orders = {};\n\n    if (options.order) {\n      orders = this.getQueryOrders(options, model, isSubQuery);\n    }\n\n    if (options.limit || options.offset) {\n      if (!options.order || options.include && !orders.subQueryOrder.length) {\n        fragment += options.order && !isSubQuery ? ', ' : ' ORDER BY ';\n        fragment += this.quoteTable(options.tableAs || model.name) + '.' + this.quoteIdentifier(model.primaryKeyField);\n      }\n\n      if (options.offset || options.limit) {\n        fragment += ' OFFSET ' + this.escape(offset) + ' ROWS';\n      }\n\n      if (options.limit) {\n        fragment += ' FETCH NEXT ' + this.escape(options.limit) + ' ROWS ONLY';\n      }\n    }\n\n    return fragment;\n  },\n\n  booleanValue(value) {\n    return value ? 1 : 0;\n  }\n\n}; // private methods\n\nfunction wrapSingleQuote(identifier) {\n  return Utils.addTicks(Utils.removeTicks(identifier, \"'\"), \"'\");\n}\n\nmodule.exports = QueryGenerator;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/sequelize/lib/dialects/mssql/query-generator.js"],"names":["_","require","Utils","DataTypes","TableHints","AbstractQueryGenerator","randomBytes","semver","Op","throwMethodUndefined","methodName","Error","QueryGenerator","__proto__","options","dialect","createSchema","schema","wrapSingleQuote","quoteIdentifier","join","dropSchema","quotedSchema","showSchemasQuery","versionQuery","createTableQuery","tableName","attributes","query","primaryKeys","foreignKeys","attrStr","attr","hasOwnProperty","dataType","match","includes","push","replace","values","table","quoteTable","pkString","map","pk","uniqueKeys","each","columns","indexName","customIndex","isString","fields","field","length","fkey","template","_templateSettings","trim","describeTableQuery","sql","renameTableQuery","before","after","showTablesQuery","dropTableQuery","addColumnQuery","key","attribute","definition","attributeToSQL","context","removeColumnQuery","attributeName","changeColumnQuery","attrString","constraintString","fkName","attrName","finalQuery","renameColumnQuery","attrBefore","newName","Object","keys","bulkInsertQuery","attrValueHashes","emptyQuery","tuples","allAttributes","allQueries","needIdentityInsertWrapper","outputFragment","returning","forEach","attrValueHash","firstAttr","autoIncrement","forOwn","value","indexOf","escape","commands","offset","batch","Math","floor","max","replacements","slice","min","output","generatedQuery","updateQuery","where","limit","updateArgs","upsertQuery","insertValues","updateValues","model","targetTableAlias","sourceTableAlias","primaryKeysAttrs","identityAttrs","uniqueAttrs","tableNameQuoted","rawAttributes","primaryKey","unique","index","indexes","fieldName","name","updateKeys","insertKeys","insertKeysQuoted","insertValuesEscaped","sourceTableQuery","joinCondition","clauses","or","filter","clause","valid","getJoinSnippet","array","updateSnippet","insertSnippet","deleteQuery","truncate","getWhereConditions","isUndefined","showIndexesQuery","showConstraintsQuery","removeIndexQuery","indexNameOrAttributes","underscore","quoteIdentifiers","isPlainObject","type","references","Model","sequelize","log","onDelete","onUpdate","ENUM","toSql","toString","allowNull","defaultValueSchemable","defaultValue","_binary","toUpperCase","attributesToSQL","result","existingConstraints","createTrigger","dropTrigger","renameTrigger","createFunction","dropFunction","renameFunction","identifier","_getForeignKeysQueryPrefix","catalogName","getForeignKeysQuery","getForeignKeyQuery","getPrimaryKeyConstraintQuery","dropForeignKeyQuery","foreignKey","getDefaultConstraintQuery","column","dropConstraintQuery","constraintName","constraint","setAutocommitQuery","setIsolationLevelQuery","generateTransactionId","startTransactionQuery","transaction","parent","commitTransactionQuery","rollbackTransactionQuery","selectFromTableFragment","tables","mainTableAs","topFragment","mainFragment","databaseVersion","lt","isSubQuery","hasIncludeWhere","hasIncludeRequired","hasMultiAssociation","orders","mainQueryOrder","order","getQueryOrders","primaryKeyField","tmpTable","whereFragment","fragment","tableHint","addLimitAndOffset","include","subQueryOrder","tableAs","booleanValue","addTicks","removeTicks","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst Utils = require('../../utils');\nconst DataTypes = require('../../data-types');\nconst TableHints = require('../../table-hints');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\nconst randomBytes = require('crypto').randomBytes;\nconst semver = require('semver');\n\nconst Op = require('../../operators');\n\n/* istanbul ignore next */\nconst throwMethodUndefined = function(methodName) {\n  throw new Error('The method \"' + methodName + '\" is not defined! Please add it to your sql dialect.');\n};\n\nconst QueryGenerator = {\n  __proto__: AbstractQueryGenerator,\n  options: {},\n  dialect: 'mssql',\n\n  createSchema(schema) {\n    return [\n      'IF NOT EXISTS (SELECT schema_name',\n      'FROM information_schema.schemata',\n      'WHERE schema_name =', wrapSingleQuote(schema), ')',\n      'BEGIN',\n      \"EXEC sp_executesql N'CREATE SCHEMA\",\n      this.quoteIdentifier(schema),\n      \";'\",\n      'END;'\n    ].join(' ');\n  },\n\n  dropSchema(schema) {\n    // Mimics Postgres CASCADE, will drop objects belonging to the schema\n    const quotedSchema = wrapSingleQuote(schema);\n    return [\n      'IF EXISTS (SELECT schema_name',\n      'FROM information_schema.schemata',\n      'WHERE schema_name =', quotedSchema, ')',\n      'BEGIN',\n      'DECLARE @id INT, @ms_sql NVARCHAR(2000);',\n      'DECLARE @cascade TABLE (',\n      'id INT NOT NULL IDENTITY PRIMARY KEY,',\n      'ms_sql NVARCHAR(2000) NOT NULL );',\n      'INSERT INTO @cascade ( ms_sql )',\n      \"SELECT CASE WHEN o.type IN ('F','PK')\",\n      \"THEN N'ALTER TABLE ['+ s.name + N'].[' + p.name + N'] DROP CONSTRAINT [' + o.name + N']'\",\n      \"ELSE N'DROP TABLE ['+ s.name + N'].[' + o.name + N']' END\",\n      'FROM sys.objects o',\n      'JOIN sys.schemas s on o.schema_id = s.schema_id',\n      'LEFT OUTER JOIN sys.objects p on o.parent_object_id = p.object_id',\n      \"WHERE o.type IN ('F', 'PK', 'U') AND s.name = \", quotedSchema,\n      'ORDER BY o.type ASC;',\n      'SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;',\n      'WHILE @id IS NOT NULL',\n      'BEGIN',\n      'BEGIN TRY EXEC sp_executesql @ms_sql; END TRY',\n      'BEGIN CATCH BREAK; THROW; END CATCH;',\n      'DELETE FROM @cascade WHERE id = @id;',\n      'SELECT @id = NULL, @ms_sql = NULL;',\n      'SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;',\n      'END',\n      \"EXEC sp_executesql N'DROP SCHEMA\", this.quoteIdentifier(schema), \";'\",\n      'END;'\n    ].join(' ');\n  },\n\n  showSchemasQuery() {\n    return [\n      'SELECT \"name\" as \"schema_name\" FROM sys.schemas as s',\n      'WHERE \"s\".\"name\" NOT IN (',\n      \"'INFORMATION_SCHEMA', 'dbo', 'guest', 'sys', 'archive'\",\n      ')', 'AND', '\"s\".\"name\" NOT LIKE', \"'db_%'\"\n    ].join(' ');\n  },\n\n  versionQuery() {\n    // Uses string manipulation to convert the MS Maj.Min.Patch.Build to semver Maj.Min.Patch\n    return [\n      'DECLARE @ms_ver NVARCHAR(20);',\n      \"SET @ms_ver = REVERSE(CONVERT(NVARCHAR(20), SERVERPROPERTY('ProductVersion')));\",\n      \"SELECT REVERSE(SUBSTRING(@ms_ver, CHARINDEX('.', @ms_ver)+1, 20)) AS 'version'\"\n    ].join(' ');\n  },\n\n  createTableQuery(tableName, attributes, options) {\n    const query = \"IF OBJECT_ID('<%= table %>', 'U') IS NULL CREATE TABLE <%= table %> (<%= attributes %>)\",\n      primaryKeys = [],\n      foreignKeys = {},\n      attrStr = [];\n\n    for (const attr in attributes) {\n      if (attributes.hasOwnProperty(attr)) {\n        const dataType = attributes[attr];\n        let match;\n\n        if (_.includes(dataType, 'PRIMARY KEY')) {\n          primaryKeys.push(attr);\n\n          if (_.includes(dataType, 'REFERENCES')) {\n            // MSSQL doesn't support inline REFERENCES declarations: move to the end\n            match = dataType.match(/^(.+) (REFERENCES.*)$/);\n            attrStr.push(this.quoteIdentifier(attr) + ' ' + match[1].replace(/PRIMARY KEY/, ''));\n            foreignKeys[attr] = match[2];\n          } else {\n            attrStr.push(this.quoteIdentifier(attr) + ' ' + dataType.replace(/PRIMARY KEY/, ''));\n          }\n        } else if (_.includes(dataType, 'REFERENCES')) {\n          // MSSQL doesn't support inline REFERENCES declarations: move to the end\n          match = dataType.match(/^(.+) (REFERENCES.*)$/);\n          attrStr.push(this.quoteIdentifier(attr) + ' ' + match[1]);\n          foreignKeys[attr] = match[2];\n        } else {\n          attrStr.push(this.quoteIdentifier(attr) + ' ' + dataType);\n        }\n      }\n    }\n\n    const values = {\n        table: this.quoteTable(tableName),\n        attributes: attrStr.join(', ')\n      },\n      pkString = primaryKeys.map(pk => { return this.quoteIdentifier(pk); }).join(', ');\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, (columns, indexName) => {\n        if (columns.customIndex) {\n          if (!_.isString(indexName)) {\n            indexName = 'uniq_' + tableName + '_' + columns.fields.join('_');\n          }\n          values.attributes += `, CONSTRAINT ${this.quoteIdentifier(indexName)} UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`;\n        }\n      });\n    }\n\n    if (pkString.length > 0) {\n      values.attributes += `, PRIMARY KEY (${pkString})`;\n    }\n\n    for (const fkey in foreignKeys) {\n      if (foreignKeys.hasOwnProperty(fkey)) {\n        values.attributes += ', FOREIGN KEY (' + this.quoteIdentifier(fkey) + ') ' + foreignKeys[fkey];\n      }\n    }\n\n    return _.template(query, this._templateSettings)(values).trim() + ';';\n  },\n\n  describeTableQuery(tableName, schema) {\n    let sql = [\n      'SELECT',\n      \"c.COLUMN_NAME AS 'Name',\",\n      \"c.DATA_TYPE AS 'Type',\",\n      \"c.CHARACTER_MAXIMUM_LENGTH AS 'Length',\",\n      \"c.IS_NULLABLE as 'IsNull',\",\n      \"COLUMN_DEFAULT AS 'Default',\",\n      \"pk.CONSTRAINT_TYPE AS 'Constraint',\",\n      \"COLUMNPROPERTY(OBJECT_ID(c.TABLE_SCHEMA+'.'+c.TABLE_NAME), c.COLUMN_NAME, 'IsIdentity') as 'IsIdentity'\",\n      'FROM',\n      'INFORMATION_SCHEMA.TABLES t',\n      'INNER JOIN',\n      'INFORMATION_SCHEMA.COLUMNS c ON t.TABLE_NAME = c.TABLE_NAME AND t.TABLE_SCHEMA = c.TABLE_SCHEMA',\n      'LEFT JOIN (SELECT tc.table_schema, tc.table_name, ',\n      'cu.column_name, tc.constraint_type ',\n      'FROM information_schema.TABLE_CONSTRAINTS tc ',\n      'JOIN information_schema.KEY_COLUMN_USAGE  cu ',\n      'ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name ',\n      'and tc.constraint_name=cu.constraint_name ',\n      'and tc.constraint_type=\\'PRIMARY KEY\\') pk ',\n      'ON pk.table_schema=c.table_schema ',\n      'AND pk.table_name=c.table_name ',\n      'AND pk.column_name=c.column_name ',\n      'WHERE t.TABLE_NAME =', wrapSingleQuote(tableName)\n    ].join(' ');\n\n    if (schema) {\n      sql += 'AND t.TABLE_SCHEMA =' + wrapSingleQuote(schema);\n    }\n\n    return sql;\n  },\n\n  renameTableQuery(before, after) {\n    const query = 'EXEC sp_rename <%= before %>, <%= after %>;';\n    return _.template(query, this._templateSettings)({\n      before: this.quoteTable(before),\n      after: this.quoteTable(after)\n    });\n  },\n\n  showTablesQuery() {\n    return 'SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES;';\n  },\n\n  dropTableQuery(tableName) {\n    const query = \"IF OBJECT_ID('<%= table %>', 'U') IS NOT NULL DROP TABLE <%= table %>\";\n    const values = {\n      table: this.quoteTable(tableName)\n    };\n\n    return _.template(query, this._templateSettings)(values).trim() + ';';\n  },\n\n  addColumnQuery(table, key, dataType) {\n    // FIXME: attributeToSQL SHOULD be using attributes in addColumnQuery\n    //        but instead we need to pass the key along as the field here\n    dataType.field = key;\n\n    const query = 'ALTER TABLE <%= table %> ADD <%= attribute %>;',\n      attribute = _.template('<%= key %> <%= definition %>', this._templateSettings)({\n        key: this.quoteIdentifier(key),\n        definition: this.attributeToSQL(dataType, {\n          context: 'addColumn'\n        })\n      });\n\n    return _.template(query, this._templateSettings)({\n      table: this.quoteTable(table),\n      attribute\n    });\n  },\n\n  removeColumnQuery(tableName, attributeName) {\n    const query = 'ALTER TABLE <%= tableName %> DROP COLUMN <%= attributeName %>;';\n    return _.template(query, this._templateSettings)({\n      tableName: this.quoteTable(tableName),\n      attributeName: this.quoteIdentifier(attributeName)\n    });\n  },\n\n  changeColumnQuery(tableName, attributes) {\n    const query = 'ALTER TABLE <%= tableName %> <%= query %>;';\n    const attrString = [],\n      constraintString = [];\n\n    for (const attributeName in attributes) {\n      const definition = attributes[attributeName];\n      if (definition.match(/REFERENCES/)) {\n        constraintString.push(_.template('<%= fkName %> FOREIGN KEY (<%= attrName %>) <%= definition %>', this._templateSettings)({\n          fkName: this.quoteIdentifier(attributeName + '_foreign_idx'),\n          attrName: this.quoteIdentifier(attributeName),\n          definition: definition.replace(/.+?(?=REFERENCES)/, '')\n        }));\n      } else {\n        attrString.push(_.template('<%= attrName %> <%= definition %>', this._templateSettings)({\n          attrName: this.quoteIdentifier(attributeName),\n          definition\n        }));\n      }\n    }\n\n    let finalQuery = '';\n    if (attrString.length) {\n      finalQuery += 'ALTER COLUMN ' + attrString.join(', ');\n      finalQuery += constraintString.length ? ' ' : '';\n    }\n    if (constraintString.length) {\n      finalQuery += 'ADD CONSTRAINT ' + constraintString.join(', ');\n    }\n\n    return _.template(query, this._templateSettings)({\n      tableName: this.quoteTable(tableName),\n      query: finalQuery\n    });\n  },\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const query = \"EXEC sp_rename '<%= tableName %>.<%= before %>', '<%= after %>', 'COLUMN';\",\n      newName = Object.keys(attributes)[0];\n\n    return _.template(query, this._templateSettings)({\n      tableName: this.quoteTable(tableName),\n      before: attrBefore,\n      after: newName\n    });\n  },\n\n  bulkInsertQuery(tableName, attrValueHashes, options, attributes) {\n    options = options || {};\n    attributes = attributes || {};\n    const query = 'INSERT INTO <%= table %> (<%= attributes %>)<%= output %> VALUES <%= tuples %>;',\n      emptyQuery = 'INSERT INTO <%= table %><%= output %> DEFAULT VALUES',\n      tuples = [],\n      allAttributes = [],\n      allQueries = [];\n\n    let needIdentityInsertWrapper = false,\n      outputFragment;\n\n    if (options.returning) {\n      outputFragment = ' OUTPUT INSERTED.*';\n    }\n\n    _.forEach(attrValueHashes, attrValueHash => {\n      // special case for empty objects with primary keys\n      const fields = Object.keys(attrValueHash);\n      const firstAttr = attributes[fields[0]];\n      if (fields.length === 1 && firstAttr && firstAttr.autoIncrement && attrValueHash[fields[0]] === null) {\n        allQueries.push(emptyQuery);\n        return;\n      }\n\n      // normal case\n      _.forOwn(attrValueHash, (value, key) => {\n        if (value !== null && attributes[key] && attributes[key].autoIncrement) {\n          needIdentityInsertWrapper = true;\n        }\n\n        if (allAttributes.indexOf(key) === -1) {\n          if (value === null && attributes[key] && attributes[key].autoIncrement)\n            return;\n\n          allAttributes.push(key);\n        }\n      });\n    });\n\n    if (allAttributes.length > 0) {\n      _.forEach(attrValueHashes, attrValueHash => {\n        tuples.push('(' +\n          allAttributes.map(key =>\n            this.escape(attrValueHash[key])).join(',') +\n        ')');\n      });\n\n      allQueries.push(query);\n    }\n    const commands = [];\n    let offset = 0;\n    const batch = Math.floor(250 / (allAttributes.length + 1)) + 1;\n    while (offset < Math.max(tuples.length, 1)) {\n      const replacements = {\n        table: this.quoteTable(tableName),\n        attributes: allAttributes.map(attr =>\n          this.quoteIdentifier(attr)).join(','),\n        tuples: tuples.slice(offset, Math.min(tuples.length, offset + batch)),\n        output: outputFragment\n      };\n\n      let generatedQuery = _.template(allQueries.join(';'), this._templateSettings)(replacements);\n      if (needIdentityInsertWrapper) {\n        generatedQuery = [\n          'SET IDENTITY_INSERT', this.quoteTable(tableName), 'ON;',\n          generatedQuery,\n          'SET IDENTITY_INSERT', this.quoteTable(tableName), 'OFF;'\n        ].join(' ');\n      }\n      commands.push(generatedQuery);\n      offset += batch;\n    }\n    return commands.join(';');\n  },\n\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    let sql = super.updateQuery(tableName, attrValueHash, where, options, attributes);\n    if (options.limit) {\n      const updateArgs = `UPDATE TOP(${this.escape(options.limit)})`;\n      sql = sql.replace('UPDATE', updateArgs);\n    }\n    return sql;\n  },\n\n  upsertQuery(tableName, insertValues, updateValues, where, model) {\n    const targetTableAlias = this.quoteTable(`${tableName}_target`);\n    const sourceTableAlias = this.quoteTable(`${tableName}_source`);\n    const primaryKeysAttrs = [];\n    const identityAttrs = [];\n    const uniqueAttrs = [];\n    const tableNameQuoted = this.quoteTable(tableName);\n    let needIdentityInsertWrapper = false;\n\n    //Obtain primaryKeys, uniquekeys and identity attrs from rawAttributes as model is not passed\n    for (const key in model.rawAttributes) {\n      if (model.rawAttributes[key].primaryKey) {\n        primaryKeysAttrs.push(model.rawAttributes[key].field || key);\n      }\n      if (model.rawAttributes[key].unique) {\n        uniqueAttrs.push(model.rawAttributes[key].field || key);\n      }\n      if (model.rawAttributes[key].autoIncrement) {\n        identityAttrs.push(model.rawAttributes[key].field || key);\n      }\n    }\n\n    //Add unique indexes defined by indexes option to uniqueAttrs\n    for (const index of model.options.indexes) {\n      if (index.unique && index.fields) {\n        for (const field of index.fields) {\n          const fieldName = typeof field === 'string' ? field : field.name || field.attribute;\n          if (uniqueAttrs.indexOf(fieldName) === -1 && model.rawAttributes[fieldName]) {\n            uniqueAttrs.push(fieldName);\n          }\n        }\n      }\n    }\n\n    const updateKeys = Object.keys(updateValues);\n    const insertKeys = Object.keys(insertValues);\n    const insertKeysQuoted = insertKeys.map(key => this.quoteIdentifier(key)).join(', ');\n    const insertValuesEscaped = insertKeys.map(key => this.escape(insertValues[key])).join(', ');\n    const sourceTableQuery = `VALUES(${insertValuesEscaped})`; //Virtual Table\n    let joinCondition;\n\n    //IDENTITY_INSERT Condition\n    identityAttrs.forEach(key => {\n      if (updateValues[key] && updateValues[key] !== null) {\n        needIdentityInsertWrapper = true;\n        /*\n         * IDENTITY_INSERT Column Cannot be updated, only inserted\n         * http://stackoverflow.com/a/30176254/2254360\n         */\n      }\n    });\n\n    //Filter NULL Clauses\n    const clauses = where[Op.or].filter(clause => {\n      let valid = true;\n      /*\n       * Exclude NULL Composite PK/UK. Partial Composite clauses should also be excluded as it doesn't guarantee a single row\n       */\n      for (const key in clause) {\n        if (!clause[key]) {\n          valid = false;\n          break;\n        }\n      }\n      return valid;\n    });\n\n    /*\n     * Generate ON condition using PK(s).\n     * If not, generate using UK(s). Else throw error\n     */\n    const getJoinSnippet = array => {\n      return array.map(key => {\n        key = this.quoteIdentifier(key);\n        return `${targetTableAlias}.${key} = ${sourceTableAlias}.${key}`;\n      });\n    };\n\n    if (clauses.length === 0) {\n      throw new Error('Primary Key or Unique key should be passed to upsert query');\n    } else {\n      // Search for primary key attribute in clauses -- Model can have two separate unique keys\n      for (const key in clauses) {\n        const keys = Object.keys(clauses[key]);\n        if (primaryKeysAttrs.indexOf(keys[0]) !== -1) {\n          joinCondition = getJoinSnippet(primaryKeysAttrs).join(' AND ');\n          break;\n        }\n      }\n      if (!joinCondition) {\n        joinCondition = getJoinSnippet(uniqueAttrs).join(' AND ');\n      }\n    }\n\n    // Remove the IDENTITY_INSERT Column from update\n    const updateSnippet = updateKeys.filter(key => {\n      if (identityAttrs.indexOf(key) === -1) {\n        return true;\n      } else {\n        return false;\n      }\n    })\n      .map(key => {\n        const value = this.escape(updateValues[key]);\n        key = this.quoteIdentifier(key);\n        return `${targetTableAlias}.${key} = ${value}`;\n      }).join(', ');\n\n    const insertSnippet = `(${insertKeysQuoted}) VALUES(${insertValuesEscaped})`;\n    let query = `MERGE INTO ${tableNameQuoted} WITH(HOLDLOCK) AS ${targetTableAlias} USING (${sourceTableQuery}) AS ${sourceTableAlias}(${insertKeysQuoted}) ON ${joinCondition}`;\n    query += ` WHEN MATCHED THEN UPDATE SET ${updateSnippet} WHEN NOT MATCHED THEN INSERT ${insertSnippet} OUTPUT $action, INSERTED.*;`;\n    if (needIdentityInsertWrapper) {\n      query = `SET IDENTITY_INSERT ${tableNameQuoted} ON; ${query} SET IDENTITY_INSERT ${tableNameQuoted} OFF;`;\n    }\n    return query;\n  },\n\n  deleteQuery(tableName, where, options) {\n    options = options || {};\n\n    const table = this.quoteTable(tableName);\n    if (options.truncate === true) {\n      // Truncate does not allow LIMIT and WHERE\n      return 'TRUNCATE TABLE ' + table;\n    }\n\n    where = this.getWhereConditions(where);\n    let limit = '';\n    const query = 'DELETE<%= limit %> FROM <%= table %><%= where %>; ' +\n                'SELECT @@ROWCOUNT AS AFFECTEDROWS;';\n\n    if (_.isUndefined(options.limit)) {\n      options.limit = 1;\n    }\n\n    if (options.limit) {\n      limit = ' TOP(' + this.escape(options.limit) + ')';\n    }\n\n    const replacements = {\n      limit,\n      table,\n      where\n    };\n\n    if (replacements.where) {\n      replacements.where = ' WHERE ' + replacements.where;\n    }\n\n    return _.template(query, this._templateSettings)(replacements);\n  },\n\n  showIndexesQuery(tableName) {\n    const sql = \"EXEC sys.sp_helpindex @objname = N'<%= tableName %>';\";\n    return _.template(sql, this._templateSettings)({\n      tableName: this.quoteTable(tableName)\n    });\n  },\n\n  showConstraintsQuery(tableName) {\n    return `EXEC sp_helpconstraint @objname = ${this.escape(this.quoteTable(tableName))};`;\n  },\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    const sql = 'DROP INDEX <%= indexName %> ON <%= tableName %>';\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(tableName + '_' + indexNameOrAttributes.join('_'));\n    }\n\n    const values = {\n      tableName: this.quoteIdentifiers(tableName),\n      indexName: this.quoteIdentifiers(indexName)\n    };\n\n    return _.template(sql, this._templateSettings)(values);\n  },\n\n  attributeToSQL(attribute) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    // handle self referential constraints\n    if (attribute.references) {\n\n      if (attribute.Model && attribute.Model.tableName === attribute.references.model) {\n        this.sequelize.log('MSSQL does not support self referencial constraints, '\n          + 'we will remove it but we recommend restructuring your query');\n        attribute.onDelete = '';\n        attribute.onUpdate = '';\n      }\n    }\n\n    let template;\n\n    if (attribute.type instanceof DataTypes.ENUM) {\n      if (attribute.type.values && !attribute.values) attribute.values = attribute.type.values;\n\n      // enums are a special case\n      template = attribute.type.toSql();\n      template += ' CHECK (' + this.quoteIdentifier(attribute.field) + ' IN(' + _.map(attribute.values, value => {\n        return this.escape(value);\n      }).join(', ') + '))';\n      return template;\n    } else {\n      template = attribute.type.toString();\n    }\n\n    if (attribute.allowNull === false) {\n      template += ' NOT NULL';\n    } else if (!attribute.primaryKey && !Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ' NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      template += ' IDENTITY(1,1)';\n    }\n\n    // Blobs/texts cannot have a defaultValue\n    if (attribute.type !== 'TEXT' && attribute.type._binary !== true &&\n        Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ' DEFAULT ' + this.escape(attribute.defaultValue);\n    }\n\n    if (attribute.unique === true) {\n      template += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      template += ' PRIMARY KEY';\n    }\n\n    if (attribute.references) {\n      template += ' REFERENCES ' + this.quoteTable(attribute.references.model);\n\n      if (attribute.references.key) {\n        template += ' (' + this.quoteIdentifier(attribute.references.key) + ')';\n      } else {\n        template += ' (' + this.quoteIdentifier('id') + ')';\n      }\n\n      if (attribute.onDelete) {\n        template += ' ON DELETE ' + attribute.onDelete.toUpperCase();\n      }\n\n      if (attribute.onUpdate) {\n        template += ' ON UPDATE ' + attribute.onUpdate.toUpperCase();\n      }\n    }\n\n    return template;\n  },\n\n  attributesToSQL(attributes, options) {\n    const result = {},\n      existingConstraints = [];\n    let key,\n      attribute;\n\n    for (key in attributes) {\n      attribute = attributes[key];\n\n      if (attribute.references) {\n\n        if (existingConstraints.indexOf(attribute.references.model.toString()) !== -1) {\n          // no cascading constraints to a table more than once\n          attribute.onDelete = '';\n          attribute.onUpdate = '';\n        } else {\n          existingConstraints.push(attribute.references.model.toString());\n\n          // NOTE: this really just disables cascading updates for all\n          //       definitions. Can be made more robust to support the\n          //       few cases where MSSQL actually supports them\n          attribute.onUpdate = '';\n        }\n\n      }\n\n      if (key && !attribute.field) attribute.field = key;\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n\n    return result;\n  },\n\n  createTrigger() {\n    throwMethodUndefined('createTrigger');\n  },\n\n  dropTrigger() {\n    throwMethodUndefined('dropTrigger');\n  },\n\n  renameTrigger() {\n    throwMethodUndefined('renameTrigger');\n  },\n\n  createFunction() {\n    throwMethodUndefined('createFunction');\n  },\n\n  dropFunction() {\n    throwMethodUndefined('dropFunction');\n  },\n\n  renameFunction() {\n    throwMethodUndefined('renameFunction');\n  },\n\n  quoteIdentifier(identifier) {\n    if (identifier === '*') return identifier;\n    return '[' + identifier.replace(/[\\[\\]']+/g, '') + ']';\n  },\n\n  /**\n   * Generate common SQL prefix for ForeignKeysQuery.\n   * @returns {String}\n   */\n  _getForeignKeysQueryPrefix(catalogName) {\n    return 'SELECT ' +\n        'constraint_name = OBJ.NAME, ' +\n        'constraintName = OBJ.NAME, ' +\n        (catalogName ? `constraintCatalog = '${catalogName}', ` : '') +\n        'constraintSchema = SCHEMA_NAME(OBJ.SCHEMA_ID), ' +\n        'tableName = TB.NAME, ' +\n        'tableSchema = SCHEMA_NAME(TB.SCHEMA_ID), ' +\n        (catalogName ? `tableCatalog = '${catalogName}', ` : '') +\n        'columnName = COL.NAME, ' +\n        'referencedTableSchema = SCHEMA_NAME(RTB.SCHEMA_ID), ' +\n        (catalogName ? `referencedCatalog = '${catalogName}', ` : '') +\n        'referencedTableName = RTB.NAME, ' +\n        'referencedColumnName = RCOL.NAME ' +\n      'FROM SYS.FOREIGN_KEY_COLUMNS FKC ' +\n        'INNER JOIN SYS.OBJECTS OBJ ON OBJ.OBJECT_ID = FKC.CONSTRAINT_OBJECT_ID ' +\n        'INNER JOIN SYS.TABLES TB ON TB.OBJECT_ID = FKC.PARENT_OBJECT_ID ' +\n        'INNER JOIN SYS.COLUMNS COL ON COL.COLUMN_ID = PARENT_COLUMN_ID AND COL.OBJECT_ID = TB.OBJECT_ID ' +\n        'INNER JOIN SYS.TABLES RTB ON RTB.OBJECT_ID = FKC.REFERENCED_OBJECT_ID ' +\n        'INNER JOIN SYS.COLUMNS RCOL ON RCOL.COLUMN_ID = REFERENCED_COLUMN_ID AND RCOL.OBJECT_ID = RTB.OBJECT_ID';\n  },\n\n  /**\n   * Generates an SQL query that returns all foreign keys details of a table.\n   * @param {Stirng|Object} table\n   * @param {String} catalogName database name\n   * @returns {String}\n   */\n  getForeignKeysQuery(table, catalogName) {\n    const tableName = table.tableName || table;\n    let sql = this._getForeignKeysQueryPrefix(catalogName) +\n      ' WHERE TB.NAME =' + wrapSingleQuote(tableName);\n\n    if (table.schema) {\n      sql += ' AND SCHEMA_NAME(TB.SCHEMA_ID) =' + wrapSingleQuote(table.schema);\n    }\n    return sql;\n  },\n\n  getForeignKeyQuery(table, attributeName) {\n    const tableName = table.tableName || table;\n    let sql = this._getForeignKeysQueryPrefix() +\n      ' WHERE TB.NAME =' + wrapSingleQuote(tableName) +\n      ' AND COL.NAME =' + wrapSingleQuote(attributeName);\n\n    if (table.schema) {\n      sql += ' AND SCHEMA_NAME(TB.SCHEMA_ID) =' + wrapSingleQuote(table.schema);\n    }\n\n    return sql;\n  },\n\n  getPrimaryKeyConstraintQuery(table, attributeName) {\n    const tableName = wrapSingleQuote(table.tableName || table);\n    return [\n      'SELECT K.TABLE_NAME AS tableName,',\n      'K.COLUMN_NAME AS columnName,',\n      'K.CONSTRAINT_NAME AS constraintName',\n      'FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS C',\n      'JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS K',\n      'ON C.TABLE_NAME = K.TABLE_NAME',\n      'AND C.CONSTRAINT_CATALOG = K.CONSTRAINT_CATALOG',\n      'AND C.CONSTRAINT_SCHEMA = K.CONSTRAINT_SCHEMA',\n      'AND C.CONSTRAINT_NAME = K.CONSTRAINT_NAME',\n      'WHERE C.CONSTRAINT_TYPE = \\'PRIMARY KEY\\'',\n      `AND K.COLUMN_NAME = ${wrapSingleQuote(attributeName)}`,\n      `AND K.TABLE_NAME = ${tableName};`\n    ].join(' ');\n  },\n\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return _.template('ALTER TABLE <%= table %> DROP <%= key %>', this._templateSettings)({\n      table: this.quoteTable(tableName),\n      key: this.quoteIdentifier(foreignKey)\n    });\n  },\n\n  getDefaultConstraintQuery(tableName, attributeName) {\n    const sql = 'SELECT name FROM SYS.DEFAULT_CONSTRAINTS ' +\n      \"WHERE PARENT_OBJECT_ID = OBJECT_ID('<%= table %>', 'U') \" +\n      \"AND PARENT_COLUMN_ID = (SELECT column_id FROM sys.columns WHERE NAME = ('<%= column %>') \" +\n      \"AND object_id = OBJECT_ID('<%= table %>', 'U'));\";\n    return _.template(sql, this._templateSettings)({\n      table: this.quoteTable(tableName),\n      column: attributeName\n    });\n  },\n\n  dropConstraintQuery(tableName, constraintName) {\n    const sql = 'ALTER TABLE <%= table %> DROP CONSTRAINT <%= constraint %>;';\n    return _.template(sql, this._templateSettings)({\n      table: this.quoteTable(tableName),\n      constraint: this.quoteIdentifier(constraintName)\n    });\n  },\n\n  setAutocommitQuery() {\n    return '';\n  },\n\n  setIsolationLevelQuery() {\n\n  },\n\n  generateTransactionId() {\n    return randomBytes(10).toString('hex');\n  },\n\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return 'SAVE TRANSACTION ' + this.quoteIdentifier(transaction.name) + ';';\n    }\n\n    return 'BEGIN TRANSACTION;';\n  },\n\n  commitTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return;\n    }\n\n    return 'COMMIT TRANSACTION;';\n  },\n\n  rollbackTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return 'ROLLBACK TRANSACTION ' + this.quoteIdentifier(transaction.name) + ';';\n    }\n\n    return 'ROLLBACK TRANSACTION;';\n  },\n\n  selectFromTableFragment(options, model, attributes, tables, mainTableAs, where) {\n    let topFragment = '';\n    let mainFragment = 'SELECT ' + attributes.join(', ') + ' FROM ' + tables;\n\n    // Handle SQL Server 2008 with TOP instead of LIMIT\n    if (semver.valid(this.sequelize.options.databaseVersion) && semver.lt(this.sequelize.options.databaseVersion, '11.0.0')) {\n      if (options.limit) {\n        topFragment = 'TOP ' + options.limit + ' ';\n      }\n      if (options.offset) {\n        const offset = options.offset || 0,\n          isSubQuery = options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation;\n        let orders = { mainQueryOrder: [] };\n        if (options.order) {\n          orders = this.getQueryOrders(options, model, isSubQuery);\n        }\n\n        if (!orders.mainQueryOrder.length) {\n          orders.mainQueryOrder.push(this.quoteIdentifier(model.primaryKeyField));\n        }\n\n        const tmpTable = mainTableAs ? mainTableAs : 'OffsetTable';\n        const whereFragment = where ? ' WHERE ' + where : '';\n\n        /*\n         * For earlier versions of SQL server, we need to nest several queries\n         * in order to emulate the OFFSET behavior.\n         *\n         * 1. The outermost query selects all items from the inner query block.\n         *    This is due to a limitation in SQL server with the use of computed\n         *    columns (e.g. SELECT ROW_NUMBER()...AS x) in WHERE clauses.\n         * 2. The next query handles the LIMIT and OFFSET behavior by getting\n         *    the TOP N rows of the query where the row number is > OFFSET\n         * 3. The innermost query is the actual set we want information from\n         */\n        const fragment = 'SELECT TOP 100 PERCENT ' + attributes.join(', ') + ' FROM ' +\n                        '(SELECT ' + topFragment + '*' +\n                          ' FROM (SELECT ROW_NUMBER() OVER (ORDER BY ' + orders.mainQueryOrder.join(', ') + ') as row_num, * ' +\n                            ' FROM ' + tables + ' AS ' + tmpTable + whereFragment + ')' +\n                          ' AS ' + tmpTable + ' WHERE row_num > ' + offset + ')' +\n                        ' AS ' + tmpTable;\n        return fragment;\n      } else {\n        mainFragment = 'SELECT ' + topFragment + attributes.join(', ') + ' FROM ' + tables;\n      }\n    }\n\n    if (mainTableAs) {\n      mainFragment += ' AS ' + mainTableAs;\n    }\n\n    if (options.tableHint && TableHints[options.tableHint]) {\n      mainFragment += ` WITH (${TableHints[options.tableHint]})`;\n    }\n\n    return mainFragment;\n  },\n\n  addLimitAndOffset(options, model) {\n    // Skip handling of limit and offset as postfixes for older SQL Server versions\n    if (semver.valid(this.sequelize.options.databaseVersion) && semver.lt(this.sequelize.options.databaseVersion, '11.0.0')) {\n      return '';\n    }\n\n    let fragment = '';\n    const offset = options.offset || 0,\n      isSubQuery = options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation;\n\n    let orders = {};\n    if (options.order) {\n      orders = this.getQueryOrders(options, model, isSubQuery);\n    }\n\n    if (options.limit || options.offset) {\n      if (!options.order || options.include && !orders.subQueryOrder.length) {\n        fragment += options.order && !isSubQuery ? ', ' : ' ORDER BY ';\n        fragment += this.quoteTable(options.tableAs || model.name) + '.' + this.quoteIdentifier(model.primaryKeyField);\n      }\n\n      if (options.offset || options.limit) {\n        fragment += ' OFFSET ' + this.escape(offset) + ' ROWS';\n      }\n\n      if (options.limit) {\n        fragment += ' FETCH NEXT ' + this.escape(options.limit) + ' ROWS ONLY';\n      }\n    }\n\n    return fragment;\n  },\n\n  booleanValue(value) {\n    return value ? 1 : 0;\n  }\n};\n\n// private methods\nfunction wrapSingleQuote(identifier) {\n  return Utils.addTicks(Utils.removeTicks(identifier, \"'\"), \"'\");\n}\n\nmodule.exports = QueryGenerator;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _metadataParser = require(\"./metadata-parser\");\n\nvar _dataType = require(\"./data-type\");\n\nvar _iconvLite = _interopRequireDefault(require(\"iconv-lite\"));\n\nvar _sprintfJs = require(\"sprintf-js\");\n\nvar _guidParser = require(\"./guid-parser\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst NULL = (1 << 16) - 1;\nconst MAX = (1 << 16) - 1;\nconst THREE_AND_A_THIRD = 3 + 1 / 3;\nconst MONEY_DIVISOR = 10000;\nconst PLP_NULL = Buffer.from([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);\nconst UNKNOWN_PLP_LEN = Buffer.from([0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);\nconst DEFAULT_ENCODING = 'utf8';\n\nfunction readTinyInt(parser, callback) {\n  parser.readUInt8(callback);\n}\n\nfunction readSmallInt(parser, callback) {\n  parser.readInt16LE(callback);\n}\n\nfunction readInt(parser, callback) {\n  parser.readInt32LE(callback);\n}\n\nfunction readBigInt(parser, callback) {\n  parser.readBigInt64LE(value => {\n    callback(value.toString());\n  });\n}\n\nfunction readReal(parser, callback) {\n  parser.readFloatLE(callback);\n}\n\nfunction readFloat(parser, callback) {\n  parser.readDoubleLE(callback);\n}\n\nfunction readSmallMoney(parser, callback) {\n  parser.readInt32LE(value => {\n    callback(value / MONEY_DIVISOR);\n  });\n}\n\nfunction readMoney(parser, callback) {\n  parser.readInt32LE(high => {\n    parser.readUInt32LE(low => {\n      callback((low + 0x100000000 * high) / MONEY_DIVISOR);\n    });\n  });\n}\n\nfunction readBit(parser, callback) {\n  parser.readUInt8(value => {\n    callback(!!value);\n  });\n}\n\nfunction valueParse(parser, metadata, options, callback) {\n  const type = metadata.type;\n\n  switch (type.name) {\n    case 'Null':\n      return callback(null);\n\n    case 'TinyInt':\n      return readTinyInt(parser, callback);\n\n    case 'SmallInt':\n      return readSmallInt(parser, callback);\n\n    case 'Int':\n      return readInt(parser, callback);\n\n    case 'BigInt':\n      return readBigInt(parser, callback);\n\n    case 'IntN':\n      return parser.readUInt8(dataLength => {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n\n          case 1:\n            return readTinyInt(parser, callback);\n\n          case 2:\n            return readSmallInt(parser, callback);\n\n          case 4:\n            return readInt(parser, callback);\n\n          case 8:\n            return readBigInt(parser, callback);\n\n          default:\n            return parser.emit('error', new Error('Unsupported dataLength ' + dataLength + ' for IntN'));\n        }\n      });\n\n    case 'Real':\n      return readReal(parser, callback);\n\n    case 'Float':\n      return readFloat(parser, callback);\n\n    case 'FloatN':\n      return parser.readUInt8(dataLength => {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n\n          case 4:\n            return readReal(parser, callback);\n\n          case 8:\n            return readFloat(parser, callback);\n\n          default:\n            return parser.emit('error', new Error('Unsupported dataLength ' + dataLength + ' for FloatN'));\n        }\n      });\n\n    case 'SmallMoney':\n      return readSmallMoney(parser, callback);\n\n    case 'Money':\n      return readMoney(parser, callback);\n\n    case 'MoneyN':\n      return parser.readUInt8(dataLength => {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n\n          case 4:\n            return readSmallMoney(parser, callback);\n\n          case 8:\n            return readMoney(parser, callback);\n\n          default:\n            return parser.emit('error', new Error('Unsupported dataLength ' + dataLength + ' for MoneyN'));\n        }\n      });\n\n    case 'Bit':\n      return readBit(parser, callback);\n\n    case 'BitN':\n      return parser.readUInt8(dataLength => {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n\n          case 1:\n            return readBit(parser, callback);\n\n          default:\n            return parser.emit('error', new Error('Unsupported dataLength ' + dataLength + ' for BitN'));\n        }\n      });\n\n    case 'VarChar':\n    case 'Char':\n      const codepage = metadata.collation.codepage;\n\n      if (metadata.dataLength === MAX) {\n        return readMaxChars(parser, codepage, callback);\n      } else {\n        return parser.readUInt16LE(dataLength => {\n          if (dataLength === NULL) {\n            return callback(null);\n          }\n\n          readChars(parser, dataLength, codepage, callback);\n        });\n      }\n\n    case 'NVarChar':\n    case 'NChar':\n      if (metadata.dataLength === MAX) {\n        return readMaxNChars(parser, callback);\n      } else {\n        return parser.readUInt16LE(dataLength => {\n          if (dataLength === NULL) {\n            return callback(null);\n          }\n\n          readNChars(parser, dataLength, callback);\n        });\n      }\n\n    case 'VarBinary':\n    case 'Binary':\n      if (metadata.dataLength === MAX) {\n        return readMaxBinary(parser, callback);\n      } else {\n        return parser.readUInt16LE(dataLength => {\n          if (dataLength === NULL) {\n            return callback(null);\n          }\n\n          readBinary(parser, dataLength, callback);\n        });\n      }\n\n    case 'Text':\n      return parser.readUInt8(textPointerLength => {\n        if (textPointerLength === 0) {\n          return callback(null);\n        }\n\n        parser.readBuffer(textPointerLength, _textPointer => {\n          parser.readBuffer(8, _timestamp => {\n            parser.readUInt32LE(dataLength => {\n              readChars(parser, dataLength, metadata.collation.codepage, callback);\n            });\n          });\n        });\n      });\n\n    case 'NText':\n      return parser.readUInt8(textPointerLength => {\n        if (textPointerLength === 0) {\n          return callback(null);\n        }\n\n        parser.readBuffer(textPointerLength, _textPointer => {\n          parser.readBuffer(8, _timestamp => {\n            parser.readUInt32LE(dataLength => {\n              readNChars(parser, dataLength, callback);\n            });\n          });\n        });\n      });\n\n    case 'Image':\n      return parser.readUInt8(textPointerLength => {\n        if (textPointerLength === 0) {\n          return callback(null);\n        }\n\n        parser.readBuffer(textPointerLength, _textPointer => {\n          parser.readBuffer(8, _timestamp => {\n            parser.readUInt32LE(dataLength => {\n              readBinary(parser, dataLength, callback);\n            });\n          });\n        });\n      });\n\n    case 'Xml':\n      return readMaxNChars(parser, callback);\n\n    case 'SmallDateTime':\n      return readSmallDateTime(parser, options.useUTC, callback);\n\n    case 'DateTime':\n      return readDateTime(parser, options.useUTC, callback);\n\n    case 'DateTimeN':\n      return parser.readUInt8(dataLength => {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n\n          case 4:\n            return readSmallDateTime(parser, options.useUTC, callback);\n\n          case 8:\n            return readDateTime(parser, options.useUTC, callback);\n\n          default:\n            return parser.emit('error', new Error('Unsupported dataLength ' + dataLength + ' for DateTimeN'));\n        }\n      });\n\n    case 'Time':\n      return parser.readUInt8(dataLength => {\n        if (dataLength === 0) {\n          return callback(null);\n        } else {\n          return readTime(parser, dataLength, metadata.scale, options.useUTC, callback);\n        }\n      });\n\n    case 'Date':\n      return parser.readUInt8(dataLength => {\n        if (dataLength === 0) {\n          return callback(null);\n        } else {\n          return readDate(parser, options.useUTC, callback);\n        }\n      });\n\n    case 'DateTime2':\n      return parser.readUInt8(dataLength => {\n        if (dataLength === 0) {\n          return callback(null);\n        } else {\n          return readDateTime2(parser, dataLength, metadata.scale, options.useUTC, callback);\n        }\n      });\n\n    case 'DateTimeOffset':\n      return parser.readUInt8(dataLength => {\n        if (dataLength === 0) {\n          return callback(null);\n        } else {\n          return readDateTimeOffset(parser, dataLength, metadata.scale, callback);\n        }\n      });\n\n    case 'NumericN':\n    case 'DecimalN':\n      return parser.readUInt8(dataLength => {\n        if (dataLength === 0) {\n          return callback(null);\n        } else {\n          return readNumeric(parser, dataLength, metadata.precision, metadata.scale, callback);\n        }\n      });\n\n    case 'UniqueIdentifier':\n      return parser.readUInt8(dataLength => {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n\n          case 0x10:\n            return readUniqueIdentifier(parser, options, callback);\n\n          default:\n            return parser.emit('error', new Error((0, _sprintfJs.sprintf)('Unsupported guid size %d', dataLength - 1)));\n        }\n      });\n\n    case 'UDT':\n      return readMaxBinary(parser, callback);\n\n    case 'Variant':\n      return parser.readUInt32LE(dataLength => {\n        if (dataLength === 0) {\n          return callback(null);\n        }\n\n        readVariant(parser, options, dataLength, callback);\n      });\n\n    default:\n      parser.emit('error', new Error((0, _sprintfJs.sprintf)('Unrecognised type %s', type.name)));\n  }\n}\n\nfunction readUniqueIdentifier(parser, options, callback) {\n  parser.readBuffer(0x10, data => {\n    callback(options.lowerCaseGuids ? (0, _guidParser.bufferToLowerCaseGuid)(data) : (0, _guidParser.bufferToUpperCaseGuid)(data));\n  });\n}\n\nfunction readNumeric(parser, dataLength, _precision, scale, callback) {\n  parser.readUInt8(sign => {\n    sign = sign === 1 ? 1 : -1;\n    let readValue;\n\n    if (dataLength === 5) {\n      readValue = parser.readUInt32LE;\n    } else if (dataLength === 9) {\n      readValue = parser.readUNumeric64LE;\n    } else if (dataLength === 13) {\n      readValue = parser.readUNumeric96LE;\n    } else if (dataLength === 17) {\n      readValue = parser.readUNumeric128LE;\n    } else {\n      return parser.emit('error', new Error((0, _sprintfJs.sprintf)('Unsupported numeric dataLength %d', dataLength)));\n    }\n\n    readValue.call(parser, value => {\n      callback(value * sign / Math.pow(10, scale));\n    });\n  });\n}\n\nfunction readVariant(parser, options, dataLength, callback) {\n  return parser.readUInt8(baseType => {\n    const type = _dataType.TYPE[baseType];\n    return parser.readUInt8(propBytes => {\n      dataLength = dataLength - propBytes - 2;\n\n      switch (type.name) {\n        case 'UniqueIdentifier':\n          return readUniqueIdentifier(parser, options, callback);\n\n        case 'Bit':\n          return readBit(parser, callback);\n\n        case 'TinyInt':\n          return readTinyInt(parser, callback);\n\n        case 'SmallInt':\n          return readSmallInt(parser, callback);\n\n        case 'Int':\n          return readInt(parser, callback);\n\n        case 'BigInt':\n          return readBigInt(parser, callback);\n\n        case 'SmallDateTime':\n          return readSmallDateTime(parser, options.useUTC, callback);\n\n        case 'DateTime':\n          return readDateTime(parser, options.useUTC, callback);\n\n        case 'Real':\n          return readReal(parser, callback);\n\n        case 'Float':\n          return readFloat(parser, callback);\n\n        case 'SmallMoney':\n          return readSmallMoney(parser, callback);\n\n        case 'Money':\n          return readMoney(parser, callback);\n\n        case 'Date':\n          return readDate(parser, options.useUTC, callback);\n\n        case 'Time':\n          return parser.readUInt8(scale => {\n            return readTime(parser, dataLength, scale, options.useUTC, callback);\n          });\n\n        case 'DateTime2':\n          return parser.readUInt8(scale => {\n            return readDateTime2(parser, dataLength, scale, options.useUTC, callback);\n          });\n\n        case 'DateTimeOffset':\n          return parser.readUInt8(scale => {\n            return readDateTimeOffset(parser, dataLength, scale, callback);\n          });\n\n        case 'VarBinary':\n        case 'Binary':\n          return parser.readUInt16LE(_maxLength => {\n            readBinary(parser, dataLength, callback);\n          });\n\n        case 'NumericN':\n        case 'DecimalN':\n          return parser.readUInt8(precision => {\n            parser.readUInt8(scale => {\n              readNumeric(parser, dataLength, precision, scale, callback);\n            });\n          });\n\n        case 'VarChar':\n        case 'Char':\n          return parser.readUInt16LE(_maxLength => {\n            (0, _metadataParser.readCollation)(parser, collation => {\n              readChars(parser, dataLength, collation.codepage, callback);\n            });\n          });\n\n        case 'NVarChar':\n        case 'NChar':\n          return parser.readUInt16LE(_maxLength => {\n            (0, _metadataParser.readCollation)(parser, _collation => {\n              readNChars(parser, dataLength, callback);\n            });\n          });\n\n        default:\n          throw new Error('Invalid type!');\n      }\n    });\n  });\n}\n\nfunction readBinary(parser, dataLength, callback) {\n  return parser.readBuffer(dataLength, callback);\n}\n\nfunction readChars(parser, dataLength, codepage, callback) {\n  if (codepage == null) {\n    codepage = DEFAULT_ENCODING;\n  }\n\n  return parser.readBuffer(dataLength, data => {\n    callback(_iconvLite.default.decode(data, codepage));\n  });\n}\n\nfunction readNChars(parser, dataLength, callback) {\n  parser.readBuffer(dataLength, data => {\n    callback(data.toString('ucs2'));\n  });\n}\n\nfunction readMaxBinary(parser, callback) {\n  return readMax(parser, callback);\n}\n\nfunction readMaxChars(parser, codepage, callback) {\n  if (codepage == null) {\n    codepage = DEFAULT_ENCODING;\n  }\n\n  readMax(parser, data => {\n    if (data) {\n      callback(_iconvLite.default.decode(data, codepage));\n    } else {\n      callback(null);\n    }\n  });\n}\n\nfunction readMaxNChars(parser, callback) {\n  readMax(parser, data => {\n    if (data) {\n      callback(data.toString('ucs2'));\n    } else {\n      callback(null);\n    }\n  });\n}\n\nfunction readMax(parser, callback) {\n  parser.readBuffer(8, type => {\n    if (type.equals(PLP_NULL)) {\n      return callback(null);\n    } else if (type.equals(UNKNOWN_PLP_LEN)) {\n      return readMaxUnknownLength(parser, callback);\n    } else {\n      const low = type.readUInt32LE(0);\n      const high = type.readUInt32LE(4);\n\n      if (high >= 2 << 53 - 32) {\n        console.warn('Read UInt64LE > 53 bits : high=' + high + ', low=' + low);\n      }\n\n      const expectedLength = low + 0x100000000 * high;\n      return readMaxKnownLength(parser, expectedLength, callback);\n    }\n  });\n}\n\nfunction readMaxKnownLength(parser, totalLength, callback) {\n  const data = Buffer.alloc(totalLength, 0);\n  let offset = 0;\n\n  function next(done) {\n    parser.readUInt32LE(chunkLength => {\n      if (!chunkLength) {\n        return done();\n      }\n\n      parser.readBuffer(chunkLength, chunk => {\n        chunk.copy(data, offset);\n        offset += chunkLength;\n        next(done);\n      });\n    });\n  }\n\n  next(() => {\n    if (offset !== totalLength) {\n      parser.emit('error', new Error('Partially Length-prefixed Bytes unmatched lengths : expected ' + totalLength + ', but got ' + offset + ' bytes'));\n    }\n\n    callback(data);\n  });\n}\n\nfunction readMaxUnknownLength(parser, callback) {\n  const chunks = [];\n  let length = 0;\n\n  function next(done) {\n    parser.readUInt32LE(chunkLength => {\n      if (!chunkLength) {\n        return done();\n      }\n\n      parser.readBuffer(chunkLength, chunk => {\n        chunks.push(chunk);\n        length += chunkLength;\n        next(done);\n      });\n    });\n  }\n\n  next(() => {\n    callback(Buffer.concat(chunks, length));\n  });\n}\n\nfunction readSmallDateTime(parser, useUTC, callback) {\n  parser.readUInt16LE(days => {\n    parser.readUInt16LE(minutes => {\n      let value;\n\n      if (useUTC) {\n        value = new Date(Date.UTC(1900, 0, 1 + days, 0, minutes));\n      } else {\n        value = new Date(1900, 0, 1 + days, 0, minutes);\n      }\n\n      callback(value);\n    });\n  });\n}\n\nfunction readDateTime(parser, useUTC, callback) {\n  parser.readInt32LE(days => {\n    parser.readUInt32LE(threeHundredthsOfSecond => {\n      const milliseconds = Math.round(threeHundredthsOfSecond * THREE_AND_A_THIRD);\n      let value;\n\n      if (useUTC) {\n        value = new Date(Date.UTC(1900, 0, 1 + days, 0, 0, 0, milliseconds));\n      } else {\n        value = new Date(1900, 0, 1 + days, 0, 0, 0, milliseconds);\n      }\n\n      callback(value);\n    });\n  });\n}\n\nfunction readTime(parser, dataLength, scale, useUTC, callback) {\n  let readValue;\n\n  switch (dataLength) {\n    case 3:\n      readValue = parser.readUInt24LE;\n      break;\n\n    case 4:\n      readValue = parser.readUInt32LE;\n      break;\n\n    case 5:\n      readValue = parser.readUInt40LE;\n  }\n\n  readValue.call(parser, value => {\n    if (scale < 7) {\n      for (let i = scale; i < 7; i++) {\n        value *= 10;\n      }\n    }\n\n    let date;\n\n    if (useUTC) {\n      date = new Date(Date.UTC(1970, 0, 1, 0, 0, 0, value / 10000));\n    } else {\n      date = new Date(1970, 0, 1, 0, 0, 0, value / 10000);\n    }\n\n    Object.defineProperty(date, 'nanosecondsDelta', {\n      enumerable: false,\n      value: value % 10000 / Math.pow(10, 7)\n    });\n    callback(date);\n  });\n}\n\nfunction readDate(parser, useUTC, callback) {\n  parser.readUInt24LE(days => {\n    if (useUTC) {\n      callback(new Date(Date.UTC(2000, 0, days - 730118)));\n    } else {\n      callback(new Date(2000, 0, days - 730118));\n    }\n  });\n}\n\nfunction readDateTime2(parser, dataLength, scale, useUTC, callback) {\n  readTime(parser, dataLength - 3, scale, useUTC, time => {\n    // TODO: 'input' is 'time', but TypeScript cannot find \"time.nanosecondsDelta\";\n    parser.readUInt24LE(days => {\n      let date;\n\n      if (useUTC) {\n        date = new Date(Date.UTC(2000, 0, days - 730118, 0, 0, 0, +time));\n      } else {\n        date = new Date(2000, 0, days - 730118, time.getHours(), time.getMinutes(), time.getSeconds(), time.getMilliseconds());\n      }\n\n      Object.defineProperty(date, 'nanosecondsDelta', {\n        enumerable: false,\n        value: time.nanosecondsDelta\n      });\n      callback(date);\n    });\n  });\n}\n\nfunction readDateTimeOffset(parser, dataLength, scale, callback) {\n  readTime(parser, dataLength - 5, scale, true, time => {\n    parser.readUInt24LE(days => {\n      // offset\n      parser.readInt16LE(() => {\n        const date = new Date(Date.UTC(2000, 0, days - 730118, 0, 0, 0, +time));\n        Object.defineProperty(date, 'nanosecondsDelta', {\n          enumerable: false,\n          value: time.nanosecondsDelta\n        });\n        callback(date);\n      });\n    });\n  });\n}\n\nvar _default = valueParse;\nexports.default = _default;\nmodule.exports = valueParse;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/tedious/lib/value-parser.js"],"names":["Object","defineProperty","exports","value","default","_metadataParser","require","_dataType","_iconvLite","_interopRequireDefault","_sprintfJs","_guidParser","obj","__esModule","NULL","MAX","THREE_AND_A_THIRD","MONEY_DIVISOR","PLP_NULL","Buffer","from","UNKNOWN_PLP_LEN","DEFAULT_ENCODING","readTinyInt","parser","callback","readUInt8","readSmallInt","readInt16LE","readInt","readInt32LE","readBigInt","readBigInt64LE","toString","readReal","readFloatLE","readFloat","readDoubleLE","readSmallMoney","readMoney","high","readUInt32LE","low","readBit","valueParse","metadata","options","type","name","dataLength","emit","Error","codepage","collation","readMaxChars","readUInt16LE","readChars","readMaxNChars","readNChars","readMaxBinary","readBinary","textPointerLength","readBuffer","_textPointer","_timestamp","readSmallDateTime","useUTC","readDateTime","readTime","scale","readDate","readDateTime2","readDateTimeOffset","readNumeric","precision","readUniqueIdentifier","sprintf","readVariant","data","lowerCaseGuids","bufferToLowerCaseGuid","bufferToUpperCaseGuid","_precision","sign","readValue","readUNumeric64LE","readUNumeric96LE","readUNumeric128LE","call","Math","pow","baseType","TYPE","propBytes","_maxLength","readCollation","_collation","decode","readMax","equals","readMaxUnknownLength","console","warn","expectedLength","readMaxKnownLength","totalLength","alloc","offset","next","done","chunkLength","chunk","copy","chunks","length","push","concat","days","minutes","Date","UTC","threeHundredthsOfSecond","milliseconds","round","readUInt24LE","readUInt40LE","i","date","enumerable","time","getHours","getMinutes","getSeconds","getMilliseconds","nanosecondsDelta","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _metadataParser = require(\"./metadata-parser\");\n\nvar _dataType = require(\"./data-type\");\n\nvar _iconvLite = _interopRequireDefault(require(\"iconv-lite\"));\n\nvar _sprintfJs = require(\"sprintf-js\");\n\nvar _guidParser = require(\"./guid-parser\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst NULL = (1 << 16) - 1;\nconst MAX = (1 << 16) - 1;\nconst THREE_AND_A_THIRD = 3 + 1 / 3;\nconst MONEY_DIVISOR = 10000;\nconst PLP_NULL = Buffer.from([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);\nconst UNKNOWN_PLP_LEN = Buffer.from([0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);\nconst DEFAULT_ENCODING = 'utf8';\n\nfunction readTinyInt(parser, callback) {\n  parser.readUInt8(callback);\n}\n\nfunction readSmallInt(parser, callback) {\n  parser.readInt16LE(callback);\n}\n\nfunction readInt(parser, callback) {\n  parser.readInt32LE(callback);\n}\n\nfunction readBigInt(parser, callback) {\n  parser.readBigInt64LE(value => {\n    callback(value.toString());\n  });\n}\n\nfunction readReal(parser, callback) {\n  parser.readFloatLE(callback);\n}\n\nfunction readFloat(parser, callback) {\n  parser.readDoubleLE(callback);\n}\n\nfunction readSmallMoney(parser, callback) {\n  parser.readInt32LE(value => {\n    callback(value / MONEY_DIVISOR);\n  });\n}\n\nfunction readMoney(parser, callback) {\n  parser.readInt32LE(high => {\n    parser.readUInt32LE(low => {\n      callback((low + 0x100000000 * high) / MONEY_DIVISOR);\n    });\n  });\n}\n\nfunction readBit(parser, callback) {\n  parser.readUInt8(value => {\n    callback(!!value);\n  });\n}\n\nfunction valueParse(parser, metadata, options, callback) {\n  const type = metadata.type;\n\n  switch (type.name) {\n    case 'Null':\n      return callback(null);\n\n    case 'TinyInt':\n      return readTinyInt(parser, callback);\n\n    case 'SmallInt':\n      return readSmallInt(parser, callback);\n\n    case 'Int':\n      return readInt(parser, callback);\n\n    case 'BigInt':\n      return readBigInt(parser, callback);\n\n    case 'IntN':\n      return parser.readUInt8(dataLength => {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n\n          case 1:\n            return readTinyInt(parser, callback);\n\n          case 2:\n            return readSmallInt(parser, callback);\n\n          case 4:\n            return readInt(parser, callback);\n\n          case 8:\n            return readBigInt(parser, callback);\n\n          default:\n            return parser.emit('error', new Error('Unsupported dataLength ' + dataLength + ' for IntN'));\n        }\n      });\n\n    case 'Real':\n      return readReal(parser, callback);\n\n    case 'Float':\n      return readFloat(parser, callback);\n\n    case 'FloatN':\n      return parser.readUInt8(dataLength => {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n\n          case 4:\n            return readReal(parser, callback);\n\n          case 8:\n            return readFloat(parser, callback);\n\n          default:\n            return parser.emit('error', new Error('Unsupported dataLength ' + dataLength + ' for FloatN'));\n        }\n      });\n\n    case 'SmallMoney':\n      return readSmallMoney(parser, callback);\n\n    case 'Money':\n      return readMoney(parser, callback);\n\n    case 'MoneyN':\n      return parser.readUInt8(dataLength => {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n\n          case 4:\n            return readSmallMoney(parser, callback);\n\n          case 8:\n            return readMoney(parser, callback);\n\n          default:\n            return parser.emit('error', new Error('Unsupported dataLength ' + dataLength + ' for MoneyN'));\n        }\n      });\n\n    case 'Bit':\n      return readBit(parser, callback);\n\n    case 'BitN':\n      return parser.readUInt8(dataLength => {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n\n          case 1:\n            return readBit(parser, callback);\n\n          default:\n            return parser.emit('error', new Error('Unsupported dataLength ' + dataLength + ' for BitN'));\n        }\n      });\n\n    case 'VarChar':\n    case 'Char':\n      const codepage = metadata.collation.codepage;\n\n      if (metadata.dataLength === MAX) {\n        return readMaxChars(parser, codepage, callback);\n      } else {\n        return parser.readUInt16LE(dataLength => {\n          if (dataLength === NULL) {\n            return callback(null);\n          }\n\n          readChars(parser, dataLength, codepage, callback);\n        });\n      }\n\n    case 'NVarChar':\n    case 'NChar':\n      if (metadata.dataLength === MAX) {\n        return readMaxNChars(parser, callback);\n      } else {\n        return parser.readUInt16LE(dataLength => {\n          if (dataLength === NULL) {\n            return callback(null);\n          }\n\n          readNChars(parser, dataLength, callback);\n        });\n      }\n\n    case 'VarBinary':\n    case 'Binary':\n      if (metadata.dataLength === MAX) {\n        return readMaxBinary(parser, callback);\n      } else {\n        return parser.readUInt16LE(dataLength => {\n          if (dataLength === NULL) {\n            return callback(null);\n          }\n\n          readBinary(parser, dataLength, callback);\n        });\n      }\n\n    case 'Text':\n      return parser.readUInt8(textPointerLength => {\n        if (textPointerLength === 0) {\n          return callback(null);\n        }\n\n        parser.readBuffer(textPointerLength, _textPointer => {\n          parser.readBuffer(8, _timestamp => {\n            parser.readUInt32LE(dataLength => {\n              readChars(parser, dataLength, metadata.collation.codepage, callback);\n            });\n          });\n        });\n      });\n\n    case 'NText':\n      return parser.readUInt8(textPointerLength => {\n        if (textPointerLength === 0) {\n          return callback(null);\n        }\n\n        parser.readBuffer(textPointerLength, _textPointer => {\n          parser.readBuffer(8, _timestamp => {\n            parser.readUInt32LE(dataLength => {\n              readNChars(parser, dataLength, callback);\n            });\n          });\n        });\n      });\n\n    case 'Image':\n      return parser.readUInt8(textPointerLength => {\n        if (textPointerLength === 0) {\n          return callback(null);\n        }\n\n        parser.readBuffer(textPointerLength, _textPointer => {\n          parser.readBuffer(8, _timestamp => {\n            parser.readUInt32LE(dataLength => {\n              readBinary(parser, dataLength, callback);\n            });\n          });\n        });\n      });\n\n    case 'Xml':\n      return readMaxNChars(parser, callback);\n\n    case 'SmallDateTime':\n      return readSmallDateTime(parser, options.useUTC, callback);\n\n    case 'DateTime':\n      return readDateTime(parser, options.useUTC, callback);\n\n    case 'DateTimeN':\n      return parser.readUInt8(dataLength => {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n\n          case 4:\n            return readSmallDateTime(parser, options.useUTC, callback);\n\n          case 8:\n            return readDateTime(parser, options.useUTC, callback);\n\n          default:\n            return parser.emit('error', new Error('Unsupported dataLength ' + dataLength + ' for DateTimeN'));\n        }\n      });\n\n    case 'Time':\n      return parser.readUInt8(dataLength => {\n        if (dataLength === 0) {\n          return callback(null);\n        } else {\n          return readTime(parser, dataLength, metadata.scale, options.useUTC, callback);\n        }\n      });\n\n    case 'Date':\n      return parser.readUInt8(dataLength => {\n        if (dataLength === 0) {\n          return callback(null);\n        } else {\n          return readDate(parser, options.useUTC, callback);\n        }\n      });\n\n    case 'DateTime2':\n      return parser.readUInt8(dataLength => {\n        if (dataLength === 0) {\n          return callback(null);\n        } else {\n          return readDateTime2(parser, dataLength, metadata.scale, options.useUTC, callback);\n        }\n      });\n\n    case 'DateTimeOffset':\n      return parser.readUInt8(dataLength => {\n        if (dataLength === 0) {\n          return callback(null);\n        } else {\n          return readDateTimeOffset(parser, dataLength, metadata.scale, callback);\n        }\n      });\n\n    case 'NumericN':\n    case 'DecimalN':\n      return parser.readUInt8(dataLength => {\n        if (dataLength === 0) {\n          return callback(null);\n        } else {\n          return readNumeric(parser, dataLength, metadata.precision, metadata.scale, callback);\n        }\n      });\n\n    case 'UniqueIdentifier':\n      return parser.readUInt8(dataLength => {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n\n          case 0x10:\n            return readUniqueIdentifier(parser, options, callback);\n\n          default:\n            return parser.emit('error', new Error((0, _sprintfJs.sprintf)('Unsupported guid size %d', dataLength - 1)));\n        }\n      });\n\n    case 'UDT':\n      return readMaxBinary(parser, callback);\n\n    case 'Variant':\n      return parser.readUInt32LE(dataLength => {\n        if (dataLength === 0) {\n          return callback(null);\n        }\n\n        readVariant(parser, options, dataLength, callback);\n      });\n\n    default:\n      parser.emit('error', new Error((0, _sprintfJs.sprintf)('Unrecognised type %s', type.name)));\n  }\n}\n\nfunction readUniqueIdentifier(parser, options, callback) {\n  parser.readBuffer(0x10, data => {\n    callback(options.lowerCaseGuids ? (0, _guidParser.bufferToLowerCaseGuid)(data) : (0, _guidParser.bufferToUpperCaseGuid)(data));\n  });\n}\n\nfunction readNumeric(parser, dataLength, _precision, scale, callback) {\n  parser.readUInt8(sign => {\n    sign = sign === 1 ? 1 : -1;\n    let readValue;\n\n    if (dataLength === 5) {\n      readValue = parser.readUInt32LE;\n    } else if (dataLength === 9) {\n      readValue = parser.readUNumeric64LE;\n    } else if (dataLength === 13) {\n      readValue = parser.readUNumeric96LE;\n    } else if (dataLength === 17) {\n      readValue = parser.readUNumeric128LE;\n    } else {\n      return parser.emit('error', new Error((0, _sprintfJs.sprintf)('Unsupported numeric dataLength %d', dataLength)));\n    }\n\n    readValue.call(parser, value => {\n      callback(value * sign / Math.pow(10, scale));\n    });\n  });\n}\n\nfunction readVariant(parser, options, dataLength, callback) {\n  return parser.readUInt8(baseType => {\n    const type = _dataType.TYPE[baseType];\n    return parser.readUInt8(propBytes => {\n      dataLength = dataLength - propBytes - 2;\n\n      switch (type.name) {\n        case 'UniqueIdentifier':\n          return readUniqueIdentifier(parser, options, callback);\n\n        case 'Bit':\n          return readBit(parser, callback);\n\n        case 'TinyInt':\n          return readTinyInt(parser, callback);\n\n        case 'SmallInt':\n          return readSmallInt(parser, callback);\n\n        case 'Int':\n          return readInt(parser, callback);\n\n        case 'BigInt':\n          return readBigInt(parser, callback);\n\n        case 'SmallDateTime':\n          return readSmallDateTime(parser, options.useUTC, callback);\n\n        case 'DateTime':\n          return readDateTime(parser, options.useUTC, callback);\n\n        case 'Real':\n          return readReal(parser, callback);\n\n        case 'Float':\n          return readFloat(parser, callback);\n\n        case 'SmallMoney':\n          return readSmallMoney(parser, callback);\n\n        case 'Money':\n          return readMoney(parser, callback);\n\n        case 'Date':\n          return readDate(parser, options.useUTC, callback);\n\n        case 'Time':\n          return parser.readUInt8(scale => {\n            return readTime(parser, dataLength, scale, options.useUTC, callback);\n          });\n\n        case 'DateTime2':\n          return parser.readUInt8(scale => {\n            return readDateTime2(parser, dataLength, scale, options.useUTC, callback);\n          });\n\n        case 'DateTimeOffset':\n          return parser.readUInt8(scale => {\n            return readDateTimeOffset(parser, dataLength, scale, callback);\n          });\n\n        case 'VarBinary':\n        case 'Binary':\n          return parser.readUInt16LE(_maxLength => {\n            readBinary(parser, dataLength, callback);\n          });\n\n        case 'NumericN':\n        case 'DecimalN':\n          return parser.readUInt8(precision => {\n            parser.readUInt8(scale => {\n              readNumeric(parser, dataLength, precision, scale, callback);\n            });\n          });\n\n        case 'VarChar':\n        case 'Char':\n          return parser.readUInt16LE(_maxLength => {\n            (0, _metadataParser.readCollation)(parser, collation => {\n              readChars(parser, dataLength, collation.codepage, callback);\n            });\n          });\n\n        case 'NVarChar':\n        case 'NChar':\n          return parser.readUInt16LE(_maxLength => {\n            (0, _metadataParser.readCollation)(parser, _collation => {\n              readNChars(parser, dataLength, callback);\n            });\n          });\n\n        default:\n          throw new Error('Invalid type!');\n      }\n    });\n  });\n}\n\nfunction readBinary(parser, dataLength, callback) {\n  return parser.readBuffer(dataLength, callback);\n}\n\nfunction readChars(parser, dataLength, codepage, callback) {\n  if (codepage == null) {\n    codepage = DEFAULT_ENCODING;\n  }\n\n  return parser.readBuffer(dataLength, data => {\n    callback(_iconvLite.default.decode(data, codepage));\n  });\n}\n\nfunction readNChars(parser, dataLength, callback) {\n  parser.readBuffer(dataLength, data => {\n    callback(data.toString('ucs2'));\n  });\n}\n\nfunction readMaxBinary(parser, callback) {\n  return readMax(parser, callback);\n}\n\nfunction readMaxChars(parser, codepage, callback) {\n  if (codepage == null) {\n    codepage = DEFAULT_ENCODING;\n  }\n\n  readMax(parser, data => {\n    if (data) {\n      callback(_iconvLite.default.decode(data, codepage));\n    } else {\n      callback(null);\n    }\n  });\n}\n\nfunction readMaxNChars(parser, callback) {\n  readMax(parser, data => {\n    if (data) {\n      callback(data.toString('ucs2'));\n    } else {\n      callback(null);\n    }\n  });\n}\n\nfunction readMax(parser, callback) {\n  parser.readBuffer(8, type => {\n    if (type.equals(PLP_NULL)) {\n      return callback(null);\n    } else if (type.equals(UNKNOWN_PLP_LEN)) {\n      return readMaxUnknownLength(parser, callback);\n    } else {\n      const low = type.readUInt32LE(0);\n      const high = type.readUInt32LE(4);\n\n      if (high >= 2 << 53 - 32) {\n        console.warn('Read UInt64LE > 53 bits : high=' + high + ', low=' + low);\n      }\n\n      const expectedLength = low + 0x100000000 * high;\n      return readMaxKnownLength(parser, expectedLength, callback);\n    }\n  });\n}\n\nfunction readMaxKnownLength(parser, totalLength, callback) {\n  const data = Buffer.alloc(totalLength, 0);\n  let offset = 0;\n\n  function next(done) {\n    parser.readUInt32LE(chunkLength => {\n      if (!chunkLength) {\n        return done();\n      }\n\n      parser.readBuffer(chunkLength, chunk => {\n        chunk.copy(data, offset);\n        offset += chunkLength;\n        next(done);\n      });\n    });\n  }\n\n  next(() => {\n    if (offset !== totalLength) {\n      parser.emit('error', new Error('Partially Length-prefixed Bytes unmatched lengths : expected ' + totalLength + ', but got ' + offset + ' bytes'));\n    }\n\n    callback(data);\n  });\n}\n\nfunction readMaxUnknownLength(parser, callback) {\n  const chunks = [];\n  let length = 0;\n\n  function next(done) {\n    parser.readUInt32LE(chunkLength => {\n      if (!chunkLength) {\n        return done();\n      }\n\n      parser.readBuffer(chunkLength, chunk => {\n        chunks.push(chunk);\n        length += chunkLength;\n        next(done);\n      });\n    });\n  }\n\n  next(() => {\n    callback(Buffer.concat(chunks, length));\n  });\n}\n\nfunction readSmallDateTime(parser, useUTC, callback) {\n  parser.readUInt16LE(days => {\n    parser.readUInt16LE(minutes => {\n      let value;\n\n      if (useUTC) {\n        value = new Date(Date.UTC(1900, 0, 1 + days, 0, minutes));\n      } else {\n        value = new Date(1900, 0, 1 + days, 0, minutes);\n      }\n\n      callback(value);\n    });\n  });\n}\n\nfunction readDateTime(parser, useUTC, callback) {\n  parser.readInt32LE(days => {\n    parser.readUInt32LE(threeHundredthsOfSecond => {\n      const milliseconds = Math.round(threeHundredthsOfSecond * THREE_AND_A_THIRD);\n      let value;\n\n      if (useUTC) {\n        value = new Date(Date.UTC(1900, 0, 1 + days, 0, 0, 0, milliseconds));\n      } else {\n        value = new Date(1900, 0, 1 + days, 0, 0, 0, milliseconds);\n      }\n\n      callback(value);\n    });\n  });\n}\n\nfunction readTime(parser, dataLength, scale, useUTC, callback) {\n  let readValue;\n\n  switch (dataLength) {\n    case 3:\n      readValue = parser.readUInt24LE;\n      break;\n\n    case 4:\n      readValue = parser.readUInt32LE;\n      break;\n\n    case 5:\n      readValue = parser.readUInt40LE;\n  }\n\n  readValue.call(parser, value => {\n    if (scale < 7) {\n      for (let i = scale; i < 7; i++) {\n        value *= 10;\n      }\n    }\n\n    let date;\n\n    if (useUTC) {\n      date = new Date(Date.UTC(1970, 0, 1, 0, 0, 0, value / 10000));\n    } else {\n      date = new Date(1970, 0, 1, 0, 0, 0, value / 10000);\n    }\n\n    Object.defineProperty(date, 'nanosecondsDelta', {\n      enumerable: false,\n      value: value % 10000 / Math.pow(10, 7)\n    });\n    callback(date);\n  });\n}\n\nfunction readDate(parser, useUTC, callback) {\n  parser.readUInt24LE(days => {\n    if (useUTC) {\n      callback(new Date(Date.UTC(2000, 0, days - 730118)));\n    } else {\n      callback(new Date(2000, 0, days - 730118));\n    }\n  });\n}\n\nfunction readDateTime2(parser, dataLength, scale, useUTC, callback) {\n  readTime(parser, dataLength - 3, scale, useUTC, time => {\n    // TODO: 'input' is 'time', but TypeScript cannot find \"time.nanosecondsDelta\";\n    parser.readUInt24LE(days => {\n      let date;\n\n      if (useUTC) {\n        date = new Date(Date.UTC(2000, 0, days - 730118, 0, 0, 0, +time));\n      } else {\n        date = new Date(2000, 0, days - 730118, time.getHours(), time.getMinutes(), time.getSeconds(), time.getMilliseconds());\n      }\n\n      Object.defineProperty(date, 'nanosecondsDelta', {\n        enumerable: false,\n        value: time.nanosecondsDelta\n      });\n      callback(date);\n    });\n  });\n}\n\nfunction readDateTimeOffset(parser, dataLength, scale, callback) {\n  readTime(parser, dataLength - 5, scale, true, time => {\n    parser.readUInt24LE(days => {\n      // offset\n      parser.readInt16LE(() => {\n        const date = new Date(Date.UTC(2000, 0, days - 730118, 0, 0, 0, +time));\n        Object.defineProperty(date, 'nanosecondsDelta', {\n          enumerable: false,\n          value: time.nanosecondsDelta\n        });\n        callback(date);\n      });\n    });\n  });\n}\n\nvar _default = valueParse;\nexports.default = _default;\nmodule.exports = valueParse;"]},"metadata":{},"sourceType":"script"}
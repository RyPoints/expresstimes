{"ast":null,"code":"'use strict';\n\nconst Utils = require('../../utils');\n\nconst debug = Utils.getLogger().debugContext('sql:mssql');\n\nconst Promise = require('../../promise');\n\nconst AbstractQuery = require('../abstract/query');\n\nconst sequelizeErrors = require('../../errors.js');\n\nconst parserStore = require('../parserStore')('mssql');\n\nconst _ = require('lodash');\n\nconst TYPES = require('tedious').TYPES;\n\nclass Query extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super();\n    this.connection = connection;\n    this.instance = options.instance;\n    this.model = options.model;\n    this.sequelize = sequelize;\n    this.options = _.extend({\n      logging: console.log,\n      plain: false,\n      raw: false\n    }, options || {});\n    this.checkLoggingOption();\n  }\n\n  getInsertIdField() {\n    return 'id';\n  }\n\n  getSQLTypeFromJsType(value) {\n    const paramType = {\n      type: TYPES.VarChar,\n      typeOptions: {}\n    };\n    paramType.type = TYPES.NVarChar;\n\n    if (typeof value === 'number') {\n      if (Number.isInteger(value)) {\n        paramType.type = TYPES.Int;\n      } else {\n        paramType.type = TYPES.Numeric; //Default to a reasonable numeric precision/scale pending more sophisticated logic\n\n        paramType.typeOptions = {\n          precision: 30,\n          scale: 15\n        };\n      }\n    }\n\n    return paramType;\n  }\n\n  _run(connection, sql, parameters) {\n    this.sql = sql; //do we need benchmark for this query execution\n\n    const benchmark = this.sequelize.options.benchmark || this.options.benchmark;\n    let queryBegin;\n\n    if (benchmark) {\n      queryBegin = Date.now();\n    } else {\n      this.sequelize.log('Executing (' + (this.connection.uuid || 'default') + '): ' + this.sql, this.options);\n    }\n\n    debug(`executing(${this.connection.uuid || 'default'}) : ${this.sql}`);\n    return new Promise((resolve, reject) => {\n      // TRANSACTION SUPPORT\n      if (_.startsWith(this.sql, 'BEGIN TRANSACTION')) {\n        connection.beginTransaction(err => {\n          if (err) {\n            reject(this.formatError(err));\n          } else {\n            resolve(this.formatResults());\n          }\n        }, this.options.transaction.name, Utils.mapIsolationLevelStringToTedious(this.options.isolationLevel, connection.lib));\n      } else if (_.startsWith(this.sql, 'COMMIT TRANSACTION')) {\n        connection.commitTransaction(err => {\n          if (err) {\n            reject(this.formatError(err));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, 'ROLLBACK TRANSACTION')) {\n        connection.rollbackTransaction(err => {\n          if (err) {\n            reject(this.formatError(err));\n          } else {\n            resolve(this.formatResults());\n          }\n        }, this.options.transaction.name);\n      } else if (_.startsWith(this.sql, 'SAVE TRANSACTION')) {\n        connection.saveTransaction(err => {\n          if (err) {\n            reject(this.formatError(err));\n          } else {\n            resolve(this.formatResults());\n          }\n        }, this.options.transaction.name);\n      } else {\n        const results = [];\n        const request = new connection.lib.Request(this.sql, (err, rowCount) => {\n          debug(`executed(${this.connection.uuid || 'default'}) : ${this.sql}`);\n\n          if (benchmark) {\n            this.sequelize.log('Executed (' + (this.connection.uuid || 'default') + '): ' + this.sql, Date.now() - queryBegin, this.options);\n          }\n\n          if (err) {\n            err.sql = sql;\n            reject(this.formatError(err));\n          } else {\n            resolve(this.formatResults(results, rowCount));\n          }\n        });\n\n        if (parameters) {\n          _.forOwn(parameters, (value, key) => {\n            const paramType = this.getSQLTypeFromJsType(value);\n            request.addParameter(key, paramType.type, value, paramType.typeOptions);\n          });\n        }\n\n        request.on('row', columns => {\n          const row = {};\n\n          for (const column of columns) {\n            const typeid = column.metadata.type.id;\n            const parse = parserStore.get(typeid);\n            let value = column.value;\n\n            if (value !== null & !!parse) {\n              value = parse(value);\n            }\n\n            row[column.metadata.colName] = value;\n          }\n\n          results.push(row);\n        });\n        connection.execSql(request);\n      }\n    });\n  }\n\n  run(sql, parameters) {\n    return Promise.using(this.connection.lock(), connection => this._run(connection, sql, parameters));\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = {};\n\n    const replacementFunc = (match, key, values) => {\n      if (values[key] !== undefined) {\n        bindParam[key] = values[key];\n        return '@' + key;\n      }\n\n      return undefined;\n    };\n\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam];\n  }\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @private\n   */\n\n\n  formatResults(data, rowCount) {\n    let result = this.instance;\n\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        if (this.options.plain) {\n          // NOTE: super contrived. This just passes the newly added query-interface\n          //       test returning only the PK. There isn't a way in MSSQL to identify\n          //       that a given return value is the PK, and we have no schema information\n          //       because there was no calling Model.\n          const record = data[0];\n          result = record[Object.keys(record)[0]];\n        } else {\n          result = data;\n        }\n      }\n    }\n\n    if (this.isShowTablesQuery()) {\n      result = this.handleShowTablesQuery(data);\n    } else if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", '').replace(\"')\", '').replace(/'/g, '');\n        }\n\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === 'YES' ? true : false,\n          defaultValue: _result.Default,\n          primaryKey: _result.Constraint === 'PRIMARY KEY',\n          autoIncrement: _result.IsIdentity === 1\n        };\n      }\n    } else if (this.isShowIndexesQuery()) {\n      result = this.handleShowIndexesQuery(data);\n    } else if (this.isSelectQuery()) {\n      result = this.handleSelectQuery(data);\n    } else if (this.isUpsertQuery()) {\n      result = data[0];\n    } else if (this.isCallQuery()) {\n      result = data[0];\n    } else if (this.isBulkUpdateQuery()) {\n      result = data.length;\n    } else if (this.isBulkDeleteQuery()) {\n      result = data[0] && data[0].AFFECTEDROWS;\n    } else if (this.isVersionQuery()) {\n      result = data[0].version;\n    } else if (this.isForeignKeysQuery()) {\n      result = data;\n    } else if (this.isInsertQuery() || this.isUpdateQuery()) {\n      result = [result, rowCount];\n    } else if (this.isShowConstraintsQuery()) {\n      result = this.handleShowConstraintsQuery(data);\n    } else if (this.isRawQuery()) {\n      // MSSQL returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta\n      result = [data, data];\n    }\n\n    return result;\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA\n      };\n    });\n  }\n\n  handleShowConstraintsQuery(data) {\n    //Convert snake_case keys to camelCase as it's generated by stored procedure\n    return data.slice(1).map(result => {\n      const constraint = {};\n\n      for (const key in result) {\n        constraint[_.camelCase(key)] = result[key];\n      }\n\n      return constraint;\n    });\n  }\n\n  formatError(err) {\n    let match;\n    match = err.message.match(/Violation of UNIQUE KEY constraint '((.|\\s)*)'. Cannot insert duplicate key in object '.*'.(:? The duplicate key value is \\((.*)\\).)?/);\n    match = match || err.message.match(/Cannot insert duplicate key row in object .* with unique index '(.*)'/);\n\n    if (match && match.length > 1) {\n      let fields = {};\n      const uniqueKey = this.model && this.model.uniqueKeys[match[1]];\n      let message = 'Validation error';\n\n      if (uniqueKey && !!uniqueKey.msg) {\n        message = uniqueKey.msg;\n      }\n\n      if (match[4]) {\n        const values = match[4].split(',').map(part => part.trim());\n\n        if (uniqueKey) {\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[match[1]] = match[4];\n        }\n      }\n\n      const errors = [];\n\n      _.forOwn(fields, (value, field) => {\n        errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), 'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n        field, value, this.instance, 'not_unique'));\n      });\n\n      return new sequelizeErrors.UniqueConstraintError({\n        message,\n        errors,\n        parent: err,\n        fields\n      });\n    }\n\n    match = err.message.match(/Failed on step '(.*)'.Could not create constraint. See previous errors./) || err.message.match(/The DELETE statement conflicted with the REFERENCE constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./) || err.message.match(/The INSERT statement conflicted with the FOREIGN KEY constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./) || err.message.match(/The MERGE statement conflicted with the FOREIGN KEY constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./) || err.message.match(/The UPDATE statement conflicted with the FOREIGN KEY constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./);\n\n    if (match && match.length > 0) {\n      return new sequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        parent: err\n      });\n    }\n\n    match = err.message.match(/Could not drop constraint. See previous errors./);\n\n    if (match && match.length > 0) {\n      return new sequelizeErrors.UnknownConstraintError(match[1]);\n    }\n\n    return new sequelizeErrors.DatabaseError(err);\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n    result = result || this.sql.toLowerCase().indexOf(\"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\") === 0;\n    result = result || this.sql.toLowerCase().indexOf('select tablename = t.name, name = ind.name,') === 0;\n    result = result || this.sql.toLowerCase().indexOf('exec sys.sp_helpindex @objname') === 0;\n    return result;\n  }\n\n  isShowIndexesQuery() {\n    return this.sql.toLowerCase().indexOf('exec sys.sp_helpindex @objname') === 0;\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    data = _.reduce(data, (acc, item) => {\n      if (!(item.index_name in acc)) {\n        acc[item.index_name] = item;\n        item.fields = [];\n      }\n\n      _.forEach(item.index_keys.split(','), column => {\n        let columnName = column.trim();\n\n        if (columnName.indexOf('(-)') !== -1) {\n          columnName = columnName.replace('(-)', '');\n        }\n\n        acc[item.index_name].fields.push({\n          attribute: columnName,\n          length: undefined,\n          order: column.indexOf('(-)') !== -1 ? 'DESC' : 'ASC',\n          collate: undefined\n        });\n      });\n\n      delete item.index_keys;\n      return acc;\n    }, {});\n    return _.map(data, item => ({\n      primary: item.index_name.toLowerCase().indexOf('pk') === 0,\n      fields: item.fields,\n      name: item.index_name,\n      tableName: undefined,\n      unique: item.index_description.toLowerCase().indexOf('unique') !== -1,\n      type: undefined\n    }));\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      let autoIncrementAttributeAlias = null;\n      if (this.model.rawAttributes.hasOwnProperty(autoIncrementAttribute) && this.model.rawAttributes[autoIncrementAttribute].field !== undefined) autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\n      id = id || results && results[0][this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      id = id || results && results[0][autoIncrementAttribute];\n      id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\n      this.instance[autoIncrementAttribute] = id;\n    }\n  }\n\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/sequelize/lib/dialects/mssql/query.js"],"names":["Utils","require","debug","getLogger","debugContext","Promise","AbstractQuery","sequelizeErrors","parserStore","_","TYPES","Query","constructor","connection","sequelize","options","instance","model","extend","logging","console","log","plain","raw","checkLoggingOption","getInsertIdField","getSQLTypeFromJsType","value","paramType","type","VarChar","typeOptions","NVarChar","Number","isInteger","Int","Numeric","precision","scale","_run","sql","parameters","benchmark","queryBegin","Date","now","uuid","resolve","reject","startsWith","beginTransaction","err","formatError","formatResults","transaction","name","mapIsolationLevelStringToTedious","isolationLevel","lib","commitTransaction","rollbackTransaction","saveTransaction","results","request","Request","rowCount","forOwn","key","addParameter","on","columns","row","column","typeid","metadata","id","parse","get","colName","push","execSql","run","using","lock","formatBindParameters","values","dialect","bindParam","replacementFunc","match","undefined","data","result","isInsertQuery","handleInsertQuery","record","Object","keys","isShowTablesQuery","handleShowTablesQuery","isDescribeQuery","_result","Default","replace","Name","Type","toUpperCase","allowNull","IsNull","defaultValue","primaryKey","Constraint","autoIncrement","IsIdentity","isShowIndexesQuery","handleShowIndexesQuery","isSelectQuery","handleSelectQuery","isUpsertQuery","isCallQuery","isBulkUpdateQuery","length","isBulkDeleteQuery","AFFECTEDROWS","isVersionQuery","version","isForeignKeysQuery","isUpdateQuery","isShowConstraintsQuery","handleShowConstraintsQuery","isRawQuery","map","resultSet","tableName","TABLE_NAME","schema","TABLE_SCHEMA","slice","constraint","camelCase","message","fields","uniqueKey","uniqueKeys","msg","split","part","trim","zipObject","errors","field","ValidationErrorItem","getUniqueConstraintErrorMessage","UniqueConstraintError","parent","ForeignKeyConstraintError","index","UnknownConstraintError","DatabaseError","isShowOrDescribeQuery","toLowerCase","indexOf","reduce","acc","item","index_name","forEach","index_keys","columnName","attribute","order","collate","primary","unique","index_description","metaData","autoIncrementAttribute","autoIncrementAttributeAlias","rawAttributes","hasOwnProperty","module","exports","default"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Utils = require('../../utils');\nconst debug = Utils.getLogger().debugContext('sql:mssql');\nconst Promise = require('../../promise');\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors.js');\nconst parserStore = require('../parserStore')('mssql');\nconst _ = require('lodash');\nconst TYPES = require('tedious').TYPES;\n\nclass Query extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super();\n    this.connection = connection;\n    this.instance = options.instance;\n    this.model = options.model;\n    this.sequelize = sequelize;\n    this.options = _.extend({\n      logging: console.log,\n      plain: false,\n      raw: false\n    }, options || {});\n\n    this.checkLoggingOption();\n  }\n\n  getInsertIdField() {\n    return 'id';\n  }\n\n  getSQLTypeFromJsType(value) {\n    const paramType = {type: TYPES.VarChar, typeOptions: {} };\n    paramType.type = TYPES.NVarChar;\n    if (typeof value === 'number') {\n      if (Number.isInteger(value)) {\n        paramType.type = TYPES.Int;\n      } else {\n        paramType.type = TYPES.Numeric;\n        //Default to a reasonable numeric precision/scale pending more sophisticated logic\n        paramType.typeOptions = {precision: 30, scale: 15};\n      }\n    }\n    return paramType;\n  }\n\n  _run(connection, sql, parameters) {\n    this.sql = sql;\n\n    //do we need benchmark for this query execution\n    const benchmark = this.sequelize.options.benchmark || this.options.benchmark;\n    let queryBegin;\n    if (benchmark) {\n      queryBegin = Date.now();\n    } else {\n      this.sequelize.log('Executing (' + (this.connection.uuid || 'default') + '): ' + this.sql, this.options);\n    }\n\n    debug(`executing(${this.connection.uuid || 'default'}) : ${this.sql}`);\n\n    return new Promise((resolve, reject) => {\n      // TRANSACTION SUPPORT\n      if (_.startsWith(this.sql, 'BEGIN TRANSACTION')) {\n        connection.beginTransaction(err => {\n          if (err) {\n            reject(this.formatError(err));\n          } else {\n            resolve(this.formatResults());\n          }\n        }, this.options.transaction.name, Utils.mapIsolationLevelStringToTedious(this.options.isolationLevel, connection.lib));\n      } else if (_.startsWith(this.sql, 'COMMIT TRANSACTION')) {\n        connection.commitTransaction(err => {\n          if (err) {\n            reject(this.formatError(err));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, 'ROLLBACK TRANSACTION')) {\n        connection.rollbackTransaction(err => {\n          if (err) {\n            reject(this.formatError(err));\n          } else {\n            resolve(this.formatResults());\n          }\n        }, this.options.transaction.name);\n      } else if (_.startsWith(this.sql, 'SAVE TRANSACTION')) {\n        connection.saveTransaction(err => {\n          if (err) {\n            reject(this.formatError(err));\n          } else {\n            resolve(this.formatResults());\n          }\n        }, this.options.transaction.name);\n      } else {\n        const results = [];\n        const request = new connection.lib.Request(this.sql, (err, rowCount) => {\n\n          debug(`executed(${this.connection.uuid || 'default'}) : ${this.sql}`);\n\n          if (benchmark) {\n            this.sequelize.log('Executed (' + (this.connection.uuid || 'default') + '): ' + this.sql, Date.now() - queryBegin, this.options);\n          }\n\n          if (err) {\n            err.sql = sql;\n            reject(this.formatError(err));\n          } else {\n            resolve(this.formatResults(results, rowCount));\n          }\n        });\n\n        if (parameters) {\n          _.forOwn(parameters, (value, key) => {\n            const paramType = this.getSQLTypeFromJsType(value);\n            request.addParameter(key, paramType.type, value, paramType.typeOptions);\n          });\n        }\n\n        request.on('row', columns => {\n          const row = {};\n          for (const column of columns) {\n            const typeid = column.metadata.type.id;\n            const parse = parserStore.get(typeid);\n            let value = column.value;\n\n            if (value !== null & !!parse) {\n              value = parse(value);\n            }\n            row[column.metadata.colName] = value;\n          }\n\n          results.push(row);\n        });\n\n        connection.execSql(request);\n      }\n    });\n  }\n\n  run(sql, parameters) {\n    return Promise.using(this.connection.lock(), connection => this._run(connection, sql, parameters));\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = {};\n    const replacementFunc = (match, key, values) => {\n      if (values[key] !== undefined) {\n        bindParam[key] = values[key];\n        return '@' + key;\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n\n    return [sql, bindParam];\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @private\n   */\n  formatResults(data, rowCount) {\n    let result = this.instance;\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        if (this.options.plain) {\n          // NOTE: super contrived. This just passes the newly added query-interface\n          //       test returning only the PK. There isn't a way in MSSQL to identify\n          //       that a given return value is the PK, and we have no schema information\n          //       because there was no calling Model.\n          const record = data[0];\n          result = record[Object.keys(record)[0]];\n        } else {\n          result = data;\n        }\n      }\n    }\n\n    if (this.isShowTablesQuery()) {\n      result = this.handleShowTablesQuery(data);\n    } else if (this.isDescribeQuery()) {\n      result = {};\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", '').replace(\"')\", '').replace(/'/g, '');\n        }\n\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === 'YES' ? true : false,\n          defaultValue: _result.Default,\n          primaryKey: _result.Constraint === 'PRIMARY KEY',\n          autoIncrement: _result.IsIdentity === 1\n        };\n      }\n    } else if (this.isShowIndexesQuery()) {\n      result = this.handleShowIndexesQuery(data);\n    } else if (this.isSelectQuery()) {\n      result = this.handleSelectQuery(data);\n    } else if (this.isUpsertQuery()) {\n      result = data[0];\n    } else if (this.isCallQuery()) {\n      result = data[0];\n    } else if (this.isBulkUpdateQuery()) {\n      result = data.length;\n    } else if (this.isBulkDeleteQuery()) {\n      result = data[0] && data[0].AFFECTEDROWS;\n    } else if (this.isVersionQuery()) {\n      result = data[0].version;\n    } else if (this.isForeignKeysQuery()) {\n      result = data;\n    } else if (this.isInsertQuery() || this.isUpdateQuery()) {\n      result = [result, rowCount];\n    } else if (this.isShowConstraintsQuery()) {\n      result = this.handleShowConstraintsQuery(data);\n    } else if (this.isRawQuery()) {\n      // MSSQL returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta\n      result = [data, data];\n    }\n\n    return result;\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA\n      };\n    });\n  }\n\n  handleShowConstraintsQuery(data) {\n    //Convert snake_case keys to camelCase as it's generated by stored procedure\n    return data.slice(1).map(result => {\n      const constraint = {};\n      for (const key in result) {\n        constraint[_.camelCase(key)] = result[key];\n      }\n      return constraint;\n    });\n  }\n\n  formatError(err) {\n    let match;\n    match = err.message.match(/Violation of UNIQUE KEY constraint '((.|\\s)*)'. Cannot insert duplicate key in object '.*'.(:? The duplicate key value is \\((.*)\\).)?/);\n    match = match || err.message.match(/Cannot insert duplicate key row in object .* with unique index '(.*)'/);\n    if (match && match.length > 1) {\n      let fields = {};\n      const uniqueKey = this.model && this.model.uniqueKeys[match[1]];\n      let message = 'Validation error';\n\n      if (uniqueKey && !!uniqueKey.msg) {\n        message = uniqueKey.msg;\n      }\n      if (match[4]) {\n        const values = match[4].split(',').map(part => part.trim());\n        if (uniqueKey) {\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[match[1]] = match[4];\n        }\n      }\n\n      const errors = [];\n      _.forOwn(fields, (value, field) => {\n        errors.push(new sequelizeErrors.ValidationErrorItem(\n          this.getUniqueConstraintErrorMessage(field),\n          'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n          field,\n          value,\n          this.instance,\n          'not_unique'\n        ));\n      });\n\n      return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields });\n    }\n\n    match = err.message.match(/Failed on step '(.*)'.Could not create constraint. See previous errors./) ||\n      err.message.match(/The DELETE statement conflicted with the REFERENCE constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./) ||\n      err.message.match(/The INSERT statement conflicted with the FOREIGN KEY constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./) ||\n      err.message.match(/The MERGE statement conflicted with the FOREIGN KEY constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./) ||\n      err.message.match(/The UPDATE statement conflicted with the FOREIGN KEY constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./);\n    if (match && match.length > 0) {\n      return new sequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        parent: err\n      });\n    }\n\n    match = err.message.match(/Could not drop constraint. See previous errors./);\n\n    if (match && match.length > 0) {\n      return new sequelizeErrors.UnknownConstraintError(match[1]);\n    }\n\n    return new sequelizeErrors.DatabaseError(err);\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().indexOf(\"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\") === 0;\n    result = result || this.sql.toLowerCase().indexOf('select tablename = t.name, name = ind.name,') === 0;\n    result = result || this.sql.toLowerCase().indexOf('exec sys.sp_helpindex @objname') === 0;\n\n    return result;\n  }\n\n  isShowIndexesQuery() {\n    return this.sql.toLowerCase().indexOf('exec sys.sp_helpindex @objname') === 0;\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    data = _.reduce(data, (acc, item) => {\n      if (!(item.index_name in acc)) {\n        acc[item.index_name] = item;\n        item.fields = [];\n      }\n\n      _.forEach(item.index_keys.split(','), column => {\n        let columnName = column.trim();\n        if (columnName.indexOf('(-)') !== -1) {\n          columnName = columnName.replace('(-)', '');\n        }\n\n        acc[item.index_name].fields.push({\n          attribute: columnName,\n          length: undefined,\n          order: column.indexOf('(-)') !== -1 ? 'DESC' : 'ASC',\n          collate: undefined\n        });\n      });\n      delete item.index_keys;\n      return acc;\n    }, {});\n\n    return _.map(data, item => ({\n      primary: item.index_name.toLowerCase().indexOf('pk') === 0,\n      fields: item.fields,\n      name: item.index_name,\n      tableName: undefined,\n      unique: item.index_description.toLowerCase().indexOf('unique') !== -1,\n      type: undefined\n    }));\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      let autoIncrementAttributeAlias = null;\n\n      if (this.model.rawAttributes.hasOwnProperty(autoIncrementAttribute) &&\n        this.model.rawAttributes[autoIncrementAttribute].field !== undefined)\n        autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\n\n      id = id || results && results[0][this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      id = id || results && results[0][autoIncrementAttribute];\n      id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\n\n      this.instance[autoIncrementAttribute] = id;\n    }\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"]},"metadata":{},"sourceType":"script"}
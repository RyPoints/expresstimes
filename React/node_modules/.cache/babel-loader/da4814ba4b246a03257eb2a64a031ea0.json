{"ast":null,"code":"/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n'use strict'; // Generate an internal UID to make the regexp pattern harder to guess.\n\nvar UID = Math.floor(Math.random() * 0x10000000000).toString(16);\nvar PLACE_HOLDER_REGEXP = new RegExp('\"@__(F|R|D|M|S|U)-' + UID + '-(\\\\d+)__@\"', 'g');\nvar IS_NATIVE_CODE_REGEXP = /\\{\\s*\\[native code\\]\\s*\\}/g;\nvar IS_PURE_FUNCTION = /function.*?\\(/;\nvar IS_ARROW_FUNCTION = /.*?=>.*?/;\nvar UNSAFE_CHARS_REGEXP = /[<>\\/\\u2028\\u2029]/g;\nvar RESERVED_SYMBOLS = ['*', 'async']; // Mapping of unsafe HTML and invalid JavaScript line terminator chars to their\n// Unicode char counterparts which are safe to use in JavaScript strings.\n\nvar ESCAPED_CHARS = {\n  '<': '\\\\u003C',\n  '>': '\\\\u003E',\n  '/': '\\\\u002F',\n  '\\u2028': '\\\\u2028',\n  '\\u2029': '\\\\u2029'\n};\n\nfunction escapeUnsafeChars(unsafeChar) {\n  return ESCAPED_CHARS[unsafeChar];\n}\n\nfunction deleteFunctions(obj) {\n  var functionKeys = [];\n\n  for (var key in obj) {\n    if (typeof obj[key] === \"function\") {\n      functionKeys.push(key);\n    }\n  }\n\n  for (var i = 0; i < functionKeys.length; i++) {\n    delete obj[functionKeys[i]];\n  }\n}\n\nmodule.exports = function serialize(obj, options) {\n  options || (options = {}); // Backwards-compatibility for `space` as the second argument.\n\n  if (typeof options === 'number' || typeof options === 'string') {\n    options = {\n      space: options\n    };\n  }\n\n  var functions = [];\n  var regexps = [];\n  var dates = [];\n  var maps = [];\n  var sets = [];\n  var undefs = []; // Returns placeholders for functions and regexps (identified by index)\n  // which are later replaced by their string representation.\n\n  function replacer(key, value) {\n    // For nested function\n    if (options.ignoreFunction) {\n      deleteFunctions(value);\n    }\n\n    if (!value && value !== undefined) {\n      return value;\n    } // If the value is an object w/ a toJSON method, toJSON is called before\n    // the replacer runs, so we use this[key] to get the non-toJSONed value.\n\n\n    var origValue = this[key];\n    var type = typeof origValue;\n\n    if (type === 'object') {\n      if (origValue instanceof RegExp) {\n        return '@__R-' + UID + '-' + (regexps.push(origValue) - 1) + '__@';\n      }\n\n      if (origValue instanceof Date) {\n        return '@__D-' + UID + '-' + (dates.push(origValue) - 1) + '__@';\n      }\n\n      if (origValue instanceof Map) {\n        return '@__M-' + UID + '-' + (maps.push(origValue) - 1) + '__@';\n      }\n\n      if (origValue instanceof Set) {\n        return '@__S-' + UID + '-' + (sets.push(origValue) - 1) + '__@';\n      }\n    }\n\n    if (type === 'function') {\n      return '@__F-' + UID + '-' + (functions.push(origValue) - 1) + '__@';\n    }\n\n    if (type === 'undefined') {\n      return '@__U-' + UID + '-' + (undefs.push(origValue) - 1) + '__@';\n    }\n\n    return value;\n  }\n\n  function serializeFunc(fn) {\n    var serializedFn = fn.toString();\n\n    if (IS_NATIVE_CODE_REGEXP.test(serializedFn)) {\n      throw new TypeError('Serializing native function: ' + fn.name);\n    } // pure functions, example: {key: function() {}}\n\n\n    if (IS_PURE_FUNCTION.test(serializedFn)) {\n      return serializedFn;\n    } // arrow functions, example: arg1 => arg1+5\n\n\n    if (IS_ARROW_FUNCTION.test(serializedFn)) {\n      return serializedFn;\n    }\n\n    var argsStartsAt = serializedFn.indexOf('(');\n    var def = serializedFn.substr(0, argsStartsAt).trim().split(' ').filter(function (val) {\n      return val.length > 0;\n    });\n    var nonReservedSymbols = def.filter(function (val) {\n      return RESERVED_SYMBOLS.indexOf(val) === -1;\n    }); // enhanced literal objects, example: {key() {}}\n\n    if (nonReservedSymbols.length > 0) {\n      return (def.indexOf('async') > -1 ? 'async ' : '') + 'function' + (def.join('').indexOf('*') > -1 ? '*' : '') + serializedFn.substr(argsStartsAt);\n    } // arrow functions\n\n\n    return serializedFn;\n  } // Check if the parameter is function\n\n\n  if (options.ignoreFunction && typeof obj === \"function\") {\n    obj = undefined;\n  } // Protects against `JSON.stringify()` returning `undefined`, by serializing\n  // to the literal string: \"undefined\".\n\n\n  if (obj === undefined) {\n    return String(obj);\n  }\n\n  var str; // Creates a JSON string representation of the value.\n  // NOTE: Node 0.12 goes into slow mode with extra JSON.stringify() args.\n\n  if (options.isJSON && !options.space) {\n    str = JSON.stringify(obj);\n  } else {\n    str = JSON.stringify(obj, options.isJSON ? null : replacer, options.space);\n  } // Protects against `JSON.stringify()` returning `undefined`, by serializing\n  // to the literal string: \"undefined\".\n\n\n  if (typeof str !== 'string') {\n    return String(str);\n  } // Replace unsafe HTML and invalid JavaScript line terminator chars with\n  // their safe Unicode char counterpart. This _must_ happen before the\n  // regexps and functions are serialized and added back to the string.\n\n\n  if (options.unsafe !== true) {\n    str = str.replace(UNSAFE_CHARS_REGEXP, escapeUnsafeChars);\n  }\n\n  if (functions.length === 0 && regexps.length === 0 && dates.length === 0 && maps.length === 0 && sets.length === 0 && undefs.length === 0) {\n    return str;\n  } // Replaces all occurrences of function, regexp, date, map and set placeholders in the\n  // JSON string with their string representations. If the original value can\n  // not be found, then `undefined` is used.\n\n\n  return str.replace(PLACE_HOLDER_REGEXP, function (match, type, valueIndex) {\n    if (type === 'D') {\n      return \"new Date(\\\"\" + dates[valueIndex].toISOString() + \"\\\")\";\n    }\n\n    if (type === 'R') {\n      return \"new RegExp(\" + serialize(regexps[valueIndex].source) + \", \\\"\" + regexps[valueIndex].flags + \"\\\")\";\n    }\n\n    if (type === 'M') {\n      return \"new Map(\" + serialize(Array.from(maps[valueIndex].entries()), options) + \")\";\n    }\n\n    if (type === 'S') {\n      return \"new Set(\" + serialize(Array.from(sets[valueIndex].values()), options) + \")\";\n    }\n\n    if (type === 'U') {\n      return 'undefined';\n    }\n\n    var fn = functions[valueIndex];\n    return serializeFunc(fn);\n  });\n};","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp/expresstimes/node_modules/serialize-javascript/index.js"],"names":["UID","Math","floor","random","toString","PLACE_HOLDER_REGEXP","RegExp","IS_NATIVE_CODE_REGEXP","IS_PURE_FUNCTION","IS_ARROW_FUNCTION","UNSAFE_CHARS_REGEXP","RESERVED_SYMBOLS","ESCAPED_CHARS","escapeUnsafeChars","unsafeChar","deleteFunctions","obj","functionKeys","key","push","i","length","module","exports","serialize","options","space","functions","regexps","dates","maps","sets","undefs","replacer","value","ignoreFunction","undefined","origValue","type","Date","Map","Set","serializeFunc","fn","serializedFn","test","TypeError","name","argsStartsAt","indexOf","def","substr","trim","split","filter","val","nonReservedSymbols","join","String","str","isJSON","JSON","stringify","unsafe","replace","match","valueIndex","toISOString","source","flags","Array","from","entries","values"],"mappings":"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","sourcesContent":["/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n'use strict';\n\n// Generate an internal UID to make the regexp pattern harder to guess.\nvar UID                 = Math.floor(Math.random() * 0x10000000000).toString(16);\nvar PLACE_HOLDER_REGEXP = new RegExp('\"@__(F|R|D|M|S|U)-' + UID + '-(\\\\d+)__@\"', 'g');\n\nvar IS_NATIVE_CODE_REGEXP = /\\{\\s*\\[native code\\]\\s*\\}/g;\nvar IS_PURE_FUNCTION = /function.*?\\(/;\nvar IS_ARROW_FUNCTION = /.*?=>.*?/;\nvar UNSAFE_CHARS_REGEXP   = /[<>\\/\\u2028\\u2029]/g;\n\nvar RESERVED_SYMBOLS = ['*', 'async'];\n\n// Mapping of unsafe HTML and invalid JavaScript line terminator chars to their\n// Unicode char counterparts which are safe to use in JavaScript strings.\nvar ESCAPED_CHARS = {\n    '<'     : '\\\\u003C',\n    '>'     : '\\\\u003E',\n    '/'     : '\\\\u002F',\n    '\\u2028': '\\\\u2028',\n    '\\u2029': '\\\\u2029'\n};\n\nfunction escapeUnsafeChars(unsafeChar) {\n    return ESCAPED_CHARS[unsafeChar];\n}\n\nfunction deleteFunctions(obj){\n    var functionKeys = [];\n    for (var key in obj) {\n        if (typeof obj[key] === \"function\") {\n            functionKeys.push(key);\n        }\n    }\n    for (var i = 0; i < functionKeys.length; i++) {\n        delete obj[functionKeys[i]];\n    }\n}\n\nmodule.exports = function serialize(obj, options) {\n    options || (options = {});\n\n    // Backwards-compatibility for `space` as the second argument.\n    if (typeof options === 'number' || typeof options === 'string') {\n        options = {space: options};\n    }\n\n    var functions = [];\n    var regexps   = [];\n    var dates     = [];\n    var maps      = [];\n    var sets      = [];\n    var undefs    = [];\n\n    // Returns placeholders for functions and regexps (identified by index)\n    // which are later replaced by their string representation.\n    function replacer(key, value) {\n\n        // For nested function\n        if(options.ignoreFunction){\n            deleteFunctions(value);\n        }\n\n        if (!value && value !== undefined) {\n            return value;\n        }\n\n        // If the value is an object w/ a toJSON method, toJSON is called before\n        // the replacer runs, so we use this[key] to get the non-toJSONed value.\n        var origValue = this[key];\n        var type = typeof origValue;\n\n        if (type === 'object') {\n            if(origValue instanceof RegExp) {\n                return '@__R-' + UID + '-' + (regexps.push(origValue) - 1) + '__@';\n            }\n\n            if(origValue instanceof Date) {\n                return '@__D-' + UID + '-' + (dates.push(origValue) - 1) + '__@';\n            }\n\n            if(origValue instanceof Map) {\n                return '@__M-' + UID + '-' + (maps.push(origValue) - 1) + '__@';\n            }\n\n            if(origValue instanceof Set) {\n                return '@__S-' + UID + '-' + (sets.push(origValue) - 1) + '__@';\n            }\n        }\n\n        if (type === 'function') {\n            return '@__F-' + UID + '-' + (functions.push(origValue) - 1) + '__@';\n        }\n\n        if (type === 'undefined') {\n            return '@__U-' + UID + '-' + (undefs.push(origValue) - 1) + '__@';\n        }\n\n        return value;\n    }\n\n    function serializeFunc(fn) {\n      var serializedFn = fn.toString();\n      if (IS_NATIVE_CODE_REGEXP.test(serializedFn)) {\n          throw new TypeError('Serializing native function: ' + fn.name);\n      }\n\n      // pure functions, example: {key: function() {}}\n      if(IS_PURE_FUNCTION.test(serializedFn)) {\n          return serializedFn;\n      }\n\n      // arrow functions, example: arg1 => arg1+5\n      if(IS_ARROW_FUNCTION.test(serializedFn)) {\n          return serializedFn;\n      }\n\n      var argsStartsAt = serializedFn.indexOf('(');\n      var def = serializedFn.substr(0, argsStartsAt)\n        .trim()\n        .split(' ')\n        .filter(function(val) { return val.length > 0 });\n\n      var nonReservedSymbols = def.filter(function(val) {\n        return RESERVED_SYMBOLS.indexOf(val) === -1\n      });\n\n      // enhanced literal objects, example: {key() {}}\n      if(nonReservedSymbols.length > 0) {\n          return (def.indexOf('async') > -1 ? 'async ' : '') + 'function'\n            + (def.join('').indexOf('*') > -1 ? '*' : '')\n            + serializedFn.substr(argsStartsAt);\n      }\n\n      // arrow functions\n      return serializedFn;\n    }\n\n    // Check if the parameter is function\n    if (options.ignoreFunction && typeof obj === \"function\") {\n        obj = undefined;\n    }\n    // Protects against `JSON.stringify()` returning `undefined`, by serializing\n    // to the literal string: \"undefined\".\n    if (obj === undefined) {\n        return String(obj);\n    }\n\n    var str;\n\n    // Creates a JSON string representation of the value.\n    // NOTE: Node 0.12 goes into slow mode with extra JSON.stringify() args.\n    if (options.isJSON && !options.space) {\n        str = JSON.stringify(obj);\n    } else {\n        str = JSON.stringify(obj, options.isJSON ? null : replacer, options.space);\n    }\n\n    // Protects against `JSON.stringify()` returning `undefined`, by serializing\n    // to the literal string: \"undefined\".\n    if (typeof str !== 'string') {\n        return String(str);\n    }\n\n    // Replace unsafe HTML and invalid JavaScript line terminator chars with\n    // their safe Unicode char counterpart. This _must_ happen before the\n    // regexps and functions are serialized and added back to the string.\n    if (options.unsafe !== true) {\n        str = str.replace(UNSAFE_CHARS_REGEXP, escapeUnsafeChars);\n    }\n\n    if (functions.length === 0 && regexps.length === 0 && dates.length === 0 && maps.length === 0 && sets.length === 0 && undefs.length === 0) {\n        return str;\n    }\n\n    // Replaces all occurrences of function, regexp, date, map and set placeholders in the\n    // JSON string with their string representations. If the original value can\n    // not be found, then `undefined` is used.\n    return str.replace(PLACE_HOLDER_REGEXP, function (match, type, valueIndex) {\n        if (type === 'D') {\n            return \"new Date(\\\"\" + dates[valueIndex].toISOString() + \"\\\")\";\n        }\n\n        if (type === 'R') {\n            return \"new RegExp(\" + serialize(regexps[valueIndex].source) + \", \\\"\" + regexps[valueIndex].flags + \"\\\")\";\n        }\n\n        if (type === 'M') {\n            return \"new Map(\" + serialize(Array.from(maps[valueIndex].entries()), options) + \")\";\n        }\n\n        if (type === 'S') {\n            return \"new Set(\" + serialize(Array.from(sets[valueIndex].values()), options) + \")\";\n        }\n\n        if (type === 'U') {\n            return 'undefined'\n        }\n\n        var fn = functions[valueIndex];\n\n        return serializeFunc(fn);\n    });\n}\n"]},"metadata":{},"sourceType":"script"}
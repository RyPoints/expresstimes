{"ast":null,"code":"'use strict';\n\nclass Result {\n  constructor(types, arrayMode) {\n    this._types = types;\n    this._arrayMode = arrayMode;\n    this.command = undefined;\n    this.rowCount = undefined;\n    this.fields = [];\n    this.rows = [];\n  }\n\n  consumeCommand(pq) {\n    this.command = pq.cmdStatus().split(' ')[0];\n    this.rowCount = parseInt(pq.cmdTuples(), 10);\n  }\n\n  consumeFields(pq) {\n    const nfields = pq.nfields();\n\n    for (var x = 0; x < nfields; x++) {\n      this.fields.push({\n        name: pq.fname(x),\n        dataTypeID: pq.ftype(x)\n      });\n    }\n  }\n\n  consumeRows(pq) {\n    const tupleCount = pq.ntuples();\n\n    for (var i = 0; i < tupleCount; i++) {\n      const row = this._arrayMode ? this.consumeRowAsArray(pq, i) : this.consumeRowAsObject(pq, i);\n      this.rows.push(row);\n    }\n  }\n\n  consumeRowAsObject(pq, rowIndex) {\n    const row = {};\n\n    for (var j = 0; j < this.fields.length; j++) {\n      const value = this.readValue(pq, rowIndex, j);\n      row[this.fields[j].name] = value;\n    }\n\n    return row;\n  }\n\n  consumeRowAsArray(pq, rowIndex) {\n    const row = [];\n\n    for (var j = 0; j < this.fields.length; j++) {\n      const value = this.readValue(pq, rowIndex, j);\n      row.push(value);\n    }\n\n    return row;\n  }\n\n  readValue(pq, rowIndex, colIndex) {\n    var rawValue = pq.getvalue(rowIndex, colIndex);\n\n    if (rawValue === '') {\n      if (pq.getisnull(rowIndex, colIndex)) {\n        return null;\n      }\n    }\n\n    const dataTypeId = this.fields[colIndex].dataTypeID;\n    return this._types.getTypeParser(dataTypeId)(rawValue);\n  }\n\n}\n\nfunction buildResult(pq, types, arrayMode) {\n  const result = new Result(types, arrayMode);\n  result.consumeCommand(pq);\n  result.consumeFields(pq);\n  result.consumeRows(pq);\n  return result;\n}\n\nmodule.exports = buildResult;","map":{"version":3,"sources":["/Users/ryandavis/Development/reactapp5/expresstimes/node_modules/pg-native/lib/build-result.js"],"names":["Result","constructor","types","arrayMode","_types","_arrayMode","command","undefined","rowCount","fields","rows","consumeCommand","pq","cmdStatus","split","parseInt","cmdTuples","consumeFields","nfields","x","push","name","fname","dataTypeID","ftype","consumeRows","tupleCount","ntuples","i","row","consumeRowAsArray","consumeRowAsObject","rowIndex","j","length","value","readValue","colIndex","rawValue","getvalue","getisnull","dataTypeId","getTypeParser","buildResult","result","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nclass Result {\n  constructor (types, arrayMode) {\n    this._types = types\n    this._arrayMode = arrayMode\n\n    this.command = undefined\n    this.rowCount = undefined\n    this.fields = []\n    this.rows = []\n  }\n\n  consumeCommand (pq) {\n    this.command = pq.cmdStatus().split(' ')[0]\n    this.rowCount = parseInt(pq.cmdTuples(), 10)\n  }\n\n  consumeFields (pq) {\n    const nfields = pq.nfields()\n    for (var x = 0; x < nfields; x++) {\n      this.fields.push({\n        name: pq.fname(x),\n        dataTypeID: pq.ftype(x)\n      })\n    }\n  }\n\n  consumeRows (pq) {\n    const tupleCount = pq.ntuples()\n    for (var i = 0; i < tupleCount; i++) {\n      const row = this._arrayMode ? this.consumeRowAsArray(pq, i) : this.consumeRowAsObject(pq, i)\n      this.rows.push(row)\n    }\n  }\n\n  consumeRowAsObject (pq, rowIndex) {\n    const row = { }\n    for (var j = 0; j < this.fields.length; j++) {\n      const value = this.readValue(pq, rowIndex, j)\n      row[this.fields[j].name] = value\n    }\n    return row\n  }\n\n  consumeRowAsArray (pq, rowIndex) {\n    const row = []\n    for (var j = 0; j < this.fields.length; j++) {\n      const value = this.readValue(pq, rowIndex, j)\n      row.push(value)\n    }\n    return row\n  }\n\n  readValue (pq, rowIndex, colIndex) {\n    var rawValue = pq.getvalue(rowIndex, colIndex)\n    if (rawValue === '') {\n      if (pq.getisnull(rowIndex, colIndex)) {\n        return null\n      }\n    }\n    const dataTypeId = this.fields[colIndex].dataTypeID\n    return this._types.getTypeParser(dataTypeId)(rawValue)\n  }\n}\n\nfunction buildResult (pq, types, arrayMode) {\n  const result = new Result(types, arrayMode)\n  result.consumeCommand(pq)\n  result.consumeFields(pq)\n  result.consumeRows(pq)\n\n  return result\n}\n\nmodule.exports = buildResult\n"]},"metadata":{},"sourceType":"script"}